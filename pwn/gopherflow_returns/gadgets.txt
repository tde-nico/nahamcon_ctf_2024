


Gadgets
=======


0x000000000043baec: adc al, 0; add byte ptr [rax], al; inc dword ptr [rax + 0x14]; add rsp, 0x20; pop rbp; ret; 
0x000000000040ecc7: adc al, 0; add rsp, 0x10; pop rbp; ret; 
0x00000000004026c4: adc al, 0; add rsp, 0x50; pop rbp; ret; 
0x0000000000410138: adc al, 0; add rsp, 0x58; pop rbp; nop; ret; 
0x000000000040c13f: adc al, 0; add rsp, 0x58; pop rbp; ret; 
0x0000000000409a40: adc al, 0; call 0xa5c0; add rsp, 0x38; pop rbp; ret; 
0x000000000040ba52: adc al, 0; call 0xc5e0; add rsp, 0x58; pop rbp; ret; 
0x0000000000406311: adc al, 0; ret; 
0x0000000000406433: adc al, 0; xchg dword ptr [rcx], eax; add rsp, 0x58; pop rbp; ret; 
0x000000000040ac8f: adc al, 0; xchg qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000040f736: adc al, 0; xor ebx, ebx; add rsp, 0x10; pop rbp; nop; ret; 
0x000000000040ee47: adc al, 0; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000040d323: adc al, 0; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x0000000000440496: adc al, 0x24; mov ecx, eax; mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000041cd6a: adc al, 0x31; shr bl, 0x19; add rsp, 0x20; pop rbp; ret; 
0x0000000000452633: adc al, 0x38; sal byte ptr [rbx + 6], 1; mov eax, 1; ret; 
0x000000000043baf3: adc al, 0x48; add esp, 0x20; pop rbp; ret; 
0x0000000000402eb6: adc al, 0x48; bsr ecx, edi; shr rsi, cl; and rsi, 1; lea rax, [rsi*2 - 1]; ret; 
0x000000000040eced: adc al, 0x48; lea eax, [rip + 0x1429eb]; add rsp, 0x10; pop rbp; ret; 
0x0000000000455541: adc al, 0x48; lea eax, [rip - 0x4b409]; add rsp, 0x40; pop rbp; ret; 
0x000000000042c331: adc al, 0x4b; cmp rcx, rdx; jg 0x2c33e; add rsp, 0x18; pop rbp; ret; 
0x000000000045eccc: adc al, 0x4c; mov edx, dword ptr [rsp + 0x18]; mov r8, qword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; 
0x00000000004608f0: adc al, 0x53; add eax, 0x3104eb00; sal byte ptr [rcx], 0xc9; mov rdx, qword ptr [rax + 0x28]; mov rax, rcx; call rdx; 
0x0000000000401158: adc al, 0x75; or cl, byte ptr [rax - 0x75]; add rsp, 8; pop rbp; ret; 
0x00000000004413ec: adc al, 0x7d; sbb al, 0x48; mov dword ptr [rsp + 8], ecx; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x0000000000468373: adc al, 0x83; ret; 
0x00000000004014d2: adc al, 0x84; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret 0x8949; 
0x0000000000402711: adc al, 0x89; and al, 0x18; mov dword ptr [rsp + 0x1c], edx; ret; 
0x000000000040a864: adc al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x000000000045e632: adc al, 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004122c8: adc al, 0xc6; add rsp, 0x10; pop rbp; ret; 
0x0000000000459831: adc al, 0xc6; xor dword ptr [rdi], 0x30c48348; pop rbp; ret; 
0x0000000000454a94: adc al, 0xc8; test rdx, rdx; jne 0x54a49; add rsp, 0x60; pop rbp; ret; 
0x0000000000440623: adc al, 0xcb; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000460c28: adc al, 0xe8; xchg eax, edx; ret; 
0x00000000004221c8: adc al, 0xed; adc al, byte ptr [rax]; call 0x1cd20; add rsp, 0x18; pop rbp; ret; 
0x0000000000429548: adc al, 0xf0; add rsp, 0x10; pop rbp; ret; 
0x000000000040912a: adc al, 0xf6; ret 0x7501; 
0x0000000000403c15: adc al, 0xf6; ret 0xf08; 
0x0000000000415094: adc al, 0xf6; ret; 
0x00000000004026ba: adc al, 0xf; mov edx, 0x920f1be0; add eax, 0x14e3e5; add rsp, 0x50; pop rbp; ret; 
0x00000000004347a5: adc al, 0xff; ret 0x448b; 
0x000000000042020e: adc al, 0xff; ret; 
0x000000000040ab15: adc al, 1; mov rbx, qword ptr [rcx + rax + 8]; mov rax, rdx; nop; ret; 
0x00000000004517b2: adc al, 2; lea rdx, [rdx + 1]; mov qword ptr [rcx + 0x18], rdx; add rsp, 0x60; pop rbp; ret; 
0x0000000000408b59: adc al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000404579: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000041c53d: adc al, byte ptr [rax]; add byte ptr [rax - 1], cl; ret; 
0x00000000004584af: adc al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x0000000000411977: adc al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ror dword ptr [rcx - 0x7d], cl; ret; 
0x00000000004119b1: adc al, byte ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret 0x9008; 
0x0000000000411757: adc al, byte ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000042544e: adc al, byte ptr [rax]; add dh, dh; ret 0x7501; 
0x000000000042d060: adc al, byte ptr [rax]; add rsp, 0x70; pop rbp; ret; 
0x00000000004221ca: adc al, byte ptr [rax]; call 0x1cd20; add rsp, 0x18; pop rbp; ret; 
0x000000000042235e: adc al, byte ptr [rax]; call 0x1cd20; add rsp, 0x48; pop rbp; ret; 
0x0000000000412f0c: adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000042a9ef: adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x138; pop rbp; ret; 
0x00000000004255c3: adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000042a384: adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000425808: adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000042b22c: adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x48; pop rbp; ret; 
0x000000000042b0a6: adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x70; pop rbp; ret; 
0x0000000000425bd3: adc al, byte ptr [rax]; call 0xa5c0; add rsp, 8; pop rbp; nop; ret; 
0x000000000042ca4b: adc al, byte ptr [rax]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x0000000000425abf: adc al, byte ptr [rax]; call 0xa5c0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; pop rbp; ret; 
0x000000000042a211: adc al, byte ptr [rax]; call 0xa5c0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x40; pop rbp; ret; 
0x0000000000425505: adc al, byte ptr [rax]; call 0xa5c0; xor eax, eax; add rsp, 0x40; pop rbp; ret; 
0x000000000042c208: adc al, byte ptr [rax]; call 0xc5e0; add rsp, 0x18; pop rbp; ret; 
0x000000000042cc4f: adc al, byte ptr [rax]; lock xadd dword ptr [rdx], ecx; add rsp, 8; pop rbp; ret; 
0x0000000000421463: adc al, byte ptr [rax]; lock xadd qword ptr [rdx], rcx; mov eax, 1; add rsp, 0xf8; pop rbp; ret; 
0x000000000042207c: adc al, byte ptr [rax]; mov qword ptr [rip + 0x127a73], rcx; nop; lea rax, [rip + 0x127a63]; xchg qword ptr [rax], rdx; ret; 
0x000000000042dd5d: adc al, byte ptr [rax]; mov qword ptr [rip + 0xf4bca], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000042d054: adc al, byte ptr [rax]; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rip + 0x1234ce], rax; add rsp, 0x70; pop rbp; ret; 
0x000000000042265c: adc al, byte ptr [rax]; nop; call 0x1cd20; add rsp, 8; pop rbp; ret; 
0x000000000042b33c: adc al, byte ptr [rax]; nop; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000422083: adc al, byte ptr [rax]; nop; lea rax, [rip + 0x127a63]; xchg qword ptr [rax], rdx; ret; 
0x000000000042208b: adc al, byte ptr [rax]; xchg qword ptr [rax], rdx; ret; 
0x000000000043cd31: adc al, byte ptr [rbx + 0x110be]; add byte ptr [rax], al; jne 0x3cd44; add rsp, 0x3a0; pop rbp; ret; 
0x0000000000431950: adc al, byte ptr [rcx - 0x80]; mov esi, 0xb1; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; mov eax, 1; ret; 
0x000000000043188f: adc al, byte ptr [rcx - 0x80]; mov esi, 0xb1; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; xor eax, eax; ret; 
0x0000000000419d75: adc al, ch; and eax, 0x48000000; add esp, 0x10; pop rbp; ret; 
0x000000000042ee66: adc al, ch; hlt; ret; 
0x0000000000458e0d: adc al, ch; int 0x80; 
0x000000000041404e: adc al, ch; or al, 5; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000042ef06: adc al, ch; push rsp; ret; 
0x000000000040a2af: adc al, ch; stosd dword ptr [rdi], eax; syscall; 
0x0000000000456af2: adc al, ch; sub byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x0000000000459cad: adc al, ch; sub eax, 0x48ffffb3; add esp, 0x10; pop rbp; ret; 
0x000000000046cca0: adc bh, bh; ret 0x1089; 
0x000000000042c00d: adc bh, bh; ret 0xfa81; 
0x000000000046cca4: adc bh, dh; ret 0x3f; 
0x000000000040377b: adc bl, ch; ret 0xcccc; 
0x0000000000405919: adc bl, ch; xchg eax, ecx; add rsp, 0x48; pop rbp; ret; 
0x000000000045de33: adc bl, dh; movq qword ptr [rdi + rbx - 0x20], mm2; movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000045dbfb: adc bl, dh; movq qword ptr [rdi + rbx - 0x20], mm7; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000046d00c: adc bl, dl; std; dec dword ptr [rcx - 0x77]; fisttp qword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000045fcb7: adc byte ptr [r13 + 0xb], sil; movzx ecx, byte ptr [rax + 0x11]; cmp byte ptr [rbx + 0x11], cl; sete al; ret; 
0x000000000045fcf4: adc byte ptr [r13 + 0xc], sil; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x000000000045f736: adc byte ptr [r13 + 0xc], sil; mov rcx, qword ptr [rbx + 0x18]; cmp qword ptr [rax + 0x18], rcx; sete al; ret; 
0x00000000004706b8: adc byte ptr [r13 + 0xc], sil; movzx ecx, word ptr [rbx + 0x18]; cmp word ptr [rax + 0x18], cx; sete al; ret; 
0x000000000046a150: adc byte ptr [r13 + 1], cl; xor byte ptr [rcx - 0x75], cl; or byte ptr [rax - 0x73], cl; push rax; jmp qword ptr [rsi - 0x70]; 
0x000000000041d66e: adc byte ptr [r8 + 0x39], cl; ret 0xf48; 
0x000000000046218d: adc byte ptr [r8 - 0x73], cl; push rax; jmp qword ptr [rcx]; 
0x000000000041b6cb: adc byte ptr [r8 - 0x75], cl; and al, 0x38; add qword ptr [rcx + 0x18], rax; add rsp, 0x78; pop rbp; ret; 
0x0000000000443336: adc byte ptr [r8 - 0x77], cl; mov qword ptr [rcx + 0x40], 0; add rsp, 0x20; pop rbp; ret; 
0x0000000000455b62: adc byte ptr [r8 - 0x77], cl; ret; 
0x000000000044944d: adc byte ptr [r8], 0; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x000000000041fca8: adc byte ptr [rax + 0x18], al; xor eax, eax; ret; 
0x000000000045fe94: adc byte ptr [rax + 0x39], cl; adc byte ptr [r13 + 0xc], sil; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x00000000004706b5: adc byte ptr [rax + 0x39], cl; adc byte ptr [r13 + 0xc], sil; movzx ecx, word ptr [rbx + 0x18]; cmp word ptr [rax + 0x18], cx; sete al; ret; 
0x000000000041d66f: adc byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000418467: adc byte ptr [rax + 0x42c6204a], cl; and dword ptr [rcx], eax; add rsp, 0x18; pop rbp; ret; 
0x000000000046ef09: adc byte ptr [rax + 0x481fe183], dl; mov eax, ecx; ret; 
0x000000000046eb54: adc byte ptr [rax + 0x48d18948], dl; add esp, 0x18; pop rbp; ret; 
0x0000000000462969: adc byte ptr [rax + 0xfffd], bh; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000462c7e: adc byte ptr [rax + 0xfffd], bh; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000419de6: adc byte ptr [rax + 1], 0; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x0000000000458149: adc byte ptr [rax + 1], 0; add byte ptr [rax], al; ret; 
0x000000000041b2e1: adc byte ptr [rax + 1], cl; ret 0x8b48; 
0x000000000046a64d: adc byte ptr [rax + 1], cl; retf 0x894c; ret; 
0x000000000041bb9a: adc byte ptr [rax + 3], cl; jo 0x1bbe8; mov dword ptr [rsi + 0x10], eax; add rsp, 0x40; pop rbp; ret; 
0x000000000041bb99: adc byte ptr [rax + 3], r9b; jo 0x1bbe8; mov dword ptr [rsi + 0x10], eax; add rsp, 0x40; pop rbp; ret; 
0x00000000004425da: adc byte ptr [rax - 0x39], cl; or dword ptr [rax + 1], 0; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000045ed08: adc byte ptr [rax - 0x39], cl; ret 0; 
0x000000000045ec29: adc byte ptr [rax - 0x39], cl; ror byte ptr [rbx], 0; add byte ptr [rax], al; syscall; 
0x00000000004055c7: adc byte ptr [rax - 0x5f6976b8], dl; add byte ptr [rax], al; add byte ptr [rax + 0x24748948], dl; adc cl, ch; ret; 
0x000000000046a16f: adc byte ptr [rax - 0x73], cl; add al, 0xa; lea rax, [rax - 0x30]; add rsp, 0xc8; pop rbp; ret; 
0x00000000004466b6: adc byte ptr [rax - 0x73], cl; add eax, 0x109d42; mov rcx, rbx; add rsp, 0x60; pop rbp; ret; 
0x0000000000452738: adc byte ptr [rax - 0x73], cl; or eax, 0x42f17; mov edi, 5; add rsp, 0x20; pop rbp; ret; 
0x000000000046218e: adc byte ptr [rax - 0x73], cl; push rax; jmp qword ptr [rcx]; 
0x0000000000461001: adc byte ptr [rax - 0x73], cl; push rcx; or byte ptr [rax - 0x77], cl; ret; 
0x000000000045eebe: adc byte ptr [rax - 0x75], cl; add eax, 0xf172a; cmp rax, 0; je 0x5ef20; call rax; 
0x0000000000439be0: adc byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x28; pop rbp; ret; 
0x000000000041e360: adc byte ptr [rax - 0x75], cl; and al, 0x30; mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000041b6cc: adc byte ptr [rax - 0x75], cl; and al, 0x38; add qword ptr [rcx + 0x18], rax; add rsp, 0x78; pop rbp; ret; 
0x0000000000463834: adc byte ptr [rax - 0x75], cl; and al, 0x38; mov rbx, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x000000000046f9e0: adc byte ptr [rax - 0x75], cl; je 0x6fa09; and byte ptr [rsi + rax + 0x24548b48], al; sbb byte ptr [rax - 9], cl; ret 0x60; 
0x000000000044b70d: adc byte ptr [rax - 0x75], cl; pop rax; or byte ptr [rax - 1], cl; ret; 
0x000000000046a31b: adc byte ptr [rax - 0x75], cl; pop rdx; or byte ptr [rax - 1], cl; ret; 
0x000000000040b69d: adc byte ptr [rax - 0x75], cl; pop rsp; and al, 0x48; add rsp, 0x30; pop rbp; ret; 
0x0000000000473ae9: adc byte ptr [rax - 0x75], cl; pop rsp; and al, 8; add rsp, 0x18; pop rbp; ret; 
0x0000000000473a56: adc byte ptr [rax - 0x75], cl; pop rsp; and al, 8; add rsp, 0x20; pop rbp; ret; 
0x00000000004363fe: adc byte ptr [rax - 0x75], cl; push rcx; xor byte ptr [rax + 0x39], cl; ret 0x2074; 
0x000000000045e849: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov eax, 0x1b; syscall; 
0x000000000045ee49: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov eax, 0xcc; syscall; 
0x000000000045e7e8: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov eax, 0xde; syscall; 
0x000000000045e7c9: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov eax, 0xea; syscall; 
0x000000000045e7c9: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov eax, 0xea; syscall; ret; 
0x000000000045e969: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov r10, qword ptr [rsp + 0x20]; mov eax, 0xd; syscall; 
0x000000000045e928: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov r10d, dword ptr [rsp + 0x20]; mov eax, 0xe; syscall; 
0x00000000004456fe: adc byte ptr [rax - 0x75], cl; retf 0xe808; xchg eax, edi; cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000046d555: adc byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000045960d: adc byte ptr [rax - 0x77], cl; and al, 0x20; call 0x30ee0; add rsp, 0x10; pop rbp; ret; 
0x0000000000443337: adc byte ptr [rax - 0x77], cl; mov qword ptr [rcx + 0x40], 0; add rsp, 0x20; pop rbp; ret; 
0x000000000042c603: adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x7f], cl; rol dword ptr [rax], 0x10; add byte ptr [rax], al; mov qword ptr [rax + 8], rcx; ret; 
0x0000000000463525: adc byte ptr [rax - 0x77], cl; or eax, 0xbf18b; add rsp, 0x30; pop rbp; ret; 
0x000000000042ba53: adc byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000045946e: adc byte ptr [rax - 0x77], cl; ret 0xdb31; 
0x0000000000457511: adc byte ptr [rax - 0x77], cl; ret 0xf889; 
0x000000000040c330: adc byte ptr [rax - 0x77], cl; ret; 
0x0000000000409d62: adc byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 0xc8; add rsp, 0x18; pop rbp; ret; 
0x000000000043c8cc: adc byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 0xc8; add rsp, 0x20; pop rbp; ret; 
0x00000000004541d5: adc byte ptr [rax - 0x7c], al; div byte ptr [rbp + 0xb]; mov eax, 1; add rsp, 0x30; pop rbp; ret; 
0x000000000045a031: adc byte ptr [rax - 0x7d], cl; clc; and byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x00000000004226ad: adc byte ptr [rax - 0x7d], cl; js 0x226c2; add byte ptr [rsi + rax + 0x48], dh; add esp, 0x10; pop rbp; ret; 
0x00000000004226ed: adc byte ptr [rax - 0x7d], cl; js 0x22702; add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x000000000044919d: adc byte ptr [rax - 0x7d], cl; ret 0x48f8; 
0x000000000044ab38: adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000047317c: adc byte ptr [rax - 0x7f], cl; ret 0; 
0x0000000000431fda: adc byte ptr [rax - 0x7f], cl; ret 0x3a0; 
0x000000000044f690: adc byte ptr [rax - 0x7f], cl; ret 0x418; 
0x0000000000465369: adc byte ptr [rax - 0x80], al; jmp qword ptr [rdx + 0xf]; 
0x000000000044c5ce: adc byte ptr [rax - 1], bh; xor ebx, ebx; add rsp, 0xb0; pop rbp; ret; 
0x000000000046ab2d: adc byte ptr [rax - 1], cl; cmp byte ptr [rax - 1], cl; ret 0x894c; 
0x000000000043ee2c: adc byte ptr [rax - 1], cl; ret 0x5eb; 
0x0000000000450238: adc byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000043594a: adc byte ptr [rax - 1], cl; ret; 
0x000000000044944e: adc byte ptr [rax], 0; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x000000000041920b: adc byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x38; add rsp, 0x98; pop rbp; ret; 
0x000000000046eea7: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040370f: adc byte ptr [rax], al; add byte ptr [rax], al; call 0x5ce60; add rsp, 0x18; pop rbp; ret; 
0x000000000045b48f: adc byte ptr [rax], al; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x785]; jmp rax; 
0x000000000044219d: adc byte ptr [rax], al; add dword ptr [rdi + 9], edi; add rsp, 0x88; pop rbp; ret; 
0x000000000044a097: adc byte ptr [rax], al; add rsp, 0x130; pop rbp; ret; 
0x00000000004158d4: adc byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000441f0f: adc byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x0000000000420bb3: adc byte ptr [rax], al; call 0x20380; add rsp, 0x28; pop rbp; nop; ret; 
0x00000000004229a4: adc byte ptr [rax], al; call 0xa180; add rsp, 0x10; pop rbp; ret; 
0x000000000041a161: adc byte ptr [rax], al; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x0000000000417edf: adc byte ptr [rax], al; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000041a3ec: adc byte ptr [rax], al; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x00000000004181ec: adc byte ptr [rax], al; call 0xa5c0; add rsp, 0x30; pop rbp; ret; 
0x0000000000419726: adc byte ptr [rax], al; call 0xa5c0; add rsp, 0x40; pop rbp; ret; 
0x000000000044944f: adc byte ptr [rax], al; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x000000000044eed0: adc byte ptr [rax], al; call 0xa5c0; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000422cbf: adc byte ptr [rax], al; call 0xa5c0; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x000000000041a235: adc byte ptr [rax], al; call 0xa5c0; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000045b520: adc byte ptr [rax], al; ja 0x5b52d; lea rax, [rip + 0xdf5]; jmp rax; 
0x00000000004226b1: adc byte ptr [rax], al; je 0x226bb; add rsp, 0x10; pop rbp; ret; 
0x00000000004226f1: adc byte ptr [rax], al; jne 0x226fb; add rsp, 0x10; pop rbp; ret; 
0x0000000000418dd2: adc byte ptr [rax], al; lea eax, [rax + rcx]; lea eax, [rax + 2]; mov dword ptr [rip + 0x10a0d8], eax; pop rbp; ret; 
0x00000000004463d0: adc byte ptr [rax], al; lock xadd dword ptr [rdx], ecx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000418b43: adc byte ptr [rax], al; lock xadd qword ptr [rax], rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000044a091: adc byte ptr [rax], al; mov dword ptr [rip + 0x1065d3], ecx; add rsp, 0x130; pop rbp; ret; 
0x000000000044a08b: adc byte ptr [rax], al; mov dword ptr [rip + 0x1065d5], ebx; mov dword ptr [rip + 0x1065d3], ecx; add rsp, 0x130; pop rbp; ret; 
0x00000000004466bc: adc byte ptr [rax], al; mov rcx, rbx; add rsp, 0x60; pop rbp; ret; 
0x0000000000418dde: adc byte ptr [rax], al; pop rbp; ret; 
0x0000000000422ded: adc byte ptr [rax], al; test rbx, rbx; jne 0x22d8e; add rsp, 0x38; pop rbp; ret; 
0x0000000000418097: adc byte ptr [rax], al; test rdx, rdx; je 0x180a3; mov rax, qword ptr [rdx]; call rax; 
0x0000000000444706: adc byte ptr [rax], al; xchg dword ptr [rcx], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000045fcb5: adc byte ptr [rax], bh; adc byte ptr [r13 + 0xb], sil; movzx ecx, byte ptr [rax + 0x11]; cmp byte ptr [rbx + 0x11], cl; sete al; ret; 
0x0000000000450290: adc byte ptr [rax], bl; add al, 0; add byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000045fcb4: adc byte ptr [rax], dil; adc byte ptr [r13 + 0xb], sil; movzx ecx, byte ptr [rax + 0x11]; cmp byte ptr [rbx + 0x11], cl; sete al; ret; 
0x0000000000445f45: adc byte ptr [rbp + 0x48], dl; mov ebp, esp; call 0x45f60; call 0x460a0; pop rbp; ret; 
0x000000000045fcb8: adc byte ptr [rbp + 0xb], dh; movzx ecx, byte ptr [rax + 0x11]; cmp byte ptr [rbx + 0x11], cl; sete al; ret; 
0x000000000045fcf5: adc byte ptr [rbp + 0xc], dh; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x000000000045f737: adc byte ptr [rbp + 0xc], dh; mov rcx, qword ptr [rbx + 0x18]; cmp qword ptr [rax + 0x18], rcx; sete al; ret; 
0x00000000004706b9: adc byte ptr [rbp + 0xc], dh; movzx ecx, word ptr [rbx + 0x18]; cmp word ptr [rax + 0x18], cx; sete al; ret; 
0x000000000046a151: adc byte ptr [rbp + 1], cl; xor byte ptr [rcx - 0x75], cl; or byte ptr [rax - 0x73], cl; push rax; jmp qword ptr [rsi - 0x70]; 
0x0000000000403e0c: adc byte ptr [rbp + 4], ah; add al, ch; mov ebx, dword ptr [rdi]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000042e40c: adc byte ptr [rbp + rdi*8 - 1], ah; add rsp, 0x40; pop rbp; ret; 
0x000000000045e902: adc byte ptr [rbp - 0x3d], bl; mov rax, 0xe4; syscall; 
0x000000000040f73d: adc byte ptr [rbp - 0x70], bl; ret; 
0x0000000000476ff1: adc byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 1], cl; ret 0xf44; 
0x000000000044f78b: adc byte ptr [rbp - 0x77], al; ret; 
0x000000000045eca9: adc byte ptr [rbx + 0x48182454], cl; mov eax, 0x1c; syscall; 
0x000000000045eca9: adc byte ptr [rbx + 0x48182454], cl; mov eax, 0x1c; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x0000000000470475: adc byte ptr [rbx + 0x5d901fe0], al; ret; 
0x000000000042b70e: adc byte ptr [rbx + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x0000000000478cd4: adc byte ptr [rbx + rcx*4 + 0x50], cl; or byte ptr [rcx - 1], cl; ret 0x4c90; 
0x000000000047b80c: adc byte ptr [rbx + rcx*4 + 0x50], cl; or byte ptr [rcx - 1], cl; ret 0x8b4c; 
0x000000000045e62d: adc byte ptr [rbx + rcx*4 + 0x54], al; and al, 0x14; mov eax, 0x101; syscall; 
0x000000000045e80c: adc byte ptr [rbx + rcx*4 + 0x54], cl; and al, 0x18; mov eax, 0xdf; syscall; 
0x000000000045e80c: adc byte ptr [rbx + rcx*4 + 0x54], cl; and al, 0x18; mov eax, 0xdf; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000047bfb6: adc byte ptr [rbx + rcx*4 + 0x58], cl; or byte ptr [rcx - 1], cl; ret; 
0x000000000045e5b7: adc byte ptr [rbx + rcx*4 + 0x74], cl; and al, 0x18; mov r15, qword ptr [rsp + 0x20]; mov rbp, qword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x0000000000478bed: adc byte ptr [rbx + rcx*4 - 0x7c], cl; and al, 0xc0; add byte ptr [rax], al; add byte ptr [rbp - 0x7b], cl; sal byte ptr [rdx + rbp*2 + 0x48], 0xff; ret; 
0x000000000045e6a8: adc byte ptr [rbx - 0x47e7dbac], cl; add byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000045e6a8: adc byte ptr [rbx - 0x47e7dbac], cl; add byte ptr [rax], al; add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e689: adc byte ptr [rbx - 0x47e7dbac], cl; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000045e689: adc byte ptr [rbx - 0x47e7dbac], cl; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e6c4: adc byte ptr [rbx - 0x47f7db8c], cl; and eax, 0xf000001; add eax, 0x18244489; ret; 
0x0000000000403f46: adc byte ptr [rbx], cl; ucomisd xmm0, xmm1; sete al; setnp cl; and eax, ecx; ret; 
0x0000000000403f26: adc byte ptr [rbx], cl; ucomiss xmm0, xmm1; sete al; setnp cl; and eax, ecx; ret; 
0x000000000042b9bd: adc byte ptr [rcx + 0x29], cl; ret 0x8d4d; 
0x000000000046826b: adc byte ptr [rcx + 0x29], cl; ret; 
0x000000000046de3c: adc byte ptr [rcx + 1], cl; ret 0x8149; 
0x000000000042885c: adc byte ptr [rcx + r9*4 + 0x44], cl; and al, 0x20; mov rdx, rsi; call rdi; 
0x0000000000437a25: adc byte ptr [rcx + rax], 0; add byte ptr [rcx], al; ret; 
0x000000000042885d: adc byte ptr [rcx + rcx*4 + 0x44], cl; and al, 0x20; mov rdx, rsi; call rdi; 
0x000000000042b6ef: adc byte ptr [rcx + rcx*4 - 0x38], cl; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000040eec0: adc byte ptr [rcx - 0x17e7dbb4], cl; xchg eax, esi; ret; 
0x000000000046a0c8: adc byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rax - 1], cl; ret; 
0x000000000040270d: adc byte ptr [rcx - 0x76ebdba4], cl; and al, 0x18; mov dword ptr [rsp + 0x1c], edx; ret; 
0x000000000043cd34: adc byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0x3a0; pop rbp; ret; 
0x0000000000426fd8: adc byte ptr [rcx], al; add byte ptr [rax], al; call rcx; 
0x000000000042724a: adc byte ptr [rcx], al; add byte ptr [rax], al; call rdi; 
0x000000000044bcbc: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000045fcf2: adc byte ptr [rcx], bh; adc byte ptr [r13 + 0xc], sil; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x000000000045f734: adc byte ptr [rcx], bh; adc byte ptr [r13 + 0xc], sil; mov rcx, qword ptr [rbx + 0x18]; cmp qword ptr [rax + 0x18], rcx; sete al; ret; 
0x0000000000413a30: adc byte ptr [rcx], dh; fucomi st(0); call 0x48013b0a; add esp, 0x18; pop rbp; ret; 
0x000000000040a0de: adc byte ptr [rcx], dh; shr bl, cl; add ecx, dword ptr [rax - 1]; ret 0x3948; 
0x000000000045fcf1: adc byte ptr [rcx], dil; adc byte ptr [r13 + 0xc], sil; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x000000000045f733: adc byte ptr [rcx], dil; adc byte ptr [r13 + 0xc], sil; mov rcx, qword ptr [rbx + 0x18]; cmp qword ptr [rax + 0x18], rcx; sete al; ret; 
0x00000000004560ad: adc byte ptr [rdi + 0xe], dh; mov eax, 1; add rsp, 0x120; pop rbp; ret; 
0x000000000045b5b1: adc byte ptr [rdi + 9], dh; lea rax, [rip + 0x1465]; jmp rax; 
0x000000000045b407: adc byte ptr [rdi + 9], dh; lea rax, [rip + 0x1ef]; jmp rax; 
0x000000000045d601: adc byte ptr [rdi + rcx + 0x11], al; jg 0x5d627; movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d991: adc byte ptr [rdi], cl; adc byte ptr [rsi], al; add rsi, 0x10; movups xmmword ptr [rdi], xmm0; add rdi, 0x10; ret; 
0x000000000045d998: adc byte ptr [rdi], cl; adc dword ptr [rdi], eax; add rdi, 0x10; ret; 
0x000000000045ce28: adc byte ptr [rdi], cl; add ecx, edi; shl rdx, 0x20; add rax, rdx; mov qword ptr [rsp + 8], rax; ret; 
0x0000000000403568: adc byte ptr [rdi], cl; mov esp, 0x49ac74d2; mov dword ptr [rax], edx; ret; 
0x00000000004411b8: adc byte ptr [rdi], cl; xchg eax, esp; ret 0x1f0f; 
0x0000000000432607: adc byte ptr [rdi], cl; xchg eax, esp; ret 0x2eb; 
0x0000000000404cfa: adc byte ptr [rdi], cl; xchg eax, esp; ret 0x9066; 
0x000000000043c356: adc byte ptr [rdx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000044dad1: adc byte ptr [rdx], dl; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000044d92a: adc byte ptr [rdx], dl; add byte ptr [rax], al; mov rax, rbx; add rsp, 0x28; pop rbp; ret; 
0x0000000000458643: adc byte ptr [rsi + 0xb], dh; push rbp; mov rbp, rsp; call 0x20520; pop rbp; ret; 
0x0000000000458fe3: adc byte ptr [rsi + 0xb], dh; push rbp; mov rbp, rsp; call 0x2ca00; pop rbp; ret; 
0x0000000000457d03: adc byte ptr [rsi + 0xb], dh; push rbp; mov rbp, rsp; call 0x360e0; pop rbp; ret; 
0x000000000043cc43: adc byte ptr [rsi + 0xb], dh; push rbp; mov rbp, rsp; call 0x3cc40; pop rbp; ret; 
0x000000000043cc63: adc byte ptr [rsi + 0xb], dh; push rbp; mov rbp, rsp; call 0x3cc60; pop rbp; ret; 
0x000000000043cc83: adc byte ptr [rsi + 0xb], dh; push rbp; mov rbp, rsp; call 0x3cc80; pop rbp; ret; 
0x000000000043cca3: adc byte ptr [rsi + 0xb], dh; push rbp; mov rbp, rsp; call 0x3cca0; pop rbp; ret; 
0x000000000043ccc3: adc byte ptr [rsi + 0xb], dh; push rbp; mov rbp, rsp; call 0x3ccc0; pop rbp; ret; 
0x000000000043cce3: adc byte ptr [rsi + 0xb], dh; push rbp; mov rbp, rsp; call 0x3cce0; pop rbp; ret; 
0x000000000045d993: adc byte ptr [rsi], al; add rsi, 0x10; movups xmmword ptr [rdi], xmm0; add rdi, 0x10; ret; 
0x000000000041e1cc: adc byte ptr [rsp + 0x58], cl; addsd xmm0, xmm1; movsd qword ptr [rsp + 0x50], xmm0; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000044a096: adc byte ptr gs:[rax], al; add rsp, 0x130; pop rbp; ret; 
0x000000000044a090: adc byte ptr gs:[rax], al; mov dword ptr [rip + 0x1065d3], ecx; add rsp, 0x130; pop rbp; ret; 
0x000000000044a08a: adc byte ptr gs:[rax], al; mov dword ptr [rip + 0x1065d5], ebx; mov dword ptr [rip + 0x1065d3], ecx; add rsp, 0x130; pop rbp; ret; 
0x000000000041e45e: adc cl, al; add rsp, 0x20; pop rbp; ret; 
0x000000000041fcaf: adc cl, al; mov eax, 1; ret; 
0x00000000004195b4: adc cl, byte ptr [rax + 0x39]; ja 0x195c2; xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x000000000040d34d: adc cl, byte ptr [rax - 0x73]; add eax, 0x14438b; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000046c005: adc cl, byte ptr [rax - 0x73]; add eax, 0x294d3; mov ebx, 4; add rsp, 0x28; pop rbp; ret; 
0x0000000000433b9b: adc cl, byte ptr [rax - 0x73]; add eax, 0x6a835; call 0x5b0a0; add rsp, 8; pop rbp; ret; 
0x000000000042aa5d: adc cl, byte ptr [rax - 0x73]; sbb eax, 0x739b3; call 0x2aaa0; add rsp, 0x10; pop rbp; ret; 
0x000000000040d5d4: adc cl, byte ptr [rax - 0x75]; and al, 0x20; mov rbx, rdx; add rsp, 0x38; pop rbp; ret; 
0x0000000000473655: adc cl, byte ptr [rax - 0x77]; fsubr st(0); ret 0xf966; 
0x00000000004368f0: adc cl, byte ptr [rax - 0x77]; ret; 
0x000000000040d3f8: adc cl, byte ptr [rax - 0x77]; sar byte ptr [rbx + 1], 1; add rsp, 0x30; pop rbp; ret; 
0x000000000045ed38: adc cl, byte ptr [rbp - 0x73]; test dword ptr [rax + 0x49000000], ecx; add eax, 8; or rdi, 0x80000; mov eax, 0x38; syscall; 
0x0000000000467dfb: adc cl, byte ptr [rbx + rcx*4 - 0x6c]; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov edx, 0x930f00e2; ret; 
0x000000000041cd66: adc cl, byte ptr [rcx + 0x31142454]; shr bl, 0x19; add rsp, 0x20; pop rbp; ret; 
0x000000000044d1f5: adc cl, byte ptr [rcx + 1]; rol dword ptr [rbx - 0x6bf00006], 1; ret 0xb60f; 
0x0000000000449bcd: adc cl, byte ptr [rcx + 1]; rol dword ptr [rbx - 0x6bf00006], cl; ret 0xb60f; 
0x0000000000411bbe: adc cl, byte ptr [rcx - 0x77]; push rbx; or byte ptr [rcx - 0x2f], al; loope 0x11bb0; ret; 
0x000000000040cb64: adc cl, byte ptr [rdi]; mov bh, 0x50; or bh, bh; ret 0x8966; 
0x000000000041bb8d: adc cl, byte ptr [rdi]; mov dh, 0x57; push -0xa; ret 0x7401; 
0x0000000000444d0d: adc cl, byte ptr [rdi]; movabs dword ptr [0x5d58c483480a73c2], eax; ret; 
0x00000000004055d5: adc cl, ch; ret; 
0x0000000000446076: adc dh, al; adc dword ptr [rsi], 0x1000001; add rsp, 0x30; pop rbp; ret; 
0x0000000000433c8a: adc dh, byte ptr [rdx + rax]; add rsp, 0x10; pop rbp; ret; 
0x00000000004012f0: adc dh, dh; ret 0x7402; 
0x0000000000455719: adc dh, dh; ret 0x7404; 
0x0000000000456595: adc dh, dh; ret; 
0x0000000000467350: adc dword ptr [rax + 0x18], edi; add rsp, 0x38; pop rbp; ret; 
0x00000000004675e7: adc dword ptr [rax + 0x18], edi; add rsp, 0x40; pop rbp; ret; 
0x0000000000467d86: adc dword ptr [rax + 0x18], edi; add rsp, 0x88; pop rbp; ret; 
0x000000000041fc9f: adc dword ptr [rax + 0x28], eax; mov byte ptr [rax + 0x30], 1; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x000000000041fcbd: adc dword ptr [rax + 0x28], ecx; mov byte ptr [rax + 0x31], 1; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x0000000000447ec4: adc dword ptr [rax + 0x39], ecx; or byte ptr [r14 + 0xb], sil; mov rdx, qword ptr [rbx + 0x10]; add rcx, rdx; mov qword ptr [rax + 0x68], rcx; ret; 
0x000000000040b89d: adc dword ptr [rax + 0x39], ecx; ror dword ptr [rdi], cl; xchg eax, esp; ret 0x8948; 
0x0000000000430dd7: adc dword ptr [rax + 0x39], ecx; sal byte ptr [rbp + 0xd], 1; mov byte ptr [rcx + 0x30], 1; mov rax, qword ptr [rcx + 8]; mov rbx, qword ptr [rcx + 0x10]; ret; 
0x000000000041d72c: adc dword ptr [rax + 0x75660278], eax; or edi, dword ptr [rax - 1]; add rsp, 0x10; pop rbp; ret; 
0x000000000046292e: adc dword ptr [rax + 0xfffd], edi; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000042d8fa: adc dword ptr [rax + 1], edi; add rsp, 0x2020; pop rbp; ret; 
0x0000000000447187: adc dword ptr [rax + 4], esi; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x000000000042df4f: adc dword ptr [rax - 0x2f], ecx; clc; add rsp, 0x18; pop rbp; ret; 
0x0000000000419de3: adc dword ptr [rax - 0x39], ecx; adc byte ptr [rax + 1], 0; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x00000000004682a2: adc dword ptr [rax - 0x73], ecx; push rax; test dword ptr [rax - 9], 0x518949da; sbb byte ptr [rax - 0x7d], cl; ret 0x4c08; 
0x00000000004580ac: adc dword ptr [rax - 0x75], ecx; and al, 0x28; add rsp, 0x38; pop rbp; ret; 
0x000000000045f1aa: adc dword ptr [rax - 0x77], ecx; shr al, 1; sub eax, 0x48fffa84; add esp, 0x18; pop rbp; ret; 
0x0000000000434da7: adc dword ptr [rax - 0x7f], ecx; ret 0x3a0; 
0x0000000000402b4d: adc dword ptr [rax - 1], ecx; ret 0x8d43; 
0x0000000000450abb: adc dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x40; pop rbp; ret; 
0x0000000000445f4b: adc dword ptr [rax], eax; add byte ptr [rax], al; call 0x460a0; pop rbp; ret; 
0x0000000000433826: adc dword ptr [rax], eax; add byte ptr [rbp + 0x21], dh; mov rax, qword ptr [rip + 0x6aa6e]; lea rdx, [rip + 0x6aa67]; call rax; 
0x0000000000450987: adc dword ptr [rax], eax; add byte ptr [rcx], al; movups xmmword ptr [rcx + 0x11e8], xmm15; add rsp, 0x10; pop rbp; ret; 
0x0000000000434724: adc dword ptr [rax], eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004376b7: adc dword ptr [rax], eax; call 0x42600; add rsp, 0x30; pop rbp; ret; 
0x0000000000436cd1: adc dword ptr [rax], eax; call 0x42600; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x48; pop rbp; ret; 
0x0000000000421b61: adc dword ptr [rax], eax; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000434636: adc dword ptr [rax], eax; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x00000000004327e4: adc dword ptr [rax], eax; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x0000000000434581: adc dword ptr [rax], eax; call 0xa5c0; add rsp, 0x48; pop rbp; ret; 
0x000000000042621f: adc dword ptr [rax], eax; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x00000000004329ae: adc dword ptr [rax], eax; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000040aaf7: adc dword ptr [rax], eax; jg 0xab08; lea rax, [rip + 0x8aec6]; mov ebx, 8; ret; 
0x000000000043471e: adc dword ptr [rax], eax; mov byte ptr [rip + 0x11bce9], cl; add rsp, 0x10; pop rbp; ret; 
0x000000000043745b: adc dword ptr [rax], eax; xchg qword ptr [rdx], rcx; add rsp, 8; pop rbp; ret; 
0x0000000000425c9f: adc dword ptr [rax], edi; add rsp, 0x20; pop rbp; ret; 
0x000000000040df7d: adc dword ptr [rax], edi; add rsp, 0x60; pop rbp; ret; 
0x000000000046bf78: adc dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rax + 0x40]; add rsp, 0x28; pop rbp; ret; 
0x000000000040106b: adc dword ptr [rbp + 5], esi; mov rax, qword ptr [rax + 0x40]; ret; 
0x00000000004648f3: adc dword ptr [rbp + rcx*4 + 0xc], ecx; xor dword ptr [rax - 0x77], ecx; fmul dword ptr [rcx + rcx*4 - 0x3d]; mov rcx, r9; call rdi; 
0x0000000000468267: adc dword ptr [rbp - 0x75], ecx; pop rcx; adc byte ptr [rcx + 0x29], cl; ret; 
0x0000000000461725: adc dword ptr [rbx + 0x4488fee0], eax; and al, 0xf; mov rdx, qword ptr [rsp + 0x48]; mov rax, qword ptr [rdx]; call rax; 
0x000000000040c12b: adc dword ptr [rbx - 0x74b80000], ebx; and al, 0x48; add rsp, 0x58; pop rbp; ret; 
0x000000000045b42b: adc dword ptr [rbx], eax; add byte ptr [rax], al; jmp rax; 
0x0000000000424d14: adc dword ptr [rbx], edi; mov qword ptr [rbx + 0x10], 0; add rsp, 0x28; pop rbp; ret; 
0x000000000045098d: adc dword ptr [rcx + 0x11e8], edi; add rsp, 0x10; pop rbp; ret; 
0x0000000000443687: adc dword ptr [rcx + 8], edi; mov dword ptr [rcx + 0x30], 0; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x000000000040cd41: adc dword ptr [rcx + rcx*4 - 0x30], ecx; add rsp, 0x50; pop rbp; ret; 
0x000000000043c9ec: adc dword ptr [rcx], edi; mov qword ptr [rcx + 0x10], 0; add rsp, 0x18; pop rbp; ret; 
0x0000000000455724: adc dword ptr [rcx], esi; sal byte ptr [rcx], 0xdb; add rsp, 0x18; pop rbp; ret; 
0x0000000000462605: adc dword ptr [rcx], esi; sal byte ptr [rcx], 0xdb; xor ecx, ecx; add rsp, 0x30; pop rbp; ret; 
0x000000000045d5ff: adc dword ptr [rdi + 0x10], edi; movups xmmword ptr [rdi + 0x20], xmm15; movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d604: adc dword ptr [rdi + 0x20], edi; movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d609: adc dword ptr [rdi + 0x30], edi; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d99a: adc dword ptr [rdi], eax; add rdi, 0x10; ret; 
0x000000000041857b: adc dword ptr [rdi], ecx; xchg eax, esp; ret 0x8490; 
0x0000000000418a4c: adc dword ptr [rdi], ecx; xchg eax, esp; ret 0xd284; 
0x000000000040a51e: adc dword ptr [rdi], ecx; xchg eax, esp; ret; 
0x000000000045d5fb: adc dword ptr [rdi], edi; movups xmmword ptr [rdi + 0x10], xmm15; movups xmmword ptr [rdi + 0x20], xmm15; movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x000000000046ee9d: adc dword ptr [rdx - 0x76b7fffe], 0x40c74808; adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004290ed: adc dword ptr [rdx], edi; mov qword ptr [rdx + 0x10], 0; add rsp, 0x40; pop rbp; ret; 
0x000000000046493e: adc dword ptr [rsi - 0x73], ecx; or al, 1; mov rax, rbx; mov rbx, rdi; mov rcx, r9; call rsi; 
0x0000000000446078: adc dword ptr [rsi], 0x1000001; add rsp, 0x30; pop rbp; ret; 
0x0000000000462222: adc dword ptr [rsi], edi; mov ecx, 1; add rsp, 0x38; pop rbp; ret; 
0x000000000041e358: adc dword ptr [rsp + 0x18], eax; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000041e1d6: adc dword ptr [rsp + 0x50], eax; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000473ced: adc dword ptr [rsp + 0x60], edi; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000418094: adc eax, 0x10a587; test rdx, rdx; je 0x180a3; mov rax, qword ptr [rdx]; call rax; 
0x0000000000441f0c: adc eax, 0x10e547; add rsp, 0x28; pop rbp; ret; 
0x0000000000437458: adc eax, 0x119133; xchg qword ptr [rdx], rcx; add rsp, 8; pop rbp; ret; 
0x000000000042cc4c: adc eax, 0x1237eb; lock xadd dword ptr [rdx], ecx; add rsp, 8; pop rbp; ret; 
0x000000000041483f: adc eax, 0x13bbe0; lock or dword ptr [rdx], ecx; add rsp, 0x18; pop rbp; ret; 
0x00000000004356ad: adc eax, 0x24548b48; and byte ptr [rax - 1], cl; ret 0x8b48; 
0x000000000040587a: adc eax, 0x311a8b48; sal al, 0xf; mov cl, 0xbb; push 0xf000001; xchg eax, esp; ret; 
0x0000000000408b54: adc eax, 0x44e80004; adc al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004376e7: adc eax, 0x480000af; add esp, 0x30; pop rbp; ret; 
0x0000000000450d07: adc eax, 0x48ffffe8; add esp, 0x58; pop rbp; ret; 
0x0000000000439f76: adc eax, 0x64475; call rcx; 
0x0000000000439e61: adc eax, 0x6458a; call rcx; 
0x0000000000439e61: adc eax, 0x6458a; call rcx; add rsp, 0x60; pop rbp; ret; 
0x0000000000433834: adc eax, 0x6aa67; call rax; 
0x0000000000447cca: adc eax, 0x80ec8348; pop rbp; ret; 
0x0000000000408cb1: adc eax, 0x957b2; call rcx; 
0x0000000000473a24: adc eax, 0xaabf7; mov rsi, qword ptr [rdx]; mov rax, rcx; call rsi; 
0x0000000000473878: adc eax, 0xab04b; mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000473754: adc eax, 0xab16f; mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000461245: adc eax, 0xc1386; sete al; add rsp, 0x18; pop rbp; ret; 
0x000000000044f32a: adc eax, 0xd3369; test rdx, rdx; je 0x4f33f; mov rsi, qword ptr [rdx]; call rsi; 
0x0000000000441f06: adc eax, 0xd7249; mov dword ptr [rip + 0x10e547], edx; add rsp, 0x28; pop rbp; ret; 
0x0000000000473b1b: adc eax, 0xdc8e0; mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004424ba: adc eax, 0xdd781; mov rax, qword ptr [rdx + rcx]; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x0000000000444b9f: adc eax, 0xddae4; test rdx, rdx; je 0x44bd4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x000000000043ffa6: adc eax, 0xe3495; xchg dword ptr [rdx], ecx; xor eax, eax; add rsp, 8; pop rbp; ret; 
0x0000000000457ed4: adc eax, 0xe8000000; movabs byte ptr [0x5d08c48348fffd47], al; ret; 
0x0000000000437f0f: adc eax, 0xeb5d4; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000436ab7: adc eax, 0xeca2c; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000434c05: adc eax, 0xee806; call 0x34b40; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x0000000000433779: adc eax, 0xeee5a; nop; test rdx, rdx; je 0x3391f; mov rax, qword ptr [rdx]; call rax; 
0x000000000040a541: adc eax, dword ptr [rax + 0xf]; xchg eax, esp; mov dword ptr [rax - 0x7c], 0x48e174ff; add esp, 0x30; pop rbp; ret; 
0x00000000004036a9: adc eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x38; pop rbp; ret; 
0x00000000004424ac: adc eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000004144ea: adc eax, dword ptr [rax]; add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbp; ret; 
0x0000000000414332: adc eax, dword ptr [rax]; add byte ptr [rdi + 6], bh; add rsp, 0x20; pop rbp; ret; 
0x0000000000416232: adc eax, dword ptr [rax]; call 0x184c0; add rsp, 0x18; pop rbp; ret; 
0x000000000041e890: adc eax, dword ptr [rax]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x00000000004172e5: adc eax, dword ptr [rax]; cmp dword ptr [rip + 0x139173], ecx; jg 0x172b0; add rsp, 0x10; pop rbp; ret; 
0x0000000000415bfb: adc eax, dword ptr [rax]; cmp rax, rcx; setbe al; add rsp, 8; pop rbp; ret; 
0x0000000000418840: adc eax, dword ptr [rax]; inc ecx; xchg dword ptr [rax + 0x48], ecx; ret; 
0x00000000004172eb: adc eax, dword ptr [rax]; jg 0x172b0; add rsp, 0x10; pop rbp; ret; 
0x0000000000414842: adc eax, dword ptr [rax]; lock or dword ptr [rdx], ecx; add rsp, 0x18; pop rbp; ret; 
0x00000000004149a3: adc eax, dword ptr [rax]; lock or dword ptr [rdx], ecx; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x000000000041a2fa: adc eax, dword ptr [rax]; lock xadd qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000418043: adc eax, dword ptr [rax]; mov qword ptr [rip + 0x10aeb4], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000041ccda: adc eax, dword ptr [rax]; nop dword ptr [rax]; call 0xa5c0; add rsp, 0x68; pop rbp; ret; 
0x0000000000417adc: adc eax, dword ptr [rax]; nop; call 0x1d100; add rsp, 0x68; pop rbp; ret; 
0x000000000040453d: adc eax, dword ptr [rax]; nop; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000041dcf6: adc eax, dword ptr [rax]; xchg qword ptr [rax], rdx; ret; 
0x000000000041dd09: adc eax, dword ptr [rax]; xchg qword ptr [rcx], rax; ret; 
0x0000000000456212: adc eax, dword ptr [rsi]; add byte ptr [rax], al; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x0000000000413eef: adc eax, ebp; mov eax, dword ptr [rcx]; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000042f489: adc ebp, dword ptr [rax - 0x76b70003]; ret; 
0x000000000046fc62: adc ebp, dword ptr [rbp + 2]; add byte ptr [rbx + 0xf], bh; add rsp, 0x38; pop rbp; ret; 
0x000000000042ef89: adc ebp, dword ptr [rbp - 0x76b70003]; ret; 
0x0000000000461247: adc ecx, dword ptr [rax + rax]; sete al; add rsp, 0x18; pop rbp; ret; 
0x000000000041dbc4: adc ecx, dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000461b85: adc ecx, dword ptr [rax - 0x75]; or dword ptr [rax - 0x77], ecx; ret; 
0x0000000000460ffe: adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x73], cl; push rcx; or byte ptr [rax - 0x77], cl; ret; 
0x000000000046fa79: adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x77], cl; ret; 
0x00000000004465bb: adc ecx, dword ptr [rax - 0x77]; mov ecx, 1; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000466c7c: adc ecx, dword ptr [rax - 0x7d]; ret 0x48c4; 
0x000000000040e2f4: adc ecx, dword ptr [rax - 1]; ret 0x8348; 
0x0000000000440d44: adc ecx, dword ptr [rbp - 0x73]; add cl, byte ptr [r13 - 0x77]; ret 0x2949; 
0x0000000000411bbb: adc ecx, dword ptr [rcx - 0x75]; adc cl, byte ptr [rcx - 0x77]; push rbx; or byte ptr [rcx - 0x2f], al; loope 0x11bb0; ret; 
0x000000000040d7a9: adc ecx, dword ptr [rcx - 1]; ret 0xf44; 
0x00000000004208c1: adc ecx, dword ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x00000000004424bb: adc edi, 0x8b48000d; add al, 0xa; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x0000000000478370: adc edi, edi; sub esi, eax; xor byte ptr [rbx], 0x48; add esp, 0x88; pop rbp; ret; 
0x0000000000410360: adc edx, dword ptr [rax + rax]; add rsp, 0x58; pop rbp; ret; 
0x000000000046d2eb: adc edx, dword ptr [rdx + rax + 0xebb00]; add byte ptr [rax], al; add rsp, 0x128; pop rbp; ret; 
0x000000000041542f: adc esp, dword ptr [rdx + 8]; add al, ch; mov byte ptr [rdi + 3], cl; add al, ch; ret; 
0x000000000044a888: adc esp, edi; dec dword ptr [rax - 0x77]; ret 0xf748; 
0x000000000045de32: adc r11b, r14b; movq qword ptr [rdi + rbx - 0x20], mm2; movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000047836f: adc r15d, edi; sub esi, eax; xor byte ptr [rbx], 0x48; add esp, 0x88; pop rbp; ret; 
0x0000000000408b58: adc r8b, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046bf1a: add ah, ah; std; jmp qword ptr [rsi - 0x70]; 
0x000000000041d72f: add ah, byte ptr [rsi + 0x75]; or edi, dword ptr [rax - 1]; add rsp, 0x10; pop rbp; ret; 
0x00000000004492fd: add ah, byte ptr [rsi - 0x70]; cmp rcx, rsi; ja 0x4930b; add rsp, 0x10; pop rbp; ret; 
0x0000000000457396: add ah, byte ptr [rsi - 9]; ret 1; 
0x000000000045ae5d: add ah, cl; add rsp, 0x10000; pop rbp; ret; 
0x000000000045ac5d: add ah, cl; add rsp, 0x1000; pop rbp; ret; 
0x000000000045aad9: add ah, cl; add rsp, 0x100; pop rbp; ret; 
0x000000000045d301: add ah, cl; add rsp, 0x10; pop rbp; ret; 
0x000000000045acdd: add ah, cl; add rsp, 0x2000; pop rbp; ret; 
0x000000000045ab39: add ah, cl; add rsp, 0x200; pop rbp; ret; 
0x000000000045a9a8: add ah, cl; add rsp, 0x20; pop rbp; ret; 
0x000000000045ad5d: add ah, cl; add rsp, 0x4000; pop rbp; ret; 
0x000000000045ab99: add ah, cl; add rsp, 0x400; pop rbp; ret; 
0x000000000045aa08: add ah, cl; add rsp, 0x40; pop rbp; ret; 
0x000000000045addd: add ah, cl; add rsp, 0x8000; pop rbp; ret; 
0x000000000045abf9: add ah, cl; add rsp, 0x800; pop rbp; ret; 
0x000000000045aa73: add ah, cl; sub rsp, -0x80; pop rbp; ret; 
0x0000000000404d71: add al, 0; add bl, ch; cmp byte ptr [rcx + rcx*8 - 0x3fcef78b], al; add rsp, 0x60; pop rbp; ret; 
0x0000000000443402: add al, 0; add bl, ch; mov eax, 0x20c48348; pop rbp; ret; 
0x000000000044792d: add al, 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040eb16: add al, 0; add byte ptr [rax - 1], cl; ret 0x8948; 
0x0000000000456ef7: add al, 0; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000046c00e: add al, 0; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x000000000043d662: add al, 0; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x0000000000432c54: add al, 0; add byte ptr [rax], al; call 0x331a0; add rsp, 0x28; pop rbp; ret; 
0x0000000000403802: add al, 0; add byte ptr [rax], al; call 0x5ce60; add rsp, 0x18; pop rbp; ret; 
0x000000000040ab29: add al, 0; add byte ptr [rax], al; ret; 
0x000000000045b46b: add al, 0; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x5e9]; jmp rax; 
0x00000000004078c9: add al, 0; add rsp, 0x140; pop rbp; ret; 
0x0000000000410cba: add al, 0; add rsp, 0x18; pop rbp; ret; 
0x0000000000410f72: add al, 0; add rsp, 0x20; pop rbp; ret; 
0x000000000040752a: add al, 0; add rsp, 0x28; pop rbp; ret; 
0x00000000004749d9: add al, 0; add rsp, 0x38; pop rbp; ret; 
0x0000000000412568: add al, 0; add rsp, 0xa8; pop rbp; ret; 
0x00000000004073b4: add al, 0; add rsp, 0xf8; pop rbp; ret; 
0x0000000000458433: add al, 0; call 0x36740; add rsp, 8; pop rbp; nop; ret; 
0x00000000004597ef: add al, 0; call 0x5b0a0; add rsp, 0x30; pop rbp; ret; 
0x0000000000470da3: add al, 0; call 0x64240; mov rax, qword ptr [rsp + 0x80]; add rsp, 0x128; pop rbp; ret; 
0x000000000045b4fc: add al, 0; ja 0x5b509; lea rax, [rip + 0xc59]; jmp rax; 
0x0000000000474edf: add al, 0; lea rbx, [rip + 0x3ff88]; add rsp, 0x48; pop rbp; ret; 
0x000000000045273e: add al, 0; mov edi, 5; add rsp, 0x20; pop rbp; ret; 
0x0000000000410eb0: add al, 0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x000000000047306a: add al, 0; mov rcx, rax; mov rax, -1; add rsp, 0x10; pop rbp; ret; 
0x000000000040aa83: add al, 0; movzx eax, byte ptr [rsp + 0x17]; add rsp, 0x28; pop rbp; ret; 
0x000000000042ddf9: add al, 0; nop dword ptr [rax + rax]; call 0x4740; add rsp, 0x40; pop rbp; ret; 
0x000000000045c207: add al, 0; pop rbp; ret; 
0x000000000041440f: add al, 0; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x00000000004151f3: add al, 0; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0xc8; pop rbp; ret; 
0x000000000042b70d: add al, 0x10; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000402ae8: add al, 0x11; and eax, 0x7f; ret; 
0x00000000004648f2: add al, 0x11; lea r9, [rcx + rsi]; mov rax, rbx; mov rbx, r8; mov rcx, r9; call rdi; 
0x00000000004102a5: add al, 0x11; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x000000000042df4e: add al, 0x11; sar rax, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000424800: add al, 0x16; mov ebx, 1; add rsp, 0x60; pop rbp; ret; 
0x00000000004183f5: add al, 0x16; sub rbx, rdi; add rsp, 0x10; pop rbp; nop; ret; 
0x00000000004101c3: add al, 0x19; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x000000000045e523: add al, 0x24; add rsp, 0x170; popfq; pop rbp; ret; 
0x000000000044f2fc: add al, 0x24; add rsp, 8; pop rbp; ret; 
0x00000000004404f5: add al, 0x24; mov ecx, ebx; mov rbx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000043590e: add al, 0x24; mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rcx + 0xc0], rax; add rsp, 0x38; pop rbp; ret; 
0x000000000042b5eb: add al, 0x30; lea rax, [rax + 1]; add rsp, 0x10; pop rbp; ret; 
0x00000000004615ee: add al, 0x31; fstp xword ptr [rcx + 1]; call 0x59f40; add rsp, 0x18; pop rbp; ret; 
0x000000000043ed1b: add al, 0x31; jmp qword ptr [rsi - 0x70]; 
0x00000000004608f5: add al, 0x31; sal byte ptr [rcx], 0xc9; mov rdx, qword ptr [rax + 0x28]; mov rax, rcx; call rdx; 
0x0000000000477fd2: add al, 0x31; sal byte ptr [rcx], cl; leave; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x000000000041b106: add al, 0x31; shr bl, 0xa; mov rax, qword ptr [rdx]; call rax; 
0x000000000043bdac: add al, 0x31; shr bl, cl; or al, 0x48; add esp, 0x30; pop rbp; ret; 
0x0000000000410248: add al, 0x32; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x000000000046a3c5: add al, 0x32; lea rax, [rax - 0x30]; mov ebx, ecx; sub rsp, -0x80; pop rbp; ret; 
0x000000000044a1af: add al, 0x32; mov rbx, qword ptr [rdx + rsi + 8]; add rsp, 0x60; pop rbp; ret; 
0x00000000004508f1: add al, 0x3c; or esi, dword ptr [rbp + 6]; add rsp, 0x30; pop rbp; ret; 
0x0000000000456dab: add al, 0x48; add esp, 0x10; pop rbp; ret; 
0x00000000004424b7: add al, 0x48; lea edx, [rip + 0xdd781]; mov rax, qword ptr [rdx + rcx]; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000042b70a: add al, 0x48; mov eax, dword ptr [rax + rdx]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000458c84: add al, 0x48; mov eax, dword ptr [rax]; ret; 
0x000000000044a1ac: add al, 0x48; mov eax, dword ptr [rdx + rsi]; mov rbx, qword ptr [rdx + rsi + 8]; add rsp, 0x60; pop rbp; ret; 
0x0000000000408e24: add al, 0x48; mov eax, ebx; ret; 
0x000000000042bd2d: add al, 0x48; mov eax, edx; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x000000000040ab12: add al, 0x48; mov edx, dword ptr [rcx + rax]; mov rbx, qword ptr [rcx + rax + 8]; mov rax, rdx; nop; ret; 
0x000000000045c908: add al, 0x5d; ret; 
0x0000000000439f98: add al, 0x63; add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x000000000045b58d: add al, 0x77; or dword ptr [rax - 0x73], ecx; add eax, 0x12c9; jmp rax; 
0x000000000043d2e8: add al, 0x81; not esi; lock and dword ptr [rax], esi; add rsp, 0x10; pop rbp; ret; 
0x000000000041887f: add al, 0x90; nop; xor ecx, ecx; xchg byte ptr [rax], cl; ret; 
0x000000000041b343: add al, 0xa; add rsp, 0x20; pop rbp; ret; 
0x000000000040ed24: add al, 0xa; lea rax, [rax + 0x28]; add rsp, 0x10; pop rbp; ret; 
0x000000000040eea6: add al, 0xa; lea rax, [rax + 0x28]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000040f79b: add al, 0xa; lea rax, [rax + 0x48]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000046a172: add al, 0xa; lea rax, [rax - 0x30]; add rsp, 0xc8; pop rbp; ret; 
0x00000000004424c1: add al, 0xa; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000042ae3e: add al, 0xc1; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x190; pop rbp; ret; 
0x0000000000429e7b: add al, 0xc8; lea rax, [rax + 0x30]; add rsp, 0x10; pop rbp; ret; 
0x0000000000410cb8: add al, 0xd0; add al, 0; add rsp, 0x18; pop rbp; ret; 
0x00000000004090a1: add al, 0xd0; mov ecx, 1; lock xadd qword ptr [rax], rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000421158: add al, 0xd1; call 0x2bd80; xor eax, eax; add rsp, 0xf8; pop rbp; ret; 
0x0000000000470955: add al, 0xd3; mov qword ptr [rbx + rdx*8 + 8], r9; add rsp, 0x10; pop rbp; ret; 
0x000000000046b68f: add al, 0xd8; mov rbx, rdi; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x000000000042978f: add al, 0xd8; shr rax, cl; and eax, 1; add rsp, 0x30; pop rbp; ret; 
0x000000000041034d: add al, 0xe; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x0000000000429c0e: add al, 0xe; mov rbx, rdx; ret; 
0x0000000000426fc8: add al, 0xe; shl rdi, 0x16; sub rdi, rsi; mov rbx, rdi; lea rdx, [rsp + 0x110]; call rcx; 
0x000000000043b939: add al, 0xf; xchg eax, esp; ret 0x1f0f; 
0x000000000043b42c: add al, 0xf; xchg eax, esp; ret 0x7eb; 
0x000000000043edf5: add al, 0xf; xchg eax, esp; ret; 
0x000000000042983f: add al, 1; add rsp, 0x30; pop rbp; ret; 
0x000000000041141f: add al, 6; nop; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x0000000000418dd5: add al, 8; lea eax, [rax + 2]; mov dword ptr [rip + 0x10a0d8], eax; pop rbp; ret; 
0x0000000000463bce: add al, 8; lea rax, [rax + 1]; add rsp, 0x78; pop rbp; ret; 
0x00000000004326de: add al, bpl; cmp ebx, dword ptr [rdx - 0x76b7ffff]; ret; 
0x000000000043997e: add al, bpl; cmp ecx, dword ptr [rdi*8 + 0x48c031ff]; add esp, 0x18; pop rbp; ret; 
0x0000000000404a7e: add al, bpl; fisttp dword ptr [rbx + 5]; add byte ptr [rbx + 0x481c2444], cl; add esp, 0x28; pop rbp; ret; 
0x000000000047a85e: add al, bpl; jnp 0x7a863; add byte ptr [rax], al; add rsp, 0x90; pop rbp; ret; 
0x000000000046539e: add al, bpl; mov ebx, 0x48000018; add esp, 0x120; pop rbp; ret; 
0x0000000000453ffe: add al, bpl; mov ebx, 0x48ffffdd; add esp, 0x198; pop rbp; ret; 
0x000000000041ba5e: add al, bpl; sbb eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x0000000000461b9e: add al, bpl; sbb eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x0000000000452dfc: add al, byte ptr [rax]; add byte ptr [rax + 1], bh; lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000401ad2: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000441fe6: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x820f; 
0x0000000000455b86: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 1], cl; ret; 
0x000000000043a536: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; and al, 0x30; mov rdx, rsi; call rcx; 
0x00000000004476e6: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x3d83; 
0x000000000043714e: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x4890; 
0x000000000047b3c6: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000452eb0: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4828; 
0x0000000000465406: add al, byte ptr [rax]; add byte ptr [rax - 0x80], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000456e50: add al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000440a1b: add al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x120; pop rbp; ret; 
0x0000000000430e53: add al, byte ptr [rax]; add byte ptr [rax], al; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x0000000000458530: add al, byte ptr [rax]; add byte ptr [rax], al; call 0x35640; add rsp, 0x18; pop rbp; ret; 
0x0000000000435c90: add al, byte ptr [rax]; add byte ptr [rax], al; call 0x35640; add rsp, 0x20; pop rbp; ret; 
0x000000000045860f: add al, byte ptr [rax]; add byte ptr [rax], al; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x0000000000472dfe: add al, byte ptr [rax]; add byte ptr [rax], al; call 0x4a580; add rsp, 0x58; pop rbp; ret; 
0x000000000042995c: add al, byte ptr [rax]; add byte ptr [rax], al; or byte ptr [rax], al; ret; 
0x000000000047bf8b: add al, byte ptr [rax]; add byte ptr [rbx + rcx*4 - 0x74], cl; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000047b1fd: add al, byte ptr [rax]; add byte ptr [rbx + rcx*4 - 0x74], cl; and al, 0xf0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000047b890: add al, byte ptr [rax]; add byte ptr [rcx - 0x77], cl; fimul dword ptr [rcx - 0x77]; ret; 
0x000000000045b459: add al, byte ptr [rax]; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x51b]; jmp rax; 
0x0000000000421fc7: add al, byte ptr [rax]; add rsp, 0x10; pop rbp; ret; 
0x00000000004042c7: add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x000000000042b103: add al, byte ptr [rax]; add rsp, 0x28; pop rbp; ret; 
0x0000000000406f8d: add al, byte ptr [rax]; add rsp, 0x30; pop rbp; ret; 
0x0000000000416503: add al, byte ptr [rax]; add rsp, 0x48; pop rbp; ret; 
0x000000000042fda4: add al, byte ptr [rax]; add rsp, 0x50; pop rbp; ret; 
0x0000000000404963: add al, byte ptr [rax]; add rsp, 0x58; pop rbp; ret; 
0x0000000000408828: add al, byte ptr [rax]; add rsp, 0x70; pop rbp; ret; 
0x0000000000415e2a: add al, byte ptr [rax]; add rsp, 0x88; pop rbp; ret; 
0x000000000041495b: add al, byte ptr [rax]; add rsp, 8; pop rbp; ret; 
0x0000000000408823: add al, byte ptr [rax]; call 0x32980; add rsp, 0x70; pop rbp; ret; 
0x0000000000408107: add al, byte ptr [rax]; call 0x32980; sub rsp, -0x80; pop rbp; ret; 
0x000000000046bb10: add al, byte ptr [rax]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000046fc52: add al, byte ptr [rax]; call 0x4a3c0; add rsp, 0x38; pop rbp; ret; 
0x000000000045b4ea: add al, byte ptr [rax]; ja 0x5b4f7; lea rax, [rip + 0xb8b]; jmp rax; 
0x00000000004744d7: add al, byte ptr [rax]; mov ebx, 0x20; pop rbp; nop; ret; 
0x00000000004730c5: add al, byte ptr [rax]; mov ebx, 0x20; ret; 
0x00000000004730e5: add al, byte ptr [rax]; mov ebx, 0xb; ret; 
0x000000000046d2ed: add al, byte ptr [rax]; mov ebx, 0xe; add rsp, 0x128; pop rbp; ret; 
0x000000000046fc64: add al, byte ptr [rax]; mov ebx, 0xf; add rsp, 0x38; pop rbp; ret; 
0x000000000046c00b: add al, byte ptr [rax]; mov ebx, 4; add rsp, 0x28; pop rbp; ret; 
0x000000000046c049: add al, byte ptr [rax]; mov ebx, 6; add rsp, 0x28; pop rbp; ret; 
0x0000000000430626: add al, byte ptr [rax]; mov qword ptr [r11], rcx; mov qword ptr [rax + 0x28], 0; pop rbp; ret; 
0x000000000046d07f: add al, byte ptr [rax]; mov r9d, 0xe; call 0x4a3c0; add rsp, 0x78; pop rbp; ret; 
0x0000000000406817: add al, byte ptr [rax]; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000432357: add al, byte ptr [rax]; mov rax, qword ptr [rsp + 8]; mov byte ptr [rax + 0xb4], 0; add rsp, 0x10; pop rbp; ret; 
0x000000000045c127: add al, byte ptr [rax]; pop rbp; ret; 
0x000000000040810c: add al, byte ptr [rax]; sub rsp, -0x80; pop rbp; ret; 
0x000000000042f5d9: add al, byte ptr [rax]; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x10; pop rbp; ret; 
0x00000000004386e3: add al, byte ptr [rax]; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x18; pop rbp; ret; 
0x000000000042ccb4: add al, byte ptr [rax]; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x000000000042e483: add al, byte ptr [rax]; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; ret; 
0x000000000042ff43: add al, byte ptr [rax]; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004372b5: add al, byte ptr [rax]; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x38; pop rbp; ret; 
0x0000000000435c07: add al, byte ptr [rax]; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x50; pop rbp; ret; 
0x000000000042c663: add al, byte ptr [rax]; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 8; pop rbp; ret; 
0x00000000004652bc: add al, byte ptr [rbx]; add byte ptr [rbp + rcx*4 + 4], cl; or ecx, dword ptr [rbp + 0x39]; ret 0x3d73; 
0x000000000047690c: add al, byte ptr [rdi + 0xf]; mov dh, 0x24; and dword ptr [rbp + 0x39], ecx; ret; 
0x00000000004720b6: add al, byte ptr ss:[rax]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000046d00a: add al, ch; adc bl, dl; std; dec dword ptr [rcx - 0x77]; fisttp qword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000403e0a: add al, ch; adc byte ptr [rbp + 4], ah; add al, ch; mov ebx, dword ptr [rdi]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000433c88: add al, ch; adc dh, byte ptr [rdx + rax]; add rsp, 0x10; pop rbp; ret; 
0x00000000004376e5: add al, ch; adc eax, 0x480000af; add esp, 0x30; pop rbp; ret; 
0x0000000000408b56: add al, ch; adc r8b, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046bf18: add al, ch; add ah, ah; std; jmp qword ptr [rsi - 0x70]; 
0x000000000046c318: add al, ch; and al, byte ptr [rsi - 1]; jmp qword ptr [rsi - 0x70]; 
0x0000000000432b79: add al, ch; and dword ptr [rsi], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x00000000004596b4: add al, ch; and r15b, sil; inc dword ptr [rax + rax*8 + 0x3d801c75]; ret; 
0x000000000046e636: add al, ch; and spl, r15b; dec dword ptr [rax - 0x7d]; ret 0x4830; 
0x0000000000422bd2: add al, ch; call 0x49022a52; add esp, 0x10; pop rbp; ret; 
0x000000000045ff52: add al, ch; call 0x4905f98a; add esp, 0x18; pop rbp; ret; 
0x0000000000434bb2: add al, ch; call 0xffffffffe9034b9e; ret; 
0x000000000042a820: add al, ch; cmp al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x00000000004618a4: add al, ch; cmp bh, 0xff; add rsp, 0x18; pop rbp; ret; 
0x0000000000452ba2: add al, ch; cmp byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x000000000042425f: add al, ch; cmp eax, dword ptr [rdx - 0x74b80000]; and al, 0x78; add rsp, 0x90; pop rbp; ret; 
0x000000000046561f: add al, ch; cmp eax, dword ptr [rdx]; add byte ptr [rax], al; add rsp, 0x120; pop rbp; ret; 
0x000000000040623f: add al, ch; cmp ebp, esp; add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x00000000004326df: add al, ch; cmp ebx, dword ptr [rdx - 0x76b7ffff]; ret; 
0x000000000043997f: add al, ch; cmp ecx, dword ptr [rdi*8 + 0x48c031ff]; add esp, 0x18; pop rbp; ret; 
0x000000000040543f: add al, ch; cmp edi, edx; add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x0000000000466b74: add al, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; sbb al, 0; add byte ptr [rax - 1], cl; ret; 
0x0000000000478c80: add al, ch; fcmovu st(0), st(1); cld; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000040599f: add al, ch; fcomi st(4); add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x0000000000448c3f: add al, ch; fistp dword ptr [rsi + rdi*8 + 0x58d48ff]; call qword ptr [rax]; 
0x0000000000404a7f: add al, ch; fisttp dword ptr [rbx + 5]; add byte ptr [rbx + 0x481c2444], cl; add esp, 0x28; pop rbp; ret; 
0x0000000000451a41: add al, ch; fld dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x68; pop rbp; ret; 
0x00000000004244f6: add al, ch; in al, 0x87; add eax, dword ptr [rax]; add rsp, 0x30; pop rbp; ret; 
0x000000000040104e: add al, ch; in al, dx; ret 5; 
0x000000000040112d: add al, ch; in eax, dx; ret 5; 
0x00000000004747ad: add al, ch; insd dword ptr [rdi], dx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x000000000044a769: add al, ch; int1; ret 0; 
0x00000000004502eb: add al, ch; iretd; movabs byte ptr [0x481024448b48fffb], al; add esp, 0x20; pop rbp; ret; 
0x0000000000408108: add al, ch; jb 0x80b4; add al, byte ptr [rax]; sub rsp, -0x80; pop rbp; ret; 
0x0000000000411ebf: add al, ch; jnp 0x11ec5; add byte ptr [rax], al; add rsp, 0x48; pop rbp; ret; 
0x000000000043633f: add al, ch; jnp 0x36344; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000047a85f: add al, ch; jnp 0x7a863; add byte ptr [rax], al; add rsp, 0x90; pop rbp; ret; 
0x0000000000409a41: add al, ch; jns 0x9a50; add byte ptr [rax], al; add rsp, 0x38; pop rbp; ret; 
0x000000000044f42d: add al, ch; lea esi, [rcx - 0x3fce0005]; add rsp, 0x10; pop rbp; ret; 
0x000000000045b023: add al, ch; mov bh, 0x1d; add byte ptr [rax], al; ret; 
0x0000000000465bf2: add al, ch; mov byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x3d0; pop rbp; ret; 
0x0000000000415432: add al, ch; mov byte ptr [rdi + 3], cl; add al, ch; ret; 
0x00000000004019b2: add al, ch; mov byte ptr [rdi], dl; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x00000000004793a5: add al, ch; mov ch, 0xd2; cld; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x0000000000430ec9: add al, ch; mov cl, 0x1a; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000041c6c9: add al, ch; mov cl, 0x62; add dword ptr [rax], eax; add rsp, 0x40; pop rbp; ret; 
0x00000000004799a4: add al, ch; mov dh, 0xcc; cld; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x0000000000415448: add al, ch; mov dl, 0xb9; add dword ptr [rax], eax; add rsp, 0xc8; pop rbp; ret; 
0x0000000000412582: add al, ch; mov eax, 0x48fffffb; add esp, 0xa8; pop rbp; ret; 
0x000000000046c862: add al, ch; mov eax, 0xe8fffdda; xor edx, ebp; stc; dec dword ptr [rax - 0x77]; ret; 
0x000000000040180f: add al, ch; mov eax, dword ptr [rbp - 0x76b80000]; ret; 
0x000000000041187f: add al, ch; mov ebx, 0x48000001; add esp, 0x68; pop rbp; ret; 
0x000000000046a5bf: add al, ch; mov ebx, 0x48000004; add esp, 0x100; pop rbp; ret; 
0x0000000000467b7f: add al, ch; mov ebx, 0x48000004; add esp, 0x88; pop rbp; ret; 
0x000000000044f5df: add al, ch; mov ebx, 0x4800000a; add esp, 0x58; pop rbp; ret; 
0x000000000046539f: add al, ch; mov ebx, 0x48000018; add esp, 0x120; pop rbp; ret; 
0x00000000004159ff: add al, ch; mov ebx, 0x4800008a; add esp, 8; pop rbp; ret; 
0x0000000000458f9f: add al, ch; mov ebx, 0x48fffd18; add esp, 0x20; pop rbp; ret; 
0x0000000000436aff: add al, ch; mov ebx, 0x48fffd3a; add esp, 8; pop rbp; ret; 
0x0000000000459f9f: add al, ch; mov ebx, 0x48fffe8b; add esp, 0x28; pop rbp; ret; 
0x000000000042235f: add al, ch; mov ebx, 0x48ffffa9; add esp, 0x48; pop rbp; ret; 
0x000000000047061f: add al, ch; mov ebx, 0x48ffffd2; add esp, 0x20; pop rbp; ret; 
0x0000000000453fff: add al, ch; mov ebx, 0x48ffffdd; add esp, 0x198; pop rbp; ret; 
0x0000000000473f3f: add al, ch; mov ebx, 0x48fffff5; add esp, 8; pop rbp; ret; 
0x0000000000461e5f: add al, ch; mov ebx, 0x48fffff6; add esp, 8; pop rbp; ret; 
0x000000000044a41f: add al, ch; mov ebx, 0x48fffffc; add esp, 0x50; pop rbp; ret; 
0x0000000000403e0f: add al, ch; mov ebx, dword ptr [rdi]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000432ce1: add al, ch; mov ecx, 0x48000004; add esp, 0x28; pop rbp; ret; 
0x000000000045b01e: add al, ch; mov esp, 0xe8000035; mov bh, 0x1d; add byte ptr [rax], al; ret; 
0x000000000045b24e: add al, ch; mov word ptr [rbx], ds; add byte ptr [rax], al; ret; 
0x000000000041850e: add al, ch; mov word ptr [rbx], es; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000457ed8: add al, ch; movabs byte ptr [0x5d08c48348fffd47], al; ret; 
0x000000000041d20e: add al, ch; or al, 7; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x00000000004329af: add al, ch; or edi, dword ptr [rbp + rdi*8 - 1]; add rsp, 8; pop rbp; ret; 
0x0000000000439c0f: add al, ch; or edi, dword ptr [rip - 0x3fce0002]; xor ebx, ebx; add rsp, 0x28; pop rbp; ret; 
0x0000000000460d5f: add al, ch; pop rbx; ret 0xffff; 
0x0000000000404a9f: add al, ch; pop rbx; ret; 
0x000000000042fce0: add al, ch; pop rdx; movabs dword ptr [0x484074c08548fffd], eax; mov ecx, dword ptr [rax + 0x18]; mov rax, rbx; call rcx; 
0x00000000004073b0: add al, ch; push 0x2f; add al, 0; add rsp, 0xf8; pop rbp; ret; 
0x00000000004626b2: add al, ch; push 0x48ffff79; add esp, 8; pop rbp; ret; 
0x000000000047a132: add al, ch; push 0x48fffff4; add esp, 0x30; pop rbp; ret; 
0x000000000043bb24: add al, ch; push rbx; add dword ptr [rax], eax; add rsp, 8; pop rbp; ret; 
0x0000000000430fa9: add al, ch; rcr dword ptr [rcx], 1; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000427558: add al, ch; ret 0xb3; 
0x000000000044b138: add al, ch; ret 0xfc5b; 
0x0000000000438cf8: add al, ch; ret 0xfd18; 
0x000000000044be58: add al, ch; ret 0xfe6a; 
0x0000000000478ab8: add al, ch; ret 0xffdf; 
0x00000000004704d8: add al, ch; ret 0xffea; 
0x0000000000412db7: add al, ch; ret; 
0x0000000000436427: add al, ch; sar dword ptr [rbx], cl; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000417922: add al, ch; sbb ch, bl; add dword ptr [rax], eax; add rsp, 0x40; pop rbp; ret; 
0x0000000000434637: add al, ch; sbb dword ptr [rdi - 3], -1; add rsp, 0x20; pop rbp; ret; 
0x000000000046153f: add al, ch; sbb eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000042ad7f: add al, ch; sbb eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000041ba5f: add al, ch; sbb eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x0000000000461b9f: add al, ch; sbb eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x000000000043bb1f: add al, ch; sbb edx, dword ptr [rcx + rax]; call 0x50e60; add rsp, 8; pop rbp; ret; 
0x00000000004376b8: add al, ch; scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x00000000004343d9: add al, ch; scasd eax, dword ptr [rdi]; add dword ptr [rax], eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000414f3f: add al, ch; sti; ret; 
0x0000000000432c6e: add al, ch; sub al, 5; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x0000000000436cd2: add al, ch; sub byte ptr [rcx - 0x74b80000], bh; and al, 0x20; add rsp, 0x48; pop rbp; ret; 
0x000000000043b48d: add al, ch; sub eax, 0x48fffcf1; add esp, 0x10; pop rbp; ret; 
0x00000000004091cb: add al, ch; sysenter; 
0x00000000004255c4: add al, ch; test byte ptr [rdi - 2], 0xff; add rsp, 0x18; pop rbp; ret; 
0x000000000041e15f: add al, ch; wait; ret 0xfffe; 
0x000000000040ba53: add al, ch; xchg dword ptr [rbx], ecx; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x0000000000416233: add al, ch; xchg dword ptr [rdx], esp; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000440229: add al, ch; xchg eax, ecx; movabs dword ptr [0x4800000001b8fffc], eax; add esp, 0x428; pop rbp; ret; 
0x00000000004297a4: add al, ch; xchg eax, esi; cmp eax, dword ptr [rbx]; add byte ptr [rax - 1], cl; ret; 
0x000000000044e42a: add al, ch; xor byte ptr [rdx - 0x76b70001], al; ret 0x8b48; 
0x000000000041c3c8: add al, ch; xor dl, byte ptr [rdx]; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000042a385: add al, ch; xor eax, 0x48fffe02; add esp, 0x20; pop rbp; ret; 
0x00000000004584ab: add al, dh; and dword ptr [rax + 0x12], 0x48000000; add esp, 8; pop rbp; ret; 
0x0000000000435aeb: add al, dh; cmpxchg dword ptr [rcx + 0x90], edx; sete al; add rsp, 0x10; pop rbp; ret; 
0x0000000000414843: add al, dh; or dword ptr [rdx], ecx; add rsp, 0x18; pop rbp; ret; 
0x00000000004149a4: add al, dh; or dword ptr [rdx], ecx; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x0000000000436ff4: add al, dh; xadd dword ptr [rcx], eax; add rsp, 0x48; pop rbp; ret; 
0x000000000044d4ce: add al, dh; xadd dword ptr [rdx + 0x22a0], eax; add rsp, 0x48; pop rbp; ret; 
0x00000000004584a7: add al, dh; xadd dword ptr [rdx], eax; mov byte ptr [rcx + 0x1260], 0; add rsp, 8; pop rbp; ret; 
0x000000000042cc50: add al, dh; xadd dword ptr [rdx], ecx; add rsp, 8; pop rbp; ret; 
0x00000000004463d1: add al, dh; xadd dword ptr [rdx], ecx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004090cb: add al, dh; xadd qword ptr [rax + 0x500], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090b7: add al, dh; xadd qword ptr [rax + 0x508], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090a7: add al, dh; xadd qword ptr [rax], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004620d3: add al, dh; xadd qword ptr [rax], rcx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000418b44: add al, dh; xadd qword ptr [rax], rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000041a2fb: add al, dh; xadd qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000421464: add al, dh; xadd qword ptr [rdx], rcx; mov eax, 1; add rsp, 0xf8; pop rbp; ret; 
0x000000000043baf0: add bh, bh; adc al, 0x48; add esp, 0x20; pop rbp; ret; 
0x000000000045982e: add bh, bh; adc al, 0xc6; xor dword ptr [rdi], 0x30c48348; pop rbp; ret; 
0x000000000043fa1f: add bh, bh; add eax, 0xe39e2; call 0x3e3c0; pop rbp; ret; 
0x0000000000456d97: add bh, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000041cde4: add bh, bh; ret 0x6348; 
0x00000000004357b2: add bh, bh; ret 0x9788; 
0x000000000044785b: add bh, bh; ret 0xd148; 
0x000000000044758e: add bh, bh; ret; 
0x0000000000456eb3: add bh, byte ptr [rax + 3]; add rsp, 0x10; pop rbp; ret; 
0x0000000000454682: add bh, byte ptr [rbp + 6]; add rsp, 0x30; pop rbp; ret; 
0x000000000046ca5f: add bh, dh; ret 0x3f; 
0x0000000000473653: add bl, ch; adc cl, byte ptr [rax - 0x77]; fsubr st(0); ret 0xf966; 
0x00000000004608f3: add bl, ch; add al, 0x31; sal byte ptr [rcx], 0xc9; mov rdx, qword ptr [rax + 0x28]; mov rax, rcx; call rdx; 
0x0000000000464a2f: add bl, ch; add dh, byte ptr [rcx]; ror byte ptr [rax + 0xeb9cf05], 0; ret; 
0x0000000000466f0f: add bl, ch; add eax, 0x2bb9; add byte ptr [rax - 1], cl; ret; 
0x000000000047c953: add bl, ch; add eax, 0x31d23145; dec dword ptr [rcx - 0x75]; mov bl, byte ptr [rax + 0x48000000]; mov eax, edi; call rcx; 
0x0000000000466eca: add bl, ch; add eax, 0x50b9; add byte ptr [rax - 1], cl; ret; 
0x00000000004076cb: add bl, ch; add ecx, dword ptr [rax - 1]; ret 0x3949; 
0x0000000000404d73: add bl, ch; cmp byte ptr [rcx + rcx*8 - 0x3fcef78b], al; add rsp, 0x60; pop rbp; ret; 
0x000000000044aab0: add bl, ch; jl 0x4aae5; sal byte ptr [rcx], 0xdb; add rsp, 0x18; pop rbp; ret; 
0x00000000004553c1: add bl, ch; jl 0x5540d; add esp, 0x48; pop rbp; ret; 
0x000000000043fb47: add bl, ch; mov al, 0x48; add esp, 0x30; pop rbp; ret; 
0x0000000000443404: add bl, ch; mov eax, 0x20c48348; pop rbp; ret; 
0x0000000000439425: add bl, ch; or edi, dword ptr [rax + 1]; add rsp, 0x10; pop rbp; ret; 
0x0000000000455000: add bl, ch; rdtsc; ror byte ptr [rax - 0x7d], 0xc4; pop rbp; ret; 
0x000000000043c9bb: add bl, ch; ret 0xcccc; 
0x000000000040c6ba: add bl, ch; ret; 
0x00000000004610f5: add bl, ch; sbb al, ch; ret; 
0x000000000046baa3: add bl, ch; xchg eax, edx; add rsp, 0x58; pop rbp; ret; 
0x000000000045b3d8: add bl, dh; movd dword ptr [r12 + 0xb0], mm5; movq xmm14, qword ptr [r12 + 0xb8]; ret; 
0x000000000045b3e2: add bl, dh; movd dword ptr [r12 + 0xb8], mm6; ret; 
0x0000000000453059: add byte ptr [r8], al; add byte ptr [rax - 0x75], cl; and al, 0x38; add rsp, 0x1c0; pop rbp; ret; 
0x00000000004776a9: add byte ptr [r8], al; add byte ptr [rax], al; mov rax, rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000045b24c: add byte ptr [r8], al; call 0x5cde0; ret; 
0x0000000000406289: add byte ptr [r8], al; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x0000000000426d23: add byte ptr [r8], al; test bl, bl; je 0x26d30; add rsp, 0x10; pop rbp; ret; 
0x0000000000405ffb: add byte ptr [r8], r8b; add rsp, 8; pop rbp; ret; 
0x0000000000434705: add byte ptr [rax + 0x11bd010d], cl; add byte ptr [rdi], cl; mov dh, 0xd; pushfq; ret; 
0x000000000044462f: add byte ptr [rax + 0x129e890], dl; add byte ptr [rax], al; add rsp, 0x68; pop rbp; ret; 
0x00000000004291e2: add byte ptr [rax + 0x1480000], al; ret 0x8949; 
0x000000000041134e: add byte ptr [rax + 0x1480000], al; ret 0xc148; 
0x0000000000413cf8: add byte ptr [rax + 0x1480000], al; ret; 
0x000000000041f784: add byte ptr [rax + 0x148ffff], al; ret; 
0x000000000041ea59: add byte ptr [rax + 0x14dffff], al; ret 0x894c; 
0x000000000042723c: add byte ptr [rax + 0x14dffff], al; retf; mov rax, r11; lea rdx, [rsp + 0x110]; call rdi; 
0x000000000044d4c8: add byte ptr [rax + 0x1b8], dl; add al, dh; xadd dword ptr [rdx + 0x22a0], eax; add rsp, 0x48; pop rbp; ret; 
0x000000000045e70f: add byte ptr [rax + 0x23], bh; syscall; 
0x000000000045e70f: add byte ptr [rax + 0x23], bh; syscall; add rsp, 0x10; pop rbp; ret; 
0x00000000004055cf: add byte ptr [rax + 0x24748948], dl; adc cl, ch; ret; 
0x0000000000406562: add byte ptr [rax + 0x287c031], dl; add rsp, 0x18; pop rbp; ret; 
0x000000000044fd3b: add byte ptr [rax + 0x287c031], dl; add rsp, 0x60; pop rbp; ret; 
0x000000000040c237: add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x00000000004585cd: add byte ptr [rax + 0x29], cl; ret; 
0x0000000000421f87: add byte ptr [rax + 0x29], cl; retf 0x3948; ret 0x2b7d; 
0x000000000045ed4a: add byte ptr [rax + 0x38], bh; syscall; 
0x000000000041cdf0: add byte ptr [rax + 0x39], cl; ret 0x4876; 
0x000000000044f69f: add byte ptr [rax + 0x39], cl; ret 0x537d; 
0x0000000000451b53: add byte ptr [rax + 0x39], cl; ret 0x675; 
0x000000000044beb9: add byte ptr [rax + 0x39], cl; ret 0x737f; 
0x000000000041a47f: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000004485ac: add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000041f7bf: add byte ptr [rax + 0x39], cl; ret; 
0x000000000045810b: add byte ptr [rax + 0x39], cl; retf 0x930f; shr ebx, 2; xor ecx, ecx; mov eax, ecx; ret; 
0x000000000042a7fa: add byte ptr [rax + 0x39], cl; retf 0x9f0f; ret 0x8eb; 
0x0000000000402da8: add byte ptr [rax + 0x39], cl; ror dword ptr [rcx - 0x77], cl; ror byte ptr [rdi + rcx + 0x4c], 1; ret; 
0x000000000044190a: add byte ptr [rax + 0x39], cl; sal dword ptr [rbp + 6], 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004346bf: add byte ptr [rax + 0x39], cl; sal dword ptr [rdi - 0x35], 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000429d1f: add byte ptr [rax + 0x39], cl; sal dword ptr [rsi + 0xb], cl; mov rax, -1; mov rbx, rsi; ret; 
0x000000000045e60f: add byte ptr [rax + 0x3c], bh; syscall; 
0x000000000045b555: add byte ptr [rax + 0x48097700], al; lea eax, [rip + 0x105f]; jmp rax; 
0x00000000004181e4: add byte ptr [rax + 0x58d4890], dl; ret 0x10b2; 
0x000000000045cc87: add byte ptr [rax + 0x5d], al; ret; 
0x000000000044a9c1: add byte ptr [rax + 0x76d63948], al; add eax, 0xdb31c031; ret; 
0x000000000045b5d4: add byte ptr [rax + 0x77], al; or dword ptr [rax - 0x73], ecx; add eax, 0x1601; jmp rax; 
0x000000000041dbbe: add byte ptr [rax + 0x77d63948], dl; adc ecx, dword ptr [rax - 0x39]; ret 0xffff; 
0x00000000004651c9: add byte ptr [rax + 0x7e0f4866], dl; ret 0x8d4c; 
0x000000000041cdde: add byte ptr [rax + 0x7fd23941], dl; add bh, bh; ret 0x6348; 
0x000000000045b4c4: add byte ptr [rax + 0x9770000], al; lea rax, [rip + 0x9ef]; jmp rax; 
0x0000000000403a54: add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8348; 
0x00000000004037ef: add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000040a450: add byte ptr [rax + 0xf], cl; test qword ptr [r8 - 0x77], -0x14dfdb8c; add rsp, 0x30; pop rbp; ret; 
0x00000000004394aa: add byte ptr [rax + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x0000000000431516: add byte ptr [rax + 1], bh; add rsp, 0x18; pop rbp; ret; 
0x000000000041a266: add byte ptr [rax + 1], bh; add rsp, 0x28; pop rbp; ret; 
0x000000000043b950: add byte ptr [rax + 1], bh; add rsp, 0x38; pop rbp; ret; 
0x0000000000405127: add byte ptr [rax + 1], bh; add rsp, 0x60; pop rbp; ret; 
0x000000000040628b: add byte ptr [rax + 1], bh; add rsp, 8; pop rbp; ret; 
0x0000000000452dfe: add byte ptr [rax + 1], bh; lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000405a58: add byte ptr [rax + 1], bh; xor ebx, ebx; add rsp, 0x68; pop rbp; ret; 
0x000000000041c261: add byte ptr [rax + 1], cl; mov eax, 0x1250; add rsp, 0x10; pop rbp; ret; 
0x00000000004291e5: add byte ptr [rax + 1], cl; ret 0x8949; 
0x0000000000411351: add byte ptr [rax + 1], cl; ret 0xc148; 
0x0000000000413cfb: add byte ptr [rax + 1], cl; ret; 
0x000000000046a65f: add byte ptr [rax + rax*8 - 0x3fce5f8b], al; add rsp, 0x100; pop rbp; ret; 
0x000000000045b46a: add byte ptr [rax + rax], al; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x5e9]; jmp rax; 
0x000000000045b4fb: add byte ptr [rax + rax], al; ja 0x5b509; lea rax, [rip + 0xc59]; jmp rax; 
0x000000000042ddf8: add byte ptr [rax + rax], al; nop dword ptr [rax + rax]; call 0x4740; add rsp, 0x40; pop rbp; ret; 
0x000000000045c206: add byte ptr [rax + rax], al; pop rbp; ret; 
0x000000000043e5cb: add byte ptr [rax + rbp*8 + 0x48], dh; add esp, 0x50; pop rbp; ret; 
0x0000000000415ce1: add byte ptr [rax + rcx + 0x48], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x88; pop rbp; ret; 
0x00000000004769c8: add byte ptr [rax + rcx + 0x48], dh; sub ebx, edx; call 0x752a0; add rsp, 0x60; pop rbp; ret; 
0x000000000040a606: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x10; pop rbp; ret; 
0x00000000004171ec: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x1b8; pop rbp; nop; ret; 
0x0000000000435d6c: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x20; pop rbp; ret; 
0x000000000043c2c1: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x28; pop rbp; ret; 
0x00000000004508a2: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x38; pop rbp; ret; 
0x0000000000434f2c: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x40; pop rbp; ret; 
0x000000000040bbb9: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x58; pop rbp; ret; 
0x000000000042340d: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x60; pop rbp; ret; 
0x00000000004500ec: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 8; pop rbp; ret; 
0x00000000004254ae: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; mov eax, 1; add rsp, 0x40; pop rbp; ret; 
0x0000000000431958: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; mov eax, 1; ret; 
0x00000000004252b2: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; pop rbp; ret; 
0x0000000000436286: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x50; pop rbp; ret; 
0x0000000000431897: add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; xor eax, eax; ret; 
0x000000000041ec53: add byte ptr [rax - 0x1469918], dl; dec dword ptr [rax - 0x75]; and al, 0x60; add rsp, 0x78; pop rbp; ret; 
0x000000000041ec82: add byte ptr [rax - 0x146c818], dl; push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; js 0x1eced; ret; 
0x000000000042d59e: add byte ptr [rax - 0x17e17], dl; dec dword ptr [rax - 0x75]; and al, 0x40; add rsp, 0x680; pop rbp; ret; 
0x000000000045afe8: add byte ptr [rax - 0x18], bl; jno 0x5afed; add byte ptr [rax], al; call 0x5cde0; ret; 
0x000000000045afe2: add byte ptr [rax - 0x18], dl; test dword ptr [rax + rax], 0x71e858; add byte ptr [rax], al; call 0x5cde0; ret; 
0x0000000000425ade: add byte ptr [rax - 0x1b52418], dl; dec dword ptr [rax - 0x75]; and al, 0x20; add rsp, 0x38; pop rbp; ret; 
0x0000000000458146: add byte ptr [rax - 0x39], cl; adc byte ptr [rax + 1], 0; add byte ptr [rax], al; ret; 
0x0000000000461f0f: add byte ptr [rax - 0x39], cl; or byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x1f0f; 
0x000000000045b196: add byte ptr [rax - 0x39], cl; push 0; pop rbp; ret; 
0x0000000000401ad4: add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000416767: add byte ptr [rax - 0x39], cl; ret; 
0x000000000045af47: add byte ptr [rax - 0x39], cl; rol dword ptr [rax], 0; add byte ptr [rax], al; call rax; 
0x0000000000461ec9: add byte ptr [rax - 0x39], cl; sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000043b9be: add byte ptr [rax - 0x3fcef78b], dl; add rsp, 0x38; pop rbp; ret; 
0x00000000004291db: add byte ptr [rax - 0x46], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret 0x8949; 
0x000000000047221e: add byte ptr [rax - 0x6bf0fc15], dl; ror dword ptr [rcx - 0x3b7cb738], 0x20; pop rbp; ret; 
0x000000000042cc49: add byte ptr [rax - 0x73], cl; adc eax, 0x1237eb; lock xadd dword ptr [rdx], ecx; add rsp, 8; pop rbp; ret; 
0x000000000041483c: add byte ptr [rax - 0x73], cl; adc eax, 0x13bbe0; lock or dword ptr [rdx], ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000433831: add byte ptr [rax - 0x73], cl; adc eax, 0x6aa67; call rax; 
0x0000000000441fe8: add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x820f; 
0x0000000000426431: add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000410076: add byte ptr [rax - 0x73], cl; add eax, 0x141662; add rsp, 0x58; pop rbp; ret; 
0x000000000043ad2f: add byte ptr [rax - 0x73], cl; add eax, 0x63691; call 0x5b0a0; add rsp, 0x28; pop rbp; ret; 
0x0000000000406edf: add byte ptr [rax - 0x73], cl; add eax, 0x97421; call 0x5b0a0; add rsp, 0x18; pop rbp; ret; 
0x0000000000458b69: add byte ptr [rax - 0x73], cl; add eax, 0xffface6f; mov qword ptr [rip + 0xf7a58], rax; pop rbp; ret; 
0x0000000000454ae3: add byte ptr [rax - 0x73], cl; and al, 0x28; call 0x54d20; add rsp, 0x60; pop rbp; ret; 
0x0000000000444f91: add byte ptr [rax - 0x73], cl; and al, 0x48; call 0x44020; add rsp, 0x58; pop rbp; ret; 
0x000000000042c202: add byte ptr [rax - 0x73], cl; or eax, 0x126ace; call 0xc5e0; add rsp, 0x18; pop rbp; ret; 
0x0000000000459c6d: add byte ptr [rax - 0x73], cl; or eax, 0xbf4df; xchg dword ptr [rcx], eax; add rsp, 0x10; pop rbp; ret; 
0x000000000040ab99: add byte ptr [rax - 0x73], cl; pop rdx; jmp qword ptr [rsi - 0x70]; 
0x0000000000454e12: add byte ptr [rax - 0x73], cl; pop rsp; and al, 0x10; call rcx; 
0x0000000000479f99: add byte ptr [rax - 0x73], cl; sbb eax, 0x3b5c7; mov rcx, qword ptr [rsp + 0x258]; mov edi, dword ptr [rsp + 0x2c]; call rdx; 
0x0000000000474ee0: add byte ptr [rax - 0x73], cl; sbb eax, 0x3ff88; add rsp, 0x48; pop rbp; ret; 
0x00000000004483f2: add byte ptr [rax - 0x73], cl; test byte ptr [rax + rcx*4], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x000000000045ef2d: add byte ptr [rax - 0x73], cl; xor al, 0x24; mov rax, 0xe4; syscall; 
0x000000000045eed2: add byte ptr [rax - 0x73], cl; xor al, 0x24; mov rax, qword ptr [rip + 0xf1712]; call rax; 
0x000000000045e8b9: add byte ptr [rax - 0x73], cl; xor al, 0x24; mov rax, qword ptr [rip + 0xf1d2b]; cmp rax, 0; je 0x5e905; call rax; 
0x0000000000478311: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; pop rax; or byte ptr [rax - 1], cl; ret; 
0x0000000000479a1d: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; pop rdx; or byte ptr [rax - 1], cl; ret; 
0x0000000000431fd7: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7f], cl; ret 0x3a0; 
0x0000000000455b88: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 1], cl; ret; 
0x00000000004424be: add byte ptr [rax - 0x75], cl; add al, 0xa; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000044be46: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x75000000], 0x8948f004; test byte ptr [rax + rbx*4], ah; add byte ptr [rax], al; add al, ch; ret 0xfe6a; 
0x000000000041803d: add byte ptr [rax - 0x75], cl; add eax, 0x138f03; mov qword ptr [rip + 0x10aeb4], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000458283: add byte ptr [rax - 0x75], cl; add eax, 0xcac65; call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x000000000040611a: add byte ptr [rax - 0x75], cl; add ecx, dword ptr [rax - 0x77]; and al, 0x20; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000046f7cc: add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x20; pop rbp; ret; 
0x0000000000406d0f: add byte ptr [rax - 0x75], cl; and al, 0x10; mov byte ptr [rax + 0xb4], 0; add rsp, 0x40; pop rbp; ret; 
0x0000000000446071: add byte ptr [rax - 0x75], cl; and al, 0x10; mov byte ptr [rcx + 0x116], 1; add rsp, 0x30; pop rbp; ret; 
0x00000000004220ce: add byte ptr [rax - 0x75], cl; and al, 0x10; mov qword ptr [rcx + 8], rax; pop rbp; ret; 
0x000000000044fbe4: add byte ptr [rax - 0x75], cl; and al, 0x10; mov qword ptr [rcx], rax; add rsp, 0x18; pop rbp; ret; 
0x00000000004414eb: add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdx, qword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000436653: add byte ptr [rax - 0x75], cl; and al, 0x10; xchg dword ptr [rcx + 0x11c], eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000409c64: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x28; pop rbp; ret; 
0x0000000000439e59: add byte ptr [rax - 0x75], cl; and al, 0x18; lea rdx, [rip + 0x6458a]; call rcx; 
0x0000000000410eb1: add byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x28; pop rbp; ret; 
0x0000000000436cd7: add byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x48; pop rbp; ret; 
0x0000000000439f6e: add byte ptr [rax - 0x75], cl; and al, 0x20; lea rdx, [rip + 0x64475]; call rcx; 
0x000000000041d0b3: add byte ptr [rax - 0x75], cl; and al, 0x20; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x28; pop rbp; ret; 
0x000000000045a1c4: add byte ptr [rax - 0x75], cl; and al, 0x20; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004195f3: add byte ptr [rax - 0x75], cl; and al, 0x28; add rsp, 0x30; pop rbp; ret; 
0x000000000043a824: add byte ptr [rax - 0x75], cl; and al, 0x28; call 0x3a5e0; add rsp, 0x30; pop rbp; ret; 
0x0000000000421a44: add byte ptr [rax - 0x75], cl; and al, 0x28; call 0xa580; add rsp, 0x38; pop rbp; ret; 
0x000000000044652b: add byte ptr [rax - 0x75], cl; and al, 0x30; add rsp, 0x38; pop rbp; ret; 
0x0000000000420a32: add byte ptr [rax - 0x75], cl; and al, 0x30; add rsp, 0x40; pop rbp; ret; 
0x0000000000452902: add byte ptr [rax - 0x75], cl; and al, 0x30; call 0x52940; add rsp, 0x40; pop rbp; ret; 
0x000000000043a538: add byte ptr [rax - 0x75], cl; and al, 0x30; mov rdx, rsi; call rcx; 
0x000000000045305c: add byte ptr [rax - 0x75], cl; and al, 0x38; add rsp, 0x1c0; pop rbp; ret; 
0x000000000041920d: add byte ptr [rax - 0x75], cl; and al, 0x38; add rsp, 0x98; pop rbp; ret; 
0x000000000043a8f4: add byte ptr [rax - 0x75], cl; and al, 0x38; call 0x3a5e0; add rsp, 0x28; pop rbp; ret; 
0x0000000000455106: add byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x48; pop rbp; ret; 
0x000000000040c12e: add byte ptr [rax - 0x75], cl; and al, 0x48; add rsp, 0x58; pop rbp; ret; 
0x000000000042d055: add byte ptr [rax - 0x75], cl; and al, 0x50; mov qword ptr [rip + 0x1234ce], rax; add rsp, 0x70; pop rbp; ret; 
0x00000000004532e5: add byte ptr [rax - 0x75], cl; and al, 0x68; xor ebx, ebx; add rsp, 0x258; pop rbp; ret; 
0x0000000000424264: add byte ptr [rax - 0x75], cl; and al, 0x78; add rsp, 0x90; pop rbp; ret; 
0x0000000000406818: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x10; pop rbp; ret; 
0x0000000000432358: add byte ptr [rax - 0x75], cl; and al, 8; mov byte ptr [rax + 0xb4], 0; add rsp, 0x10; pop rbp; ret; 
0x000000000041a593: add byte ptr [rax - 0x75], cl; insd dword ptr [rdi], dx; add byte ptr [rax - 0x39], cl; ret; 
0x000000000047c2bc: add byte ptr [rax - 0x75], cl; je 0x7c2e5; js 0x7c30b; mov esi, dword ptr [rsi + 0xf8]; mov rax, qword ptr [rsp + 0x108]; call rsi; 
0x000000000040637b: add byte ptr [rax - 0x75], cl; mov esp, 0x8024; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000438f09: add byte ptr [rax - 0x75], cl; mov esp, 0x9824; add byte ptr [rax - 0x77], cl; ret; 
0x000000000042b699: add byte ptr [rax - 0x75], cl; or cl, byte ptr [rax - 0x75]; add dword ptr [rbx + 1], edi; add rsp, 0x10; pop rbp; ret; 
0x000000000040995c: add byte ptr [rax - 0x75], cl; pop rsp; and al, 0x38; add rsp, 0xa0; pop rbp; ret; 
0x0000000000474357: add byte ptr [rax - 0x75], cl; pop rsp; and al, 0x78; add rsp, 0xa0; pop rbp; ret; 
0x000000000047bcac: add byte ptr [rax - 0x75], cl; push rax; mov rax, rbx; mov rbx, rdi; call rcx; 
0x000000000043b219: add byte ptr [rax - 0x75], cl; push rcx; xor byte ptr [rax - 0x77], cl; ret; 
0x0000000000465f00: add byte ptr [rax - 0x75], cl; push rdi; adc byte ptr [rax - 1], cl; ret 0x8948; 
0x00000000004586b6: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov rax, qword ptr [rdx]; nop; call rax; 
0x0000000000406f79: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x28; mov rax, qword ptr [rdx]; call rax; 
0x0000000000479ea7: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x40; mov rdx, qword ptr [rdx + 0x18]; mov rax, qword ptr [rsp + 0x188]; call rdx; 
0x000000000041e385: add byte ptr [rax - 0x75], cl; sbb bh, byte ptr [rax + 0x10000]; call rbx; 
0x000000000041e0a8: add byte ptr [rax - 0x75], cl; sbb cl, byte ptr [rax - 0x75]; and al, 0x48; call rbx; 
0x000000000044b0a4: add byte ptr [rax - 0x75], cl; sub byte ptr [r8 - 0x75], cl; push rbx; and byte ptr [rax - 1], cl; ret 0x8b48; 
0x0000000000469f29: add byte ptr [rax - 0x75], cl; sub byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax - 1], cl; ret 0x8b4c; 
0x0000000000426719: add byte ptr [rax - 0x75], cl; test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000452eaa: add byte ptr [rax - 0x75], cl; xchg eax, esp; and al, 0x98; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4828; 
0x000000000041138a: add byte ptr [rax - 0x75], cl; xchg eax, esp; ret 0x4000; 
0x0000000000401a5e: add byte ptr [rax - 0x76b3f915], dl; ret; 
0x0000000000471a60: add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000043c8c8: add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 0xc8; add rsp, 0x20; pop rbp; ret; 
0x0000000000418044: add byte ptr [rax - 0x77], cl; add eax, 0x10aeb4; add rsp, 0x20; pop rbp; ret; 
0x00000000004158ce: add byte ptr [rax - 0x77], cl; add eax, 0x10d602; add rsp, 0x20; pop rbp; ret; 
0x000000000042dd5e: add byte ptr [rax - 0x77], cl; add eax, 0xf4bca; add rsp, 0x40; pop rbp; ret; 
0x000000000045eb9a: add byte ptr [rax - 0x77], cl; and al, 0x30; ret; 
0x00000000004308dc: add byte ptr [rax - 0x77], cl; and al, 0x68; mov rax, qword ptr [rsp + 0x50]; mov rdx, qword ptr [rax + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000047c961: add byte ptr [rax - 0x77], cl; clc; call rcx; 
0x00000000004687bc: add byte ptr [rax - 0x77], cl; clc; mov rbx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004606e5: add byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x77]; ret; 
0x0000000000432e14: add byte ptr [rax - 0x77], cl; fld1; ret; 
0x0000000000471f84: add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x77]; retf; add rsp, 0x20; pop rbp; ret; 
0x000000000044a361: add byte ptr [rax - 0x77], cl; iretd; call 0x4a0e0; add rsp, 0x40; pop rbp; ret; 
0x000000000044a4f4: add byte ptr [rax - 0x77], cl; iretd; call 0x4a0e0; add rsp, 0x60; pop rbp; ret; 
0x000000000044a61e: add byte ptr [rax - 0x77], cl; iretd; call 0x4a0e0; add rsp, 0x70; pop rbp; ret; 
0x0000000000407482: add byte ptr [rax - 0x77], cl; iretd; call 0x4a0e0; add rsp, 0xf8; pop rbp; ret; 
0x000000000044479c: add byte ptr [rax - 0x77], cl; iretd; call 0x6480; add rsp, 0x30; pop rbp; ret; 
0x000000000042c644: add byte ptr [rax - 0x77], cl; mov byte ptr [rax + 0x12], ch; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x0000000000442859: add byte ptr [rax - 0x77], cl; or al, 2; add rsp, 0x58; pop rbp; ret; 
0x000000000046eea0: add byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x39], cl; adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004738a3: add byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; ret; 
0x000000000042207d: add byte ptr [rax - 0x77], cl; or eax, 0x127a73; nop; lea rax, [rip + 0x127a63]; xchg qword ptr [rax], rdx; ret; 
0x000000000045cd98: add byte ptr [rax - 0x77], cl; push rsp; and al, 0x28; mov rdi, rbx; mov rcx, rbx; call rax; 
0x0000000000428959: add byte ptr [rax - 0x77], cl; pushfq; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 9], cl; ret; 
0x00000000004283c1: add byte ptr [rax - 0x77], cl; pushfq; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 9], cl; ret; 
0x00000000004476e8: add byte ptr [rax - 0x77], cl; ret 0x3d83; 
0x000000000040211d: add byte ptr [rax - 0x77], cl; ret 0x448b; 
0x0000000000437150: add byte ptr [rax - 0x77], cl; ret 0x4890; 
0x0000000000413ee7: add byte ptr [rax - 0x77], cl; ret 0x48f0; 
0x00000000004722fc: add byte ptr [rax - 0x77], cl; ret 0x4eb; 
0x0000000000416870: add byte ptr [rax - 0x77], cl; ret 0x8748; 
0x0000000000418aa8: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004747b2: add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x000000000040af0f: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000408db1: add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000004543c1: add byte ptr [rax - 0x77], cl; ret 0xb848; 
0x000000000042de14: add byte ptr [rax - 0x77], cl; ret 0xbb; 
0x0000000000406383: add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000426721: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000004017d8: add byte ptr [rax - 0x77], cl; ret; 
0x0000000000408da9: add byte ptr [rax - 0x77], cl; retf 0xdee9; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000046d497: add byte ptr [rax - 0x77], cl; retf; add rsp, 0x18; pop rbp; ret; 
0x0000000000403644: add byte ptr [rax - 0x77], cl; retf; add rsp, 0x40; pop rbp; ret; 
0x00000000004294c9: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x000000000047200d: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 5; call 0xffffffffe8072b20; ret; 
0x0000000000449791: add byte ptr [rax - 0x77], cl; ror dword ptr [rcx + 0x48f089c1], cl; add esp, 0x78; pop rbp; ret; 
0x0000000000412047: add byte ptr [rax - 0x77], cl; ror dword ptr [rcx + rcx*4 - 0x3f], cl; xor edi, edi; add rsp, 0x10; pop rbp; ret; 
0x0000000000422fa2: add byte ptr [rax - 0x77], cl; sbb al, 0xc8; add rsp, 0x38; pop rbp; ret; 
0x0000000000470d96: add byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; ret; 
0x000000000041ded3: add byte ptr [rax - 0x77], cl; sbb dword ptr [rax + 0x48000000], 0x5d18c483; ret; 
0x000000000045ef13: add byte ptr [rax - 0x77], cl; sti; add rcx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000046ecbf: add byte ptr [rax - 0x77], cl; sti; add rsp, 0x18; pop rbp; ret; 
0x00000000004485a4: add byte ptr [rax - 0x77], cl; test byte ptr [rax + rsi*8], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000462eee: add byte ptr [rax - 0x78], 0x74; add edi, edi; add rsp, 0x48; pop rbp; ret; 
0x0000000000456e1a: add byte ptr [rax - 0x78], al; cmp byte ptr [rax + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x000000000045028c: add byte ptr [rax - 0x78], al; mov ah, 0x10; sbb byte ptr [rax + rax], al; add byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000046644d: add byte ptr [rax - 0x7b], cl; dec dword ptr [rdi]; mov es, word ptr [rbx]; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x000000000045999f: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 6]; mov eax, 1; ret; 
0x0000000000412cff: add byte ptr [rax - 0x7b], cl; leave; ja 0x12cee; pop rbp; ret; 
0x000000000041445f: add byte ptr [rax - 0x7b], cl; ret 0x2975; 
0x00000000004144df: add byte ptr [rax - 0x7b], cl; ret 0x3975; 
0x00000000004476df: add byte ptr [rax - 0x7b], cl; ror dword ptr [rdi], cl; test dword ptr [rdx + rax], edi; add byte ptr [rax - 0x77], cl; ret 0x3d83; 
0x00000000004333d6: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rbx + 0x48], cl; mov ecx, dword ptr [rdx]; mov rax, rdi; call rcx; 
0x00000000004319c8: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx + 0x31], 0xc0; add rsp, 0x10; pop rbp; ret; 
0x0000000000418098: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], cl; mov eax, dword ptr [rdx]; call rax; 
0x0000000000444ba3: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp + 0x48], cl; mov ecx, dword ptr [rdx]; mov rax, rdi; call rcx; 
0x000000000044f32e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x48], cl; mov esi, dword ptr [rdx]; call rsi; 
0x00000000004363e8: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rdx + 0x48], cl; mov eax, dword ptr [rdx]; call rax; 
0x000000000045af34: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rsi + 0x48], 0x8d; xor eax, 0xfffff3df; mov rdx, 0; mov rcx, 0; call rax; 
0x0000000000413d3f: add byte ptr [rax - 0x7c], al; je 0x13d50; mov eax, 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000440b31: add byte ptr [rax - 0x7d], cl; clc; sbb byte ptr [rdi], cl; or dword ptr [rcx + 0x48000000], 0xffffff83; ret 0x8830; 
0x000000000043bcfa: add byte ptr [rax - 0x7d], cl; mov ecx, 0xd0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x5488; 
0x0000000000405ff3: add byte ptr [rax - 0x7d], cl; rcr byte ptr [rax - 0x70], 0xe8; ret 0x45; 
0x000000000040457b: add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000047c456: add byte ptr [rax - 0x7d], cl; ret 0x4818; 
0x000000000044bc2e: add byte ptr [rax - 0x7d], cl; ret 0x4828; 
0x00000000004489fd: add byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x000000000041224f: add byte ptr [rax - 0x7d], cl; ret 0x48c0; 
0x000000000044407a: add byte ptr [rax - 0x7d], cl; ret 0x48f8; 
0x000000000044101e: add byte ptr [rax - 0x7d], cl; ret 0x48fe; 
0x0000000000412598: add byte ptr [rax - 0x7d], cl; ret 0x4908; 
0x0000000000440b3b: add byte ptr [rax - 0x7d], cl; ret 0x8830; 
0x00000000004020cb: add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000424cb1: add byte ptr [rax - 0x7d], cl; shr byte ptr [rbx - 0x70], 0x90; xor ecx, ecx; xchg byte ptr [rax], cl; ret; 
0x000000000040c52e: add byte ptr [rax - 0x7f], cl; ret 0xfc01; 
0x000000000040aeb3: add byte ptr [rax - 0x7f], cl; ret; 
0x000000000045189f: add byte ptr [rax - 0x80], al; call qword ptr [rdx]; 
0x0000000000465408: add byte ptr [rax - 0x80], al; jmp qword ptr [rsi + 0xf]; 
0x000000000041adbe: add byte ptr [rax - 0x8b7e815], dl; ret; 
0x000000000044c4f7: add byte ptr [rax - 1], bh; xor ebx, ebx; add rsp, 0xb0; pop rbp; ret; 
0x0000000000461f17: add byte ptr [rax - 1], cl; ret 0x1f0f; 
0x0000000000429626: add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000040eb18: add byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000046ae45: add byte ptr [rax - 1], cl; ret 0x8b48; 
0x0000000000406681: add byte ptr [rax - 1], cl; ret 0x8d4c; 
0x000000000041c53f: add byte ptr [rax - 1], cl; ret; 
0x000000000041e958: add byte ptr [rax - 9], cl; ret 0x1fff; 
0x000000000047a71f: add byte ptr [rax - 9], cl; ret 0x60; 
0x000000000040bb3f: add byte ptr [rax - 9], cl; ret; 
0x0000000000460d94: add byte ptr [rax], 0; add al, ch; ret; 
0x0000000000451b50: add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; ret 0x675; 
0x000000000041e0a5: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; sbb cl, byte ptr [rax - 0x75]; and al, 0x48; call rbx; 
0x0000000000406380: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000047b4b8: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000470d93: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; ret; 
0x00000000004333d3: add byte ptr [rax], 0; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rbx + 0x48], cl; mov ecx, dword ptr [rdx]; mov rax, rdi; call rcx; 
0x0000000000442e05: add byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046b052: add byte ptr [rax], 0; add byte ptr [rax - 1], cl; ret; 
0x000000000042895e: add byte ptr [rax], 0; add byte ptr [rax - 9], cl; ret; 
0x000000000044be4a: add byte ptr [rax], 0; add byte ptr [rbx - 0x76b70ffc], cl; test byte ptr [rax + rbx*4], ah; add byte ptr [rax], al; add al, ch; ret 0xfe6a; 
0x0000000000467e00: add byte ptr [rax], 0; add byte ptr [rcx + 0xf], al; mov edx, 0x930f00e2; ret; 
0x000000000045b434: add byte ptr [rax], 0; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x39f]; jmp rax; 
0x000000000045b4c5: add byte ptr [rax], 0; ja 0x5b4d3; lea rax, [rip + 0x9ef]; jmp rax; 
0x000000000045ade3: add byte ptr [rax], 0; pop rbp; ret; 
0x000000000045c667: add byte ptr [rax], 0x5d; ret; 
0x000000000045b556: add byte ptr [rax], 0x77; or dword ptr [rax - 0x73], ecx; add eax, 0x105f; jmp rax; 
0x000000000045b4a0: add byte ptr [rax], ah; add byte ptr [rax], al; ja 0x5b4af; lea rax, [rip + 0x853]; jmp rax; 
0x000000000045ace2: add byte ptr [rax], ah; add byte ptr [rax], al; pop rbp; ret; 
0x000000000045b531: add byte ptr [rax], ah; add byte ptr [rdi + 9], dh; lea rax, [rip + 0xec3]; jmp rax; 
0x000000000045b5c2: add byte ptr [rax], ah; ja 0x5b5cf; lea rax, [rip + 0x1533]; jmp rax; 
0x000000000045cba7: add byte ptr [rax], ah; pop rbp; ret; 
0x000000000045b51e: add byte ptr [rax], al; adc byte ptr [rax], al; ja 0x5b52d; lea rax, [rip + 0xdf5]; jmp rax; 
0x000000000045c3c5: add byte ptr [rax], al; adc byte ptr [rax], al; pop rbp; ret; 
0x000000000045b5af: add byte ptr [rax], al; adc byte ptr [rdi + 9], dh; lea rax, [rip + 0x1465]; jmp rax; 
0x000000000045ae5b: add byte ptr [rax], al; add ah, cl; add rsp, 0x10000; pop rbp; ret; 
0x000000000045ac5b: add byte ptr [rax], al; add ah, cl; add rsp, 0x1000; pop rbp; ret; 
0x000000000045aad7: add byte ptr [rax], al; add ah, cl; add rsp, 0x100; pop rbp; ret; 
0x000000000045d2ff: add byte ptr [rax], al; add ah, cl; add rsp, 0x10; pop rbp; ret; 
0x000000000045acdb: add byte ptr [rax], al; add ah, cl; add rsp, 0x2000; pop rbp; ret; 
0x000000000045ab37: add byte ptr [rax], al; add ah, cl; add rsp, 0x200; pop rbp; ret; 
0x000000000045a9a6: add byte ptr [rax], al; add ah, cl; add rsp, 0x20; pop rbp; ret; 
0x000000000045ad5b: add byte ptr [rax], al; add ah, cl; add rsp, 0x4000; pop rbp; ret; 
0x000000000045ab97: add byte ptr [rax], al; add ah, cl; add rsp, 0x400; pop rbp; ret; 
0x000000000045aa06: add byte ptr [rax], al; add ah, cl; add rsp, 0x40; pop rbp; ret; 
0x000000000045addb: add byte ptr [rax], al; add ah, cl; add rsp, 0x8000; pop rbp; ret; 
0x000000000045abf7: add byte ptr [rax], al; add ah, cl; add rsp, 0x800; pop rbp; ret; 
0x000000000045aa71: add byte ptr [rax], al; add ah, cl; sub rsp, -0x80; pop rbp; ret; 
0x000000000045b4fa: add byte ptr [rax], al; add al, 0; ja 0x5b509; lea rax, [rip + 0xc59]; jmp rax; 
0x000000000045c205: add byte ptr [rax], al; add al, 0; pop rbp; ret; 
0x000000000045c906: add byte ptr [rax], al; add al, 0x5d; ret; 
0x000000000045b58b: add byte ptr [rax], al; add al, 0x77; or dword ptr [rax - 0x73], ecx; add eax, 0x12c9; jmp rax; 
0x000000000045b4e8: add byte ptr [rax], al; add al, byte ptr [rax]; ja 0x5b4f7; lea rax, [rip + 0xb8b]; jmp rax; 
0x000000000045c125: add byte ptr [rax], al; add al, byte ptr [rax]; pop rbp; ret; 
0x00000000004596b2: add byte ptr [rax], al; add al, ch; and r15b, sil; inc dword ptr [rax + rax*8 + 0x3d801c75]; ret; 
0x000000000045ff50: add byte ptr [rax], al; add al, ch; call 0x4905f98a; add esp, 0x18; pop rbp; ret; 
0x0000000000434bb0: add byte ptr [rax], al; add al, ch; call 0xffffffffe9034b9e; ret; 
0x0000000000466b72: add byte ptr [rax], al; add al, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; sbb al, 0; add byte ptr [rax - 1], cl; ret; 
0x00000000004747ab: add byte ptr [rax], al; add al, ch; insd dword ptr [rdi], dx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x0000000000412580: add byte ptr [rax], al; add al, ch; mov eax, 0x48fffffb; add esp, 0xa8; pop rbp; ret; 
0x000000000046a5bd: add byte ptr [rax], al; add al, ch; mov ebx, 0x48000004; add esp, 0x100; pop rbp; ret; 
0x0000000000458f9d: add byte ptr [rax], al; add al, ch; mov ebx, 0x48fffd18; add esp, 0x20; pop rbp; ret; 
0x0000000000432cdf: add byte ptr [rax], al; add al, ch; mov ecx, 0x48000004; add esp, 0x28; pop rbp; ret; 
0x000000000045b01c: add byte ptr [rax], al; add al, ch; mov esp, 0xe8000035; mov bh, 0x1d; add byte ptr [rax], al; ret; 
0x0000000000457ed6: add byte ptr [rax], al; add al, ch; movabs byte ptr [0x5d08c48348fffd47], al; ret; 
0x00000000004626b0: add byte ptr [rax], al; add al, ch; push 0x48ffff79; add esp, 8; pop rbp; ret; 
0x000000000047a130: add byte ptr [rax], al; add al, ch; push 0x48fffff4; add esp, 0x30; pop rbp; ret; 
0x000000000044b136: add byte ptr [rax], al; add al, ch; ret 0xfc5b; 
0x000000000044be56: add byte ptr [rax], al; add al, ch; ret 0xfe6a; 
0x0000000000478ab6: add byte ptr [rax], al; add al, ch; ret 0xffdf; 
0x0000000000412db5: add byte ptr [rax], al; add al, ch; ret; 
0x000000000043923d: add byte ptr [rax], al; add al, ch; sti; ret; 
0x00000000004297a2: add byte ptr [rax], al; add al, ch; xchg eax, esi; cmp eax, dword ptr [rbx]; add byte ptr [rax - 1], cl; ret; 
0x000000000044d4cc: add byte ptr [rax], al; add al, dh; xadd dword ptr [rdx + 0x22a0], eax; add rsp, 0x48; pop rbp; ret; 
0x00000000004090c9: add byte ptr [rax], al; add al, dh; xadd qword ptr [rax + 0x500], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090b5: add byte ptr [rax], al; add al, dh; xadd qword ptr [rax + 0x508], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090a5: add byte ptr [rax], al; add al, dh; xadd qword ptr [rax], rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000043baee: add byte ptr [rax], al; add bh, bh; adc al, 0x48; add esp, 0x20; pop rbp; ret; 
0x000000000045982c: add byte ptr [rax], al; add bh, bh; adc al, 0xc6; xor dword ptr [rdi], 0x30c48348; pop rbp; ret; 
0x00000000004357b0: add byte ptr [rax], al; add bh, bh; ret 0x9788; 
0x000000000046ca5d: add byte ptr [rax], al; add bh, dh; ret 0x3f; 
0x0000000000466f0d: add byte ptr [rax], al; add bl, ch; add eax, 0x2bb9; add byte ptr [rax - 1], cl; ret; 
0x0000000000466ec8: add byte ptr [rax], al; add bl, ch; add eax, 0x50b9; add byte ptr [rax - 1], cl; ret; 
0x00000000004076c9: add byte ptr [rax], al; add bl, ch; add ecx, dword ptr [rax - 1]; ret 0x3949; 
0x000000000043fb45: add byte ptr [rax], al; add bl, ch; mov al, 0x48; add esp, 0x30; pop rbp; ret; 
0x0000000000439423: add byte ptr [rax], al; add bl, ch; or edi, dword ptr [rax + 1]; add rsp, 0x10; pop rbp; ret; 
0x00000000004610f3: add byte ptr [rax], al; add bl, ch; sbb al, ch; ret; 
0x000000000046baa1: add byte ptr [rax], al; add bl, ch; xchg eax, edx; add rsp, 0x58; pop rbp; ret; 
0x000000000045b3d6: add byte ptr [rax], al; add bl, dh; movd dword ptr [r12 + 0xb0], mm5; movq xmm14, qword ptr [r12 + 0xb8]; ret; 
0x000000000045b3e0: add byte ptr [rax], al; add bl, dh; movd dword ptr [r12 + 0xb8], mm6; ret; 
0x00000000004291e0: add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret 0x8949; 
0x000000000041134c: add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret 0xc148; 
0x0000000000413cf6: add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret; 
0x000000000041f782: add byte ptr [rax], al; add byte ptr [rax + 0x148ffff], al; ret; 
0x000000000041ea57: add byte ptr [rax], al; add byte ptr [rax + 0x14dffff], al; ret 0x894c; 
0x000000000042723a: add byte ptr [rax], al; add byte ptr [rax + 0x14dffff], al; retf; mov rax, r11; lea rdx, [rsp + 0x110]; call rdi; 
0x000000000045e70d: add byte ptr [rax], al; add byte ptr [rax + 0x23], bh; syscall; 
0x000000000045e70d: add byte ptr [rax], al; add byte ptr [rax + 0x23], bh; syscall; add rsp, 0x10; pop rbp; ret; 
0x00000000004055cd: add byte ptr [rax], al; add byte ptr [rax + 0x24748948], dl; adc cl, ch; ret; 
0x0000000000451b51: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x675; 
0x00000000004485aa: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000045e60d: add byte ptr [rax], al; add byte ptr [rax + 0x3c], bh; syscall; 
0x00000000004181e2: add byte ptr [rax], al; add byte ptr [rax + 0x58d4890], dl; ret 0x10b2; 
0x000000000045cc85: add byte ptr [rax], al; add byte ptr [rax + 0x5d], al; ret; 
0x000000000044a9bf: add byte ptr [rax], al; add byte ptr [rax + 0x76d63948], al; add eax, 0xdb31c031; ret; 
0x000000000045b5d2: add byte ptr [rax], al; add byte ptr [rax + 0x77], al; or dword ptr [rax - 0x73], ecx; add eax, 0x1601; jmp rax; 
0x000000000040a44e: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; test qword ptr [r8 - 0x77], -0x14dfdb8c; add rsp, 0x30; pop rbp; ret; 
0x0000000000405125: add byte ptr [rax], al; add byte ptr [rax + 1], bh; add rsp, 0x60; pop rbp; ret; 
0x000000000043e5c9: add byte ptr [rax], al; add byte ptr [rax + rbp*8 + 0x48], dh; add esp, 0x50; pop rbp; ret; 
0x0000000000415cdf: add byte ptr [rax], al; add byte ptr [rax + rcx + 0x48], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x88; pop rbp; ret; 
0x000000000040a604: add byte ptr [rax], al; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x10; pop rbp; ret; 
0x0000000000435d6a: add byte ptr [rax], al; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x20; pop rbp; ret; 
0x000000000043c2bf: add byte ptr [rax], al; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x28; pop rbp; ret; 
0x00000000004508a0: add byte ptr [rax], al; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x38; pop rbp; ret; 
0x0000000000434f2a: add byte ptr [rax], al; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x40; pop rbp; ret; 
0x000000000040bbb7: add byte ptr [rax], al; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x58; pop rbp; ret; 
0x000000000042340b: add byte ptr [rax], al; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x60; pop rbp; ret; 
0x00000000004500ea: add byte ptr [rax], al; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 8; pop rbp; ret; 
0x0000000000431956: add byte ptr [rax], al; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; mov eax, 1; ret; 
0x0000000000431895: add byte ptr [rax], al; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; xor eax, eax; ret; 
0x0000000000458144: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; adc byte ptr [rax + 1], 0; add byte ptr [rax], al; ret; 
0x0000000000461f0d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; or byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x1f0f; 
0x000000000045b194: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; push 0; pop rbp; ret; 
0x0000000000416765: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000045af45: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol dword ptr [rax], 0; add byte ptr [rax], al; call rax; 
0x0000000000461ec7: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x00000000004291d9: add byte ptr [rax], al; add byte ptr [rax - 0x46], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret 0x8949; 
0x000000000047221c: add byte ptr [rax], al; add byte ptr [rax - 0x6bf0fc15], dl; ror dword ptr [rcx - 0x3b7cb738], 0x20; pop rbp; ret; 
0x000000000045ef2b: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor al, 0x24; mov rax, 0xe4; syscall; 
0x000000000045eed0: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor al, 0x24; mov rax, qword ptr [rip + 0xf1712]; call rax; 
0x000000000047946a: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; pop rax; or byte ptr [rax - 1], cl; ret; 
0x0000000000479a1b: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; pop rdx; or byte ptr [rax - 1], cl; ret; 
0x0000000000431fd5: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7f], cl; ret 0x3a0; 
0x000000000046f7ca: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x20; pop rbp; ret; 
0x000000000045305a: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x38; add rsp, 0x1c0; pop rbp; ret; 
0x0000000000455104: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x48; pop rbp; ret; 
0x0000000000406379: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov esp, 0x8024; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000047bcaa: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rax; mov rax, rbx; mov rbx, rdi; call rcx; 
0x000000000043b217: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rcx; xor byte ptr [rax - 0x77], cl; ret; 
0x000000000041e383: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; sbb bh, byte ptr [rax + 0x10000]; call rbx; 
0x000000000041e0a6: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; sbb cl, byte ptr [rax - 0x75]; and al, 0x48; call rbx; 
0x0000000000469f27: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; sub byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax - 1], cl; ret 0x8b4c; 
0x0000000000401a5c: add byte ptr [rax], al; add byte ptr [rax - 0x76b3f915], dl; ret; 
0x0000000000471a5e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x00000000004158cc: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x10d602; add rsp, 0x20; pop rbp; ret; 
0x000000000045eb98: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x30; ret; 
0x000000000047c95f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; call rcx; 
0x00000000004606e3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x77]; ret; 
0x0000000000432e12: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fld1; ret; 
0x0000000000418aa6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004747b0: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x000000000040af0d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000408daf: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000004543bf: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xb848; 
0x0000000000406381: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000042671f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000004052f8: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046d495: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf; add rsp, 0x18; pop rbp; ret; 
0x0000000000403642: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf; add rsp, 0x40; pop rbp; ret; 
0x00000000004294c7: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x0000000000470d94: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; ret; 
0x00000000004485a2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; test byte ptr [rax + rsi*8], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000045028a: add byte ptr [rax], al; add byte ptr [rax - 0x78], al; mov ah, 0x10; sbb byte ptr [rax + rax], al; add byte ptr [rax - 1], cl; ret 0x8948; 
0x00000000004476dd: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror dword ptr [rdi], cl; test dword ptr [rdx + rax], edi; add byte ptr [rax - 0x77], cl; ret 0x3d83; 
0x00000000004333d4: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rbx + 0x48], cl; mov ecx, dword ptr [rdx]; mov rax, rdi; call rcx; 
0x00000000004363e6: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rdx + 0x48], cl; mov eax, dword ptr [rdx]; call rax; 
0x0000000000440b2f: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; clc; sbb byte ptr [rdi], cl; or dword ptr [rcx + 0x48000000], 0xffffff83; ret 0x8830; 
0x000000000044bc2c: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4828; 
0x00000000004489fb: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x0000000000444078: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x48f8; 
0x0000000000412596: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4908; 
0x0000000000440b39: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8830; 
0x0000000000442e06: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000044c8e8: add byte ptr [rax], al; add byte ptr [rax - 1], bh; xor ebx, ebx; add rsp, 0xb0; pop rbp; ret; 
0x0000000000461f15: add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x1f0f; 
0x0000000000429624: add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000046ae43: add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x8b48; 
0x0000000000466417: add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret; 
0x000000000041e956: add byte ptr [rax], al; add byte ptr [rax - 9], cl; ret 0x1fff; 
0x000000000040bb3d: add byte ptr [rax], al; add byte ptr [rax - 9], cl; ret; 
0x000000000045c665: add byte ptr [rax], al; add byte ptr [rax], 0x5d; ret; 
0x000000000045b554: add byte ptr [rax], al; add byte ptr [rax], 0x77; or dword ptr [rax - 0x73], ecx; add eax, 0x105f; jmp rax; 
0x000000000045b5c0: add byte ptr [rax], al; add byte ptr [rax], ah; ja 0x5b5cf; lea rax, [rip + 0x1533]; jmp rax; 
0x000000000045cba5: add byte ptr [rax], al; add byte ptr [rax], ah; pop rbp; ret; 
0x00000000004596b0: add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; and r15b, sil; inc dword ptr [rax + rax*8 + 0x3d801c75]; ret; 
0x000000000046ca5b: add byte ptr [rax], al; add byte ptr [rax], al; add bh, dh; ret 0x3f; 
0x00000000004291de: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret 0x8949; 
0x000000000041134a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret 0xc148; 
0x0000000000413cf4: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret; 
0x000000000041f780: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x148ffff], al; ret; 
0x000000000041ea55: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x14dffff], al; ret 0x894c; 
0x00000000004181e0: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x58d4890], dl; ret 0x10b2; 
0x000000000040bb3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 9], cl; ret; 
0x000000000043cbed: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000458364: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x00000000004379c3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000464b2a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x0000000000438246: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x48; pop rbp; ret; 
0x0000000000419de9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x000000000046607f: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x690; pop rbp; ret; 
0x0000000000406748: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x88; pop rbp; ret; 
0x000000000045814c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045169b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000045e606: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], bh; mov eax, 0x3c; syscall; 
0x000000000044a01b: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0xf40; 
0x0000000000432361: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000042b52f: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000042ae40: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x190; pop rbp; ret; 
0x00000000004379c5: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000424d1a: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x0000000000431177: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x0000000000434b15: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x38; pop rbp; ret; 
0x0000000000406d18: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x40; pop rbp; ret; 
0x0000000000438248: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x48; pop rbp; ret; 
0x000000000041b063: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x50; pop rbp; ret; 
0x0000000000419deb: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x0000000000466081: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x690; pop rbp; ret; 
0x000000000040674a: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x88; pop rbp; ret; 
0x0000000000430a31: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0xa0; pop rbp; ret; 
0x00000000004225b6: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbp; nop; ret; 
0x000000000045af4b: add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000413fe9: add byte ptr [rax], al; add byte ptr [rax], al; cmovne rax, rdx; add rsp, 0x20; pop rbp; ret; 
0x0000000000431894: add byte ptr [rax], al; add byte ptr [rax], al; je 0x318a2; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x00000000004318e9: add byte ptr [rax], al; add byte ptr [rax], al; je 0x318f7; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x000000000043192b: add byte ptr [rax], al; add byte ptr [rax], al; je 0x31939; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x0000000000431955: add byte ptr [rax], al; add byte ptr [rax], al; je 0x31963; mov qword ptr [r14 + 0x10], -0x522; mov eax, 1; ret; 
0x000000000042ed29: add byte ptr [rax], al; add byte ptr [rax], al; jne 0x2ed35; add rsp, 0x10; pop rbp; ret; 
0x000000000042eda8: add byte ptr [rax], al; add byte ptr [rax], al; jne 0x2edb4; add rsp, 0x10; pop rbp; ret; 
0x0000000000408cf4: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rip + 0x119d99], 0; add rsp, 0x20; pop rbp; ret; 
0x000000000043e27b: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rax + 4], 0; add rsp, 0x38; pop rbp; ret; 
0x000000000043d65b: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rax + 4], 4; add rsp, 0x58; pop rbp; ret; 
0x000000000045e70c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x23; syscall; 
0x000000000045e60c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x3c; syscall; 
0x000000000045e607: add byte ptr [rax], al; add byte ptr [rax], al; mov edi, 0; mov eax, 0x3c; syscall; 
0x0000000000461037: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x18], 0; add rsp, 0x10; pop rbp; ret; 
0x0000000000458143: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x190], 0; ret; 
0x000000000045b193: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x68], 0; pop rbp; ret; 
0x000000000045a286: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbx + 0x18], 0; mov qword ptr [rbx + 0x30], 0; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x000000000045a28e: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbx + 0x30], 0; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x000000000045eb97: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x30], rax; ret; 
0x00000000004776aa: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000044368d: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x000000000045a296: add byte ptr [rax], al; add byte ptr [rax], al; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x000000000045af44: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, 0; call rax; 
0x000000000043062f: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004036e6: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045e6ae: add byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000045e6ae: add byte ptr [rax], al; add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x0000000000402721: add byte ptr [rax], al; add byte ptr [rax], al; xgetbv; mov dword ptr [rsp + 8], eax; mov dword ptr [rsp + 0xc], edx; ret; 
0x0000000000463f32: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000045b59c: add byte ptr [rax], al; add byte ptr [rax], cl; ja 0x5b5ab; lea rax, [rip + 0x1397]; jmp rax; 
0x000000000045c9e5: add byte ptr [rax], al; add byte ptr [rax], cl; pop rbp; ret; 
0x000000000045b5ae: add byte ptr [rax], al; add byte ptr [rax], dl; ja 0x5b5bd; lea rax, [rip + 0x1465]; jmp rax; 
0x000000000045cac5: add byte ptr [rax], al; add byte ptr [rax], dl; pop rbp; ret; 
0x0000000000423475: add byte ptr [rax], al; add byte ptr [rbp + 0x442875d2], 0x8d; add qword ptr [r9 - 0x77], r9; ret 0xf889; 
0x000000000040a9df: add byte ptr [rax], al; add byte ptr [rbp + 0xb], dh; call 0xa800; add rsp, 0x10; pop rbp; ret; 
0x000000000043c34c: add byte ptr [rax], al; add byte ptr [rbp + 0xb], dh; xor eax, eax; add rsp, 0x210; pop rbp; ret; 
0x000000000041a856: add byte ptr [rax], al; add byte ptr [rbp + 0xe], dh; mov rax, qword ptr [rsp + 0x40]; add rsp, 0x328; pop rbp; ret; 
0x000000000042ed2a: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000000445d27: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x000000000043cd36: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0x3a0; pop rbp; ret; 
0x0000000000442d99: add byte ptr [rax], al; add byte ptr [rbp - 0x146f992e], al; add ecx, dword ptr [rax - 0x77]; ret; 
0x000000000045b19c: add byte ptr [rax], al; add byte ptr [rbp - 0x3d], bl; mov rdx, rdi; mov rdi, qword ptr [rdi]; pop rbp; jmp rdi; 
0x00000000004744db: add byte ptr [rax], al; add byte ptr [rbp - 0x70], bl; ret; 
0x0000000000420b25: add byte ptr [rax], al; add byte ptr [rbp - 0x72db8a37], 0x72; add dword ptr [rax - 0x77], ecx; ret; 
0x0000000000440f9a: add byte ptr [rax], al; add byte ptr [rbp - 0x75], cl; pop rax; cmp byte ptr [rcx + 0x29], cl; ret; 
0x0000000000426353: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0xc149; 
0x0000000000478bf3: add byte ptr [rax], al; add byte ptr [rbp - 0x7b], cl; sal byte ptr [rdx + rbp*2 + 0x48], 0xff; ret; 
0x00000000004224b1: add byte ptr [rax], al; add byte ptr [rbx + 0xb], dh; mov rax, qword ptr [rdx + rax*8 + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x0000000000471d95: add byte ptr [rax], al; add byte ptr [rbx + 1], bh; add rsp, 0x18; pop rbp; ret; 
0x000000000044a6e6: add byte ptr [rax], al; add byte ptr [rbx + 1], bh; add rsp, 0x20; pop rbp; ret; 
0x0000000000425445: add byte ptr [rax], al; add byte ptr [rbx + rax + 0x40c38148], al; adc al, byte ptr [rax]; add dh, dh; ret 0x7501; 
0x000000000046a729: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x40], cl; adc byte ptr [rax - 0x75], cl; pop rax; or byte ptr [rax - 1], cl; ret; 
0x0000000000449ac4: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x64], cl; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0xc2e9; 
0x0000000000449b8b: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x64], cl; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0xc984; 
0x000000000047c174: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x74], cl; and al, 0x60; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x0000000000454655: add byte ptr [rax], al; add byte ptr [rbx - 0x6bf0f906], al; ret 0x9066; 
0x000000000044be4b: add byte ptr [rax], al; add byte ptr [rbx - 0x76b70ffc], cl; test byte ptr [rax + rbx*4], ah; add byte ptr [rax], al; add al, ch; ret 0xfe6a; 
0x0000000000451391: add byte ptr [rax], al; add byte ptr [rcx + 0x165e8d1], cl; add byte ptr [rax], al; add rsp, 0x1e0; pop rbp; ret; 
0x0000000000467e01: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov edx, 0x930f00e2; ret; 
0x0000000000465766: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; pushfq; ret; 
0x00000000004615ac: add byte ptr [rax], al; add byte ptr [rcx + 1], bh; call 0x59f40; add rsp, 0x18; pop rbp; ret; 
0x000000000045852c: add byte ptr [rax], al; add byte ptr [rcx + 2], bh; call 0x35640; add rsp, 0x18; pop rbp; ret; 
0x0000000000435c8c: add byte ptr [rax], al; add byte ptr [rcx + 2], bh; call 0x35640; add rsp, 0x20; pop rbp; ret; 
0x0000000000404570: add byte ptr [rax], al; add byte ptr [rcx + rax + 0x68918b48], al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000045ed0d: add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret 0; 
0x00000000004076c3: add byte ptr [rax], al; add byte ptr [rcx - 0x48], al; sldt word ptr [rax]; add bl, ch; add ecx, dword ptr [rax - 1]; ret 0x3949; 
0x0000000000455b5d: add byte ptr [rax], al; add byte ptr [rcx - 0x75], al; adc byte ptr [r8 - 0x77], cl; ret; 
0x0000000000466c77: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; adc ecx, dword ptr [rax - 0x7d]; ret 0x48c4; 
0x0000000000449acc: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0xc2e9; 
0x0000000000449b93: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0xc984; 
0x0000000000478d32: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; fimul dword ptr [rcx - 0x77]; ret; 
0x0000000000479811: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx - 0x77]; ret 0x8b48; 
0x00000000004074ad: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8949; 
0x000000000047bf93: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x0000000000470f1c: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000045ed3d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ror byte ptr [rax], 0x48; or edi, 0x80000; mov eax, 0x38; syscall; 
0x0000000000471665: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0x4d20; 
0x000000000045169d: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x00000000004014d4: add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret 0x8949; 
0x0000000000419569: add byte ptr [rax], al; add byte ptr [rcx], al; add rsp, 0x40; pop rbp; ret; 
0x000000000045b566: add byte ptr [rax], al; add byte ptr [rcx], al; ja 0x5b575; lea rax, [rip + 0x112d]; jmp rax; 
0x000000000045c745: add byte ptr [rax], al; add byte ptr [rcx], al; pop rbp; ret; 
0x000000000044ccf0: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; add rsp, 0x58; pop rbp; ret; 
0x0000000000431ff7: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; add rsp, 0x68; pop rbp; ret; 
0x000000000044c3a2: add byte ptr [rax], al; add byte ptr [rcx], dh; sal byte ptr [rcx], 0xdb; add rsp, 0x10; pop rbp; ret; 
0x000000000041fefb: add byte ptr [rax], al; add byte ptr [rcx], dh; sal byte ptr [rcx], 0xdb; add rsp, 0x40; pop rbp; ret; 
0x000000000045b435: add byte ptr [rax], al; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x39f]; jmp rax; 
0x000000000045b4b2: add byte ptr [rax], al; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x921]; jmp rax; 
0x000000000045b542: add byte ptr [rax], al; add byte ptr [rdi + 9], sil; lea rax, [rip + 0xf91]; jmp rax; 
0x000000000045b58a: add byte ptr [rax], al; add byte ptr [rdi + rsi*2], al; or dword ptr [rax - 0x73], ecx; add eax, 0x12c9; jmp rax; 
0x000000000045e608: add byte ptr [rax], al; add byte ptr [rdi], bh; mov eax, 0x3c; syscall; 
0x000000000045e826: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x10244489; ret; 
0x000000000045e712: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x10c48348; pop rbp; ret; 
0x000000000045e690: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x20244489; ret; 
0x000000000045e976: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x28244489; ret; 
0x000000000045ecde: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x30244489; ret; 
0x000000000045e722: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x8244489; ret; 
0x000000000045ed4d: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0xf88348; je 0x5ed5d; mov dword ptr [rsp + 0x30], eax; ret; 
0x0000000000402722: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, edx; mov dword ptr [rsp + 8], eax; mov dword ptr [rsp + 0xc], edx; ret; 
0x000000000043aa0b: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x50; sub esi, esi; ret 0x7502; 
0x0000000000444e16: add byte ptr [rax], al; add byte ptr [rdi], cl; mov edx, 0xfa830cf2; add cl, byte ptr [rdi]; xchg eax, esp; ret 0x14eb; 
0x000000000044437a: add byte ptr [rax], al; add byte ptr [rdi], cl; mov edx, 0xfa830cf2; add cl, byte ptr [rdi]; xchg eax, esp; ret 0x6eb; 
0x000000000041218d: add byte ptr [rax], al; add byte ptr [rdi], cl; sbb dword ptr [rbx + 1], 0; add byte ptr [rcx - 0x77], cl; ret 0xc149; 
0x000000000043bd00: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x5488; 
0x000000000045cf34: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; and al, 8; ret; 
0x000000000041d87d: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x0000000000435a72: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000045b578: add byte ptr [rax], al; add byte ptr [rdx], al; ja 0x5b587; lea rax, [rip + 0x11fb]; jmp rax; 
0x000000000045c825: add byte ptr [rax], al; add byte ptr [rdx], al; pop rbp; ret; 
0x000000000046a598: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x000000000045dd62: add byte ptr [rax], al; add byte ptr [rsi + rax + 0x48], dh; mov ecx, ebx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040a67b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; call 0x2d740; add rsp, 0x18; pop rbp; ret; 
0x00000000004321bb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; call 0x34e80; add rsp, 0x40; pop rbp; ret; 
0x000000000040c39b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x000000000045b579: add byte ptr [rax], al; add dh, byte ptr [rdi + 9]; lea rax, [rip + 0x11fb]; jmp rax; 
0x000000000041072f: add byte ptr [rax], al; add dh, dh; ret 0x7504; 
0x000000000044a01d: add byte ptr [rax], al; add dh, dh; ret 0xf40; 
0x000000000046c1c7: add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000041e38a: add byte ptr [rax], al; add dword ptr [rax], eax; call rbx; 
0x000000000045b4d6: add byte ptr [rax], al; add dword ptr [rax], eax; ja 0x5b4e5; lea rax, [rip + 0xabd]; jmp rax; 
0x000000000045ae62: add byte ptr [rax], al; add dword ptr [rax], eax; pop rbp; ret; 
0x000000000045b567: add byte ptr [rax], al; add dword ptr [rdi + 9], esi; lea rax, [rip + 0x112d]; jmp rax; 
0x0000000000450988: add byte ptr [rax], al; add dword ptr [rdi + rcx + 0x11], eax; mov ecx, 0x11e8; add rsp, 0x10; pop rbp; ret; 
0x00000000004357a9: add byte ptr [rax], al; add dword ptr [rdi], ecx; mov dh, 0x97; mov esp, 0xff000000; ret 0x9788; 
0x000000000042875b: add byte ptr [rax], al; add qword ptr [rdx + 0x10128], rax; add rsp, 0x98; pop rbp; ret; 
0x000000000045ed3e: add byte ptr [rax], al; add r8, 8; or rdi, 0x80000; mov eax, 0x38; syscall; 
0x000000000042c432: add byte ptr [rax], al; add rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000439095: add byte ptr [rax], al; add rsp, 0x100; pop rbp; nop; ret; 
0x0000000000439057: add byte ptr [rax], al; add rsp, 0x100; pop rbp; ret; 
0x0000000000470fdf: add byte ptr [rax], al; add rsp, 0x108; pop rbp; ret; 
0x00000000004629f8: add byte ptr [rax], al; add rsp, 0x10; pop rbp; nop; ret; 
0x0000000000401a0a: add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000426ffc: add byte ptr [rax], al; add rsp, 0x120; pop rbp; ret; 
0x000000000046d2f2: add byte ptr [rax], al; add rsp, 0x128; pop rbp; ret; 
0x0000000000410d18: add byte ptr [rax], al; add rsp, 0x18; pop rbp; nop; ret; 
0x00000000004019b6: add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000042ae42: add byte ptr [rax], al; add rsp, 0x190; pop rbp; ret; 
0x000000000046b275: add byte ptr [rax], al; add rsp, 0x1a8; pop rbp; nop; ret; 
0x0000000000451399: add byte ptr [rax], al; add rsp, 0x1e0; pop rbp; ret; 
0x000000000042d8fe: add byte ptr [rax], al; add rsp, 0x2020; pop rbp; ret; 
0x0000000000404cb5: add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000046b973: add byte ptr [rax], al; add rsp, 0x270; pop rbp; ret; 
0x000000000040414f: add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x0000000000452e43: add byte ptr [rax], al; add rsp, 0x300; pop rbp; ret; 
0x00000000004068ec: add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x00000000004036ab: add byte ptr [rax], al; add rsp, 0x38; pop rbp; ret; 
0x000000000043cfad: add byte ptr [rax], al; add rsp, 0x3a0; pop rbp; ret; 
0x0000000000465bf6: add byte ptr [rax], al; add rsp, 0x3d0; pop rbp; ret; 
0x0000000000406d1a: add byte ptr [rax], al; add rsp, 0x40; pop rbp; ret; 
0x0000000000440232: add byte ptr [rax], al; add rsp, 0x428; pop rbp; ret; 
0x0000000000411e88: add byte ptr [rax], al; add rsp, 0x48; pop rbp; ret; 
0x00000000004186e8: add byte ptr [rax], al; add rsp, 0x50; pop rbp; ret; 
0x000000000040ba57: add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x000000000040512b: add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x0000000000411883: add byte ptr [rax], al; add rsp, 0x68; pop rbp; ret; 
0x0000000000466083: add byte ptr [rax], al; add rsp, 0x690; pop rbp; ret; 
0x00000000004578d8: add byte ptr [rax], al; add rsp, 0x70; pop rbp; nop; ret; 
0x0000000000426123: add byte ptr [rax], al; add rsp, 0x70; pop rbp; ret; 
0x000000000044e4e4: add byte ptr [rax], al; add rsp, 0x78; pop rbp; ret; 
0x000000000040674c: add byte ptr [rax], al; add rsp, 0x88; pop rbp; ret; 
0x000000000047a863: add byte ptr [rax], al; add rsp, 0x90; pop rbp; ret; 
0x0000000000430a33: add byte ptr [rax], al; add rsp, 0xa0; pop rbp; ret; 
0x0000000000401744: add byte ptr [rax], al; add rsp, 0xa8; pop rbp; ret; 
0x0000000000449c31: add byte ptr [rax], al; add rsp, 0xd8; pop rbp; ret; 
0x000000000042137c: add byte ptr [rax], al; add rsp, 0xf8; pop rbp; ret; 
0x00000000004225b8: add byte ptr [rax], al; add rsp, 8; pop rbp; nop; ret; 
0x000000000040527c: add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x000000000045b530: add byte ptr [rax], al; and byte ptr [rax], al; ja 0x5b53f; lea rax, [rip + 0xec3]; jmp rax; 
0x000000000045c4a5: add byte ptr [rax], al; and byte ptr [rax], al; pop rbp; ret; 
0x000000000045b5c1: add byte ptr [rax], al; and byte ptr [rdi + 9], dh; lea rax, [rip + 0x1533]; jmp rax; 
0x000000000041187e: add byte ptr [rax], al; call 0x11a40; add rsp, 0x68; pop rbp; ret; 
0x0000000000412581: add byte ptr [rax], al; call 0x12140; add rsp, 0xa8; pop rbp; ret; 
0x0000000000454fb7: add byte ptr [rax], al; call 0x1220; add rsp, 0x10; pop rbp; ret; 
0x00000000004164e3: add byte ptr [rax], al; call 0x165e0; add rsp, 0x48; pop rbp; ret; 
0x000000000041c3c7: add byte ptr [rax], al; call 0x1d600; add rsp, 0x10; pop rbp; ret; 
0x000000000041d20d: add byte ptr [rax], al; call 0x1d920; add rsp, 0x10; pop rbp; ret; 
0x00000000004159fe: add byte ptr [rax], al; call 0x1e4c0; add rsp, 8; pop rbp; ret; 
0x0000000000415a5e: add byte ptr [rax], al; call 0x20640; add rsp, 8; pop rbp; ret; 
0x0000000000447041: add byte ptr [rax], al; call 0x24840; add rsp, 0x28; pop rbp; ret; 
0x000000000042a81f: add byte ptr [rax], al; call 0x2a860; add rsp, 0x20; pop rbp; ret; 
0x000000000042ad7e: add byte ptr [rax], al; call 0x2ada0; add rsp, 0x20; pop rbp; ret; 
0x000000000042425e: add byte ptr [rax], al; call 0x2c4a0; mov rax, qword ptr [rsp + 0x78]; add rsp, 0x90; pop rbp; ret; 
0x000000000042c70e: add byte ptr [rax], al; call 0x2c600; add rsp, 0x38; pop rbp; ret; 
0x0000000000457ed7: add byte ptr [rax], al; call 0x2c680; add rsp, 8; pop rbp; ret; 
0x0000000000459588: add byte ptr [rax], al; call 0x2cc60; add rsp, 0x30; pop rbp; ret; 
0x000000000043ef73: add byte ptr [rax], al; call 0x2e4a0; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000415447: add byte ptr [rax], al; call 0x30e00; add rsp, 0xc8; pop rbp; ret; 
0x000000000043e5ef: add byte ptr [rax], al; call 0x30ee0; add rsp, 0x50; pop rbp; ret; 
0x0000000000430e55: add byte ptr [rax], al; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x00000000004019b1: add byte ptr [rax], al; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000042fead: add byte ptr [rax], al; call 0x32980; add rsp, 0x10; pop rbp; ret; 
0x000000000042d868: add byte ptr [rax], al; call 0x32980; add rsp, 0x20; pop rbp; ret; 
0x000000000042d863: add byte ptr [rax], al; call 0x32b60; call 0x32980; add rsp, 0x20; pop rbp; ret; 
0x0000000000432b38: add byte ptr [rax], al; call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x0000000000432c56: add byte ptr [rax], al; call 0x331a0; add rsp, 0x28; pop rbp; ret; 
0x00000000004204af: add byte ptr [rax], al; call 0x331a0; call 0x32980; add rsp, 0x30; pop rbp; ret; 
0x00000000004544ef: add byte ptr [rax], al; call 0x331a0; call 0x32980; add rsp, 0x38; pop rbp; ret; 
0x00000000004527d2: add byte ptr [rax], al; call 0x331a0; call 0x32980; add rsp, 0x40; pop rbp; ret; 
0x000000000040543e: add byte ptr [rax], al; call 0x34e80; add rsp, 0x18; pop rbp; ret; 
0x000000000043aa5e: add byte ptr [rax], al; call 0x351a0; call 0x3a000; add rsp, 0x50; pop rbp; ret; 
0x0000000000458532: add byte ptr [rax], al; call 0x35640; add rsp, 0x18; pop rbp; ret; 
0x0000000000435c92: add byte ptr [rax], al; call 0x35640; add rsp, 0x20; pop rbp; ret; 
0x0000000000417921: add byte ptr [rax], al; call 0x35640; add rsp, 0x40; pop rbp; ret; 
0x0000000000458571: add byte ptr [rax], al; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x000000000043633e: add byte ptr [rax], al; call 0x364c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000444a4f: add byte ptr [rax], al; call 0x371e0; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000043b88f: add byte ptr [rax], al; call 0x37d20; add rsp, 8; pop rbp; ret; 
0x000000000045888d: add byte ptr [rax], al; call 0x385c0; add rsp, 0x30; pop rbp; ret; 
0x000000000043a5b3: add byte ptr [rax], al; call 0x385c0; call 0x3a000; add rsp, 0x38; pop rbp; ret; 
0x0000000000436426: add byte ptr [rax], al; call 0x3a000; add rsp, 0x18; pop rbp; ret; 
0x000000000043acc3: add byte ptr [rax], al; call 0x3a000; add rsp, 0x30; pop rbp; ret; 
0x000000000043b94a: add byte ptr [rax], al; call 0x3ba80; mov eax, 1; add rsp, 0x38; pop rbp; ret; 
0x0000000000459f9e: add byte ptr [rax], al; call 0x42b60; add rsp, 0x28; pop rbp; ret; 
0x0000000000444312: add byte ptr [rax], al; call 0x45740; add rsp, 8; pop rbp; ret; 
0x0000000000445f4d: add byte ptr [rax], al; call 0x460a0; pop rbp; ret; 
0x000000000042ddfe: add byte ptr [rax], al; call 0x4740; add rsp, 0x40; pop rbp; ret; 
0x000000000045f06f: add byte ptr [rax], al; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x0000000000469e37: add byte ptr [rax], al; call 0x4a320; add rsp, 0x70; pop rbp; ret; 
0x00000000004073af: add byte ptr [rax], al; call 0x4a320; add rsp, 0xf8; pop rbp; ret; 
0x000000000046d085: add byte ptr [rax], al; call 0x4a3c0; add rsp, 0x78; pop rbp; ret; 
0x0000000000472e00: add byte ptr [rax], al; call 0x4a580; add rsp, 0x58; pop rbp; ret; 
0x000000000044ced3: add byte ptr [rax], al; call 0x4c4c0; add rsp, 0x30; pop rbp; nop; ret; 
0x000000000044cfd8: add byte ptr [rax], al; call 0x4c4c0; add rsp, 0x30; pop rbp; ret; 
0x00000000004343d8: add byte ptr [rax], al; call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x0000000000419d3e: add byte ptr [rax], al; call 0x4f520; add rsp, 0x50; pop rbp; ret; 
0x0000000000451a40: add byte ptr [rax], al; call 0x51b20; add rsp, 0x68; pop rbp; ret; 
0x0000000000452ba1: add byte ptr [rax], al; call 0x52be0; add rsp, 0x28; pop rbp; ret; 
0x0000000000456140: add byte ptr [rax], al; call 0x55e20; add rsp, 0x120; pop rbp; ret; 
0x00000000004618a3: add byte ptr [rax], al; call 0x598e0; add rsp, 0x18; pop rbp; ret; 
0x00000000004059cb: add byte ptr [rax], al; call 0x59e0; add rsp, 0x18; pop rbp; ret; 
0x00000000004615b2: add byte ptr [rax], al; call 0x59f40; add rsp, 0x18; pop rbp; ret; 
0x00000000004626b1: add byte ptr [rax], al; call 0x5a020; add rsp, 8; pop rbp; ret; 
0x000000000045afed: add byte ptr [rax], al; call 0x5cde0; ret; 
0x0000000000403711: add byte ptr [rax], al; call 0x5ce60; add rsp, 0x18; pop rbp; ret; 
0x00000000004662c9: add byte ptr [rax], al; call 0x5d320; add rsp, 0x690; pop rbp; ret; 
0x0000000000412563: add byte ptr [rax], al; call 0x5d9c0; add rsp, 0xa8; pop rbp; ret; 
0x000000000045b01d: add byte ptr [rax], al; call 0x5e5e0; call 0x5cde0; ret; 
0x00000000004617de: add byte ptr [rax], al; call 0x61520; add rsp, 8; pop rbp; ret; 
0x000000000047cfaf: add byte ptr [rax], al; call 0x63680; add rsp, 0x110; pop rbp; ret; 
0x000000000046561e: add byte ptr [rax], al; call 0x65860; add rsp, 0x120; pop rbp; ret; 
0x0000000000465bf1: add byte ptr [rax], al; call 0x65c80; add rsp, 0x3d0; pop rbp; ret; 
0x0000000000467b7e: add byte ptr [rax], al; call 0x68040; add rsp, 0x88; pop rbp; ret; 
0x0000000000466bf2: add byte ptr [rax], al; call 0x68820; add rsp, 0x50; pop rbp; ret; 
0x000000000046a59e: add byte ptr [rax], al; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x000000000047061e: add byte ptr [rax], al; call 0x6d8e0; add rsp, 0x20; pop rbp; ret; 
0x000000000047ad78: add byte ptr [rax], al; call 0x6fca0; mov rcx, qword ptr [rax + 0xf8]; mov rax, rbx; call rcx; 
0x00000000004792b5: add byte ptr [rax], al; call 0x6fca0; mov rcx, rax; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000471726: add byte ptr [rax], al; call 0x70e00; add rsp, 0x108; pop rbp; ret; 
0x0000000000473f3e: add byte ptr [rax], al; call 0x73500; add rsp, 8; pop rbp; ret; 
0x000000000047447e: add byte ptr [rax], al; call 0x73560; add rsp, 8; pop rbp; ret; 
0x0000000000476b65: add byte ptr [rax], al; call 0x75420; add rsp, 0x70; pop rbp; ret; 
0x00000000004759d1: add byte ptr [rax], al; call 0x756e0; add rsp, 0x18; pop rbp; ret; 
0x0000000000476ba7: add byte ptr [rax], al; call 0x756e0; add rsp, 0x70; pop rbp; ret; 
0x000000000047952d: add byte ptr [rax], al; call 0x77e20; add rsp, 0x88; pop rbp; ret; 
0x000000000047c2fe: add byte ptr [rax], al; call 0x78a40; add rsp, 0x1d0; pop rbp; ret; 
0x000000000047a2f2: add byte ptr [rax], al; call 0x79120; add rsp, 0x90; pop rbp; ret; 
0x000000000047a071: add byte ptr [rax], al; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x0000000000423622: add byte ptr [rax], al; call 0xa400; mov rax, qword ptr [rsp + 0x28]; add rsp, 0xa0; pop rbp; ret; 
0x0000000000436afe: add byte ptr [rax], al; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000041a27e: add byte ptr [rax], al; call 0xa5c0; mov eax, 1; add rsp, 0x28; pop rbp; ret; 
0x000000000044137e: add byte ptr [rax], al; call 0xa660; add rsp, 8; pop rbp; ret; 
0x0000000000441123: add byte ptr [rax], al; call 0xa660; sub rsp, -0x80; pop rbp; ret; 
0x00000000004465c2: add byte ptr [rax], al; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x000000000040e69e: add byte ptr [rax], al; call 0xeb00; add rsp, 0xa8; pop rbp; ret; 
0x000000000045af4d: add byte ptr [rax], al; call rax; 
0x0000000000426fda: add byte ptr [rax], al; call rcx; 
0x000000000042724c: add byte ptr [rax], al; call rdi; 
0x0000000000460767: add byte ptr [rax], al; call rdx; 
0x000000000047c2cf: add byte ptr [rax], al; call rsi; 
0x000000000042d91d: add byte ptr [rax], al; cmove edx, ecx; mov eax, edx; add rsp, 0x2020; pop rbp; ret; 
0x0000000000413feb: add byte ptr [rax], al; cmovne rax, rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000042723b: add byte ptr [rax], al; cmp bh, 0xff; add r11, r9; mov rax, r11; lea rdx, [rsp + 0x110]; call rdi; 
0x0000000000429d1e: add byte ptr [rax], al; cmp rbx, rdx; jbe 0x29d30; mov rax, -1; mov rbx, rsi; ret; 
0x0000000000455302: add byte ptr [rax], al; cmp rcx, rax; jb 0x55456; add rsp, 0x48; pop rbp; ret; 
0x000000000041d45a: add byte ptr [rax], al; cmp rcx, rdx; cmovb rcx, rdx; mov rax, rcx; ret; 
0x0000000000441909: add byte ptr [rax], al; cmp rcx, rdx; jne 0x41916; add rsp, 0x10; pop rbp; ret; 
0x0000000000451b52: add byte ptr [rax], al; cmp rdx, rax; jne 0x51b5f; add rsp, 0x30; pop rbp; ret; 
0x000000000045503e: add byte ptr [rax], al; cmp rsi, rax; jb 0x5519b; add rsp, 0x48; pop rbp; ret; 
0x000000000043baef: add byte ptr [rax], al; inc dword ptr [rax + 0x14]; add rsp, 0x20; pop rbp; ret; 
0x000000000045982d: add byte ptr [rax], al; inc dword ptr [rdx + 0x14]; mov byte ptr [rcx + 0xb7], 0; add rsp, 0x30; pop rbp; ret; 
0x00000000004323d6: add byte ptr [rax], al; ja 0x323e1; add rsp, 0x18; pop rbp; nop; ret; 
0x000000000045b436: add byte ptr [rax], al; ja 0x5b443; lea rax, [rip + 0x39f]; jmp rax; 
0x000000000045b448: add byte ptr [rax], al; ja 0x5b455; lea rax, [rip + 0x44d]; jmp rax; 
0x000000000045b45a: add byte ptr [rax], al; ja 0x5b467; lea rax, [rip + 0x51b]; jmp rax; 
0x000000000045b46c: add byte ptr [rax], al; ja 0x5b479; lea rax, [rip + 0x5e9]; jmp rax; 
0x000000000045b47e: add byte ptr [rax], al; ja 0x5b48b; lea rax, [rip + 0x6b7]; jmp rax; 
0x000000000045b490: add byte ptr [rax], al; ja 0x5b49d; lea rax, [rip + 0x785]; jmp rax; 
0x000000000045b4a2: add byte ptr [rax], al; ja 0x5b4af; lea rax, [rip + 0x853]; jmp rax; 
0x000000000045b4b4: add byte ptr [rax], al; ja 0x5b4c1; lea rax, [rip + 0x921]; jmp rax; 
0x000000000045b4c6: add byte ptr [rax], al; ja 0x5b4d3; lea rax, [rip + 0x9ef]; jmp rax; 
0x000000000045b543: add byte ptr [rax], al; ja 0x5b551; lea rax, [rip + 0xf91]; jmp rax; 
0x000000000045b5d3: add byte ptr [rax], al; ja 0x5b5e1; lea rax, [rip + 0x1601]; jmp rax; 
0x00000000004224b2: add byte ptr [rax], al; jae 0x224c1; mov rax, qword ptr [rdx + rax*8 + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x0000000000456d26: add byte ptr [rax], al; jbe 0x56db2; lea rbx, [rcx + 3]; add rsp, 0x10; pop rbp; ret; 
0x0000000000415b76: add byte ptr [rax], al; je 0x15b82; xor eax, eax; add rsp, 8; pop rbp; ret; 
0x0000000000415ce0: add byte ptr [rax], al; je 0x15cec; mov qword ptr [rsi + 0x10], -0x522; add rsp, 0x88; pop rbp; ret; 
0x0000000000421fc0: add byte ptr [rax], al; je 0x21fc9; call 0x50a40; add rsp, 0x10; pop rbp; ret; 
0x000000000042340c: add byte ptr [rax], al; je 0x23418; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x60; pop rbp; ret; 
0x000000000042f973: add byte ptr [rax], al; je 0x2f97f; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x60; pop rbp; ret; 
0x000000000040307d: add byte ptr [rax], al; je 0x301d; xor rax, rax; ret; 
0x0000000000431896: add byte ptr [rax], al; je 0x318a2; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x00000000004318eb: add byte ptr [rax], al; je 0x318f7; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x000000000043192d: add byte ptr [rax], al; je 0x31939; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x0000000000431957: add byte ptr [rax], al; je 0x31963; mov qword ptr [r14 + 0x10], -0x522; mov eax, 1; ret; 
0x000000000043412d: add byte ptr [rax], al; je 0x34139; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x60; pop rbp; ret; 
0x0000000000434f2b: add byte ptr [rax], al; je 0x34f37; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x40; pop rbp; ret; 
0x0000000000435d6b: add byte ptr [rax], al; je 0x35d77; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x0000000000436a25: add byte ptr [rax], al; je 0x36a31; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x58; pop rbp; ret; 
0x000000000043758b: add byte ptr [rax], al; je 0x37597; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x00000000004375c3: add byte ptr [rax], al; je 0x375cf; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x0000000000437777: add byte ptr [rax], al; je 0x37783; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x00000000004377c5: add byte ptr [rax], al; je 0x377d1; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x0000000000437bd2: add byte ptr [rax], al; je 0x37bde; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x40; pop rbp; ret; 
0x0000000000437c1b: add byte ptr [rax], al; je 0x37c27; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x40; pop rbp; ret; 
0x0000000000437c6b: add byte ptr [rax], al; je 0x37c77; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x40; pop rbp; ret; 
0x00000000004380f6: add byte ptr [rax], al; je 0x38102; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x000000000043814c: add byte ptr [rax], al; je 0x38158; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x000000000043bf5f: add byte ptr [rax], al; je 0x3bf68; call 0x38040; add rsp, 0x18; pop rbp; ret; 
0x000000000043c2c0: add byte ptr [rax], al; je 0x3c2cc; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x28; pop rbp; ret; 
0x000000000043e5ca: add byte ptr [rax], al; je 0x3e5b6; add rsp, 0x50; pop rbp; ret; 
0x0000000000442693: add byte ptr [rax], al; je 0x4269f; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x10; pop rbp; ret; 
0x00000000004500eb: add byte ptr [rax], al; je 0x500f7; mov qword ptr [r14 + 0x10], -0x522; add rsp, 8; pop rbp; ret; 
0x00000000004508a1: add byte ptr [rax], al; je 0x508ad; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x38; pop rbp; ret; 
0x0000000000450fc1: add byte ptr [rax], al; je 0x50fcd; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x38; pop rbp; ret; 
0x0000000000457cc5: add byte ptr [rax], al; je 0x57cd1; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x000000000045dd63: add byte ptr [rax], al; je 0x5dd6d; mov rcx, rbx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040a605: add byte ptr [rax], al; je 0xa611; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x10; pop rbp; ret; 
0x000000000040bbb8: add byte ptr [rax], al; je 0xbbc4; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x58; pop rbp; ret; 
0x0000000000414333: add byte ptr [rax], al; jg 0x1433d; add rsp, 0x20; pop rbp; ret; 
0x000000000045b40f: add byte ptr [rax], al; jmp rax; 
0x00000000004144eb: add byte ptr [rax], al; jne 0x144f5; add rsp, 0x20; pop rbp; ret; 
0x000000000041a857: add byte ptr [rax], al; jne 0x1a869; mov rax, qword ptr [rsp + 0x40]; add rsp, 0x328; pop rbp; ret; 
0x000000000042ed2b: add byte ptr [rax], al; jne 0x2ed35; add rsp, 0x10; pop rbp; ret; 
0x000000000042edaa: add byte ptr [rax], al; jne 0x2edb4; add rsp, 0x10; pop rbp; ret; 
0x0000000000433827: add byte ptr [rax], al; jne 0x3384c; mov rax, qword ptr [rip + 0x6aa6e]; lea rdx, [rip + 0x6aa67]; call rax; 
0x000000000043a22f: add byte ptr [rax], al; jne 0x3a065; call 0x385c0; add rsp, 0x28; pop rbp; ret; 
0x000000000043c34d: add byte ptr [rax], al; jne 0x3c35c; xor eax, eax; add rsp, 0x210; pop rbp; ret; 
0x000000000043cd37: add byte ptr [rax], al; jne 0x3cd44; add rsp, 0x3a0; pop rbp; ret; 
0x0000000000445d28: add byte ptr [rax], al; jne 0x45d34; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000463627: add byte ptr [rax], al; jne 0x635eb; mov rax, rcx; add rsp, 0x30; pop rbp; ret; 
0x000000000040a9e0: add byte ptr [rax], al; jne 0xa9ef; call 0xa800; add rsp, 0x10; pop rbp; ret; 
0x00000000004701ac: add byte ptr [rax], al; lea r12, [rsp + 0x28]; call 0x5b340; add rsp, 0x138; pop rbp; ret; 
0x0000000000410075: add byte ptr [rax], al; lea rax, [rip + 0x141662]; add rsp, 0x58; pop rbp; ret; 
0x0000000000406ede: add byte ptr [rax], al; lea rax, [rip + 0x97421]; call 0x5b0a0; add rsp, 0x18; pop rbp; ret; 
0x0000000000454ae2: add byte ptr [rax], al; lea rax, [rsp + 0x28]; call 0x54d20; add rsp, 0x60; pop rbp; ret; 
0x0000000000444f90: add byte ptr [rax], al; lea rax, [rsp + 0x48]; call 0x44020; add rsp, 0x58; pop rbp; ret; 
0x0000000000456ca7: add byte ptr [rax], al; lea rbx, [rcx + 2]; add rsp, 0x10; pop rbp; ret; 
0x0000000000456d2c: add byte ptr [rax], al; lea rbx, [rcx + 3]; add rsp, 0x10; pop rbp; ret; 
0x0000000000479f98: add byte ptr [rax], al; lea rbx, [rip + 0x3b5c7]; mov rcx, qword ptr [rsp + 0x258]; mov edi, dword ptr [rsp + 0x2c]; call rdx; 
0x000000000042c201: add byte ptr [rax], al; lea rcx, [rip + 0x126ace]; call 0xc5e0; add rsp, 0x18; pop rbp; ret; 
0x000000000042cc48: add byte ptr [rax], al; lea rdx, [rip + 0x1237eb]; lock xadd dword ptr [rdx], ecx; add rsp, 8; pop rbp; ret; 
0x000000000041483b: add byte ptr [rax], al; lea rdx, [rip + 0x13bbe0]; lock or dword ptr [rdx], ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000452e02: add byte ptr [rax], al; lea rdx, [rsp + 0x2c8]; call rcx; 
0x000000000045ef2c: add byte ptr [rax], al; lea rsi, [rsp]; mov rax, 0xe4; syscall; 
0x000000000045eed1: add byte ptr [rax], al; lea rsi, [rsp]; mov rax, qword ptr [rip + 0xf1712]; call rax; 
0x000000000045e8b8: add byte ptr [rax], al; lea rsi, [rsp]; mov rax, qword ptr [rip + 0xf1d2b]; cmp rax, 0; je 0x5e905; call rax; 
0x0000000000435aea: add byte ptr [rax], al; lock cmpxchg dword ptr [rcx + 0x90], edx; sete al; add rsp, 0x10; pop rbp; ret; 
0x000000000044d4cd: add byte ptr [rax], al; lock xadd dword ptr [rdx + 0x22a0], eax; add rsp, 0x48; pop rbp; ret; 
0x00000000004090ca: add byte ptr [rax], al; lock xadd qword ptr [rax + 0x500], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090b6: add byte ptr [rax], al; lock xadd qword ptr [rax + 0x508], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090a6: add byte ptr [rax], al; lock xadd qword ptr [rax], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004620d2: add byte ptr [rax], al; lock xadd qword ptr [rax], rcx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000456e19: add byte ptr [rax], al; mov byte ptr [rax], dil; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004692db: add byte ptr [rax], al; mov byte ptr [rbx + rax - 1], dil; add rsp, 0x70; pop rbp; ret; 
0x0000000000465e14: add byte ptr [rax], al; mov byte ptr [rbx + rax - 2], 0x25; mov byte ptr [rbx + rax - 1], r9b; add rsp, 0x58; pop rbp; ret; 
0x0000000000408cf6: add byte ptr [rax], al; mov byte ptr [rip + 0x119d99], 0; add rsp, 0x20; pop rbp; ret; 
0x0000000000476f89: add byte ptr [rax], al; mov byte ptr [rsi + 0xe], dl; add rsp, 0xd8; pop rbp; ret; 
0x000000000043384a: add byte ptr [rax], al; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x88]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004740c0: add byte ptr [rax], al; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000452dd4: add byte ptr [rax], al; mov byte ptr [rsp + 0x2f8], sil; mov rcx, qword ptr [rsp + 0x2c8]; xor eax, eax; lea rdx, [rsp + 0x2c8]; call rcx; 
0x000000000043e27d: add byte ptr [rax], al; mov dword ptr [rax + 4], 0; add rsp, 0x38; pop rbp; ret; 
0x000000000043d65d: add byte ptr [rax], al; mov dword ptr [rax + 4], 4; add rsp, 0x58; pop rbp; ret; 
0x000000000042d7d5: add byte ptr [rax], al; mov dword ptr [rax], 0x1006; add rsp, 0x48; pop rbp; ret; 
0x000000000040cdd0: add byte ptr [rax], al; mov dword ptr [rsi + 0xc], eax; mov rax, rsi; add rsp, 0x10; pop rbp; ret; 
0x000000000045e70e: add byte ptr [rax], al; mov eax, 0x23; syscall; 
0x000000000045e70e: add byte ptr [rax], al; mov eax, 0x23; syscall; add rsp, 0x10; pop rbp; ret; 
0x000000000045e60e: add byte ptr [rax], al; mov eax, 0x3c; syscall; 
0x000000000044c4f6: add byte ptr [rax], al; mov eax, 0xffffffff; xor ebx, ebx; add rsp, 0xb0; pop rbp; ret; 
0x00000000004394a9: add byte ptr [rax], al; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000431515: add byte ptr [rax], al; mov eax, 1; add rsp, 0x18; pop rbp; ret; 
0x000000000043b94f: add byte ptr [rax], al; mov eax, 1; add rsp, 0x38; pop rbp; ret; 
0x0000000000405126: add byte ptr [rax], al; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x000000000040628a: add byte ptr [rax], al; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x0000000000452dfd: add byte ptr [rax], al; mov eax, 1; lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000405a57: add byte ptr [rax], al; mov eax, 1; xor ebx, ebx; add rsp, 0x68; pop rbp; ret; 
0x000000000044ff57: add byte ptr [rax], al; mov eax, eax; add rsp, 0x38; pop rbp; ret; 
0x00000000004629f3: add byte ptr [rax], al; mov ebx, 1; add rsp, 0x10; pop rbp; nop; ret; 
0x0000000000462932: add byte ptr [rax], al; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000462c82: add byte ptr [rax], al; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x000000000044a6e7: add byte ptr [rax], al; mov ebx, 1; add rsp, 0x20; pop rbp; ret; 
0x00000000004615ad: add byte ptr [rax], al; mov ecx, 1; call 0x59f40; add rsp, 0x18; pop rbp; ret; 
0x000000000045852d: add byte ptr [rax], al; mov ecx, 2; call 0x35640; add rsp, 0x18; pop rbp; ret; 
0x0000000000435c8d: add byte ptr [rax], al; mov ecx, 2; call 0x35640; add rsp, 0x20; pop rbp; ret; 
0x0000000000451392: add byte ptr [rax], al; mov ecx, edx; call 0x51500; add rsp, 0x1e0; pop rbp; ret; 
0x000000000045e609: add byte ptr [rax], al; mov edi, 0; mov eax, 0x3c; syscall; 
0x0000000000479fa7: add byte ptr [rax], al; mov edi, dword ptr [rsp + 0x2c]; call rdx; 
0x0000000000460ee5: add byte ptr [rax], al; mov edi, ecx; add rsp, 0x28; pop rbp; ret; 
0x000000000046a599: add byte ptr [rax], al; mov esi, 1; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x0000000000434e47: add byte ptr [rax], al; mov qword ptr [r11 + 8], rdx; mov qword ptr [rcx + 0x140], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000043c56b: add byte ptr [rax], al; mov qword ptr [r11], rcx; mov qword ptr [rax], rcx; add rsp, 0x210; pop rbp; ret; 
0x000000000042c643: add byte ptr [rax], al; mov qword ptr [rax + 0x1268], rcx; add rsp, 8; pop rbp; ret; 
0x0000000000461039: add byte ptr [rax], al; mov qword ptr [rax + 0x18], 0; add rsp, 0x10; pop rbp; ret; 
0x0000000000458145: add byte ptr [rax], al; mov qword ptr [rax + 0x190], 0; ret; 
0x000000000043e275: add byte ptr [rax], al; mov qword ptr [rax + 0x38], 0; mov dword ptr [rax + 4], 0; add rsp, 0x38; pop rbp; ret; 
0x000000000045b195: add byte ptr [rax], al; mov qword ptr [rax + 0x68], 0; pop rbp; ret; 
0x000000000042c60c: add byte ptr [rax], al; mov qword ptr [rax + 8], rcx; ret; 
0x000000000045a288: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], 0; mov qword ptr [rbx + 0x30], 0; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x000000000045a280: add byte ptr [rax], al; mov qword ptr [rbx + 0x20], 0; mov qword ptr [rbx + 0x18], 0; mov qword ptr [rbx + 0x30], 0; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x000000000045a290: add byte ptr [rax], al; mov qword ptr [rbx + 0x30], 0; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x0000000000406741: add byte ptr [rax], al; mov qword ptr [rdx + 0x1f68], 0; add rsp, 0x88; pop rbp; ret; 
0x0000000000423c8f: add byte ptr [rax], al; mov qword ptr [rdx + 0xdc8], rbx; add rsp, 0x20; pop rbp; ret; 
0x0000000000453f31: add byte ptr [rax], al; mov qword ptr [rdx], rax; add rsp, 0x1b8; pop rbp; ret; 
0x00000000004158cd: add byte ptr [rax], al; mov qword ptr [rip + 0x10d602], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000045cd97: add byte ptr [rax], al; mov qword ptr [rsp + 0x28], rdx; mov rdi, rbx; mov rcx, rbx; call rax; 
0x000000000045eb99: add byte ptr [rax], al; mov qword ptr [rsp + 0x30], rax; ret; 
0x00000000004308db: add byte ptr [rax], al; mov qword ptr [rsp + 0x68], rax; mov rax, qword ptr [rsp + 0x50]; mov rdx, qword ptr [rax + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000047b459: add byte ptr [rax], al; mov qword ptr [rsp + 0x78], r9; mov rcx, qword ptr [r9 + 0x48]; mov rax, rbx; call rcx; 
0x00000000004208f8: add byte ptr [rax], al; mov rax, -1; add rsp, 0x40; pop rbp; ret; 
0x000000000045edf4: add byte ptr [rax], al; mov rax, 0x9e; syscall; 
0x0000000000406119: add byte ptr [rax], al; mov rax, qword ptr [rbx]; mov qword ptr [rsp + 0x20], rax; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000041e1df: add byte ptr [rax], al; mov rax, qword ptr [rdx]; call rax; 
0x0000000000433857: add byte ptr [rax], al; mov rax, qword ptr [rdx]; call rax; add rsp, 0x90; pop rbp; ret; 
0x0000000000461dda: add byte ptr [rax], al; mov rax, qword ptr [rdx]; nop; call rax; 
0x000000000041803c: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x138f03]; mov qword ptr [rip + 0x10aeb4], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000047c2c7: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x108]; call rsi; 
0x000000000046f7cb: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x0000000000409c63: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; pop rbp; ret; 
0x0000000000436cd6: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x48; pop rbp; ret; 
0x000000000045a1c3: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004195f2: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x30; pop rbp; ret; 
0x0000000000421a43: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x28]; call 0xa580; add rsp, 0x38; pop rbp; ret; 
0x0000000000420a31: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x000000000043a537: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x30]; mov rdx, rsi; call rcx; 
0x000000000045305b: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x1c0; pop rbp; ret; 
0x000000000041920c: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x98; pop rbp; ret; 
0x0000000000455105: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x40]; add rsp, 0x48; pop rbp; ret; 
0x000000000040c12d: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x48]; add rsp, 0x58; pop rbp; ret; 
0x00000000004532e4: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x68]; xor ebx, ebx; add rsp, 0x258; pop rbp; ret; 
0x0000000000424263: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x78]; add rsp, 0x90; pop rbp; ret; 
0x0000000000471c19: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0xb0]; call rcx; 
0x00000000004776ac: add byte ptr [rax], al; mov rax, rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000044d92c: add byte ptr [rax], al; mov rax, rbx; add rsp, 0x28; pop rbp; ret; 
0x000000000046fc2c: add byte ptr [rax], al; mov rax, rbx; call rcx; 
0x0000000000471f83: add byte ptr [rax], al; mov rax, rbx; mov rbx, rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000044368f: add byte ptr [rax], al; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000477fdc: add byte ptr [rax], al; mov rax, rcx; call rdx; 
0x000000000047c960: add byte ptr [rax], al; mov rax, rdi; call rcx; 
0x00000000004687bb: add byte ptr [rax], al; mov rax, rdi; mov rbx, rsi; add rsp, 0x30; pop rbp; ret; 
0x000000000043e554: add byte ptr [rax], al; mov rax, rdx; call 0xa660; add rsp, 0x50; pop rbp; ret; 
0x000000000040c3b4: add byte ptr [rax], al; mov rax, rdx; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000478156: add byte ptr [rax], al; mov rax, rdx; call rcx; 
0x0000000000440716: add byte ptr [rax], al; mov rax, rsi; add rsp, 0x20; pop rbp; ret; 
0x000000000045146d: add byte ptr [rax], al; mov rbp, qword ptr [rbp]; add rsp, 0x1e0; pop rbp; ret; 
0x000000000045a298: add byte ptr [rax], al; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x000000000041e384: add byte ptr [rax], al; mov rbx, qword ptr [rdx]; mov eax, 0x10000; call rbx; 
0x000000000041e0a7: add byte ptr [rax], al; mov rbx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; call rbx; 
0x000000000047c2f6: add byte ptr [rax], al; mov rbx, qword ptr [rsp + 0x140]; call 0x78a40; add rsp, 0x1d0; pop rbp; ret; 
0x000000000047ad70: add byte ptr [rax], al; mov rbx, qword ptr [rsp + 0x160]; call 0x6fca0; mov rcx, qword ptr [rax + 0xf8]; mov rax, rbx; call rcx; 
0x000000000040995b: add byte ptr [rax], al; mov rbx, qword ptr [rsp + 0x38]; add rsp, 0xa0; pop rbp; ret; 
0x0000000000474356: add byte ptr [rax], al; mov rbx, qword ptr [rsp + 0x78]; add rsp, 0xa0; pop rbp; ret; 
0x00000000004326c0: add byte ptr [rax], al; mov rbx, qword ptr [rsp + 0x88]; add rsp, 0x70; pop rbp; ret; 
0x0000000000465332: add byte ptr [rax], al; mov rbx, qword ptr [rsp + 0x88]; mov rcx, qword ptr [rsp + 0x98]; add rsp, 0x120; pop rbp; ret; 
0x000000000046d496: add byte ptr [rax], al; mov rbx, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000403643: add byte ptr [rax], al; mov rbx, rcx; add rsp, 0x40; pop rbp; ret; 
0x000000000045ef12: add byte ptr [rax], al; mov rbx, rdi; add rcx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000046ecbe: add byte ptr [rax], al; mov rbx, rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000410409: add byte ptr [rax], al; mov rbx, rsi; call rcx; 
0x000000000045af46: add byte ptr [rax], al; mov rcx, 0; call rax; 
0x000000000047bcab: add byte ptr [rax], al; mov rcx, qword ptr [rax + 0x50]; mov rax, rbx; mov rbx, rdi; call rcx; 
0x000000000046fc25: add byte ptr [rax], al; mov rcx, qword ptr [rax + 0xf8]; mov rax, rbx; call rcx; 
0x00000000004598c9: add byte ptr [rax], al; mov rcx, qword ptr [rcx + 0xd0]; movsxd rax, dword ptr [rcx]; ret; 
0x000000000041e36b: add byte ptr [rax], al; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000043a52d: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov rbx, qword ptr [rdx + 0x280]; mov rax, qword ptr [rsp + 0x30]; mov rdx, rsi; call rcx; 
0x0000000000446070: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x10]; mov byte ptr [rcx + 0x116], 1; add rsp, 0x30; pop rbp; ret; 
0x00000000004220cd: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rcx + 8], rax; pop rbp; ret; 
0x000000000044fbe3: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rcx], rax; add rsp, 0x18; pop rbp; ret; 
0x0000000000436652: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x10]; xchg dword ptr [rcx + 0x11c], eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000452ddc: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x2c8]; xor eax, eax; lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000452901: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x30]; call 0x52940; add rsp, 0x40; pop rbp; ret; 
0x000000000047171e: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x80]; call 0x70e00; add rsp, 0x108; pop rbp; ret; 
0x000000000046075f: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x90]; call rdx; 
0x000000000046533a: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x98]; add rsp, 0x120; pop rbp; ret; 
0x000000000042e795: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0xb8]; xchg byte ptr [rcx], al; add rsp, 0xc0; pop rbp; ret; 
0x0000000000478704: add byte ptr [rax], al; mov rdi, -1; call 0x76de0; add rsp, 0x28; pop rbp; ret; 
0x000000000044a360: add byte ptr [rax], al; mov rdi, rcx; call 0x4a0e0; add rsp, 0x40; pop rbp; ret; 
0x000000000044a4f3: add byte ptr [rax], al; mov rdi, rcx; call 0x4a0e0; add rsp, 0x60; pop rbp; ret; 
0x000000000044a61d: add byte ptr [rax], al; mov rdi, rcx; call 0x4a0e0; add rsp, 0x70; pop rbp; ret; 
0x0000000000407481: add byte ptr [rax], al; mov rdi, rcx; call 0x4a0e0; add rsp, 0xf8; pop rbp; ret; 
0x000000000044479b: add byte ptr [rax], al; mov rdi, rcx; call 0x6480; add rsp, 0x30; pop rbp; ret; 
0x0000000000440849: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x108]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000479ea6: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rdx + 0x18]; mov rax, qword ptr [rsp + 0x188]; call rdx; 
0x0000000000428753: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0xa8]; add qword ptr [rdx + 0x10128], rax; add rsp, 0x98; pop rbp; ret; 
0x000000000047c2bb: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x78]; mov rsi, qword ptr [rsi + 0xf8]; mov rax, qword ptr [rsp + 0x108]; call rsi; 
0x000000000041d17d: add byte ptr [rax], al; mov rsi, rdi; call 0x4f520; add rsp, 0x30; pop rbp; ret; 
0x0000000000450dcd: add byte ptr [rax], al; mov rsi, rdi; call 0x4f520; add rsp, 0x40; pop rbp; ret; 
0x0000000000450d01: add byte ptr [rax], al; mov rsi, rdi; call 0x4f520; add rsp, 0x58; pop rbp; ret; 
0x000000000047cda6: add byte ptr [rax], al; mov rsi, rdi; call 0x77a00; add rsp, 0x58; pop rbp; ret; 
0x0000000000403a49: add byte ptr [rax], al; movabs rdx, 0x52ef6bbb8f63bf; imul rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000045b303: add byte ptr [rax], al; movq qword ptr [r12 + 0xa0], xmm11; movq qword ptr [r12 + 0xa8], xmm12; movq qword ptr [r12 + 0xb0], xmm13; movq qword ptr [r12 + 0xb8], xmm14; ret; 
0x000000000045b30d: add byte ptr [rax], al; movq qword ptr [r12 + 0xa8], xmm12; movq qword ptr [r12 + 0xb0], xmm13; movq qword ptr [r12 + 0xb8], xmm14; ret; 
0x000000000045b317: add byte ptr [rax], al; movq qword ptr [r12 + 0xb0], xmm13; movq qword ptr [r12 + 0xb8], xmm14; ret; 
0x000000000045b321: add byte ptr [rax], al; movq qword ptr [r12 + 0xb8], xmm14; ret; 
0x000000000045b3d7: add byte ptr [rax], al; movq xmm13, qword ptr [r12 + 0xb0]; movq xmm14, qword ptr [r12 + 0xb8]; ret; 
0x000000000045b3e1: add byte ptr [rax], al; movq xmm14, qword ptr [r12 + 0xb8]; ret; 
0x00000000004598d0: add byte ptr [rax], al; movsxd rax, dword ptr [rcx]; ret; 
0x0000000000449608: add byte ptr [rax], al; movsxd rax, eax; shl rax, 3; add rsp, 8; pop rbp; ret; 
0x0000000000473ce9: add byte ptr [rax], al; movups xmmword ptr [rsp + 0x60], xmm15; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000405e6b: add byte ptr [rax], al; movzx ebx, byte ptr [rsp + 0x2f]; add rsp, 0x68; pop rbp; ret; 
0x000000000040eb9a: add byte ptr [rax], al; movzx ecx, byte ptr [rax + 8]; and ecx, 0xfffffff7; mov byte ptr [rax + 8], cl; pop rbp; ret; 
0x0000000000411879: add byte ptr [rax], al; nop dword ptr [rax + rax]; call 0x11a40; add rsp, 0x68; pop rbp; ret; 
0x0000000000405439: add byte ptr [rax], al; nop dword ptr [rax + rax]; call 0x34e80; add rsp, 0x18; pop rbp; ret; 
0x0000000000459f99: add byte ptr [rax], al; nop dword ptr [rax + rax]; call 0x42b60; add rsp, 0x28; pop rbp; ret; 
0x0000000000459f1a: add byte ptr [rax], al; nop dword ptr [rax]; call 0x42b60; add rsp, 0x28; pop rbp; ret; 
0x0000000000453ffa: add byte ptr [rax], al; nop dword ptr [rax]; call 0x51dc0; add rsp, 0x198; pop rbp; ret; 
0x000000000046e27a: add byte ptr [rax], al; nop dword ptr [rax]; call 0x61820; add rsp, 0x600; pop rbp; ret; 
0x000000000046a57a: add byte ptr [rax], al; nop dword ptr [rax]; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x000000000040a67c: add byte ptr [rax], al; nop; call 0x2d740; add rsp, 0x18; pop rbp; ret; 
0x00000000004321bc: add byte ptr [rax], al; nop; call 0x34e80; add rsp, 0x40; pop rbp; ret; 
0x000000000042c4d6: add byte ptr [rax], al; nop; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000040c39c: add byte ptr [rax], al; nop; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x000000000042cb70: add byte ptr [rax], al; nop; mov qword ptr [rax], rcx; ret; 
0x000000000044a9dd: add byte ptr [rax], al; nop; ret; 
0x000000000044a9c0: add byte ptr [rax], al; or byte ptr [rax + 0x39], 0xd6; jbe 0x4a9cd; xor eax, eax; xor ebx, ebx; ret; 
0x000000000045b50c: add byte ptr [rax], al; or byte ptr [rax], al; ja 0x5b51b; lea rax, [rip + 0xd27]; jmp rax; 
0x000000000045ed47: add byte ptr [rax], al; or byte ptr [rax], al; mov eax, 0x38; syscall; 
0x000000000045c2e5: add byte ptr [rax], al; or byte ptr [rax], al; pop rbp; ret; 
0x000000000042995f: add byte ptr [rax], al; or byte ptr [rax], al; ret; 
0x000000000045b59d: add byte ptr [rax], al; or byte ptr [rdi + 9], dh; lea rax, [rip + 0x1397]; jmp rax; 
0x00000000004203af: add byte ptr [rax], al; or byte ptr [rdi], 0x83; sgdt [rax]; add byte ptr [rbp - 0x76b700b6], cl; ret; 
0x000000000041daf8: add byte ptr [rax], al; or byte ptr [rdi], 0x94; ret; 
0x000000000045afe7: add byte ptr [rax], al; pop rax; call 0x5b060; call 0x5cde0; ret; 
0x00000000004171fc: add byte ptr [rax], al; pop rbp; nop; ret; 
0x000000000040174b: add byte ptr [rax], al; pop rbp; ret; 
0x000000000045e52a: add byte ptr [rax], al; popfq; pop rbp; ret; 
0x0000000000402746: add byte ptr [rax], al; ret; 
0x000000000043559a: add byte ptr [rax], al; sete al; add rsp, 0x10; pop rbp; ret; 
0x000000000045cf35: add byte ptr [rax], al; sete byte ptr [rsp + 8]; ret; 
0x0000000000469a97: add byte ptr [rax], al; setne al; add rsp, 0x10; pop rbp; ret; 
0x0000000000452656: add byte ptr [rax], al; shl ebx, cl; test dl, bl; setne al; nop; ret; 
0x0000000000440f03: add byte ptr [rax], al; sub rsp, -0x80; pop rbp; ret; 
0x000000000045e5e7: add byte ptr [rax], al; syscall; 
0x000000000045e713: add byte ptr [rax], al; syscall; add rsp, 0x10; pop rbp; ret; 
0x000000000045ed4e: add byte ptr [rax], al; syscall; cmp rax, 0; je 0x5ed5d; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000045e827: add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000045e6cc: add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x18], eax; ret; 
0x000000000045e691: add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e977: add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x28], eax; ret; 
0x000000000045ecdf: add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000045e723: add byte ptr [rax], al; syscall; mov dword ptr [rsp + 8], eax; ret; 
0x000000000045e7a3: add byte ptr [rax], al; syscall; mov qword ptr [rsp + 8], rax; ret; 
0x000000000045e5e7: add byte ptr [rax], al; syscall; ret; 
0x00000000004155ad: add byte ptr [rax], al; test al, al; je 0x155b9; add rsp, 0x28; pop rbp; ret; 
0x000000000044002b: add byte ptr [rax], al; test al, al; je 0x40002; add rsp, 0x20; pop rbp; ret; 
0x0000000000444303: add byte ptr [rax], al; test al, al; je 0x4430f; add rsp, 8; pop rbp; ret; 
0x0000000000426d24: add byte ptr [rax], al; test bl, bl; je 0x26d30; add rsp, 0x10; pop rbp; ret; 
0x000000000041c25e: add byte ptr [rax], al; test byte ptr [rax], al; add qword ptr [rax + 0x1250], rdi; add rsp, 0x10; pop rbp; ret; 
0x0000000000461a43: add byte ptr [rax], al; test rax, rax; je 0x619f1; add rsp, 0x28; pop rbp; ret; 
0x0000000000461b0c: add byte ptr [rax], al; test rax, rax; je 0x61abe; add rsp, 0x28; pop rbp; ret; 
0x00000000004707a9: add byte ptr [rax], al; test rax, rax; setl al; add rsp, 0x30; pop rbp; ret; 
0x00000000004333d5: add byte ptr [rax], al; test rdx, rdx; je 0x333f4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x00000000004363e7: add byte ptr [rax], al; test rdx, rdx; je 0x363ff; mov rax, qword ptr [rdx]; call rax; 
0x000000000042e79d: add byte ptr [rax], al; xchg byte ptr [rcx], al; add rsp, 0xc0; pop rbp; ret; 
0x0000000000418838: add byte ptr [rax], al; xchg byte ptr [rcx], dl; mov ecx, dword ptr [rip + 0x13b4b6]; inc ecx; xchg dword ptr [rax + 0x48], ecx; ret; 
0x0000000000440044: add byte ptr [rax], al; xchg dword ptr [rax + 0x194], edx; add rsp, 0x20; pop rbp; ret; 
0x0000000000461790: add byte ptr [rax], al; xchg dword ptr [rax], ecx; ret; 
0x0000000000402723: add byte ptr [rax], al; xgetbv; mov dword ptr [rsp + 8], eax; mov dword ptr [rsp + 0xc], edx; ret; 
0x0000000000402691: add byte ptr [rax], al; xor byte ptr [rbx + 6], 0x48; add esp, 0x50; pop rbp; ret; 
0x0000000000456214: add byte ptr [rax], al; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x00000000004314c3: add byte ptr [rax], al; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x000000000044e7f8: add byte ptr [rax], al; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000463f34: add byte ptr [rax], al; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000409136: add byte ptr [rax], al; xor eax, eax; add rsp, 0x38; pop rbp; nop; ret; 
0x0000000000404ea3: add byte ptr [rax], al; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000042115d: add byte ptr [rax], al; xor eax, eax; add rsp, 0xf8; pop rbp; ret; 
0x000000000043648c: add byte ptr [rax], al; xor eax, eax; call 0x44100; add rsp, 8; pop rbp; ret; 
0x0000000000452de4: add byte ptr [rax], al; xor eax, eax; lea rdx, [rsp + 0x2c8]; call rcx; 
0x000000000044c3a3: add byte ptr [rax], al; xor eax, eax; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000041fefc: add byte ptr [rax], al; xor eax, eax; xor ebx, ebx; add rsp, 0x40; pop rbp; ret; 
0x000000000042476b: add byte ptr [rax], al; xor eax, eax; xor ebx, ebx; add rsp, 0x60; pop rbp; ret; 
0x0000000000462a24: add byte ptr [rax], al; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x0000000000462c0f: add byte ptr [rax], al; xor ebx, ebx; add rsp, 0x18; pop rbp; ret; 
0x00000000004397b9: add byte ptr [rax], al; xor ebx, ebx; add rsp, 0x60; pop rbp; ret; 
0x0000000000405a5c: add byte ptr [rax], al; xor ebx, ebx; add rsp, 0x68; pop rbp; ret; 
0x0000000000439143: add byte ptr [rax], al; xor ebx, ebx; mov ecx, ebx; add rsp, 0x100; pop rbp; ret; 
0x0000000000453983: add byte ptr [rax], al; xor ebx, ebx; ret; 
0x000000000044ccf1: add byte ptr [rax], al; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x0000000000431ff8: add byte ptr [rax], al; xor ecx, ecx; add rsp, 0x68; pop rbp; ret; 
0x0000000000437e76: add byte ptr [rax], al; xor ecx, ecx; call 0x37a40; add rsp, 0x18; pop rbp; ret; 
0x0000000000430a2a: add byte ptr [rax], al; xor ecx, ecx; mov qword ptr [rcx], 0; add rsp, 0xa0; pop rbp; ret; 
0x000000000042ec6d: add byte ptr [rax], al; xor ecx, ecx; xchg byte ptr [rax], cl; add rsp, 0xd8; pop rbp; ret; 
0x0000000000453b3f: add byte ptr [rax], al; xor edi, edi; call 0x52940; add rsp, 0x60; pop rbp; ret; 
0x0000000000427f88: add byte ptr [rax], al; xor esi, esi; call 0x26300; add rsp, 0x70; pop rbp; ret; 
0x0000000000457d78: add byte ptr [rax], al; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 8; pop rbp; ret; 
0x000000000045ed48: add byte ptr [rax], cl; add byte ptr [rax + 0x38], bh; syscall; 
0x000000000045ff0f: add byte ptr [rax], cl; add byte ptr [rax], al; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045b47c: add byte ptr [rax], cl; add byte ptr [rax], al; ja 0x5b48b; lea rax, [rip + 0x6b7]; jmp rax; 
0x000000000045abfe: add byte ptr [rax], cl; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004495a8: add byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x000000000045b50d: add byte ptr [rax], cl; add byte ptr [rdi + 9], dh; lea rax, [rip + 0xd27]; jmp rax; 
0x000000000045b59e: add byte ptr [rax], cl; ja 0x5b5ab; lea rax, [rip + 0x1397]; jmp rax; 
0x000000000045c9e7: add byte ptr [rax], cl; pop rbp; ret; 
0x000000000041224d: add byte ptr [rax], dl; add byte ptr [rax - 0x7d], cl; ret 0x48c0; 
0x000000000045b48e: add byte ptr [rax], dl; add byte ptr [rax], al; ja 0x5b49d; lea rax, [rip + 0x785]; jmp rax; 
0x000000000042c60a: add byte ptr [rax], dl; add byte ptr [rax], al; mov qword ptr [rax + 8], rcx; ret; 
0x000000000045ac62: add byte ptr [rax], dl; add byte ptr [rax], al; pop rbp; ret; 
0x000000000045b51f: add byte ptr [rax], dl; add byte ptr [rdi + 9], dh; lea rax, [rip + 0xdf5]; jmp rax; 
0x000000000045b5b0: add byte ptr [rax], dl; ja 0x5b5bd; lea rax, [rip + 0x1465]; jmp rax; 
0x000000000045cac7: add byte ptr [rax], dl; pop rbp; ret; 
0x000000000044acbc: add byte ptr [rax], r8b; add rsp, 0x18; pop rbp; ret; 
0x000000000041187d: add byte ptr [rax], r8b; call 0x11a40; add rsp, 0x68; pop rbp; ret; 
0x00000000004159fd: add byte ptr [rax], r8b; call 0x1e4c0; add rsp, 8; pop rbp; ret; 
0x0000000000415a5d: add byte ptr [rax], r8b; call 0x20640; add rsp, 8; pop rbp; ret; 
0x000000000042ad7d: add byte ptr [rax], r8b; call 0x2ada0; add rsp, 0x20; pop rbp; ret; 
0x000000000042425d: add byte ptr [rax], r8b; call 0x2c4a0; mov rax, qword ptr [rsp + 0x78]; add rsp, 0x90; pop rbp; ret; 
0x000000000040543d: add byte ptr [rax], r8b; call 0x34e80; add rsp, 0x18; pop rbp; ret; 
0x000000000043aa5d: add byte ptr [rax], r8b; call 0x351a0; call 0x3a000; add rsp, 0x50; pop rbp; ret; 
0x000000000043633d: add byte ptr [rax], r8b; call 0x364c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000459f9d: add byte ptr [rax], r8b; call 0x42b60; add rsp, 0x28; pop rbp; ret; 
0x000000000042ddfd: add byte ptr [rax], r8b; call 0x4740; add rsp, 0x40; pop rbp; ret; 
0x0000000000419d3d: add byte ptr [rax], r8b; call 0x4f520; add rsp, 0x50; pop rbp; ret; 
0x00000000004617dd: add byte ptr [rax], r8b; call 0x61520; add rsp, 8; pop rbp; ret; 
0x000000000046561d: add byte ptr [rax], r8b; call 0x65860; add rsp, 0x120; pop rbp; ret; 
0x0000000000467b7d: add byte ptr [rax], r8b; call 0x68040; add rsp, 0x88; pop rbp; ret; 
0x000000000047061d: add byte ptr [rax], r8b; call 0x6d8e0; add rsp, 0x20; pop rbp; ret; 
0x0000000000473f3d: add byte ptr [rax], r8b; call 0x73500; add rsp, 8; pop rbp; ret; 
0x000000000047447d: add byte ptr [rax], r8b; call 0x73560; add rsp, 8; pop rbp; ret; 
0x0000000000436afd: add byte ptr [rax], r8b; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000041a27d: add byte ptr [rax], r8b; call 0xa5c0; mov eax, 1; add rsp, 0x28; pop rbp; ret; 
0x000000000040e69d: add byte ptr [rax], r8b; call 0xeb00; add rsp, 0xa8; pop rbp; ret; 
0x000000000045b1ae: add byte ptr [rax], r8b; call rax; 
0x0000000000429d1d: add byte ptr [rax], r8b; cmp rbx, rdx; jbe 0x29d30; mov rax, -1; mov rbx, rsi; ret; 
0x000000000045afe6: add byte ptr [rax], r8b; pop rax; call 0x5b060; call 0x5cde0; ret; 
0x000000000045b062: add byte ptr [rax], r8b; ret; 
0x0000000000433828: add byte ptr [rbp + 0x21], dh; mov rax, qword ptr [rip + 0x6aa6e]; lea rdx, [rip + 0x6aa67]; call rax; 
0x000000000044c14c: add byte ptr [rbp + 0x31], al; shr bl, 0x10; mov rax, rsi; add rsp, 0x28; pop rbp; ret; 
0x000000000046305f: add byte ptr [rbp + 0x38], al; ret; 
0x00000000004766bf: add byte ptr [rbp + 0x39], cl; ret; 
0x0000000000467349: add byte ptr [rbp + 0x440b75db], al; movups xmmword ptr [rax + 0x18], xmm7; add rsp, 0x38; pop rbp; ret; 
0x0000000000423477: add byte ptr [rbp + 0x442875d2], 0x8d; add qword ptr [r9 - 0x77], r9; ret 0xf889; 
0x0000000000419ddf: add byte ptr [rbp + 0x481175c9], al; mov dword ptr [rax + 0x190], 0; add rsp, 0x58; pop rbp; ret; 
0x000000000045eadf: add byte ptr [rbp + 0x481775c9], al; mov ecx, dword ptr [rip + 0xc3bb5]; lea r9, [rip - 0xf2]; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x000000000040a9e1: add byte ptr [rbp + 0xb], dh; call 0xa800; add rsp, 0x10; pop rbp; ret; 
0x000000000043c34e: add byte ptr [rbp + 0xb], dh; xor eax, eax; add rsp, 0x210; pop rbp; ret; 
0x000000000045394b: add byte ptr [rbp + 0xe], dh; cmp qword ptr [rsi], 0; jne 0x5395c; xor eax, eax; mov ebx, 1; ret; 
0x000000000041a858: add byte ptr [rbp + 0xe], dh; mov rax, qword ptr [rsp + 0x40]; add rsp, 0x328; pop rbp; ret; 
0x0000000000449a28: add byte ptr [rbp + 1], cl; ret 0x8341; 
0x000000000042634a: add byte ptr [rbp + 1], cl; ror dword ptr [rcx + rcx*4 - 0x74], 1; and al, 0x90; add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0xc149; 
0x00000000004226f2: add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x00000000004144ec: add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbp; ret; 
0x0000000000445d29: add byte ptr [rbp + 8], dh; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000457812: add byte ptr [rbp + 8], dh; xor eax, eax; add rsp, 0x70; pop rbp; ret; 
0x0000000000453951: add byte ptr [rbp + 8], dh; xor eax, eax; mov ebx, 1; ret; 
0x000000000043cd38: add byte ptr [rbp + 9], dh; add rsp, 0x3a0; pop rbp; ret; 
0x0000000000421fc1: add byte ptr [rbp + rax - 0x18], dh; ja 0x21fb1; add al, byte ptr [rax]; add rsp, 0x10; pop rbp; ret; 
0x000000000045ed55: add byte ptr [rbp + rax - 0x77], dh; and al, 0x30; ret; 
0x00000000004701ad: add byte ptr [rbp + rcx*4 + 0x64], cl; and al, 0x28; call 0x5b340; add rsp, 0x138; pop rbp; ret; 
0x00000000004652be: add byte ptr [rbp + rcx*4 + 4], cl; or ecx, dword ptr [rbp + 0x39]; ret 0x3d73; 
0x0000000000442d9b: add byte ptr [rbp - 0x146f992e], al; add ecx, dword ptr [rax - 0x77]; ret; 
0x000000000043702a: add byte ptr [rbp - 0x17fa8a40], al; sub al, 0; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x000000000045b19e: add byte ptr [rbp - 0x3d], bl; mov rdx, rdi; mov rdi, qword ptr [rdi]; pop rbp; jmp rdi; 
0x0000000000463628: add byte ptr [rbp - 0x40], dh; mov rax, rcx; add rsp, 0x30; pop rbp; ret; 
0x00000000004171fd: add byte ptr [rbp - 0x70], bl; ret; 
0x0000000000420b27: add byte ptr [rbp - 0x72db8a37], 0x72; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000044c465: add byte ptr [rbp - 0x73], cl; sbb byte ptr [r8 - 1], cl; ret; 
0x0000000000440f9c: add byte ptr [rbp - 0x75], cl; pop rax; cmp byte ptr [rcx + 0x29], cl; ret; 
0x000000000044dbc0: add byte ptr [rbp - 0x75], cl; push rsi; xor byte ptr [rcx - 0x77], cl; ret; 
0x00000000004203b7: add byte ptr [rbp - 0x76b700b6], cl; ret; 
0x000000000044fa3e: add byte ptr [rbp - 0x77], cl; fld qword ptr [rcx - 0x7d]; int 0x80; 
0x000000000047809e: add byte ptr [rbp - 0x77], cl; or byte ptr [r8 - 0x77], cl; adc byte ptr [rax - 1], cl; ret; 
0x0000000000452190: add byte ptr [rbp - 0x77], cl; ret 0x8b44; 
0x0000000000426355: add byte ptr [rbp - 0x77], cl; ret 0xc149; 
0x0000000000429218: add byte ptr [rbp - 0x77], cl; ret; 
0x0000000000411979: add byte ptr [rbp - 0x77], cl; ror dword ptr [rcx - 0x7d], cl; ret; 
0x0000000000478bf5: add byte ptr [rbp - 0x7b], cl; sal byte ptr [rdx + rbp*2 + 0x48], 0xff; ret; 
0x0000000000408c9f: add byte ptr [rbp - 0x7c], al; sal byte ptr [rsi + rsi*4 + 0x48], 0x8b; or eax, 0x957bc; mov rax, rsi; lea rdx, [rip + 0x957b2]; call rcx; 
0x00000000004424aa: add byte ptr [rbx + 0x13], bh; ret; 
0x0000000000423c86: add byte ptr [rbx + 0x15], dh; mov rax, qword ptr [rdx + rax*8 + 0xdc8]; mov qword ptr [rdx + 0xdc8], rbx; add rsp, 0x20; pop rbp; ret; 
0x00000000004068e8: add byte ptr [rbx + 0x1d], bh; add rsp, 0x30; pop rbp; ret; 
0x0000000000430666: add byte ptr [rbx + 0x1e], bh; ret; 
0x00000000004744d8: add byte ptr [rbx + 0x20], bh; pop rbp; nop; ret; 
0x00000000004730c6: add byte ptr [rbx + 0x20], bh; ret; 
0x000000000044070f: add byte ptr [rbx + 0x20], dh; xchg dword ptr [rdi + 0x194], edx; mov rax, rsi; add rsp, 0x20; pop rbp; ret; 
0x000000000043e5eb: add byte ptr [rbx + 0x25], bh; call 0x30ee0; add rsp, 0x50; pop rbp; ret; 
0x0000000000404a84: add byte ptr [rbx + 0x481c2444], cl; add esp, 0x28; pop rbp; ret; 
0x000000000045467f: add byte ptr [rbx + 0x67d02f8], al; add rsp, 0x30; pop rbp; ret; 
0x000000000041a5bf: add byte ptr [rbx + 0xb7506fa], al; xor eax, eax; add rsp, 0x328; pop rbp; ret; 
0x00000000004730e6: add byte ptr [rbx + 0xb], bh; ret; 
0x00000000004224b3: add byte ptr [rbx + 0xb], dh; mov rax, qword ptr [rdx + rax*8 + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x000000000046d2ee: add byte ptr [rbx + 0xe], bh; add rsp, 0x128; pop rbp; ret; 
0x000000000046fc65: add byte ptr [rbx + 0xf], bh; add rsp, 0x38; pop rbp; ret; 
0x000000000041fda5: add byte ptr [rbx + 0xf], dh; mov qword ptr [rsi + rax*8 + 0x20], rbx; inc qword ptr [rsi + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x00000000004629f4: add byte ptr [rbx + 1], bh; add rsp, 0x10; pop rbp; nop; ret; 
0x0000000000462933: add byte ptr [rbx + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x0000000000462c83: add byte ptr [rbx + 1], bh; add rsp, 0x18; pop rbp; ret; 
0x000000000044a6e8: add byte ptr [rbx + 1], bh; add rsp, 0x20; pop rbp; ret; 
0x000000000044cbf1: add byte ptr [rbx + 1], bh; add rsp, 0x28; pop rbp; ret; 
0x0000000000432b34: add byte ptr [rbx + 1], bh; call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x000000000044cced: add byte ptr [rbx + 1], bh; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x0000000000432cdc: add byte ptr [rbx + 3], bh; call 0x331a0; add rsp, 0x28; pop rbp; ret; 
0x000000000046c00c: add byte ptr [rbx + 4], bh; add rsp, 0x28; pop rbp; ret; 
0x0000000000432c52: add byte ptr [rbx + 4], bh; call 0x331a0; add rsp, 0x28; pop rbp; ret; 
0x000000000040ab27: add byte ptr [rbx + 4], bh; ret; 
0x0000000000432bcd: add byte ptr [rbx + 5], bh; call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x00000000004527ce: add byte ptr [rbx + 5], bh; call 0x331a0; call 0x32980; add rsp, 0x40; pop rbp; ret; 
0x000000000046c04a: add byte ptr [rbx + 6], bh; add rsp, 0x28; pop rbp; ret; 
0x000000000040ab34: add byte ptr [rbx + 7], bh; ret; 
0x000000000040ab01: add byte ptr [rbx + 8], bh; ret; 
0x0000000000425447: add byte ptr [rbx + rax + 0x40c38148], al; adc al, byte ptr [rax]; add dh, dh; ret 0x7501; 
0x0000000000439d45: add byte ptr [rbx + rcx - 0x17], dh; jne 0x39d4d; add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x000000000046a72b: add byte ptr [rbx + rcx*4 + 0x40], cl; adc byte ptr [rax - 0x75], cl; pop rax; or byte ptr [rax - 1], cl; ret; 
0x000000000047b808: add byte ptr [rbx + rcx*4 + 0x48], cl; adc byte ptr [rbx + rcx*4 + 0x50], cl; or byte ptr [rcx - 1], cl; ret 0x8b4c; 
0x00000000004746ed: add byte ptr [rbx + rcx*4 + 5], cl; ret; 
0x0000000000449ac6: add byte ptr [rbx + rcx*4 - 0x64], cl; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0xc2e9; 
0x0000000000449b8d: add byte ptr [rbx + rcx*4 - 0x64], cl; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0xc984; 
0x000000000047c176: add byte ptr [rbx + rcx*4 - 0x74], cl; and al, 0x60; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000047bf8d: add byte ptr [rbx + rcx*4 - 0x74], cl; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000047b1ff: add byte ptr [rbx + rcx*4 - 0x74], cl; and al, 0xf0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000047b88a: add byte ptr [rbx + rcx*4 - 0x7c], cl; and al, 8; add al, byte ptr [rax]; add byte ptr [rcx - 0x77], cl; fimul dword ptr [rcx - 0x77]; ret; 
0x0000000000418f0f: add byte ptr [rbx + rdx + 0x48], dh; lea eax, [rdx + 1]; mov qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x00000000004413ff: add byte ptr [rbx - 0x4d8bf408], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000454657: add byte ptr [rbx - 0x6bf0f906], al; ret 0x9066; 
0x0000000000438cc0: add byte ptr [rbx - 0x6bf0fe06], al; ret 0xd284; 
0x000000000044be4d: add byte ptr [rbx - 0x76b70ffc], cl; test byte ptr [rax + rbx*4], ah; add byte ptr [rax], al; add al, ch; ret 0xfe6a; 
0x000000000042a548: add byte ptr [rbx - 0x7ccbdbac], cl; ret 0x4802; 
0x000000000042642e: add byte ptr [rbx], 0; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000452e48: add byte ptr [rbx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000451393: add byte ptr [rcx + 0x165e8d1], cl; add byte ptr [rax], al; add rsp, 0x1e0; pop rbp; ret; 
0x0000000000434414: add byte ptr [rcx + 0x1c], bh; call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x000000000044acb4: add byte ptr [rcx + 0x33], bh; call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x0000000000420b1f: add byte ptr [rcx + 0xe181ca], cl; add byte ptr [rax], al; add byte ptr [rbp - 0x72db8a37], 0x72; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000042346f: add byte ptr [rcx + 0xe281d7], cl; add byte ptr [rax], al; add byte ptr [rbp + 0x442875d2], 0x8d; add qword ptr [r9 - 0x77], r9; ret 0xf889; 
0x000000000041daf4: add byte ptr [rcx + 0xf9], al; or byte ptr [rdi], 0x94; ret; 
0x0000000000467e03: add byte ptr [rcx + 0xf], al; mov edx, 0x930f00e2; ret; 
0x0000000000465768: add byte ptr [rcx + 0xf], al; pushfq; ret; 
0x000000000046617c: add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x3eb; 
0x0000000000439814: add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x8445; 
0x00000000004396d6: add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x9eb; 
0x000000000045f06b: add byte ptr [rcx + 0xf], bh; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x0000000000456d9f: add byte ptr [rcx + 0xffffffa], al; add byte ptr [rdi + 0xa], dh; lea rbx, [rcx + 4]; add rsp, 0x10; pop rbp; ret; 
0x000000000044703d: add byte ptr [rcx + 1], bh; call 0x24840; add rsp, 0x28; pop rbp; ret; 
0x00000000004615ae: add byte ptr [rcx + 1], bh; call 0x59f40; add rsp, 0x18; pop rbp; ret; 
0x000000000045852e: add byte ptr [rcx + 2], bh; call 0x35640; add rsp, 0x18; pop rbp; ret; 
0x0000000000435c8e: add byte ptr [rcx + 2], bh; call 0x35640; add rsp, 0x20; pop rbp; ret; 
0x00000000004759cd: add byte ptr [rcx + 5], bh; call 0x756e0; add rsp, 0x18; pop rbp; ret; 
0x0000000000404572: add byte ptr [rcx + rax + 0x68918b48], al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000042e736: add byte ptr [rcx + rcx + 0x48], dh; add esp, 0xc0; pop rbp; ret; 
0x0000000000476745: add byte ptr [rcx + rcx + 0x48], dh; mov ebx, dword ptr [rax + 0x18]; call 0x752a0; add rsp, 0x60; pop rbp; ret; 
0x000000000047b45a: add byte ptr [rcx + rcx*4 + 0x4c], cl; and al, 0x78; mov rcx, qword ptr [r9 + 0x48]; mov rax, rbx; call rcx; 
0x0000000000455b57: add byte ptr [rcx + rcx*4 - 0x64], cl; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx - 0x75], al; adc byte ptr [r8 - 0x77], cl; ret; 
0x000000000045ed0f: add byte ptr [rcx - 0x39], cl; ret 0; 
0x00000000004076c5: add byte ptr [rcx - 0x48], al; sldt word ptr [rax]; add bl, ch; add ecx, dword ptr [rax - 1]; ret 0x3949; 
0x0000000000455b5f: add byte ptr [rcx - 0x75], al; adc byte ptr [r8 - 0x77], cl; ret; 
0x0000000000466c79: add byte ptr [rcx - 0x75], cl; adc ecx, dword ptr [rax - 0x7d]; ret 0x48c4; 
0x000000000044d57d: add byte ptr [rcx - 0x75], cl; push rsi; xor byte ptr [rax - 0x77], cl; ret; 
0x0000000000449ace: add byte ptr [rcx - 0x77], al; ret 0xc2e9; 
0x0000000000449b95: add byte ptr [rcx - 0x77], al; ret 0xc984; 
0x000000000043963e: add byte ptr [rcx - 0x77], al; ret; 
0x0000000000478d34: add byte ptr [rcx - 0x77], cl; fimul dword ptr [rcx - 0x77]; ret; 
0x0000000000479813: add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx - 0x77]; ret 0x8b48; 
0x00000000004729bc: add byte ptr [rcx - 0x77], cl; or byte ptr [r8 - 0x77], cl; add eax, 0xac200; pop rbp; ret; 
0x0000000000474f54: add byte ptr [rcx - 0x77], cl; or byte ptr [r8 - 0x77], cl; add eax, 0xad8b0; pop rbp; ret; 
0x0000000000470110: add byte ptr [rcx - 0x77], cl; or byte ptr [r8 - 0x77], cl; add eax, 0xb24ac; add rsp, 0x48; pop rbp; ret; 
0x0000000000462711: add byte ptr [rcx - 0x77], cl; or byte ptr [r8 - 0x77], cl; add eax, 0xbfeb3; add rsp, 0x10; pop rbp; ret; 
0x0000000000458ee1: add byte ptr [rcx - 0x77], cl; or byte ptr [r8 - 0x77], cl; add eax, 0xc9733; pop rbp; ret; 
0x000000000042dc2a: add byte ptr [rcx - 0x77], cl; or byte ptr [r8 - 0x77], cl; add eax, 0xf4cfa; add rsp, 0x40; pop rbp; ret; 
0x0000000000472f5e: add byte ptr [rcx - 0x77], cl; or byte ptr [r8 - 0x77], cl; or eax, 0xaf86e; pop rbp; ret; 
0x0000000000460921: add byte ptr [rcx - 0x77], cl; or byte ptr [r8 - 0x77], cl; sbb eax, 0xc1e5b; add rsp, 0x18; pop rbp; ret; 
0x00000000004052ef: add byte ptr [rcx - 0x77], cl; or ecx, dword ptr [rax - 0x39]; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004234a9: add byte ptr [rcx - 0x77], cl; ret 0x7c89; 
0x00000000004074af: add byte ptr [rcx - 0x77], cl; ret 0x8949; 
0x000000000047bf95: add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x0000000000412196: add byte ptr [rcx - 0x77], cl; ret 0xc149; 
0x0000000000470f1e: add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004119b3: add byte ptr [rcx - 0x7d], cl; ret 0x9008; 
0x0000000000411759: add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000045ed3f: add byte ptr [rcx - 0x7d], cl; ror byte ptr [rax], 0x48; or edi, 0x80000; mov eax, 0x38; syscall; 
0x000000000047724a: add byte ptr [rcx - 0x80], al; call qword ptr [rax + 0xf]; 
0x000000000047724a: add byte ptr [rcx - 0x80], al; call qword ptr [rax + 0xf]; test byte ptr [rdx], ah; add dword ptr [rax], eax; add byte ptr [rcx - 0x80], al; jmp qword ptr [rbp + 0xf]; 
0x0000000000477254: add byte ptr [rcx - 0x80], al; jmp qword ptr [rbp + 0xf]; 
0x0000000000471667: add byte ptr [rcx - 0xa], al; ret 0x4d20; 
0x000000000045169f: add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000046dddf: add byte ptr [rcx - 0xa], al; ret; 
0x00000000004014d6: add byte ptr [rcx - 1], cl; ret 0x8949; 
0x000000000041a8fe: add byte ptr [rcx - 9], al; fimul dword ptr [rcx + 0x63]; ret 0x894c; 
0x000000000046ecbc: add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; sti; add rsp, 0x18; pop rbp; ret; 
0x000000000040112b: add byte ptr [rcx], al; add al, ch; in eax, dx; ret 5; 
0x0000000000427c09: add byte ptr [rcx], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041c8b9: add byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x000000000042f884: add byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x000000000045b446: add byte ptr [rcx], al; add byte ptr [rax], al; ja 0x5b455; lea rax, [rip + 0x44d]; jmp rax; 
0x000000000043909a: add byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; nop; ret; 
0x000000000043904c: add byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000045b4d7: add byte ptr [rcx], al; add byte ptr [rdi + 9], dh; lea rax, [rip + 0xabd]; jmp rax; 
0x0000000000419b5c: add byte ptr [rcx], al; add byte ptr [rdi + rcx + 0x4c], cl; ret 0xba; 
0x00000000004572dc: add byte ptr [rcx], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000404303: add byte ptr [rcx], al; add rsp, 0x18; pop rbp; ret; 
0x00000000004165b7: add byte ptr [rcx], al; add rsp, 0x30; pop rbp; ret; 
0x0000000000413bfb: add byte ptr [rcx], al; add rsp, 0x38; pop rbp; ret; 
0x000000000041956b: add byte ptr [rcx], al; add rsp, 0x40; pop rbp; ret; 
0x000000000045b568: add byte ptr [rcx], al; ja 0x5b575; lea rax, [rip + 0x112d]; jmp rax; 
0x000000000044219e: add byte ptr [rcx], al; jg 0x421ab; add rsp, 0x88; pop rbp; ret; 
0x0000000000450989: add byte ptr [rcx], al; movups xmmword ptr [rcx + 0x11e8], xmm15; add rsp, 0x10; pop rbp; ret; 
0x0000000000406e35: add byte ptr [rcx], al; nop; mov qword ptr [rcx + 0xa0], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000045c747: add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000437a29: add byte ptr [rcx], al; ret; 
0x00000000004172e6: add byte ptr [rcx], bh; or eax, 0x139173; jg 0x172b0; add rsp, 0x10; pop rbp; ret; 
0x00000000004578ad: add byte ptr [rcx], bh; sal dword ptr [rax + rcx + 0x31], cl; ror byte ptr [rax - 0x7d], 0xc4; jo 0x57916; ret; 
0x0000000000415bd1: add byte ptr [rcx], ch; rol dword ptr [rbp - 0x3f60f037], 1; add rsp, 8; pop rbp; ret; 
0x0000000000439144: add byte ptr [rcx], dh; fisttp dword ptr [rcx - 0x3b7eb727]; add byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000043908f: add byte ptr [rcx], dh; fstp xword ptr [rcx + 1]; add rsp, 0x100; pop rbp; nop; ret; 
0x0000000000440821: add byte ptr [rcx], dh; imul bl; add rsp, 0x120; pop rbp; ret; 
0x000000000044e8fb: add byte ptr [rcx], dh; jmp qword ptr [rsi - 0x70]; 
0x000000000044ccf2: add byte ptr [rcx], dh; leave; add rsp, 0x58; pop rbp; ret; 
0x0000000000431ff9: add byte ptr [rcx], dh; leave; add rsp, 0x68; pop rbp; ret; 
0x0000000000437e77: add byte ptr [rcx], dh; leave; call 0x37a40; add rsp, 0x18; pop rbp; ret; 
0x0000000000430a2b: add byte ptr [rcx], dh; leave; mov qword ptr [rcx], 0; add rsp, 0xa0; pop rbp; ret; 
0x000000000042ec6e: add byte ptr [rcx], dh; leave; xchg byte ptr [rax], cl; add rsp, 0xd8; pop rbp; ret; 
0x000000000046a49b: add byte ptr [rcx], dh; mul byte ptr [rsi - 0x70]; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x0000000000463f8f: add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xd3; mov rcx, rsi; add rsp, 0x28; pop rbp; ret; 
0x0000000000409137: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; cmp byte ptr [rbp - 0x70], bl; ret; 
0x00000000004276bc: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7f], 0xc4; and byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000044c3a4: add byte ptr [rcx], dh; sal byte ptr [rcx], 0xdb; add rsp, 0x10; pop rbp; ret; 
0x000000000041fefd: add byte ptr [rcx], dh; sal byte ptr [rcx], 0xdb; add rsp, 0x40; pop rbp; ret; 
0x000000000042476c: add byte ptr [rcx], dh; sal byte ptr [rcx], 0xdb; add rsp, 0x60; pop rbp; ret; 
0x000000000042926f: add byte ptr [rcx], dh; sal byte ptr [rcx], 0xdb; mov rcx, rbx; add rsp, 0x58; pop rbp; ret; 
0x000000000044972a: add byte ptr [rcx], dh; sal byte ptr [rcx], 0xdb; xor ecx, ecx; add rsp, 0x78; pop rbp; ret; 
0x000000000044016b: add byte ptr [rcx], dh; shr bl, 0x17; xor eax, eax; add rsp, 0x428; pop rbp; ret; 
0x00000000004563a9: add byte ptr [rcx], dh; shr bl, 0x7e; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x000000000043ce6f: add byte ptr [rcx], dh; shr bl, 9; add rsp, 0x3a0; pop rbp; ret; 
0x000000000043ffaa: add byte ptr [rdi + 0x48c0310a], al; add esp, 8; pop rbp; ret; 
0x0000000000456da5: add byte ptr [rdi + 0xa], dh; lea rbx, [rcx + 4]; add rsp, 0x10; pop rbp; ret; 
0x000000000041e457: add byte ptr [rdi + 0xc], dh; mov rax, rcx; movups xmm0, xmm1; add rsp, 0x20; pop rbp; ret; 
0x000000000040aaf8: add byte ptr [rdi + 0xd], bh; lea rax, [rip + 0x8aec6]; mov ebx, 8; ret; 
0x000000000047cfab: add byte ptr [rdi + 1], bh; call 0x63680; add rsp, 0x110; pop rbp; ret; 
0x000000000045273f: add byte ptr [rdi + 5], bh; add rsp, 0x20; pop rbp; ret; 
0x0000000000414334: add byte ptr [rdi + 6], bh; add rsp, 0x20; pop rbp; ret; 
0x00000000004323d7: add byte ptr [rdi + 7], dh; add rsp, 0x18; pop rbp; nop; ret; 
0x000000000045b557: add byte ptr [rdi + 9], dh; lea rax, [rip + 0x105f]; jmp rax; 
0x000000000045b437: add byte ptr [rdi + 9], dh; lea rax, [rip + 0x39f]; jmp rax; 
0x000000000045b449: add byte ptr [rdi + 9], dh; lea rax, [rip + 0x44d]; jmp rax; 
0x000000000045b45b: add byte ptr [rdi + 9], dh; lea rax, [rip + 0x51b]; jmp rax; 
0x000000000045b46d: add byte ptr [rdi + 9], dh; lea rax, [rip + 0x5e9]; jmp rax; 
0x000000000045b47f: add byte ptr [rdi + 9], dh; lea rax, [rip + 0x6b7]; jmp rax; 
0x000000000045b491: add byte ptr [rdi + 9], dh; lea rax, [rip + 0x785]; jmp rax; 
0x000000000045b4a3: add byte ptr [rdi + 9], dh; lea rax, [rip + 0x853]; jmp rax; 
0x000000000045b4b5: add byte ptr [rdi + 9], dh; lea rax, [rip + 0x921]; jmp rax; 
0x000000000045b4c7: add byte ptr [rdi + 9], dh; lea rax, [rip + 0x9ef]; jmp rax; 
0x000000000045b4d9: add byte ptr [rdi + 9], dh; lea rax, [rip + 0xabd]; jmp rax; 
0x000000000045b4eb: add byte ptr [rdi + 9], dh; lea rax, [rip + 0xb8b]; jmp rax; 
0x000000000045b4fd: add byte ptr [rdi + 9], dh; lea rax, [rip + 0xc59]; jmp rax; 
0x000000000045b50f: add byte ptr [rdi + 9], dh; lea rax, [rip + 0xd27]; jmp rax; 
0x000000000045b521: add byte ptr [rdi + 9], dh; lea rax, [rip + 0xdf5]; jmp rax; 
0x000000000045b533: add byte ptr [rdi + 9], dh; lea rax, [rip + 0xec3]; jmp rax; 
0x000000000045b545: add byte ptr [rdi + 9], dh; lea rax, [rip + 0xf91]; jmp rax; 
0x000000000045b544: add byte ptr [rdi + 9], sil; lea rax, [rip + 0xf91]; jmp rax; 
0x0000000000419b5e: add byte ptr [rdi + rcx + 0x4c], cl; ret 0xba; 
0x000000000040e00a: add byte ptr [rdi + rcx - 0x4a], al; push rbx; or byte ptr [rcx - 0xa], al; ret 0xf08; 
0x000000000045b58c: add byte ptr [rdi + rsi*2], al; or dword ptr [rax - 0x73], ecx; add eax, 0x12c9; jmp rax; 
0x0000000000406434: add byte ptr [rdi - 0x3b7cb7ff], al; pop rax; pop rbp; ret; 
0x00000000004172ec: add byte ptr [rdi - 0x3f], bh; add rsp, 0x10; pop rbp; ret; 
0x000000000045e60a: add byte ptr [rdi], bh; mov eax, 0x3c; syscall; 
0x000000000045e828: add byte ptr [rdi], cl; add eax, 0x10244489; ret; 
0x000000000045e714: add byte ptr [rdi], cl; add eax, 0x10c48348; pop rbp; ret; 
0x000000000045e6cd: add byte ptr [rdi], cl; add eax, 0x18244489; ret; 
0x000000000045e692: add byte ptr [rdi], cl; add eax, 0x20244489; ret; 
0x000000000045e978: add byte ptr [rdi], cl; add eax, 0x28244489; ret; 
0x000000000045ece0: add byte ptr [rdi], cl; add eax, 0x30244489; ret; 
0x000000000045e784: add byte ptr [rdi], cl; add eax, 0x748bc789; and al, 8; mov eax, 0x3e; syscall; ret; 
0x000000000045e724: add byte ptr [rdi], cl; add eax, 0x8244489; ret; 
0x000000000045ed4f: add byte ptr [rdi], cl; add eax, 0xf88348; je 0x5ed5d; mov dword ptr [rsp + 0x30], eax; ret; 
0x0000000000402724: add byte ptr [rdi], cl; add eax, edx; mov dword ptr [rsp + 8], eax; mov dword ptr [rsp + 0xc], edx; ret; 
0x000000000040aa84: add byte ptr [rdi], cl; mov dh, 0x44; and al, 0x17; add rsp, 0x28; pop rbp; ret; 
0x000000000043aa0d: add byte ptr [rdi], cl; mov dh, 0x50; sub esi, esi; ret 0x7502; 
0x0000000000405e6c: add byte ptr [rdi], cl; mov dh, 0x5c; and al, 0x2f; add rsp, 0x68; pop rbp; ret; 
0x000000000043470b: add byte ptr [rdi], cl; mov dh, 0xd; pushfq; ret; 
0x0000000000444e18: add byte ptr [rdi], cl; mov edx, 0xfa830cf2; add cl, byte ptr [rdi]; xchg eax, esp; ret 0x14eb; 
0x000000000044437c: add byte ptr [rdi], cl; mov edx, 0xfa830cf2; add cl, byte ptr [rdi]; xchg eax, esp; ret 0x6eb; 
0x0000000000450286: add byte ptr [rdi], cl; or dword ptr [rcx + 0x40000000], 0xffffff88; mov ah, 0x10; sbb byte ptr [rax + rax], al; add byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000042d91e: add byte ptr [rdi], cl; ror dword ptr [rcx - 0x3b7eb730], 1; and byte ptr [rax], ah; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000412190: add byte ptr [rdi], cl; sbb dword ptr [rbx + 1], 0; add byte ptr [rcx - 0x77], cl; ret 0xc149; 
0x000000000044d3d8: add byte ptr [rdi], cl; test dword ptr [rax], ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x4890; 
0x000000000043bd02: add byte ptr [rdi], cl; xchg eax, ebp; ret 0x5488; 
0x0000000000467e08: add byte ptr [rdi], cl; xchg eax, ebx; ret; 
0x0000000000425923: add byte ptr [rdi], cl; xchg eax, edi; ret 0xaeb; 
0x0000000000425a1b: add byte ptr [rdi], cl; xchg eax, edi; ret 0xeb90; 
0x000000000045cf36: add byte ptr [rdi], cl; xchg eax, esp; and al, 8; ret; 
0x0000000000404cf2: add byte ptr [rdi], cl; xchg eax, esp; ret 0x8eb; 
0x0000000000423b9a: add byte ptr [rdi], cl; xchg eax, esp; ret 0x9066; 
0x000000000041d87f: add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x0000000000405887: add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x0000000000413cef: add byte ptr [rdx + rax + 0xbb48], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret; 
0x0000000000447cc4: add byte ptr [rdx + rcx + 0x31], dh; shr bl, 0x15; sub rsp, -0x80; pop rbp; ret; 
0x000000000043e256: add byte ptr [rdx + rcx - 0x18], dh; ret 0x125; 
0x0000000000444128: add byte ptr [rdx + rcx - 0x7c], dh; sal byte ptr [rbp + 6], 0x48; add esp, 0x50; pop rbp; ret; 
0x000000000045ed36: add byte ptr [rdx + rdx + 0x4d], dh; lea eax, [rbp + 0x88]; add r8, 8; or rdi, 0x80000; mov eax, 0x38; syscall; 
0x000000000043a535: add byte ptr [rdx], 0; add byte ptr [rax - 0x75], cl; and al, 0x30; mov rdx, rsi; call rcx; 
0x0000000000413ba7: add byte ptr [rdx], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000045b458: add byte ptr [rdx], al; add byte ptr [rax], al; ja 0x5b467; lea rax, [rip + 0x51b]; jmp rax; 
0x000000000045ab3e: add byte ptr [rdx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000045b4e9: add byte ptr [rdx], al; add byte ptr [rdi + 9], dh; lea rax, [rip + 0xb8b]; jmp rax; 
0x000000000045b57a: add byte ptr [rdx], al; ja 0x5b587; lea rax, [rip + 0x11fb]; jmp rax; 
0x000000000045c827: add byte ptr [rdx], al; pop rbp; ret; 
0x000000000045cece: add byte ptr [rsi + 0x48], ah; movd eax, mm0; ret; 
0x00000000004165ae: add byte ptr [rsi + 0x48], dh; mov eax, dword ptr [rsp + 0x28]; mov byte ptr [rax], 1; add rsp, 0x30; pop rbp; ret; 
0x000000000045ed63: add byte ptr [rsi + 0x49], dh; cmp ecx, 0; je 0x5ed8c; mov eax, 0xba; syscall; 
0x00000000004324c6: add byte ptr [rsi + 0xa], dh; xor eax, eax; xor ebx, ebx; add rsp, 0x70; pop rbp; ret; 
0x000000000045cefd: add byte ptr [rsi + 0xf], ah; cmp ah, bl; add eax, 0xf3ae9; aesenc xmm0, xmmword ptr [rip + 0xf3af0]; movq rax, xmm0; ret; 
0x000000000045cf06: add byte ptr [rsi + 0xf], ah; cmp ah, bl; add eax, 0xf3af0; movq rax, xmm0; ret; 
0x000000000045cebc: add byte ptr [rsi + 0xf], ah; cmp ah, bl; add eax, 0xf3b2a; aesenc xmm0, xmmword ptr [rip + 0xf3b31]; movq rax, xmm0; ret; 
0x000000000045cec5: add byte ptr [rsi + 0xf], ah; cmp ah, bl; add eax, 0xf3b31; movq rax, xmm0; ret; 
0x000000000046a59a: add byte ptr [rsi + 1], bh; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x00000000004226b2: add byte ptr [rsi + rax + 0x48], dh; add esp, 0x10; pop rbp; ret; 
0x0000000000441c6e: add byte ptr [rsi + rax + 0x48], dh; add esp, 0x38; pop rbp; ret; 
0x000000000045dd64: add byte ptr [rsi + rax + 0x48], dh; mov ecx, ebx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000470c2f: add byte ptr [rsi + rbx - 0x18], dh; leave; ret; 
0x000000000042265d: add byte ptr [rsi - 0x70], ah; call 0x1cd20; add rsp, 8; pop rbp; ret; 
0x0000000000417add: add byte ptr [rsi - 0x70], ah; call 0x1d100; add rsp, 0x68; pop rbp; ret; 
0x000000000040a67d: add byte ptr [rsi - 0x70], ah; call 0x2d740; add rsp, 0x18; pop rbp; ret; 
0x00000000004321bd: add byte ptr [rsi - 0x70], ah; call 0x34e80; add rsp, 0x40; pop rbp; ret; 
0x000000000042b33d: add byte ptr [rsi - 0x70], ah; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000423edd: add byte ptr [rsi - 0x70], ah; call 0xa5c0; xor eax, eax; add rsp, 0x90; pop rbp; ret; 
0x000000000040c39d: add byte ptr [rsi - 0x70], ah; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x000000000043377d: add byte ptr [rsi - 0x70], ah; test rdx, rdx; je 0x3391f; mov rax, qword ptr [rdx]; call rax; 
0x00000000004014ce: add byte ptr [rsi - 0x78], 0x9c; adc al, 0x84; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret 0x8949; 
0x0000000000413f87: add byte ptr [rsi - 1], bh; xor r8d, r8d; call 0x45e0; add rsp, 0x20; pop rbp; ret; 
0x000000000046e288: add byte ptr [rsi], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000442820: add byte ptr [rsi], cl; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000040307e: add byte ptr [rsp + rbx*4 + 0x48], dh; xor eax, eax; ret; 
0x0000000000421a42: add byte ptr cs:[rax], al; mov rax, qword ptr [rsp + 0x28]; call 0xa580; add rsp, 0x38; pop rbp; ret; 
0x000000000045b5e5: add byte ptr ds:[rax], al; jmp rax; 
0x0000000000453950: add byte ptr ds:[rbp + 8], dh; xor eax, eax; mov ebx, 1; ret; 
0x0000000000459134: add byte ptr es:[rax], al; add al, ch; ret; 
0x0000000000450ca9: add byte ptr es:[rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000041bc02: add byte ptr fs:[rax], al; add rsp, 0x40; pop rbp; ret; 
0x000000000047bbea: add ch, bl; imul ecx, dword ptr [rax - 0x75], 0x4a; adc byte ptr [rax - 0x75], cl; pop rdx; or byte ptr [rax - 1], cl; ret; 
0x000000000041265e: add cl, bpl; ret; 
0x0000000000440d47: add cl, byte ptr [r13 - 0x77]; ret 0x2949; 
0x0000000000413d35: add cl, byte ptr [rax + 1]; ret 0x8a40; 
0x0000000000413cf1: add cl, byte ptr [rax - 0x45]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret; 
0x000000000042521f: add cl, byte ptr [rax - 0x75]; sbb byte ptr [r8 - 0x45], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret; 
0x00000000004374a6: add cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x00000000004780eb: add cl, byte ptr [rax - 0x77]; ret 0x8b48; 
0x00000000004410f1: add cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x0000000000477d07: add cl, byte ptr [rax - 1]; ret; 
0x0000000000401028: add cl, byte ptr [rax]; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000042855d: add cl, byte ptr [rax]; mov rax, rcx; mov rcx, r8; lea rdx, [rsp + 0x80]; call rdi; 
0x0000000000476fed: add cl, byte ptr [rbp - 0x75]; adc byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 1], cl; ret 0xf44; 
0x0000000000477d00: add cl, byte ptr [rbp - 0x77]; or byte ptr [r8 - 0x77], cl; add cl, byte ptr [rax - 1]; ret; 
0x0000000000440d48: add cl, byte ptr [rbp - 0x77]; ret 0x2949; 
0x000000000041baa8: add cl, byte ptr [rbp - 0x77]; ror dword ptr [rcx - 0x3f], 0xe9; add ecx, dword ptr [rbp - 0x77]; ret 0x8341; 
0x00000000004765c8: add cl, byte ptr [rbp - 0x7b]; fisttp dword ptr [rdi + rcx + 0x45]; ret 0x8d4b; 
0x0000000000478c3f: add cl, byte ptr [rbx + rcx*4 - 0x7c]; and al, 0xc0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000042920e: add cl, byte ptr [rcx - 0x77]; ret 0x8141; 
0x0000000000428559: add cl, byte ptr [rdi - 0x75]; add r9b, byte ptr [rax]; mov rax, rcx; mov rcx, r8; lea rdx, [rsp + 0x80]; call rdi; 
0x0000000000444e1f: add cl, byte ptr [rdi]; xchg eax, esp; ret 0x14eb; 
0x0000000000451916: add cl, byte ptr [rdi]; xchg eax, esp; ret 0x2875; 
0x0000000000474b76: add cl, byte ptr [rdi]; xchg eax, esp; ret 0x5488; 
0x0000000000444383: add cl, byte ptr [rdi]; xchg eax, esp; ret 0x6eb; 
0x0000000000452e3f: add cl, ch; jg 0x52e43; add byte ptr [rax], al; add rsp, 0x300; pop rbp; ret; 
0x0000000000455630: add cl, ch; mov al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x40; pop rbp; ret; 
0x000000000046ca7f: add cl, ch; mov ebp, 0xf7000000; ret 0x3f; 
0x00000000004097f6: add cl, ch; movabs al, byte ptr [0x311858894cfffffe]; sal byte ptr [rcx], 0xdb; add rsp, 0xa0; pop rbp; ret; 
0x000000000047b803: add cl, ch; or dword ptr ss:[rax], eax; add byte ptr [rbx + rcx*4 + 0x48], cl; adc byte ptr [rbx + rcx*4 + 0x50], cl; or byte ptr [rcx - 1], cl; ret 0x8b4c; 
0x000000000041265f: add cl, ch; ret; 
0x000000000046709f: add cl, ch; sti; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004286b8: add dh, byte ptr [rcx]; dec dword ptr [rax - 0x77]; ret 0x4890; 
0x00000000004549ce: add dh, byte ptr [rcx]; leave; mov eax, ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000456116: add dh, byte ptr [rcx]; leave; mov eax, ecx; add rsp, 0x120; pop rbp; ret; 
0x000000000045fbb0: add dh, byte ptr [rcx]; leave; mov eax, ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000472cf7: add dh, byte ptr [rcx]; leave; mov eax, ecx; add rsp, 0x28; pop rbp; ret; 
0x000000000045427a: add dh, byte ptr [rcx]; leave; mov eax, ecx; add rsp, 0x30; pop rbp; ret; 
0x0000000000415bb3: add dh, byte ptr [rcx]; leave; mov eax, ecx; add rsp, 8; pop rbp; ret; 
0x000000000040120e: add dh, byte ptr [rcx]; leave; mov eax, ecx; pop rbp; ret; 
0x0000000000403f14: add dh, byte ptr [rcx]; leave; mov eax, ecx; ret; 
0x000000000040c25a: add dh, byte ptr [rcx]; leave; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000040193b: add dh, byte ptr [rcx]; leave; mov rax, rcx; ret; 
0x000000000040630a: add dh, byte ptr [rcx]; ror byte ptr [rax + 0x14a0fd05], 0; ret; 
0x0000000000464a31: add dh, byte ptr [rcx]; ror byte ptr [rax + 0xeb9cf05], 0; ret; 
0x000000000045f8b7: add dh, byte ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbp - 0x70], bl; ret; 
0x000000000047131d: add dh, byte ptr [rcx]; ror byte ptr [rax - 0x7f], 0xc4; or byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000428bbb: add dh, byte ptr [rcx]; test byte ptr [rax - 0x77], 0xf0; add rsp, 0x68; pop rbp; ret; 
0x000000000042ce46: add dh, byte ptr [rdi + 0x18]; cmp r8, 1; sete al; add rsp, 0x28; pop rbp; ret; 
0x000000000045b57b: add dh, byte ptr [rdi + 9]; lea rax, [rip + 0x11fb]; jmp rax; 
0x0000000000455789: add dh, dh; ret 0x7402; 
0x0000000000425450: add dh, dh; ret 0x7501; 
0x0000000000410731: add dh, dh; ret 0x7504; 
0x000000000044a01f: add dh, dh; ret 0xf40; 
0x00000000004729c4: add dl, al; or al, byte ptr [rax]; pop rbp; ret; 
0x00000000004586be: add dl, byte ptr [rax - 0x49f02f01]; and al, 6; add rsp, 0x20; pop rbp; ret; 
0x0000000000422bd0: add dl, byte ptr [rax]; add al, ch; call 0x49022a52; add esp, 0x10; pop rbp; ret; 
0x000000000045edf2: add dl, byte ptr [rax]; add byte ptr [rax], al; mov rax, 0x9e; syscall; 
0x00000000004158d2: add dl, dh; adc byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000042c25e: add dword ptr [r13 + 0x480674c0], eax; add esp, 0x18; pop rbp; ret; 
0x0000000000441feb: add dword ptr [r8 + 0x39], ecx; ret 0x820f; 
0x000000000042e1ab: add dword ptr [r8], eax; add rsp, 0x38; pop rbp; ret; 
0x000000000043ad2d: add dword ptr [r8], r8d; lea rax, [rip + 0x63691]; call 0x5b0a0; add rsp, 0x28; pop rbp; ret; 
0x000000000041c263: add dword ptr [rax + 0x1250], edi; add rsp, 0x10; pop rbp; ret; 
0x0000000000403320: add dword ptr [rax + 0x29], ecx; ret 0x41f3; 
0x0000000000403234: add dword ptr [rax + 0x29], ecx; ret 0x8b41; 
0x00000000004032a1: add dword ptr [rax + 0x29], ecx; ret 0x8b49; 
0x00000000004033af: add dword ptr [rax + 0x29], ecx; ret 0xc1c4; 
0x0000000000415802: add dword ptr [rax + 0x30], ecx; mov rax, rbx; add rsp, 0x28; pop rbp; ret; 
0x0000000000441fec: add dword ptr [rax + 0x39], ecx; ret 0x820f; 
0x0000000000426435: add dword ptr [rax + 0x39], ecx; ret; 
0x00000000004033f7: add dword ptr [rax + 0x39], ecx; xlatb; jb 0x33bf; vzeroupper; mov qword ptr [r11], -1; ret; 
0x000000000041fb14: add dword ptr [rax + 0x48084888], edx; add esp, 0x18; pop rbp; ret; 
0x0000000000456db5: add dword ptr [rax + 0xfffd], edi; add rsp, 0x10; pop rbp; ret; 
0x00000000004015b2: add dword ptr [rax + 1], ecx; ret 0x8b48; 
0x0000000000456e4e: add dword ptr [rax + 2], edi; add rsp, 0x10; pop rbp; ret; 
0x000000000040eb15: add dword ptr [rax + rax], eax; add byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000044be49: add dword ptr [rax - 0x75000000], 0x8948f004; test byte ptr [rax + rbx*4], ah; add byte ptr [rax], al; add al, ch; ret 0xfe6a; 
0x000000000045246d: add dword ptr [rax - 0x75], ecx; je 0x52496; push rax; lea rdx, [rsp + 0x50]; mov eax, r8d; call rsi; 
0x0000000000410f85: add dword ptr [rax - 0x75], ecx; or al, 0x19; not rcx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000004586a9: add dword ptr [rax - 0x75], ecx; or byte ptr [rax - 0x77], cl; ret 0xd1ff; 
0x000000000040ab16: add dword ptr [rax - 0x75], ecx; pop rsp; add dword ptr [rax], ecx; mov rax, rdx; nop; ret; 
0x0000000000406f65: add dword ptr [rax - 0x75], ecx; push rsp; and al, 0x10; mov rax, qword ptr [rdx]; call rax; 
0x000000000040e2aa: add dword ptr [rax - 0x76b3b4b8], ecx; push rax; pop rax; add rsp, 0x60; pop rbp; ret; 
0x0000000000464942: add dword ptr [rax - 0x77], ecx; fmul dword ptr [rax - 0x77]; sti; mov rcx, r9; call rsi; 
0x00000000004647c9: add dword ptr [rax - 0x77], ecx; je 0x647f2; push 0x48d88948; mov ebx, ecx; mov rcx, rsi; call rdx; 
0x000000000043469a: add dword ptr [rax - 0x77], ecx; jl 0x346c3; or byte ptr [rax + 0x48c28948], dl; mov eax, esi; call rcx; 
0x0000000000420b2e: add dword ptr [rax - 0x77], ecx; ret; 
0x000000000044c8e7: add dword ptr [rax], 0; add byte ptr [rax - 1], bh; xor ebx, ebx; add rsp, 0xb0; pop rbp; ret; 
0x000000000041c8b8: add dword ptr [rax], 0x48000001; add esp, 0x28; pop rbp; ret; 
0x00000000004291d8: add dword ptr [rax], 0xba480000; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret 0x8949; 
0x000000000040c235: add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000044beb7: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x737f; 
0x000000000042a7f8: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; retf 0x9f0f; ret 0x8eb; 
0x0000000000402da6: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ror dword ptr [rcx - 0x77], cl; ror byte ptr [rdi + rcx + 0x4c], 1; ret; 
0x000000000041cddc: add dword ptr [rax], eax; add byte ptr [rax + 0x7fd23941], dl; add bh, bh; ret 0x6348; 
0x000000000043b94e: add dword ptr [rax], eax; add byte ptr [rax + 1], bh; add rsp, 0x38; pop rbp; ret; 
0x00000000004483f8: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000410074: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x141662; add rsp, 0x58; pop rbp; ret; 
0x000000000040ab97: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; pop rdx; jmp qword ptr [rsi - 0x70]; 
0x0000000000479f97: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; sbb eax, 0x3b5c7; mov rcx, qword ptr [rsp + 0x258]; mov edi, dword ptr [rsp + 0x2c]; call rdx; 
0x000000000047c674: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; pop rax; or byte ptr [rax - 1], cl; ret; 
0x000000000047be44: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; pop rdx; or byte ptr [rax - 1], cl; ret; 
0x0000000000420a30: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 0x30; add rsp, 0x40; pop rbp; ret; 
0x000000000044b0a2: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; sub byte ptr [r8 - 0x75], cl; push rbx; and byte ptr [rax - 1], cl; ret 0x8b48; 
0x000000000044d3dc: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x4890; 
0x0000000000420939: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000408da7: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; retf 0xdee9; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000046ecbd: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; sti; add rsp, 0x18; pop rbp; ret; 
0x0000000000456e18: add dword ptr [rax], eax; add byte ptr [rax - 0x78], al; cmp byte ptr [rax + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x000000000047c454: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4818; 
0x000000000044101c: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x48fe; 
0x0000000000419ef7: add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret 0x8948; 
0x0000000000466454: add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x0000000000439093: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x100; pop rbp; nop; ret; 
0x0000000000439055: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x100; pop rbp; ret; 
0x0000000000470fdd: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x108; pop rbp; ret; 
0x00000000004629f6: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbp; nop; ret; 
0x000000000040eead: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x00000000004560b1: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x120; pop rbp; ret; 
0x0000000000431518: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000042d8fc: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x2020; pop rbp; ret; 
0x000000000041d888: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000040414d: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x000000000040a866: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x000000000043b952: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x38; pop rbp; ret; 
0x00000000004254ba: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x40; pop rbp; ret; 
0x0000000000440230: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x428; pop rbp; ret; 
0x000000000046ff82: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x48; pop rbp; ret; 
0x000000000041aced: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x0000000000405129: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x00000000004607cc: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x68; pop rbp; ret; 
0x00000000004578d6: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x70; pop rbp; nop; ret; 
0x00000000004326b3: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x70; pop rbp; ret; 
0x000000000046ac40: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x78; pop rbp; ret; 
0x000000000042137a: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0xf8; pop rbp; ret; 
0x000000000040628d: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x000000000044703f: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x24840; add rsp, 0x28; pop rbp; ret; 
0x0000000000430f33: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x0000000000432b36: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x000000000045856f: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x000000000045888b: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x385c0; add rsp, 0x30; pop rbp; ret; 
0x0000000000469e35: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x4a320; add rsp, 0x70; pop rbp; ret; 
0x000000000044cfd6: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x4c4c0; add rsp, 0x30; pop rbp; ret; 
0x00000000004059c9: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x59e0; add rsp, 0x18; pop rbp; ret; 
0x00000000004615b0: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x59f40; add rsp, 0x18; pop rbp; ret; 
0x000000000045b01b: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x5e5e0; call 0x5cde0; ret; 
0x000000000047cfad: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x63680; add rsp, 0x110; pop rbp; ret; 
0x0000000000466bf0: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x68820; add rsp, 0x50; pop rbp; ret; 
0x000000000046a59c: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x00000000004465c0: add dword ptr [rax], eax; add byte ptr [rax], al; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x000000000043cd35: add dword ptr [rax], eax; add byte ptr [rax], al; jne 0x3cd44; add rsp, 0x3a0; pop rbp; ret; 
0x0000000000452e00: add dword ptr [rax], eax; add byte ptr [rax], al; lea rdx, [rsp + 0x2c8]; call rcx; 
0x000000000045ef2a: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rsp]; mov rax, 0xe4; syscall; 
0x000000000045eecf: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rsp]; mov rax, qword ptr [rip + 0xf1712]; call rax; 
0x000000000044d4cb: add dword ptr [rax], eax; add byte ptr [rax], al; lock xadd dword ptr [rdx + 0x22a0], eax; add rsp, 0x48; pop rbp; ret; 
0x00000000004090c8: add dword ptr [rax], eax; add byte ptr [rax], al; lock xadd qword ptr [rax + 0x500], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090b4: add dword ptr [rax], eax; add byte ptr [rax], al; lock xadd qword ptr [rax + 0x508], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090a4: add dword ptr [rax], eax; add byte ptr [rax], al; lock xadd qword ptr [rax], rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000471d94: add dword ptr [rax], eax; add byte ptr [rax], al; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000460ee3: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, ecx; add rsp, 0x28; pop rbp; ret; 
0x00000000004158cb: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x10d602], rax; add rsp, 0x20; pop rbp; ret; 
0x00000000004326be: add dword ptr [rax], eax; add byte ptr [rax], al; mov rbx, qword ptr [rsp + 0x88]; add rsp, 0x70; pop rbp; ret; 
0x000000000044a9db: add dword ptr [rax], eax; add byte ptr [rax], al; nop; ret; 
0x0000000000402744: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000045e68f: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000045e68f: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000046178e: add dword ptr [rax], eax; add byte ptr [rax], al; xchg dword ptr [rax], ecx; ret; 
0x00000000004397b7: add dword ptr [rax], eax; add byte ptr [rax], al; xor ebx, ebx; add rsp, 0x60; pop rbp; ret; 
0x0000000000405a5a: add dword ptr [rax], eax; add byte ptr [rax], al; xor ebx, ebx; add rsp, 0x68; pop rbp; ret; 
0x0000000000453981: add dword ptr [rax], eax; add byte ptr [rax], al; xor ebx, ebx; ret; 
0x000000000044ccef: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x0000000000431ff6: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; add rsp, 0x68; pop rbp; ret; 
0x00000000004171fb: add dword ptr [rax], eax; add byte ptr [rbp - 0x70], bl; ret; 
0x000000000044dbbe: add dword ptr [rax], eax; add byte ptr [rbp - 0x75], cl; push rsi; xor byte ptr [rcx - 0x77], cl; ret; 
0x00000000004203b5: add dword ptr [rax], eax; add byte ptr [rbp - 0x76b700b6], cl; ret; 
0x000000000045218e: add dword ptr [rax], eax; add byte ptr [rbp - 0x77], cl; ret 0x8b44; 
0x0000000000439812: add dword ptr [rax], eax; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x8445; 
0x000000000047b458: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 + 0x4c], cl; and al, 0x78; mov rcx, qword ptr [r9 + 0x48]; mov rax, rbx; call rcx; 
0x000000000044d57b: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; push rsi; xor byte ptr [rax - 0x77], cl; ret; 
0x000000000047c17c: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x0000000000412194: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0xc149; 
0x0000000000477248: add dword ptr [rax], eax; add byte ptr [rcx - 0x80], al; call qword ptr [rax + 0xf]; 
0x0000000000477252: add dword ptr [rax], eax; add byte ptr [rcx - 0x80], al; jmp qword ptr [rbp + 0xf]; 
0x000000000044607a: add dword ptr [rax], eax; add byte ptr [rcx], al; add rsp, 0x30; pop rbp; ret; 
0x0000000000437a27: add dword ptr [rax], eax; add byte ptr [rcx], al; ret; 
0x000000000044081f: add dword ptr [rax], eax; add byte ptr [rcx], dh; imul bl; add rsp, 0x120; pop rbp; ret; 
0x0000000000409135: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; cmp byte ptr [rbp - 0x70], bl; ret; 
0x000000000045b447: add dword ptr [rax], eax; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x44d]; jmp rax; 
0x000000000040e008: add dword ptr [rax], eax; add byte ptr [rdi + rcx - 0x4a], al; push rbx; or byte ptr [rcx - 0xa], al; ret 0xf08; 
0x000000000045e6cb: add dword ptr [rax], eax; add byte ptr [rdi], cl; add eax, 0x18244489; ret; 
0x0000000000440158: add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret 0x9066; 
0x0000000000440607: add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x0000000000405885: add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x0000000000436e23: add dword ptr [rax], eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000417f4e: add dword ptr [rax], eax; add rsp, 0x18; pop rbp; ret; 
0x000000000041df67: add dword ptr [rax], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000040c477: add dword ptr [rax], eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000418e51: add dword ptr [rax], eax; add rsp, 0x30; pop rbp; ret; 
0x000000000042e1ac: add dword ptr [rax], eax; add rsp, 0x38; pop rbp; ret; 
0x0000000000419558: add dword ptr [rax], eax; add rsp, 0x40; pop rbp; nop; ret; 
0x0000000000417926: add dword ptr [rax], eax; add rsp, 0x40; pop rbp; ret; 
0x0000000000424afb: add dword ptr [rax], eax; add rsp, 0x48; pop rbp; ret; 
0x000000000041bfe3: add dword ptr [rax], eax; add rsp, 0x60; pop rbp; ret; 
0x0000000000428762: add dword ptr [rax], eax; add rsp, 0x98; pop rbp; ret; 
0x000000000041544c: add dword ptr [rax], eax; add rsp, 0xc8; pop rbp; ret; 
0x000000000043bb28: add dword ptr [rax], eax; add rsp, 8; pop rbp; ret; 
0x0000000000423c61: add dword ptr [rax], eax; call 0x15740; add rsp, 0x20; pop rbp; ret; 
0x00000000004204b4: add dword ptr [rax], eax; call 0x32980; add rsp, 0x30; pop rbp; ret; 
0x000000000041c6c8: add dword ptr [rax], eax; call 0x32980; add rsp, 0x40; pop rbp; ret; 
0x000000000041c143: add dword ptr [rax], eax; call 0x32980; add rsp, 0x60; pop rbp; ret; 
0x000000000043b88a: add dword ptr [rax], eax; call 0x3e200; call 0x37d20; add rsp, 8; pop rbp; ret; 
0x000000000043bb23: add dword ptr [rax], eax; call 0x50e60; add rsp, 8; pop rbp; ret; 
0x00000000004244f5: add dword ptr [rax], eax; call 0x5cce0; add rsp, 0x30; pop rbp; ret; 
0x000000000041e38c: add dword ptr [rax], eax; call rbx; 
0x000000000045b4d8: add dword ptr [rax], eax; ja 0x5b4e5; lea rax, [rip + 0xabd]; jmp rax; 
0x000000000043ad2e: add dword ptr [rax], eax; lea rax, [rip + 0x63691]; call 0x5b0a0; add rsp, 0x28; pop rbp; ret; 
0x000000000041a265: add dword ptr [rax], eax; mov eax, 1; add rsp, 0x28; pop rbp; ret; 
0x00000000004759cc: add dword ptr [rax], eax; mov ecx, 5; call 0x756e0; add rsp, 0x18; pop rbp; ret; 
0x000000000047cfaa: add dword ptr [rax], eax; mov edi, 1; call 0x63680; add rsp, 0x110; pop rbp; ret; 
0x0000000000441f03: add dword ptr [rax], eax; mov edx, dword ptr [rip + 0xd7249]; mov dword ptr [rip + 0x10e547], edx; add rsp, 0x28; pop rbp; ret; 
0x0000000000422fa1: add dword ptr [rax], eax; mov qword ptr [rax + rcx*8], rbx; add rsp, 0x38; pop rbp; ret; 
0x000000000047a0cb: add dword ptr [rax], eax; mov r8d, 5; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000047a06b: add dword ptr [rax], eax; mov r8d, 6; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000043cfa3: add dword ptr [rax], eax; mov rax, qword ptr [r14 + 0x30]; dec dword ptr [rax + 0xf0]; add rsp, 0x3a0; pop rbp; ret; 
0x000000000043a823: add dword ptr [rax], eax; mov rax, qword ptr [rsp + 0x28]; call 0x3a5e0; add rsp, 0x30; pop rbp; ret; 
0x000000000044652a: add dword ptr [rax], eax; mov rax, qword ptr [rsp + 0x30]; add rsp, 0x38; pop rbp; ret; 
0x000000000043a8f3: add dword ptr [rax], eax; mov rax, qword ptr [rsp + 0x38]; call 0x3a5e0; add rsp, 0x28; pop rbp; ret; 
0x00000000004414ea: add dword ptr [rax], eax; mov rcx, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; 
0x000000000041bfdd: add dword ptr [rax], eax; nop; call 0x32980; add rsp, 0x60; pop rbp; ret; 
0x000000000045ae64: add dword ptr [rax], eax; pop rbp; ret; 
0x000000000044582e: add dword ptr [rax], eax; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000442531: add dword ptr [rax], eax; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000448a09: add dword ptr [rax], eax; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x1a0; pop rbp; ret; 
0x0000000000442ae3: add dword ptr [rax], eax; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x000000000043bee9: add dword ptr [rax], eax; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; ret; 
0x0000000000444f2f: add dword ptr [rax], eax; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x58; pop rbp; ret; 
0x0000000000444699: add dword ptr [rax], eax; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x68; pop rbp; ret; 
0x000000000046bae9: add dword ptr [rax], ecx; mov rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000040ab1a: add dword ptr [rax], ecx; mov rax, rdx; nop; ret; 
0x000000000045ce26: add dword ptr [rbp + 0x10], esi; rdtscp; shl rdx, 0x20; add rax, rdx; mov qword ptr [rsp + 8], rax; ret; 
0x000000000043188d: add dword ptr [rbp + 0x12], esi; cmp byte ptr [r14 + 0xb1], 0; je 0x318a2; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x00000000004318e2: add dword ptr [rbp + 0x12], esi; cmp byte ptr [r14 + 0xb1], 0; je 0x318f7; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x0000000000431924: add dword ptr [rbp + 0x12], esi; cmp byte ptr [r14 + 0xb1], 0; je 0x31939; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x000000000043194e: add dword ptr [rbp + 0x12], esi; cmp byte ptr [r14 + 0xb1], 0; je 0x31963; mov qword ptr [r14 + 0x10], -0x522; mov eax, 1; ret; 
0x000000000046a53c: add dword ptr [rbp + 0x12], esi; mov rbx, qword ptr [rbx + 0x30]; call 0x6a420; add rsp, 0x100; pop rbp; ret; 
0x000000000042c25f: add dword ptr [rbp + 0x480674c0], eax; add esp, 0x18; pop rbp; ret; 
0x0000000000422356: add dword ptr [rbp + 0xc], esi; lea rax, [rip + 0x12eb80]; call 0x1cd20; add rsp, 0x48; pop rbp; ret; 
0x00000000004221c2: add dword ptr [rbp + 0xc], esi; lea rax, [rip + 0x12ed14]; call 0x1cd20; add rsp, 0x18; pop rbp; ret; 
0x00000000004734a8: add dword ptr [rbp + 0xe], esi; mov rax, rbx; call 0x739e0; add rsp, 0x10; pop rbp; ret; 
0x00000000004188b4: add dword ptr [rbp + 6], esi; add rsp, 0x10; pop rbp; ret; 
0x000000000046d343: add dword ptr [rbp + 6], esi; add rsp, 0x28; pop rbp; ret; 
0x000000000044f83f: add dword ptr [rbp - 0x77], ecx; pop rcx; adc byte ptr [rax - 1], cl; ret; 
0x0000000000412cba: add dword ptr [rbp - 0x77], ecx; ret 0x8341; 
0x0000000000439908: add dword ptr [rbp - 0x7c], eax; sal byte ptr [rsp + rsi*4 - 0x15], 0x2b; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x000000000045ccc8: add dword ptr [rbp - 7], esi; ret; 
0x000000000042b69f: add dword ptr [rbx + 1], edi; add rsp, 0x10; pop rbp; ret; 
0x000000000040db0a: add dword ptr [rbx + 3], esi; mov rcx, qword ptr [rcx]; mov rax, rcx; add rsp, 0x78; pop rbp; ret; 
0x00000000004576c0: add dword ptr [rbx + rcx*4 + 0x7b], ecx; xor byte ptr [rbx - 0x76bba7bd], cl; fiadd dword ptr [rcx + 0x29]; ret; 
0x000000000041b6ca: add dword ptr [rcx + 0x10], eax; mov rax, qword ptr [rsp + 0x38]; add qword ptr [rcx + 0x18], rax; add rsp, 0x78; pop rbp; ret; 
0x000000000041b6d3: add dword ptr [rcx + 0x18], eax; add rsp, 0x78; pop rbp; ret; 
0x000000000042f6e5: add dword ptr [rcx + rcx*4 - 0x40], ecx; add rsp, 0x58; pop rbp; ret; 
0x0000000000466174: add dword ptr [rcx + rdi - 0x6c], ecx; and al, 0x40; add eax, dword ptr [rax]; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x3eb; 
0x000000000042347f: add dword ptr [rcx - 0x77], ecx; ret 0xf889; 
0x000000000040dee8: add dword ptr [rcx - 0x7d], eax; ret; 
0x0000000000422fa0: add dword ptr [rcx], eax; add byte ptr [rax - 0x77], cl; sbb al, 0xc8; add rsp, 0x38; pop rbp; ret; 
0x000000000045e634: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000042f6e4: add dword ptr [rcx], eax; mov rax, r8; add rsp, 0x58; pop rbp; ret; 
0x000000000047367b: add dword ptr [rcx], esi; sal byte ptr [rcx], 0xdb; add rsp, 0x10; pop rbp; ret; 
0x000000000044219f: add dword ptr [rdi + 9], edi; add rsp, 0x88; pop rbp; ret; 
0x000000000045b569: add dword ptr [rdi + 9], esi; lea rax, [rip + 0x112d]; jmp rax; 
0x000000000045098a: add dword ptr [rdi + rcx + 0x11], eax; mov ecx, 0x11e8; add rsp, 0x10; pop rbp; ret; 
0x00000000004245a3: add dword ptr [rdi - 0x7eb7ffee], edi; ret; 
0x00000000004357ab: add dword ptr [rdi], ecx; mov dh, 0x97; mov esp, 0xff000000; ret 0x9788; 
0x000000000042305a: add dword ptr [rdi], ecx; xchg eax, ebp; ret 0x9066; 
0x0000000000438cc3: add dword ptr [rdi], ecx; xchg eax, esp; ret 0xd284; 
0x000000000047213e: add dword ptr [rdi], ecx; xchg eax, esp; ror dword ptr [rcx - 0x3b7cb738], 0x20; pop rbp; ret; 
0x000000000042875e: add dword ptr [rdx + 0x10128], eax; add rsp, 0x98; pop rbp; ret; 
0x0000000000450a19: add dword ptr [rdx + 0x11e8], eax; add rsp, 0x30; pop rbp; ret; 
0x000000000041828b: add dword ptr [rdx + 0xe], esi; mov rax, rsi; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000041e6d5: add dword ptr [rdx], eax; add rsp, 0x28; pop rbp; ret; 
0x000000000042bb81: add dword ptr [rsi + 0x18], ebx; add rsp, 0x58; pop rbp; ret; 
0x00000000004294c5: add dword ptr [rsi + 0x48000000], -0x77; ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x0000000000439f6b: add dword ptr [rsi + rax], 0x24448b48; and byte ptr [rax - 0x73], cl; adc eax, 0x64475; call rcx; 
0x00000000004427da: add dword ptr [rsi], ecx; add byte ptr [rax - 1], cl; ret; 
0x000000000045b5db: add dword ptr [rsi], edx; add byte ptr [rax], al; jmp rax; 
0x000000000044101b: add dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x48fe; 
0x0000000000448a08: add dword ptr es:[rax], eax; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x1a0; pop rbp; ret; 
0x000000000041c6c7: add dword ptr fs:[rax], eax; call 0x32980; add rsp, 0x40; pop rbp; ret; 
0x0000000000422cbc: add eax, 0x10016f; call 0xa5c0; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000422a01: add eax, 0x10039a; call 0xa180; add rsp, 0x10; pop rbp; ret; 
0x00000000004229a1: add eax, 0x100442; call 0xa180; add rsp, 0x10; pop rbp; ret; 
0x0000000000420bb0: add eax, 0x101f47; call 0x20380; add rsp, 0x28; pop rbp; nop; ret; 
0x000000000045e82a: add eax, 0x10244489; ret; 
0x000000000045b55c: add eax, 0x105f; jmp rax; 
0x000000000044944c: add eax, 0x10804f; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x000000000041a3e9: add eax, 0x108b1a; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000041a232: add eax, 0x108cd1; call 0xa5c0; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000041a15e: add eax, 0x108da5; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x00000000004466b9: add eax, 0x109d42; mov rcx, rbx; add rsp, 0x60; pop rbp; ret; 
0x0000000000418dcf: add eax, 0x10a0cc; lea eax, [rax + rcx]; lea eax, [rax + 2]; mov dword ptr [rip + 0x10a0d8], eax; pop rbp; ret; 
0x0000000000418ddb: add eax, 0x10a0d8; pop rbp; ret; 
0x0000000000417edc: add eax, 0x10abff; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000418047: add eax, 0x10aeb4; add rsp, 0x20; pop rbp; ret; 
0x0000000000418b40: add eax, 0x10aeeb; lock xadd qword ptr [rax], rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004181e9: add eax, 0x10b2c2; call 0xa5c0; add rsp, 0x30; pop rbp; ret; 
0x000000000045e716: add eax, 0x10c48348; pop rbp; ret; 
0x00000000004158d1: add eax, 0x10d602; add rsp, 0x20; pop rbp; ret; 
0x000000000045b56e: add eax, 0x112d; jmp rax; 
0x000000000042621c: add eax, 0x11375f; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x000000000040aaf4: add eax, 0x113f8f; jg 0xab08; lea rax, [rip + 0x8aec6]; mov ebx, 8; ret; 
0x0000000000421b5e: add eax, 0x117e1d; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004376b4: add eax, 0x119127; call 0x42600; add rsp, 0x30; pop rbp; ret; 
0x0000000000434633: add eax, 0x11bf40; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x000000000043457e: add eax, 0x11bff5; call 0xa5c0; add rsp, 0x48; pop rbp; ret; 
0x000000000043352d: add eax, 0x11d01e; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x00000000004329ab: add eax, 0x11dba0; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x00000000004327e1: add eax, 0x11dd6a; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000045b580: add eax, 0x11fb; jmp rax; 
0x000000000042d05d: add eax, 0x1234ce; add rsp, 0x70; pop rbp; ret; 
0x000000000042ca48: add eax, 0x123ad3; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000042dd5a: add eax, 0x123d81; mov qword ptr [rip + 0xf4bca], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000042b229: add eax, 0x1252e2; call 0xa5c0; add rsp, 0x48; pop rbp; ret; 
0x000000000042b0a3: add eax, 0x125468; call 0xa5c0; add rsp, 0x70; pop rbp; ret; 
0x000000000042a9ec: add eax, 0x125aff; call 0xa5c0; add rsp, 0x138; pop rbp; ret; 
0x000000000042a381: add eax, 0x126172; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x000000000042a20e: add eax, 0x1262d5; call 0xa5c0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x40; pop rbp; ret; 
0x000000000042c70b: add eax, 0x1268; call 0x2c600; add rsp, 0x38; pop rbp; ret; 
0x0000000000412f09: add eax, 0x126a72; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x0000000000422088: add eax, 0x127a63; xchg qword ptr [rax], rdx; ret; 
0x00000000004255c0: add eax, 0x12adb3; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000045b592: add eax, 0x12c9; jmp rax; 
0x0000000000422659: add eax, 0x12e882; nop; call 0x1cd20; add rsp, 8; pop rbp; ret; 
0x000000000042235b: add eax, 0x12eb80; call 0x1cd20; add rsp, 0x48; pop rbp; ret; 
0x00000000004221c7: add eax, 0x12ed14; call 0x1cd20; add rsp, 0x18; pop rbp; ret; 
0x000000000041e88d: add eax, 0x131cbe; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000041dcf3: add eax, 0x1329e8; xchg qword ptr [rax], rdx; ret; 
0x0000000000418040: add eax, 0x138f03; mov qword ptr [rip + 0x10aeb4], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000045b5a4: add eax, 0x1397; jmp rax; 
0x00000000004424a9: add eax, 0x13bb00; add byte ptr [rax], al; ret; 
0x000000000041035e: add eax, 0x14137d; add rsp, 0x58; pop rbp; ret; 
0x0000000000410281: add eax, 0x14145a; add rsp, 0x58; pop rbp; ret; 
0x0000000000410135: add eax, 0x1415a6; add rsp, 0x58; pop rbp; nop; ret; 
0x0000000000410079: add eax, 0x141662; add rsp, 0x58; pop rbp; ret; 
0x000000000040f760: add eax, 0x141f7b; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000040ee70: add eax, 0x14286b; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000040ee44: add eax, 0x142897; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000040ecf0: add eax, 0x1429eb; add rsp, 0x10; pop rbp; ret; 
0x000000000040ecc4: add eax, 0x142a17; add rsp, 0x10; pop rbp; ret; 
0x000000000040c13c: add eax, 0x1442bf; add rsp, 0x58; pop rbp; ret; 
0x000000000040d350: add eax, 0x14438b; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000040d320: add eax, 0x1443bb; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000045b5b6: add eax, 0x1465; jmp rax; 
0x000000000040630e: add eax, 0x14a0fd; ret; 
0x00000000004026c1: add eax, 0x14e3e5; add rsp, 0x50; pop rbp; ret; 
0x000000000045b5c8: add eax, 0x1533; jmp rax; 
0x000000000045b5da: add eax, 0x1601; jmp rax; 
0x0000000000423c5e: add eax, 0x16848; call 0x15740; add rsp, 0x20; pop rbp; ret; 
0x000000000046c8fc: add eax, 0x176df; add rsp, 8; pop rbp; ret; 
0x000000000045e6cf: add eax, 0x18244489; ret; 
0x000000000047761f: add eax, 0x1a19c; add rsp, 0x10; pop rbp; ret; 
0x000000000045ef28: add eax, 0x1bf; add byte ptr [rax - 0x73], cl; xor al, 0x24; mov rax, 0xe4; syscall; 
0x000000000045b40c: add eax, 0x1ef; jmp rax; 
0x000000000045e694: add eax, 0x20244489; ret; 
0x000000000045b02c: add eax, 0x202f; ret; 
0x00000000004730e2: add eax, 0x230fe; mov ebx, 0xb; ret; 
0x0000000000404a83: add eax, 0x24448b00; sbb al, 0x48; add esp, 0x28; pop rbp; ret; 
0x0000000000454b45: add eax, 0x245c8b48; jo 0x54b94; mov eax, dword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000043e5ea: add eax, 0x25bb00; add byte ptr [rax], al; call 0x30ee0; add rsp, 0x50; pop rbp; ret; 
0x00000000004744d4: add eax, 0x25c8d; mov ebx, 0x20; pop rbp; nop; ret; 
0x000000000046fc61: add eax, 0x26d13; mov ebx, 0xf; add rsp, 0x38; pop rbp; ret; 
0x00000000004730c2: add eax, 0x2709f; mov ebx, 0x20; ret; 
0x000000000045b41b: add eax, 0x280; jmp rax; 
0x000000000045e97a: add eax, 0x28244489; ret; 
0x000000000046d2ea: add eax, 0x29413; mov ebx, 0xe; add rsp, 0x128; pop rbp; ret; 
0x000000000046c008: add eax, 0x294d3; mov ebx, 4; add rsp, 0x28; pop rbp; ret; 
0x000000000046c058: add eax, 0x2964e; mov ebx, 6; add rsp, 0x28; pop rbp; ret; 
0x0000000000466f11: add eax, 0x2bb9; add byte ptr [rax - 1], cl; ret; 
0x000000000045ece2: add eax, 0x30244489; ret; 
0x00000000004608f2: add eax, 0x3104eb00; sal byte ptr [rcx], 0xc9; mov rdx, qword ptr [rax + 0x28]; mov rax, rcx; call rdx; 
0x000000000045b42a: add eax, 0x311; jmp rax; 
0x000000000047c955: add eax, 0x31d23145; dec dword ptr [rcx - 0x75]; mov bl, byte ptr [rax + 0x48000000]; mov eax, edi; call rcx; 
0x000000000044acb3: add eax, 0x33b900; add byte ptr [rax], al; call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x000000000045b43c: add eax, 0x39f; jmp rax; 
0x000000000045b5e3: add eax, 0x3e38; jmp rax; 
0x000000000040106d: add eax, 0x40408b48; ret; 
0x0000000000474edc: add eax, 0x405d7; lea rbx, [rip + 0x3ff88]; add rsp, 0x48; pop rbp; ret; 
0x0000000000478e00: add eax, 0x40; call 0x764e0; add rsp, 0xa8; pop rbp; ret; 
0x0000000000478622: add eax, 0x40; call 0x76d20; add rsp, 0x30; pop rbp; ret; 
0x00000000004789f9: add eax, 0x40; nop dword ptr [rax]; call 0x76400; add rsp, 0x40; pop rbp; ret; 
0x00000000004749d6: add eax, 0x40abd; add rsp, 0x38; pop rbp; ret; 
0x00000000004738ac: add eax, 0x41bc7; add rsp, 0x18; pop rbp; ret; 
0x000000000045b1ac: add eax, 0x440f; call rax; 
0x0000000000409ce3: add eax, 0x448b4800; and al, 0x18; add rsp, 0x28; pop rbp; ret; 
0x00000000004597ec: add eax, 0x44be7; call 0x5b0a0; add rsp, 0x30; pop rbp; ret; 
0x000000000045b44e: add eax, 0x44d; jmp rax; 
0x000000000046fd4d: add eax, 0x4648e; add rsp, 0x20; pop rbp; ret; 
0x000000000046fd3d: add eax, 0x4649e; add rsp, 0x20; pop rbp; ret; 
0x000000000046fcff: add eax, 0x464dc; add rsp, 0x20; pop rbp; ret; 
0x0000000000452741: add eax, 0x48000000; add esp, 0x20; pop rbp; ret; 
0x0000000000435917: add eax, 0x48000000; add esp, 0x38; pop rbp; ret; 
0x000000000042dc27: add eax, 0x49000f4d; mov dword ptr [rbx + 8], ecx; mov qword ptr [rip + 0xf4cfa], rax; add rsp, 0x40; pop rbp; ret; 
0x0000000000466ecc: add eax, 0x50b9; add byte ptr [rax - 1], cl; ret; 
0x000000000045b460: add eax, 0x51b; jmp rax; 
0x00000000004424a6: add eax, 0x5505a; mov ebx, 0x13; ret; 
0x0000000000405275: add eax, 0x58; nop; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x00000000004012a4: add eax, 0x5dd38948; ret; 
0x000000000045b472: add eax, 0x5e9; jmp rax; 
0x0000000000432cd8: add eax, 0x6279a; mov ebx, 3; call 0x331a0; add rsp, 0x28; pop rbp; ret; 
0x0000000000432bc9: add eax, 0x629c6; mov ebx, 5; call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x000000000043ad32: add eax, 0x63691; call 0x5b0a0; add rsp, 0x28; pop rbp; ret; 
0x00000000004220c9: add eax, 0x651e8; add byte ptr [rax - 0x75], cl; and al, 0x10; mov qword ptr [rcx + 8], rax; pop rbp; ret; 
0x000000000044cd15: add eax, 0x6772e; mov ebx, 1; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000044cbff: add eax, 0x67844; mov ebx, 1; add rsp, 0x28; pop rbp; ret; 
0x000000000044cbed: add eax, 0x67856; mov ebx, 1; add rsp, 0x28; pop rbp; ret; 
0x0000000000430662: add eax, 0x692f3; mov ebx, 0x1e; ret; 
0x0000000000433c84: add eax, 0x6a797; call 0x5b0a0; add rsp, 0x10; pop rbp; ret; 
0x0000000000433b9e: add eax, 0x6a835; call 0x5b0a0; add rsp, 8; pop rbp; ret; 
0x0000000000433a30: add eax, 0x6a90b; call 0x3bea0; add rsp, 8; pop rbp; nop; ret; 
0x000000000043382d: add eax, 0x6aa6e; lea rdx, [rip + 0x6aa67]; call rax; 
0x000000000045b484: add eax, 0x6b7; jmp rax; 
0x0000000000424cb3: add eax, 0x6b; nop; nop; xor ecx, ecx; xchg byte ptr [rax], cl; ret; 
0x000000000045e786: add eax, 0x748bc789; and al, 8; mov eax, 0x3e; syscall; 
0x000000000045e786: add eax, 0x748bc789; and al, 8; mov eax, 0x3e; syscall; ret; 
0x000000000045b496: add eax, 0x785; jmp rax; 
0x000000000044eeb9: add eax, 0x7cfb3948; ret; 
0x000000000041decf: add eax, 0x803fc; mov qword ptr [rcx + 0x98], rax; add rsp, 0x18; pop rbp; ret; 
0x000000000045e726: add eax, 0x8244489; ret; 
0x000000000045b4a8: add eax, 0x853; jmp rax; 
0x0000000000413fe2: add eax, 0x8548ffff; fstp xword ptr [rdx]; cmovne rax, rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000045e750: add eax, 0x8944c689; out 0x8b, eax; push rsp; and al, 8; mov eax, 0xea; syscall; 
0x000000000043029c: add eax, 0x894cf189; ret; 
0x0000000000414953: add eax, 0x89b20; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x000000000040ab23: add eax, 0x8a9f8; mov ebx, 4; ret; 
0x000000000040ab30: add eax, 0x8acc4; mov ebx, 7; ret; 
0x000000000040aafd: add eax, 0x8aec6; mov ebx, 8; ret; 
0x000000000044fbe2: add eax, 0x8b480000; and al, 0x10; mov qword ptr [rcx], rax; add rsp, 0x18; pop rbp; ret; 
0x0000000000474ede: add eax, 0x8d480004; sbb eax, 0x3ff88; add rsp, 0x48; pop rbp; ret; 
0x000000000045b4ba: add eax, 0x921; jmp rax; 
0x00000000004068f6: add eax, 0x92baa; mov ebx, 0x1d; add rsp, 0x30; pop rbp; ret; 
0x00000000004068e4: add eax, 0x92bbc; mov ebx, 0x1d; add rsp, 0x30; pop rbp; ret; 
0x0000000000406ee2: add eax, 0x97421; call 0x5b0a0; add rsp, 0x18; pop rbp; ret; 
0x000000000046f794: add eax, 0x9a7; add rsp, 0x20; pop rbp; ret; 
0x000000000045b4cc: add eax, 0x9ef; jmp rax; 
0x00000000004777c2: add eax, 0xa7419; call 0x61820; add rsp, 0x18; pop rbp; ret; 
0x000000000045b4de: add eax, 0xabd; jmp rax; 
0x00000000004729c3: add eax, 0xac200; pop rbp; ret; 
0x00000000004751d5: add eax, 0xad3d6; add rsp, 0x18; pop rbp; nop; ret; 
0x0000000000474f5b: add eax, 0xad8b0; pop rbp; ret; 
0x0000000000472f5a: add eax, 0xaf879; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xaf86e], rcx; pop rbp; ret; 
0x0000000000470117: add eax, 0xb24ac; add rsp, 0x48; pop rbp; ret; 
0x000000000045b4f0: add eax, 0xb8b; jmp rax; 
0x0000000000462718: add eax, 0xbfeb3; add rsp, 0x10; pop rbp; ret; 
0x0000000000461fd3: add eax, 0xc0874; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000046091d: add eax, 0xc1e66; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xc1e5b], rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000045ec74: add eax, 0xc3a87; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x000000000045ebe6: add eax, 0xc3b0d; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x000000000045eb34: add eax, 0xc3b9f; jmp rax; 
0x000000000045eaf4: add eax, 0xc3bdf; jmp rax; 
0x000000000045e999: add eax, 0xc3d6a; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x000000000045b502: add eax, 0xc59; jmp rax; 
0x0000000000458ee8: add eax, 0xc9733; pop rbp; ret; 
0x0000000000458286: add eax, 0xcac65; call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x0000000000454e0e: add eax, 0xcd88d; lea rbx, [rsp + 0x10]; call rcx; 
0x00000000004495a3: add eax, 0xcfbac; add byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x000000000045b514: add eax, 0xd27; jmp rax; 
0x000000000044f4d7: add eax, 0xda3a4; nop dword ptr [rax]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000044f429: add eax, 0xda452; call 0xa5c0; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x000000000044a9c7: add eax, 0xdb31c031; ret; 
0x000000000042c4d3: add eax, 0xdd0; nop; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000472d79: add eax, 0xdd89a; pop rbp; nop; ret; 
0x000000000045b526: add eax, 0xdf5; jmp rax; 
0x00000000004583ea: add eax, 0xe1591; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000457f6e: add eax, 0xe1a0d; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000044038f: add eax, 0xe3064; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000043fa1b: add eax, 0xe39e0; inc dword ptr [rip + 0xe39e2]; call 0x3e3c0; pop rbp; ret; 
0x000000000043fa21: add eax, 0xe39e2; call 0x3e3c0; pop rbp; ret; 
0x000000000043f87a: add eax, 0xe3b79; nop; call 0xa5c0; add rsp, 0xb0; pop rbp; ret; 
0x000000000043f540: add eax, 0xe3eb3; call 0xa5c0; add rsp, 0xb0; pop rbp; ret; 
0x000000000043e39c: add eax, 0xe5057; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000043cb41: add eax, 0xe693a; call 0xa5c0; add rsp, 0x50; pop rbp; ret; 
0x000000000043b489: add eax, 0xe7f6a; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x00000000004747aa: add eax, 0xe8000000; insd dword ptr [rdi], dx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x000000000043b3c3: add eax, 0xe8030; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000043a690: add eax, 0xe8d63; call 0xa5c0; call 0x3a000; add rsp, 0x28; pop rbp; ret; 
0x0000000000439f5e: add eax, 0xe9495; call 0xa5c0; mov rcx, qword ptr [rip + 0x64481]; mov rax, qword ptr [rsp + 0x20]; lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000439e49: add eax, 0xe95aa; call 0xa5c0; mov rcx, qword ptr [rip + 0x64596]; mov rax, qword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; 
0x00000000004745a5: add eax, 0xe976; add rsp, 0x20; pop rbp; ret; 
0x0000000000434b10: add eax, 0xe9cb7; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x38; pop rbp; ret; 
0x000000000040c6b7: add eax, 0xeb0004eb; ret; 
0x0000000000406305: add eax, 0xeb01f083; add dh, byte ptr [rcx]; ror byte ptr [rax + 0x14a0fd05], 0; ret; 
0x000000000042e10b: add eax, 0xeb0bc; nop; mov dword ptr [rip + 0xeb0b5], ecx; pop rbp; ret; 
0x0000000000437ecd: add eax, 0xeb526; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000464a35: add eax, 0xeb9cf; ret; 
0x0000000000465425: add eax, 0xebf68548; and cl, byte ptr [rcx - 0x7d]; clc; and bl, ch; cmp dword ptr [rax - 0x80], eax; jmp qword ptr [rbp + 0x75]; 
0x000000000045b538: add eax, 0xec3; jmp rax; 
0x0000000000436af6: add eax, 0xec8fd; nop dword ptr [rax + rax]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000045eed9: add eax, 0xf1712; call rax; 
0x000000000045eec1: add eax, 0xf172a; cmp rax, 0; je 0x5ef20; call rax; 
0x000000000045e8c0: add eax, 0xf1d2b; cmp rax, 0; je 0x5e905; call rax; 
0x000000000045eb26: add eax, 0xf2095; lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x0000000000426d32: add eax, 0xf2471; add rsp, 0x10; pop rbp; ret; 
0x0000000000447039: add eax, 0xf2942; mov ecx, 1; call 0x24840; add rsp, 0x28; pop rbp; ret; 
0x000000000045cf02: add eax, 0xf3ae9; aesenc xmm0, xmmword ptr [rip + 0xf3af0]; movq rax, xmm0; ret; 
0x000000000045cf0b: add eax, 0xf3af0; movq rax, xmm0; ret; 
0x000000000045cec1: add eax, 0xf3b2a; aesenc xmm0, xmmword ptr [rip + 0xf3b31]; movq rax, xmm0; ret; 
0x000000000045ceca: add eax, 0xf3b31; movq rax, xmm0; ret; 
0x000000000042dd61: add eax, 0xf4bca; add rsp, 0x40; pop rbp; ret; 
0x000000000042dc31: add eax, 0xf4cfa; add rsp, 0x40; pop rbp; ret; 
0x0000000000459c69: add eax, 0xf67ea; lea rcx, [rip + 0xbf4df]; xchg dword ptr [rcx], eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000458b73: add eax, 0xf7a58; pop rbp; ret; 
0x000000000045afe1: add eax, 0xf7e85000; add byte ptr [rax], r8b; pop rax; call 0x5b060; call 0x5cde0; ret; 
0x0000000000458121: add eax, 0xf833a; ret; 
0x00000000004581a0: add eax, 0xf841b; call 0xa180; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045ed51: add eax, 0xf88348; je 0x5ed5d; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000045b54a: add eax, 0xf91; jmp rax; 
0x00000000004585d3: add eax, 0xfb748; call 0x9040; add rsp, 0x10; pop rbp; ret; 
0x000000000043d79a: add eax, 0xfc1e1; nop; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000043d6e7: add eax, 0xfc294; call 0xa580; add rsp, 0x18; pop rbp; ret; 
0x0000000000458b6c: add eax, 0xffface6f; mov qword ptr [rip + 0xf7a58], rax; pop rbp; ret; 
0x0000000000455544: add eax, 0xfffb4bf7; add rsp, 0x40; pop rbp; ret; 
0x000000000045ce0e: add eax, 0xffffcce8; dec dword ptr [rax + 0x3b]; and byte ptr [rdi + 5], dh; call 0x5cde0; ret; 
0x00000000004614e5: add eax, 0xfffff5b8; push rax; xadd dword ptr [rdx], eax; add rsp, 0x40; pop rbp; ret; 
0x000000000041887d: add eax, 4; nop; nop; xor ecx, ecx; xchg byte ptr [rax], cl; ret; 
0x000000000045ed41: add eax, 8; or rdi, 0x80000; mov eax, 0x38; syscall; 
0x0000000000441908: add eax, dword ptr [rax]; add byte ptr [rax + 0x39], cl; sal dword ptr [rbp + 6], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000042642f: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000456075: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000456eb5: add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000458f9c: add eax, dword ptr [rax]; add byte ptr [rax], al; call 0x2a860; add rsp, 0x20; pop rbp; ret; 
0x0000000000459586: add eax, dword ptr [rax]; add byte ptr [rax], al; call 0x2cc60; add rsp, 0x30; pop rbp; ret; 
0x0000000000432cde: add eax, dword ptr [rax]; add byte ptr [rax], al; call 0x331a0; add rsp, 0x28; pop rbp; ret; 
0x000000000045e665: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000046617a: add eax, dword ptr [rax]; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x3eb; 
0x000000000042b810: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0xc149; 
0x000000000041a8fc: add eax, dword ptr [rax]; add byte ptr [rcx - 9], al; fimul dword ptr [rcx + 0x63]; ret 0x894c; 
0x00000000004323d5: add eax, dword ptr [rax]; add byte ptr [rdi + 7], dh; add rsp, 0x18; pop rbp; nop; ret; 
0x000000000043ef63: add eax, dword ptr [rax]; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000042bd34: add eax, dword ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x000000000041d185: add eax, dword ptr [rax]; add rsp, 0x30; pop rbp; ret; 
0x0000000000474ee6: add eax, dword ptr [rax]; add rsp, 0x48; pop rbp; ret; 
0x0000000000419cef: add eax, dword ptr [rax]; add rsp, 0x50; pop rbp; ret; 
0x0000000000462013: add eax, dword ptr [rax]; call 0x58ec0; add rsp, 8; pop rbp; nop; ret; 
0x000000000045f06a: add eax, dword ptr [rax]; mov ecx, 0xf; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x0000000000406d0e: add eax, dword ptr [rax]; mov rax, qword ptr [rsp + 0x10]; mov byte ptr [rax + 0xb4], 0; add rsp, 0x40; pop rbp; ret; 
0x000000000041d0b2: add eax, dword ptr [rax]; mov rax, qword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x28; pop rbp; ret; 
0x0000000000479f9f: add eax, dword ptr [rax]; mov rcx, qword ptr [rsp + 0x258]; mov edi, dword ptr [rsp + 0x2c]; call rdx; 
0x0000000000406739: add eax, dword ptr [rax]; mov rdx, qword ptr [rsp + 0x98]; mov qword ptr [rdx + 0x1f68], 0; add rsp, 0x88; pop rbp; ret; 
0x000000000042a604: add eax, dword ptr [rax]; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x170; pop rbp; ret; 
0x000000000042e4e5: add eax, dword ptr [rax]; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x000000000042d6ae: add eax, dword ptr [rax]; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x40; pop rbp; ret; 
0x00000000004615c8: add eax, dword ptr [rbp - 0x8cb8b25]; ret 7; 
0x0000000000401b97: add eax, dword ptr [rcx + 0xf]; xchg eax, esp; ret 0x1f0f; 
0x000000000041bb9c: add eax, dword ptr [rdi + 0x70]; mov qword ptr [rsi + 0x10], rax; add rsp, 0x40; pop rbp; ret; 
0x0000000000407107: add eax, eax; add rsp, 0x40; pop rbp; ret; 
0x0000000000467a9f: add eax, eax; mov qword ptr [rcx + 0x20], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000046bb8a: add eax, ecx; add rsp, 0x10; pop rbp; ret; 
0x000000000042c435: add eax, ecx; add rsp, 0x18; pop rbp; ret; 
0x000000000044ac7d: add eax, ecx; add rsp, 0x48; pop rbp; ret; 
0x0000000000461b91: add eax, ecx; add rsp, 8; pop rbp; ret; 
0x0000000000402726: add eax, edx; mov dword ptr [rsp + 8], eax; mov dword ptr [rsp + 0xc], edx; ret; 
0x000000000044d0de: add eax, edx; mov edi, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045e8f8: add eax, edx; mov qword ptr [rsp + 0x20], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000045ce31: add eax, edx; mov qword ptr [rsp + 8], rax; ret; 
0x000000000044c42d: add eax, edx; mov rbx, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000042c5e1: add ebx, dword ptr [rax + 0x38]; add rcx, rbx; sub rdx, rcx; mov qword ptr [rax + 0x48], rdx; ret; 
0x000000000046eb51: add ebx, dword ptr [rsi + rdi*8 + 0x10]; nop; mov rcx, rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000042dbb4: add ebx, ebp; add bh, bh; ret 0x6348; 
0x0000000000406308: add ebx, ebp; add dh, byte ptr [rcx]; ror byte ptr [rax + 0x14a0fd05], 0; ret; 
0x0000000000454b43: add ebx, ebp; add eax, 0x245c8b48; jo 0x54b94; mov eax, dword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000041cfa6: add ebx, ebp; or esi, dword ptr [rcx]; ror byte ptr [rax - 0x77], 0xf3; add rsp, 0x28; pop rbp; ret; 
0x0000000000427241: add ebx, ecx; mov rax, r11; lea rdx, [rsp + 0x110]; call rdi; 
0x000000000042c608: add ecx, 0x1000; mov qword ptr [rax + 8], rcx; ret; 
0x000000000045004c: add ecx, 0x11d8; add rsp, 0x10; pop rbp; ret; 
0x0000000000420be6: add ecx, 3; cmp eax, ecx; jne 0x20bc1; add rsp, 0x28; pop rbp; ret; 
0x0000000000461fd0: add ecx, dword ptr [rax - 0x39]; add eax, 0xc0874; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004229fe: add ecx, dword ptr [rax - 0x73]; add eax, 0x10039a; call 0xa180; add rsp, 0x10; pop rbp; ret; 
0x000000000042299e: add ecx, dword ptr [rax - 0x73]; add eax, 0x100442; call 0xa180; add rsp, 0x10; pop rbp; ret; 
0x000000000042dd57: add ecx, dword ptr [rax - 0x73]; add eax, 0x123d81; mov qword ptr [rip + 0xf4bca], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000041decc: add ecx, dword ptr [rax - 0x73]; add eax, 0x803fc; mov qword ptr [rcx + 0x98], rax; add rsp, 0x18; pop rbp; ret; 
0x00000000004745a2: add ecx, dword ptr [rax - 0x73]; add eax, 0xe976; add rsp, 0x20; pop rbp; ret; 
0x000000000040d3f5: add ecx, dword ptr [rax - 0x75]; adc cl, byte ptr [rax - 0x77]; sar byte ptr [rbx + 1], 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000477dc7: add ecx, dword ptr [rax - 0x75]; or byte ptr [rcx - 0x77], cl; or byte ptr [r9 + r9*4], cl; sub rsp, -0x80; pop rbp; ret; 
0x00000000004729b5: add ecx, dword ptr [rax - 0x75]; or eax, 0xac20b; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xac200], rax; pop rbp; ret; 
0x0000000000474f4d: add ecx, dword ptr [rax - 0x75]; or eax, 0xad8bb; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xad8b0], rax; pop rbp; ret; 
0x0000000000458eda: add ecx, dword ptr [rax - 0x75]; or eax, 0xc973e; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xc9733], rax; pop rbp; ret; 
0x0000000000405305: add ecx, dword ptr [rax - 0x77]; and al, 0x18; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000040611d: add ecx, dword ptr [rax - 0x77]; and al, 0x20; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000044134f: add ecx, dword ptr [rax - 0x77]; fmul dword ptr [rax - 0x75]; or byte ptr [rax - 0x77], cl; retf 0xf48; mov edx, 0x894821e9; ret; 
0x000000000040b86e: add ecx, dword ptr [rax - 0x77]; ret; 
0x000000000041d39c: add ecx, dword ptr [rax - 0x77]; retf 0x8948; ror byte ptr [rax - 0x77], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000044f8ac: add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000425449: add ecx, dword ptr [rax - 0x7f]; ret; 
0x000000000040a0e2: add ecx, dword ptr [rax - 1]; ret 0x3948; 
0x00000000004076cd: add ecx, dword ptr [rax - 1]; ret 0x3949; 
0x0000000000413397: add ecx, dword ptr [rax - 1]; ret; 
0x0000000000411541: add ecx, dword ptr [rax - 9]; ret 1; 
0x000000000041ded1: add ecx, dword ptr [rax]; add byte ptr [rax - 0x77], cl; sbb dword ptr [rax + 0x48000000], 0x5d18c483; ret; 
0x0000000000428d96: add ecx, dword ptr [rax]; shl rbx, 0xd; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000041baaf: add ecx, dword ptr [rbp - 0x77]; ret 0x8341; 
0x0000000000418041: add ecx, dword ptr [rdi - 0x76b7ffed]; add eax, 0x10aeb4; add rsp, 0x20; pop rbp; ret; 
0x00000000004395b9: add ecx, dword ptr [rdi]; xchg eax, esp; ret 0x5488; 
0x0000000000472221: add ecx, dword ptr [rdi]; xchg eax, esp; ror dword ptr [rcx - 0x3b7cb738], 0x20; pop rbp; ret; 
0x000000000042c5e5: add ecx, ebx; sub rdx, rcx; mov qword ptr [rax + 0x48], rdx; ret; 
0x000000000045ce2a: add ecx, edi; shl rdx, 0x20; add rax, rdx; mov qword ptr [rsp + 8], rax; ret; 
0x000000000045ef18: add ecx, edx; add rsp, 0x10; pop rbp; ret; 
0x0000000000447ed0: add ecx, edx; mov qword ptr [rax + 0x68], rcx; ret; 
0x0000000000402add: add ecx, edx; mov rdx, rcx; shr rcx, 0x20; lea rax, [rcx + rdx]; and eax, 0x7f; ret; 
0x000000000045d98f: add edi, 0x10; movups xmm0, xmmword ptr [rsi]; add rsi, 0x10; movups xmmword ptr [rdi], xmm0; add rdi, 0x10; ret; 
0x000000000045d99d: add edi, 0x10; ret; 
0x0000000000403072: add edi, 0x40; sub rbx, 0x40; cmp edx, 0xffff; je 0x301d; xor rax, rax; ret; 
0x00000000004033f5: add edi, 1; cmp rdi, rdx; jb 0x33bf; vzeroupper; mov qword ptr [r11], -1; ret; 
0x000000000045ede9: add edi, 8; mov rsi, rdi; mov rdi, 0x1002; mov rax, 0x9e; syscall; 
0x00000000004030dc: add edi, 8; sub rbx, 8; cmp rcx, rdx; je 0x30cb; xor rax, rax; ret; 
0x0000000000456ef5: add edi, dword ptr [rax + 4]; add rsp, 0x10; pop rbp; ret; 
0x000000000040346b: add edi, ecx; sub rdi, r10; mov qword ptr [r11], rdi; ret; 
0x0000000000462e7e: add edi, edi; add rsp, 0x48; pop rbp; ret; 
0x0000000000465e1e: add edi, edi; add rsp, 0x58; pop rbp; ret; 
0x00000000004692e0: add edi, edi; add rsp, 0x70; pop rbp; ret; 
0x0000000000463753: add edi, edi; cmp cl, dl; je 0x63748; add rsp, 0x60; pop rbp; ret; 
0x0000000000469097: add edi, edi; mov rcx, rdx; add rsp, 0x88; pop rbp; ret; 
0x000000000046674c: add edi, edi; xor byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000403526: add edi, edx; mov qword ptr [r8], rdi; ret; 
0x000000000042a215: add edi, esi; dec dword ptr [rax - 0x75]; and al, 0x20; add rsp, 0x40; pop rbp; ret; 
0x000000000042a1ce: add edi, esi; dec dword ptr [rax - 0x75]; and al, 0x28; add rsp, 0x40; pop rbp; ret; 
0x000000000041cf46: add edx, dword ptr [rax - 0x3fcef115]; mov rbx, rsi; add rsp, 0x28; pop rbp; ret; 
0x0000000000474cf3: add edx, edi; dec dword ptr [rax - 0x75]; and al, 0x28; add rsp, 0x30; pop rbp; ret; 
0x00000000004035ce: add edx, edi; mov qword ptr [r8], rdx; vzeroupper; ret; 
0x0000000000427978: add edx, esi; cmp rdx, rdi; jae 0x27985; add rsp, 0x28; pop rbp; ret; 
0x00000000004507b9: add edx, esi; mov qword ptr [rax + 8], rdx; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000041fca5: add edx, esi; movups xmm0, xmmword ptr [rax + 0x18]; xor eax, eax; ret; 
0x000000000045d996: add esi, 0x10; movups xmmword ptr [rdi], xmm0; add rdi, 0x10; ret; 
0x000000000046c003: add esi, dword ptr [rbp + 0x12]; lea rax, [rip + 0x294d3]; mov ebx, 4; add rsp, 0x28; pop rbp; ret; 
0x0000000000409f15: add esi, dword ptr [rbp + 9]; mov rax, rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000045cab8: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x10000000; pop rbp; ret; 
0x000000000045c738: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x1000000; pop rbp; ret; 
0x000000000045c3b8: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x100000; pop rbp; ret; 
0x000000000045c038: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x10000; pop rbp; ret; 
0x000000000045bcb8: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x1000; pop rbp; ret; 
0x000000000045b930: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x100; pop rbp; ret; 
0x000000000045b666: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x10; pop rbp; ret; 
0x000000000045cb98: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x20000000; pop rbp; ret; 
0x000000000045c818: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x2000000; pop rbp; ret; 
0x000000000045c498: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x200000; pop rbp; ret; 
0x000000000045c118: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x20000; pop rbp; ret; 
0x000000000045bd98: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x2000; pop rbp; ret; 
0x000000000045ba10: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x200; pop rbp; ret; 
0x000000000045b706: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000045cc78: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x40000000; pop rbp; ret; 
0x000000000045c8f8: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x4000000; pop rbp; ret; 
0x000000000045c578: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x400000; pop rbp; ret; 
0x000000000045c1f8: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x40000; pop rbp; ret; 
0x000000000045be78: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x4000; pop rbp; ret; 
0x000000000045baf0: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x400; pop rbp; ret; 
0x000000000045b7a6: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x40; pop rbp; ret; 
0x000000000045c9d8: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x8000000; pop rbp; ret; 
0x000000000045c658: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x800000; pop rbp; ret; 
0x000000000045c2d8: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x80000; pop rbp; ret; 
0x000000000045bf58: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x8000; pop rbp; ret; 
0x000000000045bbd0: add esi, ebx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x800; pop rbp; ret; 
0x000000000045b86a: add esi, ebx; sub rcx, rbx; call 0x5a2a0; sub rsp, -0x80; pop rbp; ret; 
0x000000000045cac3: add esp, 0x10000000; pop rbp; ret; 
0x000000000045c743: add esp, 0x1000000; pop rbp; ret; 
0x000000000045c3c3: add esp, 0x100000; pop rbp; ret; 
0x000000000045ae60: add esp, 0x10000; pop rbp; ret; 
0x000000000045ac60: add esp, 0x1000; pop rbp; ret; 
0x0000000000439098: add esp, 0x100; pop rbp; nop; ret; 
0x000000000043904a: add esp, 0x100; pop rbp; ret; 
0x0000000000471118: add esp, 0x108; pop rbp; nop; ret; 
0x000000000044b212: add esp, 0x108; pop rbp; ret; 
0x000000000040f73b: add esp, 0x10; pop rbp; nop; ret; 
0x000000000040102e: add esp, 0x10; pop rbp; ret; 
0x000000000044bcba: add esp, 0x110; pop rbp; ret; 
0x00000000004565b8: add esp, 0x120; pop rbp; nop; ret; 
0x0000000000426fff: add esp, 0x120; pop rbp; ret; 
0x000000000046d2e0: add esp, 0x128; pop rbp; ret; 
0x000000000044a09a: add esp, 0x130; pop rbp; ret; 
0x000000000042a9f7: add esp, 0x138; pop rbp; ret; 
0x00000000004078cc: add esp, 0x140; pop rbp; ret; 
0x000000000042a614: add esp, 0x170; pop rbp; ret; 
0x000000000045e526: add esp, 0x170; popfq; pop rbp; ret; 
0x0000000000451fd8: add esp, 0x178; pop rbp; nop; ret; 
0x0000000000410d1b: add esp, 0x18; pop rbp; nop; ret; 
0x00000000004019b9: add esp, 0x18; pop rbp; ret; 
0x000000000042ae45: add esp, 0x190; pop rbp; ret; 
0x0000000000454006: add esp, 0x198; pop rbp; ret; 
0x0000000000448a19: add esp, 0x1a0; pop rbp; ret; 
0x000000000046b278: add esp, 0x1a8; pop rbp; nop; ret; 
0x00000000004171f8: add esp, 0x1b8; pop rbp; nop; ret; 
0x0000000000453f37: add esp, 0x1b8; pop rbp; ret; 
0x00000000004300b2: add esp, 0x1c0; pop rbp; ret; 
0x000000000047a9e0: add esp, 0x1d0; pop rbp; ret; 
0x000000000045139c: add esp, 0x1e0; pop rbp; ret; 
0x000000000045cba3: add esp, 0x20000000; pop rbp; ret; 
0x000000000045c823: add esp, 0x2000000; pop rbp; ret; 
0x000000000045c4a3: add esp, 0x200000; pop rbp; ret; 
0x000000000045c123: add esp, 0x20000; pop rbp; ret; 
0x000000000045ace0: add esp, 0x2000; pop rbp; ret; 
0x000000000045ab3c: add esp, 0x200; pop rbp; ret; 
0x000000000042d901: add esp, 0x2020; pop rbp; ret; 
0x0000000000402988: add esp, 0x20; pop rbp; ret; 
0x000000000043c354: add esp, 0x210; pop rbp; ret; 
0x0000000000479cb4: add esp, 0x248; pop rbp; ret; 
0x00000000004532ee: add esp, 0x258; pop rbp; ret; 
0x000000000046b976: add esp, 0x270; pop rbp; ret; 
0x0000000000420bbb: add esp, 0x28; pop rbp; nop; ret; 
0x0000000000403a5a: add esp, 0x28; pop rbp; ret; 
0x000000000045595d: add esp, 0x2a8; pop rbp; ret; 
0x0000000000448467: add esp, 0x2e8; pop rbp; ret; 
0x0000000000452e46: add esp, 0x300; pop rbp; ret; 
0x00000000004351fb: add esp, 0x30; pop rbp; nop; ret; 
0x00000000004044bf: add esp, 0x30; pop rbp; ret; 
0x000000000045e5c8: add esp, 0x30; ret; 
0x000000000041a5c8: add esp, 0x328; pop rbp; ret; 
0x000000000040913b: add esp, 0x38; pop rbp; nop; ret; 
0x0000000000442913: add esp, 0x38; pop rbp; ret; 
0x000000000043cd3c: add esp, 0x3a0; pop rbp; ret; 
0x000000000046c417: add esp, 0x3b0; pop rbp; ret; 
0x0000000000465bf9: add esp, 0x3d0; pop rbp; ret; 
0x000000000045cc83: add esp, 0x40000000; pop rbp; ret; 
0x000000000045c903: add esp, 0x4000000; pop rbp; ret; 
0x000000000045c583: add esp, 0x400000; pop rbp; ret; 
0x000000000045c203: add esp, 0x40000; pop rbp; ret; 
0x000000000045ad60: add esp, 0x4000; pop rbp; ret; 
0x000000000045ab9c: add esp, 0x400; pop rbp; ret; 
0x000000000041955b: add esp, 0x40; pop rbp; nop; ret; 
0x0000000000402c27: add esp, 0x40; pop rbp; ret; 
0x0000000000440173: add esp, 0x428; pop rbp; ret; 
0x000000000046ff7b: add esp, 0x48; pop rbp; nop; ret; 
0x000000000040591d: add esp, 0x48; pop rbp; ret; 
0x0000000000402697: add esp, 0x50; pop rbp; ret; 
0x000000000041013b: add esp, 0x58; pop rbp; nop; ret; 
0x0000000000404966: add esp, 0x58; pop rbp; ret; 
0x000000000046e286: add esp, 0x600; pop rbp; ret; 
0x0000000000403cbb: add esp, 0x60; pop rbp; nop; ret; 
0x0000000000403c4f: add esp, 0x60; pop rbp; ret; 
0x000000000042d3c0: add esp, 0x680; pop rbp; ret; 
0x0000000000405b1b: add esp, 0x68; pop rbp; nop; ret; 
0x0000000000404670: add esp, 0x68; pop rbp; ret; 
0x0000000000465f37: add esp, 0x690; pop rbp; ret; 
0x00000000004578db: add esp, 0x70; pop rbp; nop; ret; 
0x000000000040882b: add esp, 0x70; pop rbp; ret; 
0x000000000044967b: add esp, 0x78; pop rbp; nop; ret; 
0x000000000040db14: add esp, 0x78; pop rbp; ret; 
0x000000000045c9e3: add esp, 0x8000000; pop rbp; ret; 
0x000000000045c663: add esp, 0x800000; pop rbp; ret; 
0x000000000045c2e3: add esp, 0x80000; pop rbp; ret; 
0x000000000045ade0: add esp, 0x8000; pop rbp; ret; 
0x000000000045abfc: add esp, 0x800; pop rbp; ret; 
0x000000000040674f: add esp, 0x88; pop rbp; ret; 
0x000000000047a298: add esp, 0x90; pop rbp; nop; ret; 
0x000000000040b1c9: add esp, 0x90; pop rbp; ret; 
0x000000000040f3ac: add esp, 0x98; pop rbp; ret; 
0x0000000000409805: add esp, 0xa0; pop rbp; ret; 
0x0000000000401747: add esp, 0xa8; pop rbp; ret; 
0x0000000000426543: add esp, 0xb0; pop rbp; ret; 
0x000000000042e73a: add esp, 0xc0; pop rbp; ret; 
0x0000000000415203: add esp, 0xc8; pop rbp; ret; 
0x000000000042ec74: add esp, 0xd8; pop rbp; ret; 
0x000000000046bef4: add esp, 0xe0; pop rbp; ret; 
0x00000000004073b7: add esp, 0xf8; pop rbp; ret; 
0x00000000004225bb: add esp, 8; pop rbp; nop; ret; 
0x0000000000401160: add esp, 8; pop rbp; ret; 
0x000000000044ad04: add esp, edi; xor rcx, rax; mul rcx; xor rax, rdx; ret; 
0x000000000040e2a9: add qword ptr [r8 - 0x76b3b4b8], rcx; push rax; pop rax; add rsp, 0x60; pop rbp; ret; 
0x000000000043a962: add qword ptr [r8], rax; mov rax, qword ptr [rsp + 0x28]; call 0x3a5e0; add rsp, 0x30; pop rbp; ret; 
0x000000000042347e: add qword ptr [r9 - 0x77], r9; ret 0xf889; 
0x000000000041c262: add qword ptr [rax + 0x1250], rdi; add rsp, 0x10; pop rbp; ret; 
0x0000000000415801: add qword ptr [rax + 0x30], rcx; mov rax, rbx; add rsp, 0x28; pop rbp; ret; 
0x0000000000456e4d: add qword ptr [rax + 2], rdi; add rsp, 0x10; pop rbp; ret; 
0x000000000043a822: add qword ptr [rax], r8; mov rax, qword ptr [rsp + 0x28]; call 0x3a5e0; add rsp, 0x30; pop rbp; ret; 
0x000000000043a8f2: add qword ptr [rax], r8; mov rax, qword ptr [rsp + 0x38]; call 0x3a5e0; add rsp, 0x28; pop rbp; ret; 
0x000000000041b6c9: add qword ptr [rcx + 0x10], rax; mov rax, qword ptr [rsp + 0x38]; add qword ptr [rcx + 0x18], rax; add rsp, 0x78; pop rbp; ret; 
0x000000000041b6d2: add qword ptr [rcx + 0x18], rax; add rsp, 0x78; pop rbp; ret; 
0x0000000000422f9f: add qword ptr [rcx], rax; add byte ptr [rax - 0x77], cl; sbb al, 0xc8; add rsp, 0x38; pop rbp; ret; 
0x000000000042875d: add qword ptr [rdx + 0x10128], rax; add rsp, 0x98; pop rbp; ret; 
0x0000000000450a18: add qword ptr [rdx + 0x11e8], rax; add rsp, 0x30; pop rbp; ret; 
0x000000000041e6d4: add qword ptr [rdx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000042bb80: add qword ptr [rsi + 0x18], r11; add rsp, 0x58; pop rbp; ret; 
0x0000000000427240: add r11, r9; mov rax, r11; lea rdx, [rsp + 0x110]; call rdi; 
0x0000000000465e1d: add r15, rdi; add rsp, 0x58; pop rbp; ret; 
0x0000000000463752: add r15, rdi; cmp cl, dl; je 0x63748; add rsp, 0x60; pop rbp; ret; 
0x0000000000469096: add r15d, edi; mov rcx, rdx; add rsp, 0x88; pop rbp; ret; 
0x000000000046674b: add r15d, edi; xor byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000045ed40: add r8, 8; or rdi, 0x80000; mov eax, 0x38; syscall; 
0x0000000000442069: add r8b, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x820f; 
0x000000000042855c: add r9b, byte ptr [rax]; mov rax, rcx; mov rcx, r8; lea rdx, [rsp + 0x80]; call rdi; 
0x000000000042c70a: add rax, 0x1268; call 0x2c600; add rsp, 0x38; pop rbp; ret; 
0x0000000000423c5d: add rax, 0x16848; call 0x15740; add rsp, 0x20; pop rbp; ret; 
0x0000000000404a82: add rax, 0x24448b00; sbb al, 0x48; add esp, 0x28; pop rbp; ret; 
0x0000000000478dff: add rax, 0x40; call 0x764e0; add rsp, 0xa8; pop rbp; ret; 
0x0000000000478621: add rax, 0x40; call 0x76d20; add rsp, 0x30; pop rbp; ret; 
0x00000000004789f8: add rax, 0x40; nop dword ptr [rax]; call 0x76400; add rsp, 0x40; pop rbp; ret; 
0x0000000000405274: add rax, 0x58; nop; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x0000000000424cb2: add rax, 0x6b; nop; nop; xor ecx, ecx; xchg byte ptr [rax], cl; ret; 
0x000000000042c4d2: add rax, 0xdd0; nop; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000041887c: add rax, 4; nop; nop; xor ecx, ecx; xchg byte ptr [rax], cl; ret; 
0x000000000041bb9b: add rax, qword ptr [rdi + 0x70]; mov qword ptr [rsi + 0x10], rax; add rsp, 0x40; pop rbp; ret; 
0x0000000000407106: add rax, r8; add rsp, 0x40; pop rbp; ret; 
0x0000000000467a9e: add rax, r8; mov qword ptr [rcx + 0x20], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000046bb89: add rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000042c434: add rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000044ac7c: add rax, rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000461b90: add rax, rcx; add rsp, 8; pop rbp; ret; 
0x000000000044d0dd: add rax, rdx; mov edi, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045e8f7: add rax, rdx; mov qword ptr [rsp + 0x20], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000045ce30: add rax, rdx; mov qword ptr [rsp + 8], rax; ret; 
0x000000000044c42c: add rax, rdx; mov rbx, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000042c5e0: add rbx, qword ptr [rax + 0x38]; add rcx, rbx; sub rdx, rcx; mov qword ptr [rax + 0x48], rdx; ret; 
0x000000000046eb50: add rbx, qword ptr [rsi + rdi*8 + 0x10]; nop; mov rcx, rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000042c607: add rcx, 0x1000; mov qword ptr [rax + 8], rcx; ret; 
0x000000000045004b: add rcx, 0x11d8; add rsp, 0x10; pop rbp; ret; 
0x0000000000428d95: add rcx, qword ptr [rax]; shl rbx, 0xd; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000042c5e4: add rcx, rbx; sub rdx, rcx; mov qword ptr [rax + 0x48], rdx; ret; 
0x000000000045ef17: add rcx, rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000447ecf: add rcx, rdx; mov qword ptr [rax + 0x68], rcx; ret; 
0x0000000000402adc: add rcx, rdx; mov rdx, rcx; shr rcx, 0x20; lea rax, [rcx + rdx]; and eax, 0x7f; ret; 
0x000000000045d98e: add rdi, 0x10; movups xmm0, xmmword ptr [rsi]; add rsi, 0x10; movups xmmword ptr [rdi], xmm0; add rdi, 0x10; ret; 
0x000000000045d99c: add rdi, 0x10; ret; 
0x0000000000403071: add rdi, 0x40; sub rbx, 0x40; cmp edx, 0xffff; je 0x301d; xor rax, rax; ret; 
0x00000000004033f4: add rdi, 1; cmp rdi, rdx; jb 0x33bf; vzeroupper; mov qword ptr [r11], -1; ret; 
0x000000000045ede8: add rdi, 8; mov rsi, rdi; mov rdi, 0x1002; mov rax, 0x9e; syscall; 
0x00000000004030db: add rdi, 8; sub rbx, 8; cmp rcx, rdx; je 0x30cb; xor rax, rax; ret; 
0x0000000000456ef4: add rdi, qword ptr [rax + 4]; add rsp, 0x10; pop rbp; ret; 
0x000000000040346a: add rdi, rcx; sub rdi, r10; mov qword ptr [r11], rdi; ret; 
0x0000000000403525: add rdi, rdx; mov qword ptr [r8], rdi; ret; 
0x00000000004035cd: add rdx, rdi; mov qword ptr [r8], rdx; vzeroupper; ret; 
0x0000000000427977: add rdx, rsi; cmp rdx, rdi; jae 0x27985; add rsp, 0x28; pop rbp; ret; 
0x00000000004507b8: add rdx, rsi; mov qword ptr [rax + 8], rdx; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000045d995: add rsi, 0x10; movups xmmword ptr [rdi], xmm0; add rdi, 0x10; ret; 
0x000000000045cab7: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x10000000; pop rbp; ret; 
0x000000000045c737: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x1000000; pop rbp; ret; 
0x000000000045c3b7: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x100000; pop rbp; ret; 
0x000000000045c037: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x10000; pop rbp; ret; 
0x000000000045bcb7: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x1000; pop rbp; ret; 
0x000000000045b92f: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x100; pop rbp; ret; 
0x000000000045b665: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x10; pop rbp; ret; 
0x000000000045cb97: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x20000000; pop rbp; ret; 
0x000000000045c817: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x2000000; pop rbp; ret; 
0x000000000045c497: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x200000; pop rbp; ret; 
0x000000000045c117: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x20000; pop rbp; ret; 
0x000000000045bd97: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x2000; pop rbp; ret; 
0x000000000045ba0f: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x200; pop rbp; ret; 
0x000000000045b705: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000045cc77: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x40000000; pop rbp; ret; 
0x000000000045c8f7: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x4000000; pop rbp; ret; 
0x000000000045c577: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x400000; pop rbp; ret; 
0x000000000045c1f7: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x40000; pop rbp; ret; 
0x000000000045be77: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x4000; pop rbp; ret; 
0x000000000045baef: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x400; pop rbp; ret; 
0x000000000045b7a5: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x40; pop rbp; ret; 
0x000000000045c9d7: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x8000000; pop rbp; ret; 
0x000000000045c657: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x800000; pop rbp; ret; 
0x000000000045c2d7: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x80000; pop rbp; ret; 
0x000000000045bf57: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x8000; pop rbp; ret; 
0x000000000045bbcf: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; add rsp, 0x800; pop rbp; ret; 
0x000000000045b869: add rsi, rbx; sub rcx, rbx; call 0x5a2a0; sub rsp, -0x80; pop rbp; ret; 
0x000000000045cac2: add rsp, 0x10000000; pop rbp; ret; 
0x000000000045c742: add rsp, 0x1000000; pop rbp; ret; 
0x000000000045c3c2: add rsp, 0x100000; pop rbp; ret; 
0x000000000045ae5f: add rsp, 0x10000; pop rbp; ret; 
0x000000000045ac5f: add rsp, 0x1000; pop rbp; ret; 
0x0000000000439097: add rsp, 0x100; pop rbp; nop; ret; 
0x0000000000439049: add rsp, 0x100; pop rbp; ret; 
0x0000000000471117: add rsp, 0x108; pop rbp; nop; ret; 
0x000000000044b211: add rsp, 0x108; pop rbp; ret; 
0x000000000040f73a: add rsp, 0x10; pop rbp; nop; ret; 
0x000000000040102d: add rsp, 0x10; pop rbp; ret; 
0x000000000044bcb9: add rsp, 0x110; pop rbp; ret; 
0x00000000004565b7: add rsp, 0x120; pop rbp; nop; ret; 
0x0000000000426ffe: add rsp, 0x120; pop rbp; ret; 
0x000000000046d2df: add rsp, 0x128; pop rbp; ret; 
0x000000000044a099: add rsp, 0x130; pop rbp; ret; 
0x000000000042a9f6: add rsp, 0x138; pop rbp; ret; 
0x00000000004078cb: add rsp, 0x140; pop rbp; ret; 
0x000000000042a613: add rsp, 0x170; pop rbp; ret; 
0x000000000045e525: add rsp, 0x170; popfq; pop rbp; ret; 
0x0000000000451fd7: add rsp, 0x178; pop rbp; nop; ret; 
0x0000000000410d1a: add rsp, 0x18; pop rbp; nop; ret; 
0x00000000004019b8: add rsp, 0x18; pop rbp; ret; 
0x000000000042ae44: add rsp, 0x190; pop rbp; ret; 
0x0000000000454005: add rsp, 0x198; pop rbp; ret; 
0x0000000000448a18: add rsp, 0x1a0; pop rbp; ret; 
0x000000000046b277: add rsp, 0x1a8; pop rbp; nop; ret; 
0x00000000004171f7: add rsp, 0x1b8; pop rbp; nop; ret; 
0x0000000000453f36: add rsp, 0x1b8; pop rbp; ret; 
0x00000000004300b1: add rsp, 0x1c0; pop rbp; ret; 
0x000000000047a9df: add rsp, 0x1d0; pop rbp; ret; 
0x000000000045139b: add rsp, 0x1e0; pop rbp; ret; 
0x000000000045cba2: add rsp, 0x20000000; pop rbp; ret; 
0x000000000045c822: add rsp, 0x2000000; pop rbp; ret; 
0x000000000045c4a2: add rsp, 0x200000; pop rbp; ret; 
0x000000000045c122: add rsp, 0x20000; pop rbp; ret; 
0x000000000045acdf: add rsp, 0x2000; pop rbp; ret; 
0x000000000045ab3b: add rsp, 0x200; pop rbp; ret; 
0x000000000042d900: add rsp, 0x2020; pop rbp; ret; 
0x0000000000402987: add rsp, 0x20; pop rbp; ret; 
0x000000000043c353: add rsp, 0x210; pop rbp; ret; 
0x0000000000479cb3: add rsp, 0x248; pop rbp; ret; 
0x00000000004532ed: add rsp, 0x258; pop rbp; ret; 
0x000000000046b975: add rsp, 0x270; pop rbp; ret; 
0x0000000000420bba: add rsp, 0x28; pop rbp; nop; ret; 
0x0000000000403a59: add rsp, 0x28; pop rbp; ret; 
0x000000000045595c: add rsp, 0x2a8; pop rbp; ret; 
0x0000000000448466: add rsp, 0x2e8; pop rbp; ret; 
0x0000000000452e45: add rsp, 0x300; pop rbp; ret; 
0x00000000004351fa: add rsp, 0x30; pop rbp; nop; ret; 
0x00000000004044be: add rsp, 0x30; pop rbp; ret; 
0x000000000045e5c7: add rsp, 0x30; ret; 
0x000000000041a5c7: add rsp, 0x328; pop rbp; ret; 
0x000000000040913a: add rsp, 0x38; pop rbp; nop; ret; 
0x00000000004036ad: add rsp, 0x38; pop rbp; ret; 
0x000000000043cd3b: add rsp, 0x3a0; pop rbp; ret; 
0x000000000046c416: add rsp, 0x3b0; pop rbp; ret; 
0x0000000000465bf8: add rsp, 0x3d0; pop rbp; ret; 
0x000000000045cc82: add rsp, 0x40000000; pop rbp; ret; 
0x000000000045c902: add rsp, 0x4000000; pop rbp; ret; 
0x000000000045c582: add rsp, 0x400000; pop rbp; ret; 
0x000000000045c202: add rsp, 0x40000; pop rbp; ret; 
0x000000000045ad5f: add rsp, 0x4000; pop rbp; ret; 
0x000000000045ab9b: add rsp, 0x400; pop rbp; ret; 
0x000000000041955a: add rsp, 0x40; pop rbp; nop; ret; 
0x0000000000402c26: add rsp, 0x40; pop rbp; ret; 
0x0000000000440172: add rsp, 0x428; pop rbp; ret; 
0x000000000046ff7a: add rsp, 0x48; pop rbp; nop; ret; 
0x000000000040591c: add rsp, 0x48; pop rbp; ret; 
0x0000000000402696: add rsp, 0x50; pop rbp; ret; 
0x000000000041013a: add rsp, 0x58; pop rbp; nop; ret; 
0x0000000000404965: add rsp, 0x58; pop rbp; ret; 
0x000000000046e285: add rsp, 0x600; pop rbp; ret; 
0x0000000000403cba: add rsp, 0x60; pop rbp; nop; ret; 
0x0000000000403c4e: add rsp, 0x60; pop rbp; ret; 
0x000000000042d3bf: add rsp, 0x680; pop rbp; ret; 
0x0000000000405b1a: add rsp, 0x68; pop rbp; nop; ret; 
0x000000000040466f: add rsp, 0x68; pop rbp; ret; 
0x0000000000465f36: add rsp, 0x690; pop rbp; ret; 
0x00000000004578da: add rsp, 0x70; pop rbp; nop; ret; 
0x000000000040882a: add rsp, 0x70; pop rbp; ret; 
0x000000000044967a: add rsp, 0x78; pop rbp; nop; ret; 
0x000000000040db13: add rsp, 0x78; pop rbp; ret; 
0x000000000045c9e2: add rsp, 0x8000000; pop rbp; ret; 
0x000000000045c662: add rsp, 0x800000; pop rbp; ret; 
0x000000000045c2e2: add rsp, 0x80000; pop rbp; ret; 
0x000000000045addf: add rsp, 0x8000; pop rbp; ret; 
0x000000000045abfb: add rsp, 0x800; pop rbp; ret; 
0x000000000040674e: add rsp, 0x88; pop rbp; ret; 
0x000000000047a297: add rsp, 0x90; pop rbp; nop; ret; 
0x000000000040b1c8: add rsp, 0x90; pop rbp; ret; 
0x000000000040f3ab: add rsp, 0x98; pop rbp; ret; 
0x0000000000409804: add rsp, 0xa0; pop rbp; ret; 
0x0000000000401746: add rsp, 0xa8; pop rbp; ret; 
0x0000000000426542: add rsp, 0xb0; pop rbp; ret; 
0x000000000042e739: add rsp, 0xc0; pop rbp; ret; 
0x0000000000415202: add rsp, 0xc8; pop rbp; ret; 
0x000000000042ec73: add rsp, 0xd8; pop rbp; ret; 
0x000000000046bef3: add rsp, 0xe0; pop rbp; ret; 
0x00000000004073b6: add rsp, 0xf8; pop rbp; ret; 
0x00000000004225ba: add rsp, 8; pop rbp; nop; ret; 
0x000000000040115f: add rsp, 8; pop rbp; ret; 
0x000000000041e1d1: addps xmm0, xmm1; movsd qword ptr [rsp + 0x50], xmm0; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000041e1d0: addsd xmm0, xmm1; movsd qword ptr [rsp + 0x50], xmm0; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000045a3e6: aesenc xmm0, xmm0; movq rax, xmm0; ret; 
0x000000000045cefe: aesenc xmm0, xmmword ptr [rip + 0xf3ae9]; aesenc xmm0, xmmword ptr [rip + 0xf3af0]; movq rax, xmm0; ret; 
0x000000000045cf07: aesenc xmm0, xmmword ptr [rip + 0xf3af0]; movq rax, xmm0; ret; 
0x000000000045cebd: aesenc xmm0, xmmword ptr [rip + 0xf3b2a]; aesenc xmm0, xmmword ptr [rip + 0xf3b31]; movq rax, xmm0; ret; 
0x000000000045cec6: aesenc xmm0, xmmword ptr [rip + 0xf3b31]; movq rax, xmm0; ret; 
0x000000000045a3b9: aesenc xmm1, xmm1; aesenc xmm1, xmm1; aesenc xmm1, xmm1; movq rax, xmm1; ret; 
0x000000000045a3be: aesenc xmm1, xmm1; aesenc xmm1, xmm1; movq rax, xmm1; ret; 
0x000000000045a3c3: aesenc xmm1, xmm1; movq rax, xmm1; ret; 
0x000000000045a42a: aesenc xmm2, xmm2; aesenc xmm3, xmm3; pxor xmm2, xmm3; movq rax, xmm2; ret; 
0x000000000045a425: aesenc xmm3, xmm3; aesenc xmm2, xmm2; aesenc xmm3, xmm3; pxor xmm2, xmm3; movq rax, xmm2; ret; 
0x000000000045a42f: aesenc xmm3, xmm3; pxor xmm2, xmm3; movq rax, xmm2; ret; 
0x000000000045a4c9: aesenc xmm7, xmm7; pxor xmm4, xmm6; pxor xmm5, xmm7; pxor xmm4, xmm5; movq rax, xmm4; ret; 
0x000000000046e639: and ah, bh; dec dword ptr [rax - 0x7d]; ret 0x4830; 
0x000000000047b3c4: and al, 0; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000043bbc2: and al, 0; add byte ptr [rax + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x0000000000441c6d: and al, 0; je 0x41c77; add rsp, 0x38; pop rbp; ret; 
0x000000000042db3b: and al, 0; syscall; 
0x0000000000434c12: and al, 0x10; add rsp, 0x18; pop rbp; ret; 
0x00000000004502f4: and al, 0x10; add rsp, 0x20; pop rbp; ret; 
0x000000000041d04b: and al, 0x10; add rsp, 0x28; pop rbp; ret; 
0x000000000043ed58: and al, 0x10; add rsp, 0x30; pop rbp; nop; ret; 
0x00000000004068da: and al, 0x10; add rsp, 0x30; pop rbp; ret; 
0x0000000000425a99: and al, 0x10; add rsp, 0x38; pop rbp; ret; 
0x000000000041404d: and al, 0x10; call 0x14560; add rsp, 0x20; pop rbp; ret; 
0x0000000000452832: and al, 0x10; call 0x331a0; call 0x32980; add rsp, 0x40; pop rbp; ret; 
0x0000000000456af1: and al, 0x10; call 0x56b20; add rsp, 8; pop rbp; ret; 
0x0000000000456b91: and al, 0x10; call 0x56bc0; add rsp, 8; pop rbp; ret; 
0x000000000043fc20: and al, 0x10; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000454e16: and al, 0x10; call rcx; 
0x0000000000454e16: and al, 0x10; call rcx; add rsp, 0x30; pop rbp; nop; ret; 
0x0000000000406d13: and al, 0x10; mov byte ptr [rax + 0xb4], 0; add rsp, 0x40; pop rbp; ret; 
0x0000000000446075: and al, 0x10; mov byte ptr [rcx + 0x116], 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000418466: and al, 0x10; mov byte ptr [rdx + 0x20], cl; mov byte ptr [rdx + 0x21], 1; add rsp, 0x18; pop rbp; ret; 
0x000000000040270c: and al, 0x10; mov dword ptr [rsp + 0x14], ebx; mov dword ptr [rsp + 0x18], ecx; mov dword ptr [rsp + 0x1c], edx; ret; 
0x000000000045e6a7: and al, 0x10; mov edx, dword ptr [rsp + 0x18]; mov eax, 0; syscall; 
0x000000000045e6a7: and al, 0x10; mov edx, dword ptr [rsp + 0x18]; mov eax, 0; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e688: and al, 0x10; mov edx, dword ptr [rsp + 0x18]; mov eax, 1; syscall; 
0x000000000045e688: and al, 0x10; mov edx, dword ptr [rsp + 0x18]; mov eax, 1; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045eca8: and al, 0x10; mov edx, dword ptr [rsp + 0x18]; mov rax, 0x1c; syscall; 
0x000000000045eca8: and al, 0x10; mov edx, dword ptr [rsp + 0x18]; mov rax, 0x1c; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e6c3: and al, 0x10; mov esi, dword ptr [rsp + 8]; mov eax, 0x125; syscall; 
0x000000000045e6c3: and al, 0x10; mov esi, dword ptr [rsp + 8]; mov eax, 0x125; syscall; mov dword ptr [rsp + 0x18], eax; ret; 
0x00000000004425d9: and al, 0x10; mov qword ptr [rcx + 0x148], 0; add rsp, 0x20; pop rbp; ret; 
0x00000000004220d2: and al, 0x10; mov qword ptr [rcx + 8], rax; pop rbp; ret; 
0x000000000044fbe8: and al, 0x10; mov qword ptr [rcx], rax; add rsp, 0x18; pop rbp; ret; 
0x000000000045e80b: and al, 0x10; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x000000000045e80b: and al, 0x10; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e62c: and al, 0x10; mov r10d, dword ptr [rsp + 0x14]; mov eax, 0x101; syscall; 
0x000000000045e5b6: and al, 0x10; mov r14, qword ptr [rsp + 0x18]; mov r15, qword ptr [rsp + 0x20]; mov rbp, qword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x000000000045eda8: and al, 0x10; mov rax, 0x83; syscall; 
0x000000000045ec28: and al, 0x10; mov rax, 0xb; syscall; 
0x000000000043b278: and al, 0x10; mov rax, qword ptr [rcx + 0x30]; dec dword ptr [rax + 0x108]; add rsp, 0x28; pop rbp; ret; 
0x0000000000406f69: and al, 0x10; mov rax, qword ptr [rdx]; call rax; 
0x000000000045eebd: and al, 0x10; mov rax, qword ptr [rip + 0xf172a]; cmp rax, 0; je 0x5ef20; call rax; 
0x000000000041e35f: and al, 0x10; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000042c03a: and al, 0x10; mov rax, rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000040b69c: and al, 0x10; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rbp; ret; 
0x0000000000473ae8: and al, 0x10; mov rbx, qword ptr [rsp + 8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000473a55: and al, 0x10; mov rbx, qword ptr [rsp + 8]; add rsp, 0x20; pop rbp; ret; 
0x00000000004414ef: and al, 0x10; mov rdx, qword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; 
0x000000000045e848: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0x1b; syscall; 
0x000000000045ee48: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xcc; syscall; 
0x000000000045e7e7: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xde; syscall; 
0x000000000045e7c8: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xea; syscall; 
0x000000000045e7c8: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xea; syscall; ret; 
0x000000000045e968: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; mov r10, qword ptr [rsp + 0x20]; mov eax, 0xd; syscall; 
0x000000000045e927: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; mov r10d, dword ptr [rsp + 0x20]; mov eax, 0xe; syscall; 
0x000000000043c9e8: and al, 0x10; movups xmmword ptr [rcx], xmm15; mov qword ptr [rcx + 0x10], 0; add rsp, 0x18; pop rbp; ret; 
0x000000000041859a: and al, 0x10; nop dword ptr [rax]; call 0x188a0; add rsp, 0x18; pop rbp; ret; 
0x000000000046ef08: and al, 0x10; nop; and ecx, 0x1f; mov rax, rcx; ret; 
0x000000000045e67a: and al, 0x10; ret; 
0x0000000000436657: and al, 0x10; xchg dword ptr [rcx + 0x11c], eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000413a2f: and al, 0x10; xor ebx, ebx; call 0x20c20; add rsp, 0x18; pop rbp; ret; 
0x000000000044def1: and al, 0x13; add rsp, 0x38; pop rbp; ret; 
0x00000000004026b9: and al, 0x14; bt eax, 0x1b; setb byte ptr [rip + 0x14e3e5]; add rsp, 0x50; pop rbp; ret; 
0x0000000000402710: and al, 0x14; mov dword ptr [rsp + 0x18], ecx; mov dword ptr [rsp + 0x1c], edx; ret; 
0x000000000045e631: and al, 0x14; mov eax, 0x101; syscall; 
0x000000000045eccb: and al, 0x14; mov r10, qword ptr [rsp + 0x18]; mov r8, qword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; 
0x0000000000431feb: and al, 0x16; add rsp, 0x68; pop rbp; ret; 
0x000000000040aa88: and al, 0x17; add rsp, 0x28; pop rbp; ret; 
0x000000000043a435: and al, 0x17; add rsp, 0x38; pop rbp; ret; 
0x00000000004525b5: and al, 0x17; mov rcx, rax; movzx eax, byte ptr [rsp + 0x38]; nop; call rcx; 
0x00000000004250d4: and al, 0x17; xor eax, 1; add rsp, 0x38; pop rbp; ret; 
0x000000000042e734: and al, 0x18; add byte ptr [rcx + rcx + 0x48], dh; add esp, 0xc0; pop rbp; ret; 
0x000000000041a8fa: and al, 0x18; add eax, dword ptr [rax]; add byte ptr [rcx - 9], al; fimul dword ptr [rcx + 0x63]; ret 0x894c; 
0x000000000040a074: and al, 0x18; add rsp, 0x20; pop rbp; ret; 
0x0000000000409c68: and al, 0x18; add rsp, 0x28; pop rbp; ret; 
0x0000000000446e58: and al, 0x18; add rsp, 0x30; pop rbp; nop; ret; 
0x0000000000413b0b: and al, 0x18; add rsp, 0x30; pop rbp; ret; 
0x00000000004252c0: and al, 0x18; add rsp, 0x38; pop rbp; ret; 
0x000000000041e657: and al, 0x18; add rsp, 0x50; pop rbp; ret; 
0x00000000004639de: and al, 0x18; add rsp, 0x78; pop rbp; ret; 
0x0000000000410818: and al, 0x18; call 0x10860; add rsp, 0x20; pop rbp; ret; 
0x000000000041db56: and al, 0x18; call 0x1db80; add rsp, 0x20; pop rbp; ret; 
0x00000000004371ab: and al, 0x18; call 0x37420; add rsp, 0x28; pop rbp; ret; 
0x0000000000459650: and al, 0x18; call 0x3b080; add rsp, 0x10; pop rbp; ret; 
0x0000000000445c60: and al, 0x18; call 0x45860; call 0x371e0; add rsp, 0x20; pop rbp; ret; 
0x0000000000410f6d: and al, 0x18; call 0x5d9c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000458c12: and al, 0x18; call 0x60240; add rsp, 0x20; pop rbp; ret; 
0x000000000047202f: and al, 0x18; call 0x727a0; add rsp, 0x28; pop rbp; ret; 
0x000000000040e538: and al, 0x18; call 0xe580; add rsp, 0x20; pop rbp; ret; 
0x000000000040f258: and al, 0x18; call 0xf2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000040fb78: and al, 0x18; call 0xfbc0; add rsp, 0x20; pop rbp; ret; 
0x0000000000428879: and al, 0x18; call rsi; 
0x0000000000428879: and al, 0x18; call rsi; add rsp, 0x28; pop rbp; ret; 
0x0000000000439e5d: and al, 0x18; lea rdx, [rip + 0x6458a]; call rcx; 
0x0000000000439e5d: and al, 0x18; lea rdx, [rip + 0x6458a]; call rcx; add rsp, 0x60; pop rbp; ret; 
0x00000000004586a3: and al, 0x18; mov byte ptr [rsp + 7], 1; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x0000000000402714: and al, 0x18; mov dword ptr [rsp + 0x1c], edx; ret; 
0x000000000045e6ab: and al, 0x18; mov eax, 0; syscall; 
0x000000000045e6ab: and al, 0x18; mov eax, 0; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e84d: and al, 0x18; mov eax, 0x1b; syscall; 
0x000000000045e84d: and al, 0x18; mov eax, 0x1b; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045ee4d: and al, 0x18; mov eax, 0xcc; syscall; 
0x000000000045ee4d: and al, 0x18; mov eax, 0xcc; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e7ec: and al, 0x18; mov eax, 0xde; syscall; 
0x000000000045e7ec: and al, 0x18; mov eax, 0xde; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e810: and al, 0x18; mov eax, 0xdf; syscall; 
0x000000000045e810: and al, 0x18; mov eax, 0xdf; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e7cd: and al, 0x18; mov eax, 0xea; syscall; 
0x000000000045e7cd: and al, 0x18; mov eax, 0xea; syscall; ret; 
0x000000000045e68c: and al, 0x18; mov eax, 1; syscall; 
0x000000000045e68c: and al, 0x18; mov eax, 1; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000040ca35: and al, 0x18; mov qword ptr [rax + 8], rbx; mov rax, rdx; add rsp, 0x30; pop rbp; ret; 
0x000000000040c6ab: and al, 0x18; mov qword ptr [rdx], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000041e35a: and al, 0x18; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000045a2b9: and al, 0x18; mov qword ptr [rsp + 0x20], r12; call 0x5f2e0; add rsp, 0x28; pop rbp; ret; 
0x000000000045e96d: and al, 0x18; mov r10, qword ptr [rsp + 0x20]; mov eax, 0xd; syscall; 
0x000000000045e96d: and al, 0x18; mov r10, qword ptr [rsp + 0x20]; mov eax, 0xd; syscall; mov dword ptr [rsp + 0x28], eax; ret; 
0x000000000045eb6c: and al, 0x18; mov r10d, dword ptr [rsp + 0x1c]; mov r8d, dword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x24]; mov eax, 9; syscall; 
0x000000000045e92c: and al, 0x18; mov r10d, dword ptr [rsp + 0x20]; mov eax, 0xe; syscall; 
0x000000000045e5bb: and al, 0x18; mov r15, qword ptr [rsp + 0x20]; mov rbp, qword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x000000000045ecd0: and al, 0x18; mov r8, qword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; 
0x000000000045ecac: and al, 0x18; mov rax, 0x1c; syscall; 
0x000000000045ecac: and al, 0x18; mov rax, 0x1c; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000043b62f: and al, 0x18; mov rax, qword ptr [rax + 0x30]; dec dword ptr [rax + 0x108]; add rsp, 0x60; pop rbp; ret; 
0x00000000004305fa: and al, 0x18; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x00000000004586ba: and al, 0x18; mov rax, qword ptr [rdx]; nop; call rax; 
0x000000000046fa83: and al, 0x18; mov rax, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x000000000041578e: and al, 0x18; mov rax, rdi; add rsp, 0x28; pop rbp; ret; 
0x0000000000405309: and al, 0x18; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000042fb8a: and al, 0x18; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000429d70: and al, 0x18; mov rcx, qword ptr [rsp + 0x20]; call 0x29580; add rsp, 0x30; pop rbp; ret; 
0x00000000004049c7: and al, 0x18; mov rcx, qword ptr [rsp + 0x20]; mov dword ptr [rcx], eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000429838: and al, 0x18; mov rcx, rax; lea rax, [rcx + r8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000473a20: and al, 0x18; mov rdx, qword ptr [rip + 0xaabf7]; mov rsi, qword ptr [rdx]; mov rax, rcx; call rsi; 
0x0000000000464335: and al, 0x18; mov rsi, qword ptr [rax + 0x20]; lea rcx, [rdx - 1]; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000425c9b: and al, 0x18; movups xmmword ptr [rax], xmm15; add rsp, 0x20; pop rbp; ret; 
0x000000000045e649: and al, 0x18; ret; 
0x0000000000459122: and al, 0x18; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000042e3a5: and al, 0x18; xor ecx, ecx; call 0x4820; add rsp, 0x38; pop rbp; ret; 
0x0000000000459ece: and al, 0x1c; add rsp, 0x20; pop rbp; ret; 
0x0000000000404a87: and al, 0x1c; add rsp, 0x28; pop rbp; ret; 
0x00000000004504a7: and al, 0x1c; add rsp, 0x60; pop rbp; ret; 
0x000000000045eb71: and al, 0x1c; mov r8d, dword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x24]; mov eax, 9; syscall; 
0x0000000000402718: and al, 0x1c; ret; 
0x00000000004397d2: and al, 0x1f; add rsp, 0x60; pop rbp; ret; 
0x0000000000460dfc: and al, 0x1f; mov rbx, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbp; ret; 
0x000000000044beb5: and al, 0x20; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x737f; 
0x000000000041e6d2: and al, 0x20; add qword ptr [rdx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000045e8fd: and al, 0x20; add rsp, 0x10; pop rbp; ret; 
0x0000000000410eb5: and al, 0x20; add rsp, 0x28; pop rbp; ret; 
0x0000000000459117: and al, 0x20; add rsp, 0x30; pop rbp; ret; 
0x00000000004132f2: and al, 0x20; add rsp, 0x38; pop rbp; ret; 
0x0000000000420179: and al, 0x20; add rsp, 0x40; pop rbp; ret; 
0x0000000000436cdb: and al, 0x20; add rsp, 0x48; pop rbp; ret; 
0x00000000004293fb: and al, 0x20; add rsp, 0x58; pop rbp; ret; 
0x000000000046394e: and al, 0x20; add rsp, 0x78; pop rbp; ret; 
0x000000000045d2cb: and al, 0x20; add rsp, 0x98; pop rbp; ret; 
0x0000000000412dc9: and al, 0x20; call 0x12980; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; pop rbp; ret; 
0x0000000000429d75: and al, 0x20; call 0x29580; add rsp, 0x30; pop rbp; ret; 
0x00000000004591d6: and al, 0x20; call 0x2ca60; add rsp, 0x10; pop rbp; ret; 
0x0000000000459611: and al, 0x20; call 0x30ee0; add rsp, 0x10; pop rbp; ret; 
0x0000000000418e4c: and al, 0x20; call 0x34660; add rsp, 0x30; pop rbp; ret; 
0x000000000040551f: and al, 0x20; call 0x5dcc0; add rsp, 0x28; pop rbp; ret; 
0x000000000045a2be: and al, 0x20; call 0x5f2e0; add rsp, 0x28; pop rbp; ret; 
0x0000000000458c64: and al, 0x20; call 0x60200; add rsp, 0x30; pop rbp; ret; 
0x0000000000473527: and al, 0x20; call 0x739e0; add rsp, 0x10; pop rbp; ret; 
0x0000000000476509: and al, 0x20; call 0x75420; add rsp, 0x28; pop rbp; ret; 
0x000000000044e9b5: and al, 0x20; call rsi; 
0x000000000043e756: and al, 0x20; inc qword ptr [rax]; add rsp, 0x28; pop rbp; ret; 
0x0000000000439f72: and al, 0x20; lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000419564: and al, 0x20; mov byte ptr [rax + 0xb6], 1; add rsp, 0x40; pop rbp; ret; 
0x000000000047398d: and al, 0x20; mov dword ptr [rcx + 0x2c], 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004049cc: and al, 0x20; mov dword ptr [rcx], eax; add rsp, 0x28; pop rbp; ret; 
0x000000000045e972: and al, 0x20; mov eax, 0xd; syscall; 
0x000000000045e972: and al, 0x20; mov eax, 0xd; syscall; mov dword ptr [rsp + 0x28], eax; ret; 
0x000000000045e931: and al, 0x20; mov eax, 0xe; syscall; 
0x00000000004110ab: and al, 0x20; mov qword ptr [rax + 0x30], rbx; mov rax, r8; add rsp, 0x28; pop rbp; ret; 
0x0000000000413100: and al, 0x20; mov qword ptr [rdx + rsi*8 + 0x28], rdi; add rsp, 0x30; pop rbp; ret; 
0x000000000045f282: and al, 0x20; mov qword ptr [rsp + 0x28], rbx; add rsp, 8; pop rbp; ret; 
0x0000000000454e02: and al, 0x20; mov qword ptr [rsp + 0x28], rcx; mov rcx, qword ptr [rdx]; mov rax, qword ptr [rip + 0xcd88d]; lea rbx, [rsp + 0x10]; call rcx; 
0x000000000045eb76: and al, 0x20; mov r9d, dword ptr [rsp + 0x24]; mov eax, 9; syscall; 
0x000000000045ecd5: and al, 0x20; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; 
0x000000000045ecd5: and al, 0x20; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000045964b: and al, 0x20; mov rax, qword ptr [rsp + 0x18]; call 0x3b080; add rsp, 0x10; pop rbp; ret; 
0x000000000045e5c0: and al, 0x20; mov rbp, qword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x000000000041d0b7: and al, 0x20; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x28; pop rbp; ret; 
0x000000000045a1c8: and al, 0x20; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004046ac: and al, 0x20; mov rbx, qword ptr [rsp + 0x28]; add rsp, 0x68; pop rbp; ret; 
0x0000000000474ecd: and al, 0x20; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x48; pop rbp; ret; 
0x000000000040d5d8: and al, 0x20; mov rbx, rdx; add rsp, 0x38; pop rbp; ret; 
0x0000000000406121: and al, 0x20; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x00000000004157d9: and al, 0x20; mov rcx, qword ptr [rdx]; mov rsi, qword ptr [rax + 0x10]; mov rax, rsi; call rcx; 
0x000000000040471b: and al, 0x20; mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rcx], rax; add rsp, 0x30; pop rbp; ret; 
0x000000000045e9d0: and al, 0x20; mov rdx, qword ptr [rsp + 0x28]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x0000000000428861: and al, 0x20; mov rdx, rsi; call rdi; 
0x000000000042886b: and al, 0x20; mov rsi, qword ptr [rdx]; mov rcx, rbx; mov rbx, rax; mov rax, qword ptr [rsp + 0x18]; call rsi; 
0x0000000000457425: and al, 0x20; movzx eax, word ptr [rcx + 4]; and eax, 0x7fff; add rsp, 0x38; pop rbp; ret; 
0x000000000043a430: and al, 0x20; movzx ecx, byte ptr [rsp + 0x17]; add rsp, 0x38; pop rbp; ret; 
0x0000000000432fec: and al, 0x20; neg rax; call 0x32ee0; add rsp, 0x10; pop rbp; ret; 
0x000000000045cd84: and al, 0x20; pop rbp; ret; 
0x000000000045e697: and al, 0x20; ret; 
0x0000000000426ade: and al, 0x20; shl rax, 0xd; sub rsp, -0x80; pop rbp; ret; 
0x000000000042e407: and al, 0x20; xor ecx, ecx; call 0x4820; add rsp, 0x40; pop rbp; ret; 
0x000000000045ec88: and al, 0x24; add rsp, 0x10; pop rbp; ret; 
0x000000000045eb7b: and al, 0x24; mov eax, 9; syscall; 
0x0000000000440841: and al, 0x24; mov qword ptr [rsp + 0x108], rsi; mov rdx, qword ptr [rsp + 0x108]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000045ebfa: and al, 0x24; mov qword ptr [rsp + 0x40], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000042da38: and al, 0x24; test eax, eax; jne 0x2da44; add rsp, 0x60; pop rbp; ret; 
0x00000000004760d8: and al, 0x25; mov rsi, qword ptr [rsp + 0x48]; mov byte ptr [rsi + 0xe], dl; add rsp, 0x38; pop rbp; ret; 
0x0000000000475e4e: and al, 0x26; mov rdx, qword ptr [rsp + 0x48]; mov byte ptr [rdx + 0xe], cl; add rsp, 0x38; pop rbp; ret; 
0x0000000000474b00: and al, 0x27; mov byte ptr [rdx + 0x52], sil; add rsp, 0x28; pop rbp; ret; 
0x0000000000475cbf: and al, 0x27; mov rsi, qword ptr [rsp + 0x60]; mov byte ptr [rsi + 0xe], dl; add rsp, 0x50; pop rbp; ret; 
0x000000000045eb95: and al, 0x28; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x30], rax; ret; 
0x0000000000450a16: and al, 0x28; add qword ptr [rdx + 0x11e8], rax; add rsp, 0x30; pop rbp; ret; 
0x000000000044ac7a: and al, 0x28; add rax, rcx; add rsp, 0x48; pop rbp; ret; 
0x000000000040b6ac: and al, 0x28; add rsp, 0x30; pop rbp; ret; 
0x000000000045e5c5: and al, 0x28; add rsp, 0x30; ret; 
0x00000000004580b0: and al, 0x28; add rsp, 0x38; pop rbp; ret; 
0x000000000042a1d4: and al, 0x28; add rsp, 0x40; pop rbp; ret; 
0x0000000000436294: and al, 0x28; add rsp, 0x50; pop rbp; ret; 
0x0000000000446bdc: and al, 0x28; add rsp, 0x60; pop rbp; ret; 
0x00000000004046b1: and al, 0x28; add rsp, 0x68; pop rbp; ret; 
0x000000000042362c: and al, 0x28; add rsp, 0xa0; pop rbp; ret; 
0x000000000045f287: and al, 0x28; add rsp, 8; pop rbp; ret; 
0x000000000042e3e8: and al, 0x28; bt edx, 0x1b; jae 0x2e3f6; add rsp, 0x40; pop rbp; ret; 
0x0000000000401a05: and al, 0x28; call 0x1a40; add rsp, 0x10; pop rbp; ret; 
0x000000000044592a: and al, 0x28; call 0x2e340; add rsp, 0x18; pop rbp; ret; 
0x00000000004331ed: and al, 0x28; call 0x329e0; add rsp, 0x40; pop rbp; ret; 
0x000000000043a828: and al, 0x28; call 0x3a5e0; add rsp, 0x30; pop rbp; ret; 
0x000000000042e1a7: and al, 0x28; call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x0000000000404cb0: and al, 0x28; call 0x4cc0; add rsp, 0x20; pop rbp; ret; 
0x0000000000454ae7: and al, 0x28; call 0x54d20; add rsp, 0x60; pop rbp; ret; 
0x0000000000460190: and al, 0x28; call 0x58be0; call 0x59920; add rsp, 0x18; pop rbp; ret; 
0x00000000004701b1: and al, 0x28; call 0x5b340; add rsp, 0x138; pop rbp; ret; 
0x000000000046426d: and al, 0x28; call 0x643c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000421a48: and al, 0x28; call 0xa580; add rsp, 0x38; pop rbp; ret; 
0x000000000042a730: and al, 0x28; call 0xa5c0; add rsp, 0x30; pop rbp; ret; 
0x000000000045b402: and al, 0x28; cmp rcx, 0x10; ja 0x5b413; lea rax, [rip + 0x1ef]; jmp rax; 
0x0000000000418e47: and al, 0x28; lea rax, [rsp + 0x20]; call 0x34660; add rsp, 0x30; pop rbp; ret; 
0x00000000004165b4: and al, 0x28; mov byte ptr [rax], 1; add rsp, 0x30; pop rbp; ret; 
0x000000000045ecda: and al, 0x28; mov eax, 0xca; syscall; 
0x000000000045ecda: and al, 0x28; mov eax, 0xca; syscall; mov dword ptr [rsp + 0x30], eax; ret; 
0x0000000000458888: and al, 0x28; mov ebx, 1; call 0x385c0; add rsp, 0x30; pop rbp; ret; 
0x0000000000462358: and al, 0x28; mov ecx, 1; add rsp, 0x38; pop rbp; ret; 
0x0000000000404720: and al, 0x28; mov qword ptr [rcx], rax; add rsp, 0x30; pop rbp; ret; 
0x000000000045eba4: and al, 0x28; mov qword ptr [rsp + 0x30], 0; ret; 
0x000000000045cd74: and al, 0x28; mov qword ptr fs:[0xfffffffffffffff8], rdi; mov rsp, rsi; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x000000000045d2c6: and al, 0x28; mov r15, qword ptr [rsp + 0x20]; add rsp, 0x98; pop rbp; ret; 
0x000000000046ee59: and al, 0x28; mov rax, qword ptr [rcx]; mov rbx, qword ptr [rcx + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000406f7d: and al, 0x28; mov rax, qword ptr [rdx]; call rax; 
0x0000000000406f7d: and al, 0x28; mov rax, qword ptr [rdx]; call rax; add rsp, 0x30; pop rbp; ret; 
0x000000000045ec70: and al, 0x28; mov rax, qword ptr [rip + 0xc3a87]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x00000000004642f0: and al, 0x28; mov rax, rbx; mov rbx, rdx; call rsi; 
0x000000000044e9a8: and al, 0x28; mov rbx, qword ptr [rsp + 0x40]; mov rsi, rcx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x000000000040d3a5: and al, 0x28; mov rbx, rcx; call rsi; 
0x0000000000474108: and al, 0x28; mov rbx, rdx; mov rcx, rsi; add rsp, 0xa0; pop rbp; ret; 
0x0000000000473d31: and al, 0x28; mov rbx, rsi; mov rcx, rdi; add rsp, 0x88; pop rbp; ret; 
0x000000000045e9d5: and al, 0x28; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x0000000000454e07: and al, 0x28; mov rcx, qword ptr [rdx]; mov rax, qword ptr [rip + 0xcd88d]; lea rbx, [rsp + 0x10]; call rcx; 
0x0000000000459aa4: and al, 0x28; mov rcx, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x0000000000439f92: and al, 0x28; mov rcx, rsi; call 0x402a0; add rsp, 0x60; pop rbp; ret; 
0x00000000004130fb: and al, 0x28; mov rdi, qword ptr [rsp + 0x20]; mov qword ptr [rdx + rsi*8 + 0x28], rdi; add rsp, 0x30; pop rbp; ret; 
0x000000000045cd5e: and al, 0x28; mov rdi, rbx; mov rcx, rbx; call rax; 
0x000000000045cda9: and al, 0x28; mov rsp, rsi; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x0000000000442fdb: and al, 0x28; nop dword ptr [rax]; call 0xa5c0; add rsp, 0x40; pop rbp; ret; 
0x000000000045e97d: and al, 0x28; ret; 
0x000000000042d77f: and al, 0x28; test eax, eax; jl 0x2d78b; add rsp, 0x48; pop rbp; ret; 
0x00000000004135a8: and al, 0x28; xchg dword ptr [rdx + 0x4a8], ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000431a97: and al, 0x28; xchg qword ptr [rax + 0x58], rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000458bcd: and al, 0x28; xchg qword ptr [rax], rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000458091: and al, 0x28; xor ebx, ebx; add rsp, 0x38; pop rbp; ret; 
0x0000000000479cb1: and al, 0x2b; add rsp, 0x248; pop rbp; ret; 
0x0000000000479fab: and al, 0x2c; call rdx; 
0x0000000000449c29: and al, 0x2c; mov rbx, qword ptr [rsp + 0xc8]; add rsp, 0xd8; pop rbp; ret; 
0x0000000000405e70: and al, 0x2f; add rsp, 0x68; pop rbp; ret; 
0x0000000000435dcd: and al, 0x2f; call 0x35b40; add rsp, 0x30; pop rbp; ret; 
0x000000000045eba9: and al, 0x30; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000427c12: and al, 0x30; add rsp, 0x38; pop rbp; ret; 
0x0000000000420a36: and al, 0x30; add rsp, 0x40; pop rbp; ret; 
0x0000000000474ed2: and al, 0x30; add rsp, 0x48; pop rbp; ret; 
0x000000000043182c: and al, 0x30; and eax, 1; add rsp, 0x70; pop rbp; ret; 
0x0000000000422b2d: and al, 0x30; call 0x229e0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x00000000004332ad: and al, 0x30; call 0x33020; add rsp, 0x20; pop rbp; ret; 
0x000000000042e256: and al, 0x30; call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x0000000000445d9f: and al, 0x30; call 0x45740; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000452906: and al, 0x30; call 0x52940; add rsp, 0x40; pop rbp; ret; 
0x0000000000476db1: and al, 0x30; call 0x75420; add rsp, 0x20; pop rbp; ret; 
0x0000000000460803: and al, 0x30; call 0x9f00; mov rcx, qword ptr [rax + 0x18]; mov rax, qword ptr [rsp + 0x48]; call rcx; 
0x000000000044e9be: and al, 0x30; call 0xa400; add rsp, 0x48; pop rbp; ret; 
0x000000000042488a: and al, 0x30; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000452ec2: and al, 0x30; cmp rax, r8; jl 0x52e4e; add rsp, 0x300; pop rbp; ret; 
0x0000000000472238: and al, 0x30; cmp rcx, 2; sete al; add rsp, 0x20; pop rbp; ret; 
0x00000000004247fc: and al, 0x30; lea rax, [rsi + rdx]; mov ebx, 1; add rsp, 0x60; pop rbp; ret; 
0x0000000000429e1a: and al, 0x30; mov qword ptr [rax + 0x28], rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000042395f: and al, 0x30; mov qword ptr [rdx], rax; add rsp, 0x38; pop rbp; ret; 
0x000000000041afbb: and al, 0x30; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdx]; call rax; 
0x00000000004616eb: and al, 0x30; mov qword ptr [rsp + 0x40], rax; mov byte ptr [rsp + 0xf], 3; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000045d2c1: and al, 0x30; mov r14, qword ptr [rsp + 0x28]; mov r15, qword ptr [rsp + 0x20]; add rsp, 0x98; pop rbp; ret; 
0x000000000044d250: and al, 0x30; mov r8d, eax; mov rax, rdx; add rsp, 0x58; pop rbp; ret; 
0x000000000042ab96: and al, 0x30; mov rax, qword ptr [rdx]; call rax; 
0x000000000045e995: and al, 0x30; mov rax, qword ptr [rip + 0xc3d6a]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x000000000046cf47: and al, 0x30; mov rax, qword ptr [rsp + 0x30]; mov rbx, qword ptr [rsp + 0x38]; add rsp, 0x40; pop rbp; ret; 
0x000000000040c888: and al, 0x30; mov rax, rdi; add rsp, 0x40; pop rbp; ret; 
0x000000000046f532: and al, 0x30; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x000000000046cf4c: and al, 0x30; mov rbx, qword ptr [rsp + 0x38]; add rsp, 0x40; pop rbp; ret; 
0x000000000040d580: and al, 0x30; mov rbx, rcx; call rsi; 
0x00000000004747bc: and al, 0x30; mov rbx, rdx; mov rcx, r8; add rsp, 0x50; pop rbp; ret; 
0x000000000040ec53: and al, 0x30; mov rbx, rsi; call rcx; 
0x0000000000464256: and al, 0x30; mov rcx, qword ptr [rax + 0x18]; mov rax, rbx; nop; call rcx; 
0x0000000000479d82: and al, 0x30; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x178]; call rcx; 
0x00000000004293f6: and al, 0x30; mov rcx, qword ptr [rsp + 0x20]; add rsp, 0x58; pop rbp; ret; 
0x000000000041e364: and al, 0x30; mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000043a53c: and al, 0x30; mov rdx, rsi; call rcx; 
0x00000000004414a4: and al, 0x30; mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rbx + 8]; mov rax, rsi; mov rbx, rdi; call rcx; 
0x000000000043460e: and al, 0x30; mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x000000000045eb9e: and al, 0x30; ret; 
0x000000000044ac03: and al, 0x31; ror byte ptr [rax - 0x7d], 0xc4; pop rbp; ret; 
0x000000000044ce58: and al, 0x34; add rsp, 0x68; pop rbp; nop; ret; 
0x000000000044c75f: and al, 0x34; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0xb0; pop rbp; ret; 
0x0000000000478448: and al, 0x37; mov r10, qword ptr [rsp + 0x48]; mov byte ptr [r10 + 0x4c], dl; add rsp, 0x38; pop rbp; ret; 
0x000000000041b6d0: and al, 0x38; add qword ptr [rcx + 0x18], rax; add rsp, 0x78; pop rbp; ret; 
0x000000000045e9ac: and al, 0x38; add rsp, 0x10; pop rbp; ret; 
0x0000000000453060: and al, 0x38; add rsp, 0x1c0; pop rbp; ret; 
0x000000000046cf51: and al, 0x38; add rsp, 0x40; pop rbp; ret; 
0x0000000000472a67: and al, 0x38; add rsp, 0x60; pop rbp; ret; 
0x0000000000472af9: and al, 0x38; add rsp, 0x78; pop rbp; ret; 
0x0000000000419211: and al, 0x38; add rsp, 0x98; pop rbp; ret; 
0x0000000000409960: and al, 0x38; add rsp, 0xa0; pop rbp; ret; 
0x00000000004545f4: and al, 0x38; call 0x34660; add rsp, 0x58; pop rbp; ret; 
0x000000000043a8f8: and al, 0x38; call 0x3a5e0; add rsp, 0x28; pop rbp; ret; 
0x0000000000413f43: and al, 0x38; call 0x4740; add rsp, 0x20; pop rbp; ret; 
0x0000000000460165: and al, 0x38; call 0x58be0; add rsp, 0x18; pop rbp; ret; 
0x0000000000464925: and al, 0x38; cmp rcx, rdi; jl 0x648e7; add rsp, 0x60; pop rbp; ret; 
0x0000000000450ab6: and al, 0x38; mov byte ptr [rdx + 0x11e0], 0; add rsp, 0x40; pop rbp; ret; 
0x00000000004313a0: and al, 0x38; mov byte ptr [rdx], al; add rsp, 0x40; pop rbp; ret; 
0x00000000004331e8: and al, 0x38; mov rax, qword ptr [rsp + 0x28]; call 0x329e0; add rsp, 0x40; pop rbp; ret; 
0x0000000000463838: and al, 0x38; mov rbx, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x0000000000479c82: and al, 0x38; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x180]; call rcx; 
0x00000000004779b0: and al, 0x38; mov rcx, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x0000000000432ac3: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; call 0x4f320; add rsp, 0x28; pop rbp; ret; 
0x0000000000413512: and al, 0x38; mov rcx, qword ptr [rsp + 0x50]; call 0x1d260; add rsp, 0x58; pop rbp; ret; 
0x00000000004397cd: and al, 0x38; movzx esi, byte ptr [rsp + 0x1f]; add rsp, 0x60; pop rbp; ret; 
0x000000000046febc: and al, 0x38; nop; call 0x6fca0; mov rcx, qword ptr [rax + 0x38]; mov rax, rbx; call rcx; 
0x00000000004525bd: and al, 0x38; nop; call rcx; 
0x000000000044cd0b: and al, 0x3c; add rsp, 0x58; pop rbp; ret; 
0x000000000045ebe2: and al, 0x3c; mov rax, qword ptr [rip + 0xc3b0d]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x0000000000466178: and al, 0x40; add eax, dword ptr [rax]; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x3eb; 
0x000000000045ebff: and al, 0x40; add rsp, 0x10; pop rbp; ret; 
0x000000000045f6aa: and al, 0x40; add rsp, 0x18; pop rbp; ret; 
0x000000000041a85e: and al, 0x40; add rsp, 0x328; pop rbp; ret; 
0x000000000045510a: and al, 0x40; add rsp, 0x48; pop rbp; ret; 
0x0000000000460e01: and al, 0x40; add rsp, 0x50; pop rbp; ret; 
0x000000000042d5a8: and al, 0x40; add rsp, 0x680; pop rbp; ret; 
0x0000000000442e18: and al, 0x40; call 0x33fe0; add rsp, 0x58; pop rbp; ret; 
0x0000000000432ac8: and al, 0x40; call 0x4f320; add rsp, 0x28; pop rbp; ret; 
0x0000000000405177: and al, 0x40; call 0xa5c0; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x00000000004616f0: and al, 0x40; mov byte ptr [rsp + 0xf], 3; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x00000000004635a2: and al, 0x40; mov rbx, qword ptr [rsp + 0x48]; call 0x63880; add rsp, 0x30; pop rbp; ret; 
0x0000000000461716: and al, 0x40; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000446bd7: and al, 0x40; mov rcx, qword ptr [rsp + 0x28]; add rsp, 0x60; pop rbp; ret; 
0x000000000044b686: and al, 0x40; mov rcx, qword ptr [rsp + 0x48]; add rsp, 0x100; pop rbp; ret; 
0x0000000000479eab: and al, 0x40; mov rdx, qword ptr [rdx + 0x18]; mov rax, qword ptr [rsp + 0x188]; call rdx; 
0x0000000000450a11: and al, 0x40; mov rdx, qword ptr [rsp + 0x28]; add qword ptr [rdx + 0x11e8], rax; add rsp, 0x30; pop rbp; ret; 
0x000000000044e9ad: and al, 0x40; mov rsi, rcx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x000000000046b26d: and al, 0x44; mov word ptr [rsp + 0x26a], ax; add rsp, 0x1a8; pop rbp; nop; ret; 
0x0000000000476f81: and al, 0x47; mov rsi, qword ptr [rsp + 0xe8]; mov byte ptr [rsi + 0xe], dl; add rsp, 0xd8; pop rbp; ret; 
0x000000000045ec89: and al, 0x48; add esp, 0x10; pop rbp; ret; 
0x000000000045e524: and al, 0x48; add esp, 0x170; popfq; pop rbp; ret; 
0x000000000044f2fd: and al, 0x48; add esp, 8; pop rbp; ret; 
0x000000000042c8c1: and al, 0x48; add rax, 0x1268; call 0x2c600; add rsp, 0x38; pop rbp; ret; 
0x000000000044b68b: and al, 0x48; add rsp, 0x100; pop rbp; ret; 
0x000000000040b6a1: and al, 0x48; add rsp, 0x30; pop rbp; ret; 
0x000000000040c132: and al, 0x48; add rsp, 0x58; pop rbp; ret; 
0x0000000000461e13: and al, 0x48; add rsp, 0x88; pop rbp; ret; 
0x000000000044c764: and al, 0x48; add rsp, 0xb0; pop rbp; ret; 
0x00000000004548b2: and al, 0x48; call 0x33300; add rsp, 0x60; pop rbp; ret; 
0x0000000000444f95: and al, 0x48; call 0x44020; add rsp, 0x58; pop rbp; ret; 
0x000000000044cd02: and al, 0x48; call 0x4cb80; mov ecx, dword ptr [rsp + 0x3c]; add rsp, 0x58; pop rbp; ret; 
0x00000000004054a5: and al, 0x48; call 0x5dcc0; add rsp, 0x28; pop rbp; ret; 
0x00000000004635a7: and al, 0x48; call 0x63880; add rsp, 0x30; pop rbp; ret; 
0x000000000041e0af: and al, 0x48; call rbx; 
0x00000000004607b7: and al, 0x48; call rcx; 
0x000000000047844d: and al, 0x48; mov byte ptr [r10 + 0x4c], dl; add rsp, 0x38; pop rbp; ret; 
0x0000000000425dd4: and al, 0x48; mov byte ptr [rdx + 0x10131], sil; add rsp, 0x20; pop rbp; ret; 
0x0000000000475e53: and al, 0x48; mov byte ptr [rdx + 0xe], cl; add rsp, 0x38; pop rbp; ret; 
0x00000000004760dd: and al, 0x48; mov byte ptr [rsi + 0xe], dl; add rsp, 0x38; pop rbp; ret; 
0x0000000000461d94: and al, 0x48; mov byte ptr [rsp + 0x47], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000461dcd: and al, 0x48; mov byte ptr [rsp + 0x47], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; nop; call rax; 
0x000000000042e2eb: and al, 0x48; mov dword ptr [rax + 0x48], ecx; add rsp, 8; pop rbp; ret; 
0x0000000000440842: and al, 0x48; mov dword ptr [rsp + 0x108], esi; mov rdx, qword ptr [rsp + 0x108]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000045ebfb: and al, 0x48; mov dword ptr [rsp + 0x40], eax; add rsp, 0x10; pop rbp; ret; 
0x000000000045ef31: and al, 0x48; mov eax, 0xe4; syscall; 
0x000000000045eed6: and al, 0x48; mov eax, dword ptr [rip + 0xf1712]; call rax; 
0x000000000045e8bd: and al, 0x48; mov eax, dword ptr [rip + 0xf1d2b]; cmp rax, 0; je 0x5e905; call rax; 
0x000000000043590f: and al, 0x48; mov ecx, dword ptr [rsp + 0x48]; mov qword ptr [rcx + 0xc0], rax; add rsp, 0x38; pop rbp; ret; 
0x00000000004445e1: and al, 0x48; mov qword ptr [rax + 0x80], rcx; add rsp, 0x68; pop rbp; ret; 
0x0000000000404c37: and al, 0x48; mov qword ptr [rax + 8], rcx; add rsp, 0x30; pop rbp; ret; 
0x0000000000435913: and al, 0x48; mov qword ptr [rcx + 0xc0], rax; add rsp, 0x38; pop rbp; ret; 
0x0000000000461730: and al, 0x48; mov rax, qword ptr [rdx]; call rax; 
0x0000000000461730: and al, 0x48; mov rax, qword ptr [rdx]; call rax; add rsp, 0x50; pop rbp; ret; 
0x0000000000461dab: and al, 0x48; mov rax, qword ptr [rsp + 0x60]; add rsp, 0x88; pop rbp; ret; 
0x000000000040551a: and al, 0x48; mov rbx, qword ptr [rsp + 0x20]; call 0x5dcc0; add rsp, 0x28; pop rbp; ret; 
0x000000000040e802: and al, 0x48; mov rbx, rax; call rcx; 
0x0000000000444b6e: and al, 0x48; mov rcx, rdi; call rsi; 
0x0000000000436855: and al, 0x48; mov rdx, qword ptr [rsp + 0x68]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x000000000043605f: and al, 0x48; test rax, rax; jne 0x3606c; add rsp, 0x58; pop rbp; ret; 
0x0000000000460f59: and al, 0x48; xor ecx, ecx; mov edi, 1; add rsp, 0x28; pop rbp; ret; 
0x000000000044f5d0: and al, 0x4c; call 0x500a0; add rsp, 0x58; pop rbp; ret; 
0x0000000000413517: and al, 0x50; call 0x1d260; add rsp, 0x58; pop rbp; ret; 
0x000000000044dee7: and al, 0x50; call 0x39c40; movzx eax, byte ptr [rsp + 0x13]; add rsp, 0x38; pop rbp; ret; 
0x0000000000436896: and al, 0x50; call rcx; 
0x00000000004102a1: and al, 0x50; lea rax, [rcx + rdx]; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x00000000004545ef: and al, 0x50; lea rax, [rsp + 0x38]; call 0x34660; add rsp, 0x58; pop rbp; ret; 
0x0000000000452471: and al, 0x50; lea rdx, [rsp + 0x50]; mov eax, r8d; call rsi; 
0x0000000000452476: and al, 0x50; mov eax, r8d; call rsi; 
0x000000000044f5cc: and al, 0x50; mov ebx, dword ptr [rsp + 0x4c]; call 0x500a0; add rsp, 0x58; pop rbp; ret; 
0x000000000042d059: and al, 0x50; mov qword ptr [rip + 0x1234ce], rax; add rsp, 0x70; pop rbp; ret; 
0x000000000040ef3c: and al, 0x50; mov rbx, rsi; call rcx; 
0x0000000000471c12: and al, 0x50; mov rcx, qword ptr [rcx + 0xf8]; mov rax, qword ptr [rsp + 0xb0]; call rcx; 
0x0000000000472a62: and al, 0x50; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x60; pop rbp; ret; 
0x000000000046253d: and al, 0x50; mov rcx, qword ptr [rsp + 0x58]; call 0x62040; add rsp, 0x38; pop rbp; ret; 
0x000000000042e1a2: and al, 0x50; mov rdi, qword ptr [rsp + 0x28]; call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x00000000004308e5: and al, 0x50; mov rdx, qword ptr [rax + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000041e1d8: and al, 0x50; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004290e9: and al, 0x50; movups xmmword ptr [rdx], xmm15; mov qword ptr [rdx + 0x10], 0; add rsp, 0x40; pop rbp; ret; 
0x0000000000445272: and al, 0x58; add rsp, 0x68; pop rbp; ret; 
0x000000000041e1ce: and al, 0x58; addsd xmm0, xmm1; movsd qword ptr [rsp + 0x50], xmm0; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000044845f: and al, 0x58; call 0x476c0; add rsp, 0x2e8; pop rbp; ret; 
0x0000000000462542: and al, 0x58; call 0x62040; add rsp, 0x38; pop rbp; ret; 
0x000000000047a290: and al, 0x58; call 0x76400; add rsp, 0x90; pop rbp; nop; ret; 
0x0000000000447494: and al, 0x58; lea rbx, [rax + rcx]; add rsp, 0x68; pop rbp; nop; ret; 
0x000000000044b89b: and al, 0x58; lea rcx, [rip + 0xd6dec]; xchg qword ptr [rcx], rax; add rsp, 0x60; pop rbp; ret; 
0x0000000000446bd2: and al, 0x58; mov rbx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rsp + 0x28]; add rsp, 0x60; pop rbp; ret; 
0x0000000000472a5d: and al, 0x58; mov rbx, qword ptr [rsp + 0x50]; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x60; pop rbp; ret; 
0x0000000000469436: and al, 0x58; mov rcx, qword ptr [rsp + 0x60]; add rsp, 0x70; pop rbp; ret; 
0x0000000000477988: and al, 0x58; mov rcx, rdx; call rsi; 
0x000000000042e251: and al, 0x58; mov rdi, qword ptr [rsp + 0x30]; call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x000000000047a279: and al, 0x58; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x000000000042d55e: and al, 0x5c; or byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000047c452: and al, 0x60; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4818; 
0x000000000047b773: and al, 0x60; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x000000000047c17a: and al, 0x60; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000046943b: and al, 0x60; add rsp, 0x70; pop rbp; ret; 
0x000000000041ec5d: and al, 0x60; add rsp, 0x78; pop rbp; ret; 
0x0000000000461db0: and al, 0x60; add rsp, 0x88; pop rbp; ret; 
0x0000000000475cc4: and al, 0x60; mov byte ptr [rsi + 0xe], dl; add rsp, 0x50; pop rbp; ret; 
0x0000000000473cef: and al, 0x60; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x000000000041b05d: and al, 0x60; mov qword ptr [rbx + 0x18], 0; add rsp, 0x50; pop rbp; ret; 
0x0000000000424af1: and al, 0x60; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x16860], rdx; add rsp, 0x48; pop rbp; ret; 
0x0000000000461d8f: and al, 0x60; mov qword ptr [rsp + 0x48], rcx; mov byte ptr [rsp + 0x47], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000473cb1: and al, 0x60; mov qword ptr [rsp + 0x68], rbx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000473e98: and al, 0x60; mov qword ptr [rsp + 0x68], rcx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x000000000045a8e0: and al, 0x60; mov r13, qword ptr [rsp + 0x68]; add rsp, 0x70; pop rbp; ret; 
0x0000000000405301: and al, 0x60; mov rax, qword ptr [rbx]; mov qword ptr [rsp + 0x18], rax; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000044b681: and al, 0x60; mov rbx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rsp + 0x48]; add rsp, 0x100; pop rbp; ret; 
0x0000000000461e0e: and al, 0x60; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x88; pop rbp; ret; 
0x000000000044845a: and al, 0x60; mov rbx, qword ptr [rsp + 0x58]; call 0x476c0; add rsp, 0x2e8; pop rbp; ret; 
0x00000000004749f0: and al, 0x60; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x68]; call rcx; 
0x0000000000473cd2: and al, 0x60; mov rcx, qword ptr [rsp + 0x68]; add rsp, 0x88; pop rbp; ret; 
0x00000000004778c8: and al, 0x60; xor ebx, ebx; xor ecx, ecx; add rsp, 0x40; pop rbp; ret; 
0x000000000045a8e5: and al, 0x68; add rsp, 0x70; pop rbp; ret; 
0x0000000000463bdd: and al, 0x68; add rsp, 0x78; pop rbp; ret; 
0x0000000000473cd7: and al, 0x68; add rsp, 0x88; pop rbp; ret; 
0x000000000043df6e: and al, 0x68; call 0x18900; mov rax, qword ptr [rsp + 0x80]; add rsp, 0xa8; pop rbp; ret; 
0x00000000004749f9: and al, 0x68; call rcx; 
0x0000000000464752: and al, 0x68; cmp rdx, rcx; jg 0x64725; add rsp, 0x78; pop rbp; ret; 
0x0000000000463bca: and al, 0x68; lea rax, [rax + rcx]; lea rax, [rax + 1]; add rsp, 0x78; pop rbp; ret; 
0x0000000000473cb6: and al, 0x68; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004308e0: and al, 0x68; mov rax, qword ptr [rsp + 0x50]; mov rdx, qword ptr [rax + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x00000000004647cd: and al, 0x68; mov rax, rbx; mov rbx, rcx; mov rcx, rsi; call rdx; 
0x0000000000464730: and al, 0x68; mov rax, rbx; mov rbx, rdx; call rsi; 
0x000000000043685a: and al, 0x68; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000469431: and al, 0x68; mov rbx, qword ptr [rsp + 0x58]; mov rcx, qword ptr [rsp + 0x60]; add rsp, 0x70; pop rbp; ret; 
0x000000000045376c: and al, 0x68; mov rbx, qword ptr [rsp + 0x70]; add rsp, 0x258; pop rbp; ret; 
0x0000000000472db1: and al, 0x68; mov rcx, qword ptr [rax + 0x20]; mov rcx, qword ptr [rcx + 0x18]; mov rdx, qword ptr [rax + 0x28]; mov rax, rdx; call rcx; 
0x000000000043688e: and al, 0x68; mov rcx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x50]; call rcx; 
0x0000000000472af4: and al, 0x68; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x78; pop rbp; ret; 
0x00000000004532e9: and al, 0x68; xor ebx, ebx; add rsp, 0x258; pop rbp; ret; 
0x0000000000479a7d: and al, 0x6f; mov qword ptr [rdx + 0x48], rax; mov byte ptr [rdx + 0x50], cl; add rsp, 0x90; pop rbp; ret; 
0x0000000000453771: and al, 0x70; add rsp, 0x258; pop rbp; ret; 
0x000000000041ace8: and al, 0x70; mov byte ptr [rax + 0x110], 0; add rsp, 0x58; pop rbp; ret; 
0x0000000000454b49: and al, 0x70; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x0000000000472aef: and al, 0x70; mov rbx, qword ptr [rsp + 0x68]; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x78; pop rbp; ret; 
0x000000000040d8eb: and al, 0x70; mov rbx, rcx; call rdi; 
0x000000000041e0a0: and al, 0x70; mov rdx, qword ptr [rcx + 0x80]; mov rbx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; call rbx; 
0x000000000042bef7: and al, 0x70; xchg qword ptr [rax], rcx; add rsp, 0x58; pop rbp; ret; 
0x00000000004691c1: and al, 0x74; mov byte ptr [rbx + rax - 1], dl; add rsp, 0x48; pop rbp; ret; 
0x0000000000424268: and al, 0x78; add rsp, 0x90; pop rbp; ret; 
0x000000000047435b: and al, 0x78; add rsp, 0xa0; pop rbp; ret; 
0x00000000004740b8: and al, 0x78; mov qword ptr [rsp + 0x80], rbx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000047432f: and al, 0x78; mov qword ptr [rsp + 0x80], rcx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000410091: and al, 0x78; mov rbx, rsi; call rcx; 
0x000000000047b45e: and al, 0x78; mov rcx, qword ptr [r9 + 0x48]; mov rax, rbx; call rcx; 
0x00000000004740dc: and al, 0x78; mov rcx, qword ptr [rsp + 0x80]; add rsp, 0xa0; pop rbp; ret; 
0x000000000047c2c0: and al, 0x78; mov rsi, qword ptr [rsi + 0xf8]; mov rax, qword ptr [rsp + 0x108]; call rsi; 
0x0000000000460d93: and al, 0x80; add byte ptr [rax], al; add al, ch; ret; 
0x000000000040637f: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000047b4b7: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000470d92: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; ret; 
0x0000000000442e04: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046b051: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret; 
0x000000000042895d: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 9], cl; ret; 
0x0000000000467dff: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov edx, 0x930f00e2; ret; 
0x000000000042da39: and al, 0x85; sal byte ptr [rbp + 6], 0x48; add esp, 0x60; pop rbp; ret; 
0x0000000000406377: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov esp, 0x8024; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000471a5c: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x00000000004606e1: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x77]; ret; 
0x000000000046ae41: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x8b48; 
0x0000000000466c75: and al, 0x88; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; adc ecx, dword ptr [rax - 0x7d]; ret 0x48c4; 
0x00000000004483f6: and al, 0x88; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000444245: and al, 0x89; ret 0xeac1; 
0x0000000000440497: and al, 0x89; ror dword ptr [rax - 0x77], 0xd0; add rsp, 0x10; pop rbp; ret; 
0x0000000000478ab4: and al, 0x90; add byte ptr [rax], al; add al, ch; ret 0xffdf; 
0x0000000000401a5a: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x76b3f915], dl; ret; 
0x000000000042671d: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000412594: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4908; 
0x0000000000426351: and al, 0x90; add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0xc149; 
0x0000000000449aca: and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0xc2e9; 
0x0000000000449b91: and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0xc984; 
0x0000000000420057: and al, 0x90; mov qword ptr [rdx + rbx + 0x28], rcx; inc qword ptr [rax + 0x140]; add rsp, 0x18; pop rbp; ret; 
0x0000000000452eae: and al, 0x98; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4828; 
0x000000000044be54: and al, 0x98; add byte ptr [rax], al; add al, ch; ret 0xfe6a; 
0x0000000000438f0d: and al, 0x98; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000465764: and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; pushfq; ret; 
0x0000000000455bac: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000041e954: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rax - 9], cl; ret 0x1fff; 
0x0000000000455b5b: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx - 0x75], al; adc byte ptr [r8 - 0x77], cl; ret; 
0x0000000000479839: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx - 0x77]; ret 0x8b48; 
0x00000000004610f1: and al, 0xa8; add byte ptr [rax], al; add bl, ch; sbb al, ch; ret; 
0x000000000045b3d4: and al, 0xa8; add byte ptr [rax], al; add bl, dh; movd dword ptr [r12 + 0xb0], mm5; movq xmm14, qword ptr [r12 + 0xb8]; ret; 
0x000000000044b134: and al, 0xb0; add byte ptr [rax], al; add al, ch; ret 0xfc5b; 
0x000000000045b3de: and al, 0xb0; add byte ptr [rax], al; add bl, dh; movd dword ptr [r12 + 0xb8], mm6; ret; 
0x0000000000453221: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004283c5: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 9], cl; ret; 
0x000000000047bf91: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000040af0b: and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000047c108: and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret; 
0x000000000047980f: and al, 0xb8; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx - 0x77]; ret 0x8b48; 
0x000000000045eb7c: and al, 0xb8; or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000478c43: and al, 0xc0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000478bf1: and al, 0xc0; add byte ptr [rax], al; add byte ptr [rbp - 0x7b], cl; sal byte ptr [rdx + rbp*2 + 0x48], 0xff; ret; 
0x0000000000452dfa: and al, 0xc8; add al, byte ptr [rax]; add byte ptr [rax + 1], bh; lea rdx, [rsp + 0x2c8]; call rcx; 
0x000000000047bb14: and al, 0xc8; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x8b48; 
0x000000000045e806: and al, 0xc; mov rdx, qword ptr [rsp + 0x10]; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x000000000040272e: and al, 0xc; ret; 
0x000000000044bc2a: and al, 0xd0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4828; 
0x0000000000478d30: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; fimul dword ptr [rcx - 0x77]; ret; 
0x0000000000470f1a: and al, 0xe0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000046170d: and al, 0xe; mov byte ptr [rsp + 0xf], al; mov rdx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rdx]; call rcx; 
0x00000000004485a8: and al, 0xf0; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x00000000004489f9: and al, 0xf0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x000000000047b203: and al, 0xf0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000471663: and al, 0xf0; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0x4d20; 
0x0000000000451468: and al, 0xf0; call 0x5d58f; mov rbp, qword ptr [rbp]; add rsp, 0x1e0; pop rbp; ret; 
0x000000000046c40b: and al, 0xf0; call 0x5d906; mov rbp, qword ptr [rbp]; add rsp, 0x3b0; pop rbp; ret; 
0x000000000046bee8: and al, 0xf0; call 0x5d94c; mov rbp, qword ptr [rbp]; add rsp, 0xe0; pop rbp; ret; 
0x000000000041f5c2: and al, 0xf6; ret 0x7402; 
0x000000000047c408: and al, 0xf8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000043b9bc: and al, 0xf; add byte ptr [rax - 0x3fcef78b], dl; add rsp, 0x38; pop rbp; ret; 
0x0000000000461711: and al, 0xf; mov rdx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000046172b: and al, 0xf; mov rdx, qword ptr [rsp + 0x48]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000436339: and al, 0xf; nop dword ptr [rax + rax]; call 0x364c0; add rsp, 0x20; pop rbp; ret; 
0x000000000045ec83: and al, 0xff; ror byte ptr [rax - 0x75], 1; and al, 0x24; add rsp, 0x10; pop rbp; ret; 
0x00000000004586c5: and al, 6; add rsp, 0x20; pop rbp; ret; 
0x0000000000406f77: and al, 7; add byte ptr [rax - 0x75], cl; push rsp; and al, 0x28; mov rax, qword ptr [rdx]; call rax; 
0x00000000004586a7: and al, 7; add dword ptr [rax - 0x75], ecx; or byte ptr [rax - 0x77], cl; ret 0xd1ff; 
0x0000000000406f63: and al, 7; add dword ptr [rax - 0x75], ecx; push rsp; and al, 0x10; mov rax, qword ptr [rdx]; call rax; 
0x000000000047b88e: and al, 8; add al, byte ptr [rax]; add byte ptr [rcx - 0x77], cl; fimul dword ptr [rcx - 0x77]; ret; 
0x0000000000402742: and al, 8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000040681c: and al, 8; add rsp, 0x10; pop rbp; ret; 
0x0000000000473aed: and al, 8; add rsp, 0x18; pop rbp; ret; 
0x0000000000412e9d: and al, 8; add rsp, 0x20; pop rbp; ret; 
0x000000000040c64c: and al, 8; add rsp, 0x38; pop rbp; ret; 
0x0000000000453e42: and al, 8; add rsp, 0x58; pop rbp; ret; 
0x00000000004067f2: and al, 8; cmp rcx, rax; jne 0x67ff; add rsp, 0x10; pop rbp; ret; 
0x0000000000432962: and al, 8; dec dword ptr [rcx + 0x108]; add rsp, 0x10; pop rbp; ret; 
0x000000000043235c: and al, 8; mov byte ptr [rax + 0xb4], 0; add rsp, 0x10; pop rbp; ret; 
0x000000000045872d: and al, 8; mov byte ptr [rax], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045e603: and al, 8; mov dword ptr [rax], 0; mov edi, 0; mov eax, 0x3c; syscall; 
0x000000000040272a: and al, 8; mov dword ptr [rsp + 0xc], edx; ret; 
0x000000000045e6c7: and al, 8; mov eax, 0x125; syscall; 
0x000000000045e6c7: and al, 8; mov eax, 0x125; syscall; mov dword ptr [rsp + 0x18], eax; ret; 
0x000000000045e78b: and al, 8; mov eax, 0x3e; syscall; 
0x000000000045e78b: and al, 8; mov eax, 0x3e; syscall; ret; 
0x000000000045e822: and al, 8; mov eax, 0xe2; syscall; 
0x000000000045e822: and al, 8; mov eax, 0xe2; syscall; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000045e5e2: and al, 8; mov eax, 0xe7; syscall; 
0x000000000045e5e2: and al, 8; mov eax, 0xe7; syscall; ret; 
0x000000000045e758: and al, 8; mov eax, 0xea; syscall; 
0x000000000045e758: and al, 8; mov eax, 0xea; syscall; ret; 
0x000000000045e662: and al, 8; mov eax, 3; syscall; 
0x000000000045006e: and al, 8; mov ebx, 0xffffffff; lea rcx, [rip + 0xe98fc]; add rsp, 0x10; pop rbp; ret; 
0x000000000045e628: and al, 8; mov edx, dword ptr [rsp + 0x10]; mov r10d, dword ptr [rsp + 0x14]; mov eax, 0x101; syscall; 
0x000000000045e802: and al, 8; mov esi, dword ptr [rsp + 0xc]; mov rdx, qword ptr [rsp + 0x10]; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x000000000043be82: and al, 8; mov qword ptr [rcx], rax; mov qword ptr [rcx + 8], rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000412e95: and al, 8; mov qword ptr [rdx], rcx; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; pop rbp; ret; 
0x000000000045869e: and al, 8; mov qword ptr [rsp + 0x18], rcx; mov byte ptr [rsp + 7], 1; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x000000000045cdc3: and al, 8; mov qword ptr fs:[0xfffffffffffffff8], rbx; ret; 
0x000000000045e51f: and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x170; popfq; pop rbp; ret; 
0x0000000000434605: and al, 8; mov rbx, qword ptr [rcx + rax*8]; mov rdx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x00000000004068d5: and al, 8; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x30; pop rbp; ret; 
0x00000000004413f2: and al, 8; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x000000000040a0f8: and al, 8; mov rcx, qword ptr [rax]; mov rdx, rax; mov rax, rbx; call rcx; 
0x000000000045e706: and al, 8; mov rdi, rsp; mov esi, 0; mov eax, 0x23; syscall; 
0x000000000045e6a2: and al, 8; mov rsi, qword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov eax, 0; syscall; 
0x000000000045e683: and al, 8; mov rsi, qword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov eax, 1; syscall; 
0x000000000045eca3: and al, 8; mov rsi, qword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov rax, 0x1c; syscall; 
0x000000000045eda3: and al, 8; mov rsi, qword ptr [rsp + 0x10]; mov rax, 0x83; syscall; 
0x000000000045ec23: and al, 8; mov rsi, qword ptr [rsp + 0x10]; mov rax, 0xb; syscall; 
0x000000000043469e: and al, 8; nop; mov rdx, rax; mov rax, rsi; call rcx; 
0x000000000045ccc2: and al, 8; pause; sub eax, 1; jne 0x5ccc4; ret; 
0x00000000004075c3: and al, 8; ret; 
0x0000000000422d29: and al, 8; test rax, rax; setne al; add rsp, 0x20; pop rbp; ret; 
0x000000000044d6ce: and al, byte ptr [rax]; add byte ptr [rax + 1], bh; add rsp, 0x18; pop rbp; ret; 
0x000000000043e5c8: and al, byte ptr [rax]; add byte ptr [rax], al; je 0x3e5b6; add rsp, 0x50; pop rbp; ret; 
0x000000000044e8f9: and al, byte ptr [rax]; add byte ptr [rcx], dh; jmp qword ptr [rsi - 0x70]; 
0x0000000000436aab: and al, byte ptr [rax]; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000046c31a: and al, byte ptr [rsi - 1]; jmp qword ptr [rsi - 0x70]; 
0x0000000000473528: and al, ch; mov dl, 4; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000418e4d: and al, ch; or eax, 0x480001b8; add esp, 0x30; pop rbp; ret; 
0x0000000000424b57: and al, ch; ret; 
0x000000000046b362: and bh, bh; dec dword ptr [rax - 0x7d]; ret 0x4830; 
0x000000000040c512: and bh, bh; ret 0x570f; 
0x00000000004596b7: and bh, dh; inc dword ptr [rax + rax*8 + 0x3d801c75]; ret; 
0x000000000040a459: and bl, ch; add rsp, 0x30; pop rbp; ret; 
0x000000000046542e: and bl, ch; cmp dword ptr [rax - 0x80], eax; jmp qword ptr [rbp + 0x75]; 
0x0000000000410813: and byte ptr [r8 - 0x75], cl; and al, 0x18; call 0x10860; add rsp, 0x20; pop rbp; ret; 
0x000000000040e533: and byte ptr [r8 - 0x75], cl; and al, 0x18; call 0xe580; add rsp, 0x20; pop rbp; ret; 
0x000000000040f253: and byte ptr [r8 - 0x75], cl; and al, 0x18; call 0xf2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000040fb73: and byte ptr [r8 - 0x75], cl; and al, 0x18; call 0xfbc0; add rsp, 0x20; pop rbp; ret; 
0x0000000000408f02: and byte ptr [r9 - 0x43], cl; ret; 
0x0000000000446b3d: and byte ptr [rax + 0x29], cl; ror dword ptr [rax + 1], cl; ret 0x8948; 
0x0000000000458088: and byte ptr [rax + 0x39], cl; ret; 
0x000000000045ed6b: and byte ptr [rax + 0xba], bh; syscall; 
0x000000000045e973: and byte ptr [rax + 0xd], bh; syscall; 
0x000000000045e973: and byte ptr [rax + 0xd], bh; syscall; mov dword ptr [rsp + 0x28], eax; ret; 
0x000000000045e932: and byte ptr [rax + 0xe], bh; syscall; 
0x0000000000426bb2: and byte ptr [rax + 1], cl; ret 0x4890; 
0x000000000045ce2f: and byte ptr [rax + 1], cl; ror byte ptr [rax - 0x77], 1; and al, 8; ret; 
0x0000000000439f73: and byte ptr [rax - 0x73], cl; adc eax, 0x64475; call rcx; 
0x0000000000402ae5: and byte ptr [rax - 0x73], cl; add al, 0x11; and eax, 0x7f; ret; 
0x0000000000473970: and byte ptr [rax - 0x73], cl; and byte ptr [rax - 0x77], cl; ret; 
0x000000000040eb11: and byte ptr [rax - 0x73], cl; mov dl, 1; add al, 0; add byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000044f327: and byte ptr [rax - 0x75], cl; adc eax, 0xd3369; test rdx, rdx; je 0x4f33f; mov rsi, qword ptr [rdx]; call rsi; 
0x0000000000410814: and byte ptr [rax - 0x75], cl; and al, 0x18; call 0x10860; add rsp, 0x20; pop rbp; ret; 
0x000000000045964c: and byte ptr [rax - 0x75], cl; and al, 0x18; call 0x3b080; add rsp, 0x10; pop rbp; ret; 
0x000000000040e534: and byte ptr [rax - 0x75], cl; and al, 0x18; call 0xe580; add rsp, 0x20; pop rbp; ret; 
0x000000000040f254: and byte ptr [rax - 0x75], cl; and al, 0x18; call 0xf2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000040fb74: and byte ptr [rax - 0x75], cl; and al, 0x18; call 0xfbc0; add rsp, 0x20; pop rbp; ret; 
0x000000000040471c: and byte ptr [rax - 0x75], cl; and al, 0x28; mov qword ptr [rcx], rax; add rsp, 0x30; pop rbp; ret; 
0x0000000000404c33: and byte ptr [rax - 0x75], cl; and al, 0x48; mov qword ptr [rax + 8], rcx; add rsp, 0x30; pop rbp; ret; 
0x000000000045e5c1: and byte ptr [rax - 0x75], cl; insb byte ptr [rdi], dx; and al, 0x28; add rsp, 0x30; ret; 
0x00000000004157da: and byte ptr [rax - 0x75], cl; or cl, byte ptr [rax - 0x75]; jo 0x157f2; mov rax, rsi; call rcx; 
0x000000000041d0b8: and byte ptr [rax - 0x75], cl; pop rsp; and al, 0x10; add rsp, 0x28; pop rbp; ret; 
0x000000000045a1c9: and byte ptr [rax - 0x75], cl; pop rsp; and al, 0x18; add rsp, 0x30; pop rbp; ret; 
0x00000000004046ad: and byte ptr [rax - 0x75], cl; pop rsp; and al, 0x28; add rsp, 0x68; pop rbp; ret; 
0x0000000000474ece: and byte ptr [rax - 0x75], cl; pop rsp; and al, 0x30; add rsp, 0x48; pop rbp; ret; 
0x000000000045e9d1: and byte ptr [rax - 0x75], cl; push rsp; and al, 0x28; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x0000000000473678: and byte ptr [rax - 0x77], cl; add dword ptr [rcx], esi; sal byte ptr [rcx], 0xdb; add rsp, 0x10; pop rbp; ret; 
0x0000000000454e03: and byte ptr [rax - 0x77], cl; and al, 0x28; mov rcx, qword ptr [rdx]; mov rax, qword ptr [rip + 0xcd88d]; lea rbx, [rsp + 0x10]; call rcx; 
0x0000000000428862: and byte ptr [rax - 0x77], cl; bnd call rdi; 
0x0000000000472631: and byte ptr [rax - 0x77], cl; fnstenv [rcx]; dec dword ptr [rax - 0x77]; ret; 
0x00000000004110ac: and byte ptr [rax - 0x77], cl; pop rax; xor byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 0x28; pop rbp; ret; 
0x000000000045f283: and byte ptr [rax - 0x77], cl; pop rsp; and al, 0x28; add rsp, 8; pop rbp; ret; 
0x000000000043e10d: and byte ptr [rax - 0x77], cl; ret 0x4890; 
0x0000000000441212: and byte ptr [rax - 0x77], cl; ret 0x894c; 
0x0000000000459501: and byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000414171: and byte ptr [rax - 0x77], cl; ret 0x8b4c; 
0x000000000041ea23: and byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000420bd7: and byte ptr [rax - 0x77], cl; ret; 
0x0000000000462878: and byte ptr [rax - 0x7d], cl; ret; 
0x000000000040395e: and byte ptr [rax - 0x7d], cl; rol dword ptr [rax + rcx*2], 0x89; ret; 
0x000000000041822c: and byte ptr [rax - 0x7f], cl; inc dword ptr [rax + 0x72009896]; and ecx, dword ptr [rax - 0x77]; ret 0xb848; 
0x0000000000401cc5: and byte ptr [rax - 1], cl; ret 0x3948; 
0x00000000004411d5: and byte ptr [rax - 1], cl; ret 0x4890; 
0x0000000000444783: and byte ptr [rax - 1], cl; ret 0x8948; 
0x00000000004356b2: and byte ptr [rax - 1], cl; ret 0x8b48; 
0x0000000000469f31: and byte ptr [rax - 1], cl; ret 0x8b4c; 
0x00000000004411ce: and byte ptr [rax - 1], cl; ret 0xc148; 
0x000000000042d903: and byte ptr [rax], ah; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004626af: and byte ptr [rax], al; add byte ptr [rax], al; call 0x5a020; add rsp, 8; pop rbp; ret; 
0x00000000004744da: and byte ptr [rax], al; add byte ptr [rax], al; pop rbp; nop; ret; 
0x00000000004730c8: and byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045b4a1: and byte ptr [rax], al; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x853]; jmp rax; 
0x000000000045b532: and byte ptr [rax], al; ja 0x5b53f; lea rax, [rip + 0xec3]; jmp rax; 
0x000000000045c4a7: and byte ptr [rax], al; pop rbp; ret; 
0x000000000043faec: and byte ptr [rbp + 0x23ebff53], cl; xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x00000000004636e2: and byte ptr [rbp + 0xf], al; stosd dword ptr [rdi], eax; rol dword ptr [rcx + rcx*4 + 0x4c], 0xb4; and byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000045a035: and byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x000000000041432d: and byte ptr [rbx + 0x13c68b3d], al; add byte ptr [rax], al; jg 0x1433d; add rsp, 0x20; pop rbp; ret; 
0x000000000044111b: and byte ptr [rbx + 0xc], dh; lea rax, [r8 + 0x80]; call 0xa660; sub rsp, -0x80; pop rbp; ret; 
0x0000000000441376: and byte ptr [rbx + 0xc], dh; lea rax, [rbx + 0x80]; call 0xa660; add rsp, 8; pop rbp; ret; 
0x000000000045eb77: and byte ptr [rbx + rcx*4 + 0x4c], al; and al, 0x24; mov eax, 9; syscall; 
0x000000000045ecd6: and byte ptr [rbx + rcx*4 + 0x4c], al; and al, 0x28; mov eax, 0xca; syscall; 
0x000000000045ecd6: and byte ptr [rbx + rcx*4 + 0x4c], al; and al, 0x28; mov eax, 0xca; syscall; mov dword ptr [rsp + 0x30], eax; ret; 
0x0000000000444d0b: and byte ptr [rbx - 0x3d5cf0ee], cl; jae 0x44d1d; add rsp, 0x58; pop rbp; ret; 
0x00000000004662c7: and byte ptr [rbx], al; add byte ptr [rax], al; call 0x5d320; add rsp, 0x690; pop rbp; ret; 
0x00000000004645e4: and byte ptr [rcx + 0x29], cl; leave; dec r9; mov rax, rbx; mov rbx, r9; call rsi; 
0x0000000000440f87: and byte ptr [rcx + 0x39], cl; ret; 
0x0000000000408f03: and byte ptr [rcx - 0x43], cl; ret; 
0x0000000000475daf: and byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004037f7: and byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x00000000004565ba: and byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; nop; ret; 
0x0000000000427001: and byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000044290b: and byte ptr [rcx], bh; ret 0x9c74; 
0x000000000043bdcc: and byte ptr [rcx], bl; jmp qword ptr [rcx]; 
0x00000000004495bd: and byte ptr [rcx], bl; mul byte ptr [rcx]; cmp edx, ebx; jg 0x495ad; mov dword ptr [rip + 0xcfb8c], ebx; ret; 
0x0000000000421a0d: and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000411c34: and byte ptr [rcx], dh; inc dword ptr [rbp + 0x31]; shr bl, 0xa; add rsp, 0x58; pop rbp; ret; 
0x000000000042e408: and byte ptr [rcx], dh; leave; call 0x4820; add rsp, 0x40; pop rbp; ret; 
0x00000000004113ea: and byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xd3; mov rcx, rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000451d52: and byte ptr [rcx], dh; shr bl, 0xb; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000045ce16: and byte ptr [rdi + 5], dh; call 0x5cde0; ret; 
0x000000000045b5c3: and byte ptr [rdi + 9], dh; lea rax, [rip + 0x1533]; jmp rax; 
0x000000000045b416: and byte ptr [rdi + 9], dh; lea rax, [rip + 0x280]; jmp rax; 
0x000000000045d606: and byte ptr [rdi + rcx + 0x11], al; jg 0x5d63c; lea rdi, [rdi + 0x40]; ret; 
0x000000000043a431: and byte ptr [rdi], cl; mov dh, 0x4c; and al, 0x17; add rsp, 0x38; pop rbp; ret; 
0x000000000040e4ed: and byte ptr [rdi], cl; mov dh, 0x53; or byte ptr [rdi], cl; mov dh, 0x73; or esi, esi; ret 0x7508; 
0x000000000040af07: and byte ptr [rdi], cl; mov dh, 0xbc; and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000041291e: and byte ptr [rdi], cl; mov dh, 0xc; sbb dword ptr [rax + 0x675a1f9], eax; add rsp, 0x38; pop rbp; ret; 
0x00000000004424a1: and byte ptr [rdx + 0xd], dh; lea rax, [rip + 0x5505a]; mov ebx, 0x13; ret; 
0x000000000046f9e5: and byte ptr [rsi + rax + 0x24548b48], al; sbb byte ptr [rax - 9], cl; ret 0x60; 
0x000000000040412c: and byte ptr [rsp + rcx + 0x48], dh; cmp ebx, ecx; sete al; add rsp, 0x28; pop rbp; ret; 
0x0000000000402f82: and ch, al; in eax, 0x74; ret 0xfdc5; 
0x00000000004308d7: and ch, al; ret; 
0x000000000045146b: and cl, al; add byte ptr [rax], al; mov rbp, qword ptr [rbp]; add rsp, 0x1e0; pop rbp; ret; 
0x000000000047217b: and cl, bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000440f2f: and cl, byte ptr [rax - 0x77]; ret 0x894c; 
0x00000000004410f8: and cl, byte ptr [rax - 1]; ret 0xc148; 
0x00000000004453fa: and cl, byte ptr [rax - 4]; dec dword ptr [rax - 0x77]; ret; 
0x000000000046542a: and cl, byte ptr [rcx - 0x7d]; clc; and bl, ch; cmp dword ptr [rax - 0x80], eax; jmp qword ptr [rbp + 0x75]; 
0x000000000041cd18: and cl, ch; ret 0xfffb; 
0x0000000000402d58: and cl, ch; ret 0xfffd; 
0x000000000047217a: and cl, dil; jmp qword ptr [rsi - 0x70]; 
0x000000000041846a: and dh, al; and dword ptr [rcx], eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000419565: and dh, al; xor byte ptr [rsi + 0x1000000], 0x48; add esp, 0x40; pop rbp; ret; 
0x00000000004584ad: and dword ptr [rax + 0x12], 0x48000000; add esp, 8; pop rbp; ret; 
0x0000000000406e3a: and dword ptr [rax + 0x48000000], 0x5d40c483; ret; 
0x000000000042115b: and dword ptr [rax + rax + 0x48c03100], ebp; add esp, 0xf8; pop rbp; ret; 
0x0000000000429603: and dword ptr [rax + rbx*8], esi; add rsp, 0x10; pop rbp; ret; 
0x000000000042964c: and dword ptr [rax + rsi*8], edx; add rsp, 0x10; pop rbp; ret; 
0x000000000043382a: and dword ptr [rax - 0x75], ecx; add eax, 0x6aa6e; lea rdx, [rip + 0x6aa67]; call rax; 
0x000000000044135e: and dword ptr [rax - 0x77], ecx; ret; 
0x000000000040bb52: and dword ptr [rax - 9], ecx; ret; 
0x000000000045ff4f: and dword ptr [rax], eax; add byte ptr [rax], al; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045491a: and dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000041850d: and dword ptr [rax], eax; call 0x188a0; add rsp, 0x18; pop rbp; ret; 
0x000000000043d2ed: and dword ptr [rax], esi; add rsp, 0x10; pop rbp; ret; 
0x0000000000476911: and dword ptr [rbp + 0x39], ecx; ret; 
0x0000000000462bfe: and dword ptr [rcx + 0x1bbd0], ecx; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000406ee3: and dword ptr [rcx + rcx], esi; call 0x5b0a0; add rsp, 0x18; pop rbp; ret; 
0x000000000041846d: and dword ptr [rcx], eax; add rsp, 0x18; pop rbp; ret; 
0x000000000045b4bb: and dword ptr [rcx], ecx; add byte ptr [rax], al; jmp rax; 
0x00000000004122c7: and dword ptr [rsi + rax*8], edx; add rsp, 0x10; pop rbp; ret; 
0x0000000000432b7b: and dword ptr [rsi], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000450985: and eax, 0x1000011; movups xmmword ptr [rcx + 0x11e8], xmm15; add rsp, 0x10; pop rbp; ret; 
0x0000000000470476: and eax, 0x1f; nop; pop rbp; ret; 
0x000000000046bbc4: and eax, 0x1f; ret; 
0x00000000004464f7: and eax, 0x24448948; xor byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004760d9: and eax, 0x24748b48; mov byte ptr [rsi + 0xe], dl; add rsp, 0x38; pop rbp; ret; 
0x0000000000462993: and eax, 0x3f; or eax, edx; mov ebx, 4; add rsp, 0x10; pop rbp; ret; 
0x0000000000444697: and eax, 0x45000187; xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x68; pop rbp; ret; 
0x0000000000414477: and eax, 0x450004a8; xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000419d77: and eax, 0x48000000; add esp, 0x10; pop rbp; ret; 
0x000000000042227a: and eax, 0x48c48348; pop rbp; ret; 
0x0000000000426ad7: and eax, 0x48fffff8; mov eax, dword ptr [rsp + 0x20]; shl rax, 0xd; sub rsp, -0x80; pop rbp; ret; 
0x0000000000402aea: and eax, 0x7f; ret; 
0x000000000045742b: and eax, 0x7fff; add rsp, 0x38; pop rbp; ret; 
0x000000000045e6ca: and eax, 0xf000001; add eax, 0x18244489; ret; 
0x00000000004784a4: and eax, 0xf4fff83; test byte ptr [rbp - 0x7d000000], ah; call qword ptr [rbp + 0xf]; 
0x000000000040480d: and eax, 0xfffffff8; add rsp, 0x10; pop rbp; ret; 
0x000000000042a60e: and eax, 0xfffffff8; add rsp, 0x170; pop rbp; ret; 
0x00000000004386ed: and eax, 0xfffffff8; add rsp, 0x18; pop rbp; ret; 
0x0000000000448a13: and eax, 0xfffffff8; add rsp, 0x1a0; pop rbp; ret; 
0x0000000000414419: and eax, 0xfffffff8; add rsp, 0x20; pop rbp; ret; 
0x0000000000431035: and eax, 0xfffffff8; add rsp, 0x28; pop rbp; nop; ret; 
0x0000000000404793: and eax, 0xfffffff8; add rsp, 0x28; pop rbp; ret; 
0x00000000004044b9: and eax, 0xfffffff8; add rsp, 0x30; pop rbp; ret; 
0x00000000004053bb: and eax, 0xfffffff8; add rsp, 0x38; pop rbp; ret; 
0x00000000004061d3: and eax, 0xfffffff8; add rsp, 0x40; pop rbp; ret; 
0x0000000000435c11: and eax, 0xfffffff8; add rsp, 0x50; pop rbp; ret; 
0x0000000000444f39: and eax, 0xfffffff8; add rsp, 0x58; pop rbp; ret; 
0x00000000004446a3: and eax, 0xfffffff8; add rsp, 0x68; pop rbp; ret; 
0x00000000004151fd: and eax, 0xfffffff8; add rsp, 0xc8; pop rbp; ret; 
0x000000000042c66d: and eax, 0xfffffff8; add rsp, 8; pop rbp; ret; 
0x000000000045f309: and eax, 0xfffffff8; call 0x10d40; add rsp, 0x28; pop rbp; ret; 
0x000000000045f3b5: and eax, 0xfffffff8; call 0x34300; add rsp, 8; pop rbp; ret; 
0x000000000045f3f5: and eax, 0xfffffff8; call 0x34340; add rsp, 8; pop rbp; ret; 
0x000000000043afbc: and eax, 0xfffffff8; call 0x3a000; add rsp, 0x30; pop rbp; ret; 
0x000000000045f4f5: and eax, 0xfffffff8; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x000000000045f69e: and eax, 0xfffffff8; call 0x4f320; mov dword ptr [rsp + 0x40], eax; add rsp, 0x18; pop rbp; ret; 
0x000000000045f2b5: and eax, 0xfffffff8; call 0x6c40; add rsp, 8; pop rbp; ret; 
0x0000000000441c66: and eax, 0xfffffff8; cmp byte ptr [rsp], 0; je 0x41c77; add rsp, 0x38; pop rbp; ret; 
0x000000000042e72d: and eax, 0xfffffff8; cmp dword ptr [rsp + 0x18], 0; je 0x2e742; add rsp, 0xc0; pop rbp; ret; 
0x00000000004376ad: and eax, 0xfffffff8; lea rax, [rip + 0x119127]; call 0x42600; add rsp, 0x30; pop rbp; ret; 
0x000000000042d7cd: and eax, 0xfffffff8; mov eax, 0x1006; mov dword ptr [rax], 0x1006; add rsp, 0x48; pop rbp; ret; 
0x0000000000445d59: and eax, 0xfffffff8; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000421374: and eax, 0xfffffff8; mov eax, 1; add rsp, 0xf8; pop rbp; ret; 
0x0000000000430f2d: and eax, 0xfffffff8; mov eax, 1; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x0000000000430e4d: and eax, 0xfffffff8; mov eax, 2; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x000000000045f65e: and eax, 0xfffffff8; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x000000000044f359: and eax, 0xfffffff8; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x00000000004504a0: and eax, 0xfffffff8; mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x60; pop rbp; ret; 
0x000000000045a324: and eax, 0xfffffff8; mov r14, rdi; ret; 
0x000000000045b156: and eax, 0xfffffff8; mov r14, rdx; mov rsp, qword ptr [rdx + 0x38]; mov rdx, rdi; mov rdi, qword ptr [rdi]; call rdi; 
0x00000000004635db: and eax, 0xfffffff8; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004639d6: and eax, 0xfffffff8; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; pop rbp; ret; 
0x0000000000463946: and eax, 0xfffffff8; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x78; pop rbp; ret; 
0x00000000004046a4: and eax, 0xfffffff8; mov rax, qword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x28]; add rsp, 0x68; pop rbp; ret; 
0x000000000040c644: and eax, 0xfffffff8; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; pop rbp; ret; 
0x0000000000453e3a: and eax, 0xfffffff8; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; pop rbp; ret; 
0x00000000004068cd: and eax, 0xfffffff8; mov rax, qword ptr [rsp + 8]; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x30; pop rbp; ret; 
0x000000000044f2f5: and eax, 0xfffffff8; mov rax, qword ptr [rsp]; add rsp, 8; pop rbp; ret; 
0x000000000045b23d: and eax, 0xfffffff8; mov rsp, qword ptr [rbx + 0x38]; mov rbp, qword ptr [rbx + 0x68]; call 0x5f580; call 0x5cde0; ret; 
0x000000000045cd7a: and eax, 0xfffffff8; mov rsp, rsi; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x0000000000470616: and eax, 0xfffffff8; nop dword ptr [rax + rax]; call 0x6d8e0; add rsp, 0x20; pop rbp; ret; 
0x000000000045f539: and eax, 0xfffffff8; nop; call 0x41520; add rsp, 0x10; pop rbp; ret; 
0x00000000004705ba: and eax, 0xfffffff8; nop; call 0x6ba00; add rsp, 0x10; pop rbp; ret; 
0x000000000045f371: and eax, 0xfffffff8; pop rbp; ret; 
0x000000000045cdc9: and eax, 0xfffffff8; ret; 
0x0000000000431492: and eax, 0xfffffff8; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x000000000041412f: and eax, 0xfffffff8; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x00000000004211c0: and eax, 0xfffffff8; xor eax, eax; add rsp, 0xf8; pop rbp; ret; 
0x0000000000461708: and eax, 0xfffffffd; mov byte ptr [rsp + 0xe], al; mov byte ptr [rsp + 0xf], al; mov rdx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000461726: and eax, 0xfffffffe; mov byte ptr [rsp + 0xf], al; mov rdx, qword ptr [rsp + 0x48]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000429794: and eax, 1; add rsp, 0x30; pop rbp; ret; 
0x000000000043182e: and eax, 1; add rsp, 0x70; pop rbp; ret; 
0x0000000000402e67: and eax, 1; lea rax, [rax*2 - 1]; ret; 
0x000000000041db59: and eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000045e711: and eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000045e711: and eax, dword ptr [rax]; add byte ptr [rax], al; syscall; add rsp, 0x10; pop rbp; ret; 
0x0000000000407104: and eax, ecx; add rax, r8; add rsp, 0x40; pop rbp; ret; 
0x0000000000403f31: and eax, ecx; ret; 
0x0000000000403f88: and eax, edx; ret; 
0x000000000044d0db: and eax, esi; add rax, rdx; mov edi, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000429948: and ebx, 0x1fffff; shl rbx, 0x2a; or rsi, rbx; mov rax, rsi; ret; 
0x000000000041f4b6: and ebx, 0x3fffff; shr rbx, 0xd; mov rax, rdi; add rsp, 0x40; pop rbp; ret; 
0x00000000004495c0: and ebx, esi; cmp edx, ebx; jg 0x495ad; mov dword ptr [rip + 0xcfb8c], ebx; ret; 
0x0000000000458a1f: and ebx, esi; mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000401065: and ecx, 0x1f; cmp rcx, 0x11; jne 0x1073; mov rax, qword ptr [rax + 0x40]; ret; 
0x000000000046ef0b: and ecx, 0x1f; mov rax, rcx; ret; 
0x000000000046b966: and ecx, 0x60; or rcx, 0x13; mov rbx, qword ptr [rsp + 0xe8]; add rsp, 0x270; pop rbp; ret; 
0x0000000000473418: and ecx, 0x7ffff9; cmp r9, 1; sete al; add rsp, 0x18; pop rbp; ret; 
0x000000000040eba0: and ecx, 0xfffffff7; mov byte ptr [rax + 8], cl; pop rbp; ret; 
0x000000000040f1a9: and ecx, 0xfffffffb; mov byte ptr [rbx + 8], cl; add rsp, 0x30; pop rbp; ret; 
0x000000000041075b: and ecx, 0xfffffffb; mov byte ptr [rbx + 8], cl; add rsp, 0x60; pop rbp; ret; 
0x000000000041fa2b: and ecx, 0xfffffffe; nop; mov byte ptr [rax + 8], cl; add rsp, 0x18; pop rbp; ret; 
0x000000000046bb86: and ecx, 1; add rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000454ec6: and ecx, 1; add rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000418235: and ecx, dword ptr [rax - 0x77]; ret 0xb848; 
0x00000000004663c6: and ecx, dword ptr [rax - 1]; ret; 
0x0000000000432b32: and ecx, dword ptr [rax]; add byte ptr [rbx + 1], bh; call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x000000000046e9aa: and edx, 0x1f; or rcx, rdx; or rcx, 0x180; add rsp, 0x38; pop rbp; ret; 
0x0000000000462e76: and edx, 0x3f; or edx, 0xffffff80; mov byte ptr [rbx + rax - 1], dl; add rsp, 0x48; pop rbp; ret; 
0x0000000000429541: and edx, ebx; dec rdx; or qword ptr [rax + rsi*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000429646: and edx, ebx; neg rdx; and qword ptr [rax + rsi*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000403f86: and edx, ecx; and eax, edx; ret; 
0x000000000046a1a0: and edx, ecx; mov qword ptr [rax + 0x30], rdx; xor eax, eax; add rsp, 0xc8; pop rbp; ret; 
0x0000000000462ee9: and esi, 0x3f; or esi, 0xffffff80; mov byte ptr [rbx + rax - 1], sil; add rsp, 0x48; pop rbp; ret; 
0x000000000042c996: and esi, 0xfffff; nop dword ptr [rax]; cmp esi, ecx; je 0x2c9ac; ret; 
0x0000000000402ebf: and esi, 1; lea rax, [rsi*2 - 1]; ret; 
0x000000000045cee2: and esi, dword ptr [rip + 0x7400000f]; sub eax, 0x6e0f4866; ret; 
0x0000000000412061: and esi, eax; or rbx, rsi; mov rcx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000045e9a2: and esp, 0xfffffff0; call rax; 
0x000000000045e9db: and esp, 0xfffffff0; call rax; mov rsp, rbx; pop rbp; ret; 
0x000000000045ebef: and esp, 0xfffffff0; mov qword ptr [rsp], rbx; call rax; 
0x0000000000429602: and qword ptr [rax + rbx*8], rsi; add rsp, 0x10; pop rbp; ret; 
0x000000000042964b: and qword ptr [rax + rsi*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x00000000004122c6: and qword ptr [rsi + rax*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x00000000004596b6: and r15b, sil; inc dword ptr [rax + rax*8 + 0x3d801c75]; ret; 
0x0000000000473417: and r9d, 0x7ffff9; cmp r9, 1; sete al; add rsp, 0x18; pop rbp; ret; 
0x0000000000402e66: and rax, 1; lea rax, [rax*2 - 1]; ret; 
0x0000000000407103: and rax, rcx; add rax, r8; add rsp, 0x40; pop rbp; ret; 
0x000000000044d0da: and rax, rsi; add rax, rdx; mov edi, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000458a1e: and rbx, rsi; mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000429540: and rdx, rbx; dec rdx; or qword ptr [rax + rsi*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000429645: and rdx, rbx; neg rdx; and qword ptr [rax + rsi*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000046a19f: and rdx, rcx; mov qword ptr [rax + 0x30], rdx; xor eax, eax; add rsp, 0xc8; pop rbp; ret; 
0x0000000000402ebe: and rsi, 1; lea rax, [rsi*2 - 1]; ret; 
0x0000000000412060: and rsi, r8; or rbx, rsi; mov rcx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000045e9a1: and rsp, 0xfffffffffffffff0; call rax; 
0x000000000045e9da: and rsp, 0xfffffffffffffff0; call rax; mov rsp, rbx; pop rbp; ret; 
0x000000000045ebee: and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x0000000000418469: and sil, al; and dword ptr [rcx], eax; add rsp, 0x18; pop rbp; ret; 
0x000000000046e638: and spl, r15b; dec dword ptr [rax - 0x7d]; ret 0x4830; 
0x000000000043a540: bnd call rcx; 
0x0000000000428865: bnd call rdi; 
0x000000000042b462: bnd ja 0x2b468; mov rcx, rbx; mov rbx, rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004115d3: bsf edx, ecx; btc rcx, rdx; lea rsi, [rax + rdx*8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000403547: bsf edx, edx; je 0x351a; cmp edx, ebx; jae 0x351a; mov qword ptr [r8], rdx; ret; 
0x0000000000403569: bsf edx, edx; je 0x351a; mov qword ptr [r8], rdx; ret; 
0x0000000000403515: bsf edx, edx; jne 0x3522; mov qword ptr [r8], -1; ret; 
0x00000000004035c7: bsf edx, edx; sub rdi, rsi; add rdx, rdi; mov qword ptr [r8], rdx; vzeroupper; ret; 
0x00000000004115d2: bsf rdx, rcx; btc rcx, rdx; lea rsi, [rax + rdx*8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000402e60: bsr ecx, ecx; shr rax, cl; and rax, 1; lea rax, [rax*2 - 1]; ret; 
0x0000000000402eb8: bsr ecx, edi; shr rsi, cl; and rsi, 1; lea rax, [rsi*2 - 1]; ret; 
0x0000000000402e5f: bsr rcx, rcx; shr rax, cl; and rax, 1; lea rax, [rax*2 - 1]; ret; 
0x0000000000402eb7: bsr rcx, rdi; shr rsi, cl; and rsi, 1; lea rax, [rsi*2 - 1]; ret; 
0x00000000004026bb: bt eax, 0x1b; setb byte ptr [rip + 0x14e3e5]; add rsp, 0x50; pop rbp; ret; 
0x000000000045499d: bt ecx, 1; setae al; add rsp, 0x10; pop rbp; ret; 
0x000000000046f59d: bt ecx, 9; jae 0x6f5ab; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x000000000046373d: bt ecx, edx; jb 0x63724; add rsp, 0x60; pop rbp; ret; 
0x0000000000445d7c: bt edi, 8; jae 0x45d8d; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000042e3ea: bt edx, 0x1b; jae 0x2e3f6; add rsp, 0x40; pop rbp; ret; 
0x0000000000444d0e: bt edx, eax; jae 0x44d1d; add rsp, 0x58; pop rbp; ret; 
0x00000000004115d7: btc ecx, edx; lea rsi, [rax + rdx*8]; add rsp, 0x10; pop rbp; ret; 
0x00000000004115d6: btc rcx, rdx; lea rsi, [rax + rdx*8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000429611: btr ecx, edx; nop; mov qword ptr [rax + rbx*8], rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000429610: btr rcx, rdx; nop; mov qword ptr [rax + rbx*8], rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000041d6f6: bts eax, 0x3f; xchg qword ptr [rcx + 0x18], rax; ret; 
0x000000000046f52b: bts ecx, 7; mov rax, qword ptr [rsp + 0x30]; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x000000000042950c: bts ecx, edx; nop; mov qword ptr [rax + rbx*8], rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000041d6f5: bts rax, 0x3f; xchg qword ptr [rcx + 0x18], rax; ret; 
0x000000000046f52a: bts rcx, 7; mov rax, qword ptr [rsp + 0x30]; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x000000000042950b: bts rcx, rdx; nop; mov qword ptr [rax + rbx*8], rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000401165: call 0x1080; mov rax, rbx; add rsp, 8; pop rbp; ret; 
0x000000000041081a: call 0x10860; add rsp, 0x20; pop rbp; ret; 
0x0000000000458dce: call 0x10c60; add rsp, 0x18; pop rbp; ret; 
0x000000000045f30e: call 0x10d40; add rsp, 0x28; pop rbp; ret; 
0x0000000000458e0e: call 0x10ee0; add rsp, 0x10; pop rbp; ret; 
0x0000000000405a54: call 0x10ee0; mov eax, 1; xor ebx, ebx; add rsp, 0x68; pop rbp; ret; 
0x0000000000410d15: call 0x11600; add rsp, 0x18; pop rbp; nop; ret; 
0x0000000000410cf1: call 0x11600; add rsp, 0x18; pop rbp; ret; 
0x0000000000411880: call 0x11a40; add rsp, 0x68; pop rbp; ret; 
0x0000000000413b03: call 0x11e20; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004132ea: call 0x11e20; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; pop rbp; ret; 
0x00000000004120eb: call 0x11f60; add rsp, 0x38; pop rbp; ret; 
0x0000000000411ec0: call 0x12140; add rsp, 0x48; pop rbp; ret; 
0x0000000000412583: call 0x12140; add rsp, 0xa8; pop rbp; ret; 
0x0000000000454f8e: call 0x1220; add rsp, 0x10; pop rbp; ret; 
0x00000000004557c0: call 0x1220; add rsp, 0x18; pop rbp; ret; 
0x0000000000412dcb: call 0x12980; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; pop rbp; ret; 
0x000000000040c7e0: call 0x13ec0; add rsp, 0x40; pop rbp; ret; 
0x0000000000447791: call 0x13f60; add rsp, 0x68; pop rbp; ret; 
0x0000000000413ef0: call 0x14080; add rsp, 0x10; pop rbp; ret; 
0x000000000041404f: call 0x14560; add rsp, 0x20; pop rbp; ret; 
0x0000000000423c63: call 0x15740; add rsp, 0x20; pop rbp; ret; 
0x000000000040c12a: call 0x15c40; mov rax, qword ptr [rsp + 0x48]; add rsp, 0x58; pop rbp; ret; 
0x00000000004164e5: call 0x165e0; add rsp, 0x48; pop rbp; ret; 
0x0000000000417272: call 0x17960; add rsp, 8; pop rbp; ret; 
0x000000000045828b: call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x0000000000416234: call 0x184c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004186e5: call 0x18800; add rsp, 0x50; pop rbp; ret; 
0x000000000041850f: call 0x188a0; add rsp, 0x18; pop rbp; ret; 
0x000000000043df70: call 0x18900; mov rax, qword ptr [rsp + 0x80]; add rsp, 0xa8; pop rbp; ret; 
0x0000000000419d76: call 0x19da0; add rsp, 0x10; pop rbp; ret; 
0x0000000000401a07: call 0x1a40; add rsp, 0x10; pop rbp; ret; 
0x00000000004195ef: call 0x1b3a0; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x30; pop rbp; ret; 
0x000000000041ba60: call 0x1ba80; add rsp, 0x30; pop rbp; ret; 
0x000000000041d2f4: call 0x1c720; add rsp, 0x38; pop rbp; ret; 
0x00000000004164e0: call 0x1c8e0; call 0x165e0; add rsp, 0x48; pop rbp; ret; 
0x00000000004221cc: call 0x1cd20; add rsp, 0x18; pop rbp; ret; 
0x0000000000422360: call 0x1cd20; add rsp, 0x48; pop rbp; ret; 
0x0000000000422660: call 0x1cd20; add rsp, 8; pop rbp; ret; 
0x0000000000417ae0: call 0x1d100; add rsp, 0x68; pop rbp; ret; 
0x0000000000413519: call 0x1d260; add rsp, 0x58; pop rbp; ret; 
0x000000000041c3c9: call 0x1d600; add rsp, 0x10; pop rbp; ret; 
0x000000000041d20f: call 0x1d920; add rsp, 0x10; pop rbp; ret; 
0x0000000000439c10: call 0x1d920; xor eax, eax; xor ebx, ebx; add rsp, 0x28; pop rbp; ret; 
0x000000000041db58: call 0x1db80; add rsp, 0x20; pop rbp; ret; 
0x0000000000457fc8: call 0x1dfa0; add rsp, 0x18; pop rbp; ret; 
0x0000000000420600: call 0x1dfa0; call 0x25b60; add rsp, 0x30; pop rbp; ret; 
0x0000000000402e65: call 0x1e0b1b2; lea rax, [rax*2 - 1]; ret; 
0x000000000041e249: call 0x1e2a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000415a00: call 0x1e4c0; add rsp, 8; pop rbp; ret; 
0x0000000000420bb5: call 0x20380; add rsp, 0x28; pop rbp; nop; ret; 
0x000000000045864a: call 0x20520; pop rbp; ret; 
0x0000000000415a60: call 0x20640; add rsp, 8; pop rbp; ret; 
0x0000000000413a33: call 0x20c20; add rsp, 0x18; pop rbp; ret; 
0x000000000041bc00: call 0x22100; add rsp, 0x40; pop rbp; ret; 
0x0000000000422a8e: call 0x226a0; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbp; ret; 
0x00000000004220ca: call 0x22720; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rcx + 8], rax; pop rbp; ret; 
0x0000000000422b2f: call 0x229e0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000423994: call 0x23d20; add rsp, 0x18; pop rbp; ret; 
0x0000000000447043: call 0x24840; add rsp, 0x28; pop rbp; ret; 
0x0000000000421ae0: call 0x248c0; mov rax, qword ptr [rsp + 0x28]; call 0xa580; add rsp, 0x38; pop rbp; ret; 
0x0000000000425660: call 0x24f40; test al, al; je 0x2566f; add rsp, 0x20; pop rbp; ret; 
0x00000000004155f6: call 0x25560; add rsp, 8; pop rbp; ret; 
0x000000000042a676: call 0x25600; add rsp, 0x10; pop rbp; ret; 
0x0000000000420605: call 0x25b60; add rsp, 0x30; pop rbp; ret; 
0x00000000004231e9: call 0x25ce0; add rsp, 0x58; pop rbp; ret; 
0x0000000000426120: call 0x26300; add rsp, 0x70; pop rbp; ret; 
0x0000000000426ad6: call 0x26300; mov rax, qword ptr [rsp + 0x20]; shl rax, 0xd; sub rsp, -0x80; pop rbp; ret; 
0x000000000041f2f2: call 0x28940; add rsp, 0x20; pop rbp; ret; 
0x0000000000428750: call 0x28940; mov rdx, qword ptr [rsp + 0xa8]; add qword ptr [rdx + 0x10128], rax; add rsp, 0x98; pop rbp; ret; 
0x000000000041f26f: call 0x28c80; add rsp, 0x18; pop rbp; ret; 
0x0000000000428da5: call 0x28de0; add rsp, 0x10; pop rbp; ret; 
0x0000000000429d77: call 0x29580; add rsp, 0x30; pop rbp; ret; 
0x0000000000429aa6: call 0x29b20; add rsp, 0x18; pop rbp; ret; 
0x0000000000429ab1: call 0x29c20; add rsp, 0x18; pop rbp; ret; 
0x0000000000417f4b: call 0x2a2e0; add rsp, 0x18; pop rbp; ret; 
0x000000000040c474: call 0x2a480; add rsp, 0x28; pop rbp; ret; 
0x000000000042a821: call 0x2a860; add rsp, 0x20; pop rbp; ret; 
0x000000000043b8d2: call 0x2aa40; add rsp, 8; pop rbp; ret; 
0x000000000042aa65: call 0x2aaa0; add rsp, 0x10; pop rbp; ret; 
0x000000000042ad80: call 0x2ada0; add rsp, 0x20; pop rbp; ret; 
0x0000000000426d21: call 0x2b660; test bl, bl; je 0x26d30; add rsp, 0x10; pop rbp; ret; 
0x000000000042115a: call 0x2bd80; xor eax, eax; add rsp, 0xf8; pop rbp; ret; 
0x0000000000424260: call 0x2c4a0; mov rax, qword ptr [rsp + 0x78]; add rsp, 0x90; pop rbp; ret; 
0x000000000042c710: call 0x2c600; add rsp, 0x38; pop rbp; ret; 
0x0000000000457ed9: call 0x2c680; add rsp, 8; pop rbp; ret; 
0x0000000000458fea: call 0x2ca00; pop rbp; ret; 
0x00000000004591d8: call 0x2ca60; add rsp, 0x10; pop rbp; ret; 
0x000000000045958a: call 0x2cc60; add rsp, 0x30; pop rbp; ret; 
0x000000000040a680: call 0x2d740; add rsp, 0x18; pop rbp; ret; 
0x000000000044155a: call 0x2dba0; add rsp, 0x10; pop rbp; ret; 
0x00000000004042c4: call 0x2e140; add rsp, 0x18; pop rbp; ret; 
0x000000000044592c: call 0x2e340; add rsp, 0x18; pop rbp; ret; 
0x0000000000404960: call 0x2e420; add rsp, 0x58; pop rbp; ret; 
0x000000000043ef75: call 0x2e4a0; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000444fa2: call 0x2e940; add rsp, 0x58; pop rbp; ret; 
0x000000000042fc46: call 0x2f800; add rsp, 0x28; pop rbp; ret; 
0x000000000042fb82: call 0x2f800; mov rdx, qword ptr [rsp + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000406f8a: call 0x2fb60; add rsp, 0x30; pop rbp; ret; 
0x000000000042fdac: call 0x2fb60; add rsp, 0x50; pop rbp; ret; 
0x00000000004339ac: call 0x2fb60; add rsp, 0x90; pop rbp; ret; 
0x0000000000457dc2: call 0x30dc0; test rax, rax; jne 0x57dd5; add rsp, 0x88; pop rbp; ret; 
0x0000000000415449: call 0x30e00; add rsp, 0xc8; pop rbp; ret; 
0x00000000004339a6: call 0x30e00; nop; call 0x2fb60; add rsp, 0x90; pop rbp; ret; 
0x0000000000459613: call 0x30ee0; add rsp, 0x10; pop rbp; ret; 
0x000000000043e5f1: call 0x30ee0; add rsp, 0x50; pop rbp; ret; 
0x0000000000430e57: call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x00000000004019b3: call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x0000000000431b91: call 0x31a60; add rsp, 0x40; pop rbp; ret; 
0x0000000000457ba0: call 0x32920; call 0x32b60; call 0x32980; add rsp, 0x38; pop rbp; ret; 
0x0000000000452b00: call 0x32920; call 0x32b60; call 0x32980; add rsp, 0x58; pop rbp; ret; 
0x0000000000453d40: call 0x32920; call 0x32b60; call 0x32980; add rsp, 0x70; pop rbp; ret; 
0x000000000042feaf: call 0x32980; add rsp, 0x10; pop rbp; ret; 
0x000000000042d86a: call 0x32980; add rsp, 0x20; pop rbp; ret; 
0x00000000004525e0: call 0x32980; add rsp, 0x28; pop rbp; ret; 
0x00000000004204b6: call 0x32980; add rsp, 0x30; pop rbp; ret; 
0x00000000004544f6: call 0x32980; add rsp, 0x38; pop rbp; ret; 
0x000000000041c6ca: call 0x32980; add rsp, 0x40; pop rbp; ret; 
0x0000000000452b0a: call 0x32980; add rsp, 0x58; pop rbp; ret; 
0x000000000041bfe0: call 0x32980; add rsp, 0x60; pop rbp; ret; 
0x0000000000408825: call 0x32980; add rsp, 0x70; pop rbp; ret; 
0x0000000000443ff7: call 0x32980; add rsp, 0xa8; pop rbp; ret; 
0x000000000044526a: call 0x32980; mov rax, qword ptr [rsp + 0x58]; add rsp, 0x68; pop rbp; ret; 
0x0000000000408109: call 0x32980; sub rsp, -0x80; pop rbp; ret; 
0x00000000004314c0: call 0x32980; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x00000000004331ef: call 0x329e0; add rsp, 0x40; pop rbp; ret; 
0x0000000000432f88: call 0x329e0; sub rsp, -0x80; pop rbp; ret; 
0x000000000042feaa: call 0x32b60; call 0x32980; add rsp, 0x10; pop rbp; ret; 
0x000000000042d865: call 0x32b60; call 0x32980; add rsp, 0x20; pop rbp; ret; 
0x0000000000457ba5: call 0x32b60; call 0x32980; add rsp, 0x38; pop rbp; ret; 
0x000000000041c6c5: call 0x32b60; call 0x32980; add rsp, 0x40; pop rbp; ret; 
0x0000000000452b05: call 0x32b60; call 0x32980; add rsp, 0x58; pop rbp; ret; 
0x0000000000453d45: call 0x32b60; call 0x32980; add rsp, 0x70; pop rbp; ret; 
0x0000000000443ff2: call 0x32b60; call 0x32980; add rsp, 0xa8; pop rbp; ret; 
0x0000000000445265: call 0x32b60; call 0x32980; mov rax, qword ptr [rsp + 0x58]; add rsp, 0x68; pop rbp; ret; 
0x0000000000432ff1: call 0x32ee0; add rsp, 0x10; pop rbp; ret; 
0x00000000004332af: call 0x33020; add rsp, 0x20; pop rbp; ret; 
0x000000000043312e: call 0x33020; add rsp, 8; pop rbp; ret; 
0x0000000000443fed: call 0x33020; call 0x32b60; call 0x32980; add rsp, 0xa8; pop rbp; ret; 
0x0000000000408820: call 0x33120; call 0x32980; add rsp, 0x70; pop rbp; ret; 
0x0000000000432b3a: call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x0000000000432c58: call 0x331a0; add rsp, 0x28; pop rbp; ret; 
0x0000000000432e92: call 0x331a0; call 0x32980; add rsp, 0x10; pop rbp; ret; 
0x00000000004204b1: call 0x331a0; call 0x32980; add rsp, 0x30; pop rbp; ret; 
0x00000000004544f1: call 0x331a0; call 0x32980; add rsp, 0x38; pop rbp; ret; 
0x00000000004527d4: call 0x331a0; call 0x32980; add rsp, 0x40; pop rbp; ret; 
0x000000000041c140: call 0x331a0; call 0x32980; add rsp, 0x60; pop rbp; ret; 
0x00000000004525d7: call 0x331a0; nop dword ptr [rax]; call 0x32980; add rsp, 0x28; pop rbp; ret; 
0x000000000041bfda: call 0x331a0; nop; call 0x32980; add rsp, 0x60; pop rbp; ret; 
0x00000000004548b4: call 0x33300; add rsp, 0x60; pop rbp; ret; 
0x000000000041df64: call 0x33bc0; add rsp, 0x20; pop rbp; ret; 
0x0000000000442e1a: call 0x33fe0; add rsp, 0x58; pop rbp; ret; 
0x000000000045f3ba: call 0x34300; add rsp, 8; pop rbp; ret; 
0x000000000045f3fa: call 0x34340; add rsp, 8; pop rbp; ret; 
0x000000000043b04e: call 0x34440; add rsp, 0x10; pop rbp; ret; 
0x0000000000418e4e: call 0x34660; add rsp, 0x30; pop rbp; ret; 
0x00000000004545f6: call 0x34660; add rsp, 0x58; pop rbp; ret; 
0x0000000000434c0a: call 0x34b40; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x0000000000405440: call 0x34e80; add rsp, 0x18; pop rbp; ret; 
0x00000000004321c0: call 0x34e80; add rsp, 0x40; pop rbp; ret; 
0x0000000000431512: call 0x350a0; mov eax, 1; add rsp, 0x18; pop rbp; ret; 
0x000000000043aa60: call 0x351a0; call 0x3a000; add rsp, 0x50; pop rbp; ret; 
0x0000000000458534: call 0x35640; add rsp, 0x18; pop rbp; ret; 
0x0000000000435c94: call 0x35640; add rsp, 0x20; pop rbp; ret; 
0x0000000000419555: call 0x35640; add rsp, 0x40; pop rbp; nop; ret; 
0x0000000000417923: call 0x35640; add rsp, 0x40; pop rbp; ret; 
0x0000000000435dcf: call 0x35b40; add rsp, 0x30; pop rbp; ret; 
0x0000000000406814: call 0x35e00; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000458573: call 0x35e40; add rsp, 8; pop rbp; ret; 
0x0000000000457d0a: call 0x360e0; pop rbp; ret; 
0x0000000000436340: call 0x364c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000458435: call 0x36740; add rsp, 8; pop rbp; nop; ret; 
0x00000000004729f0: call 0x36a0; add rsp, 0x38; pop rbp; ret; 
0x00000000004036a8: call 0x36c0; add rsp, 0x38; pop rbp; ret; 
0x000000000042d1a7: call 0x36c0; mov rax, rcx; add rsp, 0x50; pop rbp; ret; 
0x0000000000403640: call 0x36c0; mov rbx, rcx; add rsp, 0x40; pop rbp; ret; 
0x000000000043702f: call 0x37060; add rsp, 8; pop rbp; ret; 
0x0000000000445c67: call 0x371e0; add rsp, 0x20; pop rbp; ret; 
0x0000000000444a51: call 0x371e0; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x00000000004371ad: call 0x37420; add rsp, 0x28; pop rbp; ret; 
0x0000000000457d40: call 0x37480; add rsp, 0x18; pop rbp; ret; 
0x0000000000403969: call 0x3780; add rsp, 0x10; pop rbp; ret; 
0x0000000000403c49: call 0x3780; add rsp, 0x60; pop rbp; ret; 
0x0000000000438465: call 0x37900; add rsp, 0x18; pop rbp; ret; 
0x000000000043bd51: call 0x37900; call 0x3a000; add rsp, 0x20; pop rbp; ret; 
0x0000000000437db1: call 0x37a40; add rsp, 0x18; pop rbp; ret; 
0x000000000043b891: call 0x37d20; add rsp, 8; pop rbp; ret; 
0x0000000000439cd9: call 0x38040; add rsp, 0x10; pop rbp; ret; 
0x000000000043bf63: call 0x38040; add rsp, 0x18; pop rbp; ret; 
0x0000000000439c71: call 0x38040; pop rbp; ret; 
0x000000000043a237: call 0x385c0; add rsp, 0x28; pop rbp; ret; 
0x000000000045888f: call 0x385c0; add rsp, 0x30; pop rbp; ret; 
0x000000000043bd4c: call 0x385c0; call 0x37900; call 0x3a000; add rsp, 0x20; pop rbp; ret; 
0x000000000043a5b5: call 0x385c0; call 0x3a000; add rsp, 0x38; pop rbp; ret; 
0x00000000004039c9: call 0x3860; add rsp, 0x10; pop rbp; ret; 
0x0000000000403c5a: call 0x3860; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c6b: call 0x3940; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c80: call 0x39a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000437fe0: call 0x39c40; add rsp, 0x18; pop rbp; ret; 
0x000000000044dee9: call 0x39c40; movzx eax, byte ptr [rsp + 0x13]; add rsp, 0x38; pop rbp; ret; 
0x00000000004394a6: call 0x39d20; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000436428: call 0x3a000; add rsp, 0x18; pop rbp; ret; 
0x000000000043bd56: call 0x3a000; add rsp, 0x20; pop rbp; ret; 
0x000000000043a69a: call 0x3a000; add rsp, 0x28; pop rbp; ret; 
0x000000000043acc5: call 0x3a000; add rsp, 0x30; pop rbp; ret; 
0x000000000043a5ba: call 0x3a000; add rsp, 0x38; pop rbp; ret; 
0x000000000043aa65: call 0x3a000; add rsp, 0x50; pop rbp; ret; 
0x0000000000403cb5: call 0x3a00; add rsp, 0x60; pop rbp; nop; ret; 
0x000000000043a8fa: call 0x3a5e0; add rsp, 0x28; pop rbp; ret; 
0x000000000043a82a: call 0x3a5e0; add rsp, 0x30; pop rbp; ret; 
0x0000000000403ca4: call 0x3b00; add rsp, 0x60; pop rbp; ret; 
0x0000000000459652: call 0x3b080; add rsp, 0x10; pop rbp; ret; 
0x000000000043b94c: call 0x3ba80; mov eax, 1; add rsp, 0x38; pop rbp; ret; 
0x0000000000433a35: call 0x3bea0; add rsp, 8; pop rbp; nop; ret; 
0x0000000000414958: call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x0000000000403b43: call 0x3c00; movabs rdx, 0x52ef6bbb8f63bf; imul rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x00000000004339f3: call 0x3cb80; pop rbp; ret; 
0x000000000043cc4a: call 0x3cc40; pop rbp; ret; 
0x000000000043cc6a: call 0x3cc60; pop rbp; ret; 
0x000000000043cc8a: call 0x3cc80; pop rbp; ret; 
0x000000000043ccaa: call 0x3cca0; pop rbp; ret; 
0x000000000043ccca: call 0x3ccc0; pop rbp; ret; 
0x000000000043ccea: call 0x3cce0; pop rbp; ret; 
0x0000000000444b31: call 0x3cd00; add rsp, 0x58; pop rbp; ret; 
0x000000000043bbc0: call 0x3e060; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000043b947: call 0x3e0e0; call 0x3ba80; mov eax, 1; add rsp, 0x38; pop rbp; ret; 
0x000000000043b88c: call 0x3e200; call 0x37d20; add rsp, 8; pop rbp; ret; 
0x000000000043fa26: call 0x3e3c0; pop rbp; ret; 
0x000000000043ff8e: call 0x3fe00; test rax, rax; je 0x3ff9e; add rsp, 8; pop rbp; ret; 
0x000000000043acc0: call 0x3ffe0; call 0x3a000; add rsp, 0x30; pop rbp; ret; 
0x0000000000440028: call 0x400c0; test al, al; je 0x40002; add rsp, 0x20; pop rbp; ret; 
0x0000000000439f97: call 0x402a0; add rsp, 0x60; pop rbp; ret; 
0x00000000004040c8: call 0x4100; add rsp, 0x18; pop rbp; ret; 
0x00000000004411e8: call 0x41340; sub rsp, -0x80; pop rbp; ret; 
0x000000000045f540: call 0x41520; add rsp, 0x10; pop rbp; ret; 
0x0000000000404068: call 0x41c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004606ce: call 0x41c0; add rsp, 0x68; pop rbp; ret; 
0x000000000042e1a9: call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x00000000004376b9: call 0x42600; add rsp, 0x30; pop rbp; ret; 
0x0000000000436cd3: call 0x42600; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x48; pop rbp; ret; 
0x0000000000459f20: call 0x42b60; add rsp, 0x28; pop rbp; ret; 
0x0000000000435e20: call 0x42ea0; add rsp, 0x18; pop rbp; ret; 
0x0000000000416500: call 0x42ea0; add rsp, 0x48; pop rbp; ret; 
0x0000000000415e27: call 0x42ea0; add rsp, 0x88; pop rbp; ret; 
0x0000000000444f97: call 0x44020; add rsp, 0x58; pop rbp; ret; 
0x0000000000436490: call 0x44100; add rsp, 8; pop rbp; ret; 
0x0000000000444632: call 0x44760; add rsp, 0x68; pop rbp; ret; 
0x0000000000444314: call 0x45740; add rsp, 8; pop rbp; ret; 
0x0000000000445da1: call 0x45740; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000445c62: call 0x45860; call 0x371e0; add rsp, 0x20; pop rbp; ret; 
0x0000000000444a4c: call 0x459e0; call 0x371e0; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x0000000000413f90: call 0x45e0; add rsp, 0x20; pop rbp; ret; 
0x0000000000445f4a: call 0x45f60; call 0x460a0; pop rbp; ret; 
0x0000000000445f4f: call 0x460a0; pop rbp; ret; 
0x0000000000444300: call 0x462c0; test al, al; je 0x4430f; add rsp, 8; pop rbp; ret; 
0x0000000000413f45: call 0x4740; add rsp, 0x20; pop rbp; ret; 
0x000000000042de00: call 0x4740; add rsp, 0x40; pop rbp; ret; 
0x000000000040b694: call 0x4740; mov rax, qword ptr [rsp + 0x10]; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rbp; ret; 
0x0000000000436e20: call 0x476c0; add rsp, 0x10; pop rbp; ret; 
0x0000000000448461: call 0x476c0; add rsp, 0x2e8; pop rbp; ret; 
0x0000000000413a34: call 0x48013b0a; add esp, 0x18; pop rbp; ret; 
0x000000000041dcf4: call 0x4801f022; xchg dword ptr [rax], edx; ret; 
0x0000000000432ab0: call 0x48032ab5; add esp, 0x28; pop rbp; ret; 
0x0000000000429793: call 0x4804781b; add esp, 0x30; pop rbp; ret; 
0x000000000045098f: call 0x480509a5; add esp, 0x10; pop rbp; ret; 
0x0000000000450a1b: call 0x48050a31; add esp, 0x30; pop rbp; ret; 
0x000000000046b971: call 0x4806b976; add esp, 0x270; pop rbp; ret; 
0x000000000044930e: call 0x48160; add rsp, 0x10; pop rbp; ret; 
0x000000000042e3a9: call 0x4820; add rsp, 0x38; pop rbp; ret; 
0x000000000042e40b: call 0x4820; add rsp, 0x40; pop rbp; ret; 
0x0000000000422bd4: call 0x49022a52; add esp, 0x10; pop rbp; ret; 
0x000000000045ff54: call 0x4905f98a; add esp, 0x18; pop rbp; ret; 
0x0000000000449605: call 0x49640; movsxd rax, eax; shl rax, 3; add rsp, 8; pop rbp; ret; 
0x000000000044a365: call 0x4a0e0; add rsp, 0x40; pop rbp; ret; 
0x000000000044a420: call 0x4a0e0; add rsp, 0x50; pop rbp; ret; 
0x000000000044a4f8: call 0x4a0e0; add rsp, 0x60; pop rbp; ret; 
0x000000000044a622: call 0x4a0e0; add rsp, 0x70; pop rbp; ret; 
0x0000000000407486: call 0x4a0e0; add rsp, 0xf8; pop rbp; ret; 
0x0000000000407527: call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x0000000000469e39: call 0x4a320; add rsp, 0x70; pop rbp; ret; 
0x00000000004073b1: call 0x4a320; add rsp, 0xf8; pop rbp; ret; 
0x000000000046fc54: call 0x4a3c0; add rsp, 0x38; pop rbp; ret; 
0x000000000046d087: call 0x4a3c0; add rsp, 0x78; pop rbp; ret; 
0x00000000004074c0: call 0x4a480; add rsp, 0xf8; pop rbp; ret; 
0x0000000000472e02: call 0x4a580; add rsp, 0x58; pop rbp; ret; 
0x000000000046d05a: call 0x4a580; add rsp, 0x78; pop rbp; ret; 
0x00000000004078c6: call 0x4a6a0; add rsp, 0x140; pop rbp; ret; 
0x000000000044c315: call 0x4c120; add rsp, 0x10; pop rbp; nop; ret; 
0x0000000000451100: call 0x4c120; add rsp, 0x18; pop rbp; ret; 
0x0000000000455640: call 0x4c120; add rsp, 0x40; pop rbp; ret; 
0x000000000044ced5: call 0x4c4c0; add rsp, 0x30; pop rbp; nop; ret; 
0x000000000044cf4f: call 0x4c4c0; add rsp, 0x30; pop rbp; ret; 
0x000000000044cd04: call 0x4cb80; mov ecx, dword ptr [rsp + 0x3c]; add rsp, 0x58; pop rbp; ret; 
0x0000000000404cb2: call 0x4cc0; add rsp, 0x20; pop rbp; ret; 
0x000000000044e4e1: call 0x4e540; add rsp, 0x78; pop rbp; ret; 
0x000000000044e7f5: call 0x4e860; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000472d6f: call 0x4f2e0; dec rax; mov qword ptr [rip + 0xdd89a], rax; pop rbp; nop; ret; 
0x00000000004343da: call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x0000000000432aca: call 0x4f320; add rsp, 0x28; pop rbp; ret; 
0x000000000045f6a3: call 0x4f320; mov dword ptr [rsp + 0x40], eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000450e42: call 0x4f520; add rsp, 0x28; pop rbp; ret; 
0x000000000041d182: call 0x4f520; add rsp, 0x30; pop rbp; ret; 
0x0000000000450baa: call 0x4f520; add rsp, 0x40; pop rbp; ret; 
0x0000000000419cec: call 0x4f520; add rsp, 0x50; pop rbp; ret; 
0x0000000000450d06: call 0x4f520; add rsp, 0x58; pop rbp; ret; 
0x000000000043ad2b: call 0x4f520; lea rax, [rip + 0x63691]; call 0x5b0a0; add rsp, 0x28; pop rbp; ret; 
0x000000000043a960: call 0x4f520; mov rax, qword ptr [rsp + 0x28]; call 0x3a5e0; add rsp, 0x30; pop rbp; ret; 
0x000000000043a8f0: call 0x4f520; mov rax, qword ptr [rsp + 0x38]; call 0x3a5e0; add rsp, 0x28; pop rbp; ret; 
0x000000000043cfa0: call 0x4fc00; mov rax, qword ptr [r14 + 0x30]; dec dword ptr [rax + 0xf0]; add rsp, 0x3a0; pop rbp; ret; 
0x000000000044f5d2: call 0x500a0; add rsp, 0x58; pop rbp; ret; 
0x000000000044fbe0: call 0x50120; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rcx], rax; add rsp, 0x18; pop rbp; ret; 
0x000000000044ff54: call 0x50380; mov eax, eax; add rsp, 0x38; pop rbp; ret; 
0x0000000000421fc4: call 0x50a40; add rsp, 0x10; pop rbp; ret; 
0x000000000043e5cd: call 0x50c8691a; pop rbp; ret; 
0x000000000043bb25: call 0x50e60; add rsp, 8; pop rbp; ret; 
0x000000000043bb20: call 0x50f40; call 0x50e60; add rsp, 8; pop rbp; ret; 
0x0000000000451396: call 0x51500; add rsp, 0x1e0; pop rbp; ret; 
0x0000000000451900: call 0x51500; add rsp, 0x68; pop rbp; ret; 
0x00000000004517c2: call 0x51b20; add rsp, 0x60; pop rbp; ret; 
0x0000000000451a42: call 0x51b20; add rsp, 0x68; pop rbp; ret; 
0x0000000000454000: call 0x51dc0; add rsp, 0x198; pop rbp; ret; 
0x0000000000453f26: call 0x51dc0; mov rdx, qword ptr [rsp + 0x1b0]; mov qword ptr [rdx], rax; add rsp, 0x1b8; pop rbp; ret; 
0x0000000000452908: call 0x52940; add rsp, 0x40; pop rbp; ret; 
0x0000000000453b43: call 0x52940; add rsp, 0x60; pop rbp; ret; 
0x00000000004051b5: call 0x52a0; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x000000000042b100: call 0x52be0; add rsp, 0x28; pop rbp; ret; 
0x0000000000454700: call 0x52be0; add rsp, 0x30; pop rbp; ret; 
0x0000000000453058: call 0x530a0; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x1c0; pop rbp; ret; 
0x00000000004540ab: call 0x54120; add rsp, 0x20; pop rbp; ret; 
0x0000000000454ae9: call 0x54d20; add rsp, 0x60; pop rbp; ret; 
0x0000000000459cae: call 0x54fe0; add rsp, 0x10; pop rbp; ret; 
0x0000000000454fb4: call 0x54fe0; call 0x1220; add rsp, 0x10; pop rbp; ret; 
0x00000000004557b7: call 0x54fe0; nop dword ptr [rax]; call 0x1220; add rsp, 0x18; pop rbp; ret; 
0x0000000000459cee: call 0x55260; add rsp, 0x10; pop rbp; ret; 
0x0000000000459d2e: call 0x55520; add rsp, 0x10; pop rbp; ret; 
0x0000000000456142: call 0x55e20; add rsp, 0x120; pop rbp; ret; 
0x0000000000456af3: call 0x56b20; add rsp, 8; pop rbp; ret; 
0x0000000000456b93: call 0x56bc0; add rsp, 8; pop rbp; ret; 
0x000000000042fda1: call 0x57da0; add rsp, 0x50; pop rbp; ret; 
0x00000000004414e7: call 0x58ba0; mov rcx, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000460167: call 0x58be0; add rsp, 0x18; pop rbp; ret; 
0x0000000000460192: call 0x58be0; call 0x59920; add rsp, 0x18; pop rbp; ret; 
0x000000000046f000: call 0x58c80; add rsp, 0x18; pop rbp; ret; 
0x000000000046f3d9: call 0x58d60; test rax, rax; setne al; add rsp, 0x20; pop rbp; ret; 
0x000000000046f040: call 0x58da0; add rsp, 0x18; pop rbp; ret; 
0x0000000000462015: call 0x58ec0; add rsp, 8; pop rbp; nop; ret; 
0x0000000000404a80: call 0x59660; mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x28; pop rbp; ret; 
0x000000000040aa80: call 0x59660; movzx eax, byte ptr [rsp + 0x17]; add rsp, 0x28; pop rbp; ret; 
0x00000000004618a5: call 0x598e0; add rsp, 0x18; pop rbp; ret; 
0x0000000000460197: call 0x59920; add rsp, 0x18; pop rbp; ret; 
0x00000000004159b8: call 0x59c0; mov byte ptr [rip + 0x13e354], 1; add rsp, 0x18; pop rbp; ret; 
0x00000000004059cd: call 0x59e0; add rsp, 0x18; pop rbp; ret; 
0x0000000000473ae0: call 0x59f00; mov rax, qword ptr [rsp + 0x10]; mov rbx, qword ptr [rsp + 8]; add rsp, 0x18; pop rbp; ret; 
0x00000000004615b4: call 0x59f40; add rsp, 0x18; pop rbp; ret; 
0x00000000004626b3: call 0x5a020; add rsp, 8; pop rbp; ret; 
0x000000000046b5f4: call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x000000000045cabd: call 0x5a2a0; add rsp, 0x10000000; pop rbp; ret; 
0x000000000045c73d: call 0x5a2a0; add rsp, 0x1000000; pop rbp; ret; 
0x000000000045c3bd: call 0x5a2a0; add rsp, 0x100000; pop rbp; ret; 
0x000000000045c03d: call 0x5a2a0; add rsp, 0x10000; pop rbp; ret; 
0x000000000045bcbd: call 0x5a2a0; add rsp, 0x1000; pop rbp; ret; 
0x000000000045b935: call 0x5a2a0; add rsp, 0x100; pop rbp; ret; 
0x000000000045b66b: call 0x5a2a0; add rsp, 0x10; pop rbp; ret; 
0x000000000045cb9d: call 0x5a2a0; add rsp, 0x20000000; pop rbp; ret; 
0x000000000045c81d: call 0x5a2a0; add rsp, 0x2000000; pop rbp; ret; 
0x000000000045c49d: call 0x5a2a0; add rsp, 0x200000; pop rbp; ret; 
0x000000000045c11d: call 0x5a2a0; add rsp, 0x20000; pop rbp; ret; 
0x000000000045bd9d: call 0x5a2a0; add rsp, 0x2000; pop rbp; ret; 
0x000000000045ba15: call 0x5a2a0; add rsp, 0x200; pop rbp; ret; 
0x000000000045b70b: call 0x5a2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000045cc7d: call 0x5a2a0; add rsp, 0x40000000; pop rbp; ret; 
0x000000000045c8fd: call 0x5a2a0; add rsp, 0x4000000; pop rbp; ret; 
0x000000000045c57d: call 0x5a2a0; add rsp, 0x400000; pop rbp; ret; 
0x000000000045c1fd: call 0x5a2a0; add rsp, 0x40000; pop rbp; ret; 
0x000000000045be7d: call 0x5a2a0; add rsp, 0x4000; pop rbp; ret; 
0x000000000045baf5: call 0x5a2a0; add rsp, 0x400; pop rbp; ret; 
0x000000000045b7ab: call 0x5a2a0; add rsp, 0x40; pop rbp; ret; 
0x000000000045c9dd: call 0x5a2a0; add rsp, 0x8000000; pop rbp; ret; 
0x000000000045c65d: call 0x5a2a0; add rsp, 0x800000; pop rbp; ret; 
0x000000000045c2dd: call 0x5a2a0; add rsp, 0x80000; pop rbp; ret; 
0x000000000045bf5d: call 0x5a2a0; add rsp, 0x8000; pop rbp; ret; 
0x000000000045bbd5: call 0x5a2a0; add rsp, 0x800; pop rbp; ret; 
0x000000000045b86f: call 0x5a2a0; sub rsp, -0x80; pop rbp; ret; 
0x000000000045afea: call 0x5b060; call 0x5cde0; ret; 
0x00000000004386e0: call 0x5b080; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000433c89: call 0x5b0a0; add rsp, 0x10; pop rbp; ret; 
0x0000000000406ee7: call 0x5b0a0; add rsp, 0x18; pop rbp; ret; 
0x000000000043ad37: call 0x5b0a0; add rsp, 0x28; pop rbp; ret; 
0x00000000004597f1: call 0x5b0a0; add rsp, 0x30; pop rbp; ret; 
0x0000000000433ba3: call 0x5b0a0; add rsp, 8; pop rbp; ret; 
0x000000000044252e: call 0x5b120; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000442ae0: call 0x5b120; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000404786: call 0x5b120; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; ret; 
0x00000000004044ac: call 0x5b120; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004053ae: call 0x5b120; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x38; pop rbp; ret; 
0x00000000004061c6: call 0x5b120; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x40; pop rbp; ret; 
0x000000000042c660: call 0x5b120; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 8; pop rbp; ret; 
0x00000000004701b3: call 0x5b340; add rsp, 0x138; pop rbp; ret; 
0x000000000045f611: call 0x5b400; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004599cf: call 0x5ccc0; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 8; pop rbp; ret; 
0x00000000004244f7: call 0x5cce0; add rsp, 0x30; pop rbp; ret; 
0x0000000000444696: call 0x5cdc0; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x68; pop rbp; ret; 
0x000000000045ce0f: call 0x5cde0; cmp rsp, qword ptr [rax]; ja 0x5ce1e; call 0x5cde0; ret; 
0x000000000045b106: call 0x5cde0; pop rbp; ret; 
0x000000000045a309: call 0x5cde0; ret; 
0x000000000045ed87: call 0x5ce00; call r12; mov edi, 0x6f; mov eax, 0x3c; syscall; 
0x0000000000403713: call 0x5ce60; add rsp, 0x18; pop rbp; ret; 
0x0000000000403d0c: call 0x5ce60; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cc7: call 0x5ce80; add rsp, 0x60; pop rbp; ret; 
0x0000000000403d20: call 0x5cea0; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cf8: call 0x5cee0; add rsp, 0x60; pop rbp; ret; 
0x000000000042f5d6: call 0x5cf40; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000430623: call 0x5cfa0; mov qword ptr [r11], rcx; mov qword ptr [rax + 0x28], 0; pop rbp; ret; 
0x0000000000448469: call 0x5d048470; ret; 
0x0000000000406fee: call 0x5d2e0; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x10; pop rbp; ret; 
0x000000000046a683: call 0x5d320; add rsp, 0x100; pop rbp; ret; 
0x00000000004662cb: call 0x5d320; add rsp, 0x690; pop rbp; ret; 
0x000000000045146a: call 0x5d58f; mov rbp, qword ptr [rbp]; add rsp, 0x1e0; pop rbp; ret; 
0x000000000046c40d: call 0x5d906; mov rbp, qword ptr [rbp]; add rsp, 0x3b0; pop rbp; ret; 
0x000000000046beea: call 0x5d94c; mov rbp, qword ptr [rbp]; add rsp, 0xe0; pop rbp; ret; 
0x0000000000410f21: call 0x5d9c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000410f6f: call 0x5d9c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000412565: call 0x5d9c0; add rsp, 0xa8; pop rbp; ret; 
0x0000000000410cb7: call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x00000000004054a7: call 0x5dcc0; add rsp, 0x28; pop rbp; ret; 
0x0000000000409ce0: call 0x5dcc0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; pop rbp; ret; 
0x0000000000410ead: call 0x5dcc0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x0000000000401739: call 0x5dcc0; mov rax, qword ptr [rsp + 0xa0]; add rsp, 0xa8; pop rbp; ret; 
0x000000000045b01f: call 0x5e5e0; call 0x5cde0; ret; 
0x0000000000431221: call 0x5e5e0; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000457d75: call 0x5e5e0; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 8; pop rbp; ret; 
0x0000000000436674: call 0x5e600; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000445e31: call 0x5e920; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000445f01: call 0x5e920; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; ret; 
0x00000000004372b2: call 0x5e920; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x38; pop rbp; ret; 
0x00000000004047a7: call 0x5ec20; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; ret; 
0x0000000000404800: call 0x5ec60; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x10; pop rbp; ret; 
0x000000000041440c: call 0x5eca0; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x000000000042d720: call 0x5ecc0; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x40; pop rbp; ret; 
0x0000000000446233: call 0x5eda0; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; ret; 
0x000000000045f364: call 0x5ee20; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; pop rbp; ret; 
0x000000000045a2c0: call 0x5f2e0; add rsp, 0x28; pop rbp; ret; 
0x000000000045b060: call 0x5f4a0; ret; 
0x000000000045afe4: call 0x5f4e0; pop rax; call 0x5b060; call 0x5cde0; ret; 
0x000000000045b24a: call 0x5f580; call 0x5cde0; ret; 
0x0000000000458c66: call 0x60200; add rsp, 0x30; pop rbp; ret; 
0x0000000000458c14: call 0x60240; add rsp, 0x20; pop rbp; ret; 
0x00000000004605c0: call 0x60260; add rsp, 8; pop rbp; ret; 
0x00000000004604e0: call 0x603a0; add rsp, 8; pop rbp; ret; 
0x00000000004617e0: call 0x61520; add rsp, 8; pop rbp; ret; 
0x0000000000461540: call 0x61560; add rsp, 0x10; pop rbp; ret; 
0x00000000004777c7: call 0x61820; add rsp, 0x18; pop rbp; ret; 
0x000000000046e280: call 0x61820; add rsp, 0x600; pop rbp; ret; 
0x0000000000461ba0: call 0x61bc0; add rsp, 8; pop rbp; ret; 
0x0000000000462544: call 0x62040; add rsp, 0x38; pop rbp; ret; 
0x00000000004625ad: call 0x62140; test cl, cl; je 0x62593; add rsp, 0x10; pop rbp; ret; 
0x0000000000461a40: call 0x625e0; test rax, rax; je 0x619f1; add rsp, 0x28; pop rbp; ret; 
0x000000000047cfb1: call 0x63680; add rsp, 0x110; pop rbp; ret; 
0x0000000000463719: call 0x637a0; add rsp, 0x60; pop rbp; ret; 
0x00000000004635a9: call 0x63880; add rsp, 0x30; pop rbp; ret; 
0x0000000000470da5: call 0x64240; mov rax, qword ptr [rsp + 0x80]; add rsp, 0x128; pop rbp; ret; 
0x000000000046426f: call 0x643c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004646b0: call 0x64500; add rsp, 0x78; pop rbp; ret; 
0x00000000004447a0: call 0x6480; add rsp, 0x30; pop rbp; ret; 
0x0000000000466241: call 0x65060; add rsp, 0x690; pop rbp; ret; 
0x0000000000465620: call 0x65860; add rsp, 0x120; pop rbp; ret; 
0x00000000004657a1: call 0x65c80; add rsp, 0x120; pop rbp; ret; 
0x0000000000465bf3: call 0x65c80; add rsp, 0x3d0; pop rbp; ret; 
0x0000000000465cf0: call 0x66380; add rsp, 0x58; pop rbp; ret; 
0x0000000000465de0: call 0x66820; add rsp, 0x58; pop rbp; ret; 
0x00000000004657e0: call 0x66b00; add rsp, 0x120; pop rbp; ret; 
0x00000000004653a0: call 0x66c60; add rsp, 0x120; pop rbp; ret; 
0x0000000000467b80: call 0x68040; add rsp, 0x88; pop rbp; ret; 
0x0000000000466bf4: call 0x68820; add rsp, 0x50; pop rbp; ret; 
0x000000000046a543: call 0x6a420; add rsp, 0x100; pop rbp; ret; 
0x000000000046a480: call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x00000000004705c0: call 0x6ba00; add rsp, 0x10; pop rbp; ret; 
0x000000000046bcc5: call 0x6bbe0; mov rax, rbx; add rsp, 8; pop rbp; ret; 
0x000000000046f5ab: call 0x6bca0; add rsp, 0x10; pop rbp; ret; 
0x0000000000470300: call 0x6bfe0; add rsp, 8; pop rbp; ret; 
0x000000000045f2ba: call 0x6c40; add rsp, 8; pop rbp; ret; 
0x000000000046ee68: call 0x6cec0; add rsp, 0x30; pop rbp; ret; 
0x0000000000470620: call 0x6d8e0; add rsp, 0x20; pop rbp; ret; 
0x0000000000477b10: call 0x6e920; add rsp, 0x20; pop rbp; ret; 
0x000000000046ff20: call 0x6e920; call 0x6fde0; add rsp, 0x48; pop rbp; ret; 
0x000000000046ef50: call 0x6efa0; add rsp, 0x18; pop rbp; ret; 
0x00000000004704d9: call 0x6efa0; mov rcx, rax; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000046f244: call 0x6f4e0; add rsp, 0x18; pop rbp; ret; 
0x000000000046fb93: call 0x6fbe0; add rsp, 0x18; pop rbp; ret; 
0x000000000047b5eb: call 0x6fca0; mov r9, rax; mov rcx, qword ptr [r9 + 0xf8]; mov rax, rbx; call rcx; 
0x000000000046fec0: call 0x6fca0; mov rcx, qword ptr [rax + 0x38]; mov rax, rbx; call rcx; 
0x000000000046fc22: call 0x6fca0; mov rcx, qword ptr [rax + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000477c35: call 0x6fca0; mov rcx, rax; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x000000000046fe42: call 0x6fca0; mov rdx, rax; mov rax, rbx; mov rcx, qword ptr [rdx + 0x48]; call rcx; 
0x0000000000470a16: call 0x6fca0; mov rdx, rax; mov rax, rbx; mov rcx, qword ptr [rdx + 0x98]; call rcx; 
0x000000000046ffc0: call 0x6fca0; mov rdx, rax; mov rcx, qword ptr [rdx + 0xa0]; mov rax, rbx; call rcx; 
0x000000000047afa5: call 0x6fca0; mov rdx, rax; mov rcx, qword ptr [rdx + 0xf8]; mov rax, rbx; call rcx; 
0x000000000047042a: call 0x6fde0; add rsp, 0x18; pop rbp; ret; 
0x000000000046ff25: call 0x6fde0; add rsp, 0x48; pop rbp; ret; 
0x0000000000471728: call 0x70e00; add rsp, 0x108; pop rbp; ret; 
0x00000000004716a2: call 0x70e00; test rax, rax; je 0x716b5; add rsp, 0x108; pop rbp; ret; 
0x0000000000471945: call 0x70e00; test rax, rax; je 0x7189b; add rsp, 0x108; pop rbp; ret; 
0x0000000000471a11: call 0x70e00; test rax, rax; je 0x71967; add rsp, 0x108; pop rbp; ret; 
0x00000000004707a6: call 0x70e00; test rax, rax; setl al; add rsp, 0x30; pop rbp; ret; 
0x0000000000472b40: call 0x72060; add rsp, 8; pop rbp; ret; 
0x0000000000472031: call 0x727a0; add rsp, 0x28; pop rbp; ret; 
0x0000000000473f40: call 0x73500; add rsp, 8; pop rbp; ret; 
0x0000000000474480: call 0x73560; add rsp, 8; pop rbp; ret; 
0x00000000004734ae: call 0x739e0; add rsp, 0x10; pop rbp; ret; 
0x000000000047674c: call 0x752a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000476ce0: call 0x75420; add rsp, 0x20; pop rbp; ret; 
0x000000000047650b: call 0x75420; add rsp, 0x28; pop rbp; ret; 
0x0000000000476b67: call 0x75420; add rsp, 0x70; pop rbp; ret; 
0x00000000004771a8: call 0x75420; add rsp, 0xd8; pop rbp; ret; 
0x00000000004759d3: call 0x756e0; add rsp, 0x18; pop rbp; ret; 
0x0000000000476434: call 0x756e0; add rsp, 0x28; pop rbp; ret; 
0x0000000000476ba9: call 0x756e0; add rsp, 0x70; pop rbp; ret; 
0x000000000045f1ae: call 0x75e0; add rsp, 0x18; pop rbp; ret; 
0x0000000000478a00: call 0x76400; add rsp, 0x40; pop rbp; ret; 
0x000000000047a292: call 0x76400; add rsp, 0x90; pop rbp; nop; ret; 
0x0000000000478e03: call 0x764e0; add rsp, 0xa8; pop rbp; ret; 
0x0000000000478625: call 0x76d20; add rsp, 0x30; pop rbp; ret; 
0x000000000047870d: call 0x76de0; add rsp, 0x28; pop rbp; ret; 
0x000000000047cdab: call 0x77a00; add rsp, 0x58; pop rbp; ret; 
0x000000000047baba: call 0x77b60; add rsp, 0x1d0; pop rbp; ret; 
0x00000000004783c9: call 0x77e20; add rsp, 0x10; pop rbp; ret; 
0x00000000004788f3: call 0x77e20; add rsp, 0x50; pop rbp; ret; 
0x000000000047952f: call 0x77e20; add rsp, 0x88; pop rbp; ret; 
0x000000000047a891: call 0x77e20; add rsp, 0x90; pop rbp; ret; 
0x000000000047c300: call 0x78a40; add rsp, 0x1d0; pop rbp; ret; 
0x000000000047a2f4: call 0x79120; add rsp, 0x90; pop rbp; ret; 
0x000000000047a073: call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000047b3cf: call 0x7a8e0; add rsp, 0x1d0; pop rbp; ret; 
0x000000000047a860: call 0x7a8e0; add rsp, 0x90; pop rbp; ret; 
0x0000000000403758: call 0x8d60; add rsp, 0x18; pop rbp; ret; 
0x00000000004585d8: call 0x9040; add rsp, 0x10; pop rbp; ret; 
0x0000000000409f27: call 0x9100; add rsp, 0x18; pop rbp; ret; 
0x000000000045f221: call 0x9560; add rsp, 0x10; pop rbp; ret; 
0x000000000040950a: call 0x9560; add rsp, 0x40; pop rbp; ret; 
0x0000000000460805: call 0x9f00; mov rcx, qword ptr [rax + 0x18]; mov rax, qword ptr [rsp + 0x48]; call rcx; 
0x000000000042fce1: call 0xa040; test rax, rax; je 0x2fd2b; mov rcx, qword ptr [rax + 0x18]; mov rax, rbx; call rcx; 
0x00000000004229a6: call 0xa180; add rsp, 0x10; pop rbp; ret; 
0x00000000004581a5: call 0xa180; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000042c032: call 0xa180; mov rsi, qword ptr [rsp + 0x10]; mov rax, rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000044e9c0: call 0xa400; add rsp, 0x48; pop rbp; ret; 
0x000000000040a3cf: call 0xa400; add rsp, 8; pop rbp; ret; 
0x0000000000431825: call 0xa400; mov eax, dword ptr [rsp + 0x30]; and eax, 1; add rsp, 0x70; pop rbp; ret; 
0x0000000000425c93: call 0xa400; mov rax, qword ptr [rsp + 0x18]; movups xmmword ptr [rax], xmm15; add rsp, 0x20; pop rbp; ret; 
0x0000000000423624: call 0xa400; mov rax, qword ptr [rsp + 0x28]; add rsp, 0xa0; pop rbp; ret; 
0x000000000043d6ec: call 0xa580; add rsp, 0x18; pop rbp; ret; 
0x0000000000421a4a: call 0xa580; add rsp, 0x38; pop rbp; ret; 
0x000000000040b757: call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000042a9f1: call 0xa5c0; add rsp, 0x138; pop rbp; ret; 
0x0000000000404540: call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000042488c: call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x000000000041a3ee: call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x00000000004181ee: call 0xa5c0; add rsp, 0x30; pop rbp; ret; 
0x0000000000409a42: call 0xa5c0; add rsp, 0x38; pop rbp; ret; 
0x0000000000419728: call 0xa5c0; add rsp, 0x40; pop rbp; ret; 
0x000000000042b22e: call 0xa5c0; add rsp, 0x48; pop rbp; ret; 
0x000000000043cb46: call 0xa5c0; add rsp, 0x50; pop rbp; ret; 
0x0000000000426221: call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x000000000041cce0: call 0xa5c0; add rsp, 0x68; pop rbp; ret; 
0x000000000042b0a8: call 0xa5c0; add rsp, 0x70; pop rbp; ret; 
0x000000000043f545: call 0xa5c0; add rsp, 0xb0; pop rbp; ret; 
0x0000000000425bd5: call 0xa5c0; add rsp, 8; pop rbp; nop; ret; 
0x0000000000405279: call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x0000000000438560: call 0xa5c0; call 0x37900; add rsp, 0x18; pop rbp; ret; 
0x000000000043a695: call 0xa5c0; call 0x3a000; add rsp, 0x28; pop rbp; ret; 
0x000000000041a280: call 0xa5c0; mov eax, 1; add rsp, 0x28; pop rbp; ret; 
0x000000000044022a: call 0xa5c0; mov eax, 1; add rsp, 0x428; pop rbp; ret; 
0x0000000000405179: call 0xa5c0; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x0000000000406287: call 0xa5c0; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x0000000000459ec7: call 0xa5c0; mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x20; pop rbp; ret; 
0x00000000004502ec: call 0xa5c0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x0000000000425a91: call 0xa5c0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; pop rbp; ret; 
0x000000000042cf19: call 0xa5c0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000425ac1: call 0xa5c0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; pop rbp; ret; 
0x0000000000425ae0: call 0xa5c0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; pop rbp; ret; 
0x000000000042a213: call 0xa5c0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x40; pop rbp; ret; 
0x000000000041ec55: call 0xa5c0; mov rax, qword ptr [rsp + 0x60]; add rsp, 0x78; pop rbp; ret; 
0x000000000044eed2: call 0xa5c0; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000439f63: call 0xa5c0; mov rcx, qword ptr [rip + 0x64481]; mov rax, qword ptr [rsp + 0x20]; lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000439e4e: call 0xa5c0; mov rcx, qword ptr [rip + 0x64596]; mov rax, qword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; 
0x000000000041e098: call 0xa5c0; mov rcx, qword ptr [rsp + 0x70]; mov rdx, qword ptr [rcx + 0x80]; mov rbx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; call rbx; 
0x000000000044f42e: call 0xa5c0; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000439980: call 0xa5c0; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000422cc1: call 0xa5c0; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x000000000041a237: call 0xa5c0; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000425507: call 0xa5c0; xor eax, eax; add rsp, 0x40; pop rbp; ret; 
0x0000000000404ea0: call 0xa5c0; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000041ec84: call 0xa5c0; xor eax, eax; add rsp, 0x78; pop rbp; ret; 
0x0000000000423ee0: call 0xa5c0; xor eax, eax; add rsp, 0x90; pop rbp; ret; 
0x000000000043e559: call 0xa660; add rsp, 0x50; pop rbp; ret; 
0x0000000000441380: call 0xa660; add rsp, 8; pop rbp; ret; 
0x0000000000438460: call 0xa660; call 0x37900; add rsp, 0x18; pop rbp; ret; 
0x0000000000441125: call 0xa660; sub rsp, -0x80; pop rbp; ret; 
0x000000000040a9e4: call 0xa800; add rsp, 0x10; pop rbp; ret; 
0x000000000040c340: call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x000000000042c20a: call 0xc5e0; add rsp, 0x18; pop rbp; ret; 
0x000000000040ba54: call 0xc5e0; add rsp, 0x58; pop rbp; ret; 
0x0000000000458cee: call 0xdb60; add rsp, 0x18; pop rbp; ret; 
0x000000000040ddad: call 0xde00; add rsp, 0x10; pop rbp; ret; 
0x0000000000458d2e: call 0xde00; add rsp, 8; pop rbp; ret; 
0x000000000040e53a: call 0xe580; add rsp, 0x20; pop rbp; ret; 
0x000000000040f3a6: call 0xeb00; add rsp, 0x98; pop rbp; ret; 
0x000000000040e6a0: call 0xeb00; add rsp, 0xa8; pop rbp; ret; 
0x0000000000450283: call 0xf050383; or dword ptr [rcx + 0x40000000], 0xffffff88; mov ah, 0x10; sbb byte ptr [rax + rax], al; add byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000040f25a: call 0xf2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000040fb7a: call 0xfbc0; add rsp, 0x20; pop rbp; ret; 
0x000000000042265b: call 0xffffffff90682672; call 0x1cd20; add rsp, 8; pop rbp; ret; 
0x00000000004686a7: call 0xffffffffd00fcee3; mov ecx, esi; add rsp, 0x20; pop rbp; ret; 
0x0000000000472014: call 0xffffffffe8072b20; ret; 
0x0000000000465ddc: call 0xffffffffe8d8e72a; cmp ecx, dword ptr [rdx]; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x0000000000434bb4: call 0xffffffffe9034b9e; ret; 
0x0000000000469b3e: call qword ptr [rax + 0x31c88948]; imul bl; sbb dword ptr [rax + 1], edi; add rsp, 0x10; pop rbp; ret; 
0x000000000047724d: call qword ptr [rax + 0xf]; 
0x000000000047724d: call qword ptr [rax + 0xf]; test byte ptr [rdx], ah; add dword ptr [rax], eax; add byte ptr [rcx - 0x80], al; jmp qword ptr [rbp + 0xf]; 
0x00000000004598bd: call qword ptr [rax - 0x74b66f34]; xor dil, r15b; or dword ptr [rax], 0x48000001; mov ecx, dword ptr [rcx + 0xd0]; movsxd rax, dword ptr [rcx]; ret; 
0x00000000004407bf: call qword ptr [rax]; 
0x000000000045a988: call qword ptr [rbp + 0x48]; 
0x00000000004784a1: call qword ptr [rbp + 0x7f]; 
0x00000000004784af: call qword ptr [rbp + 0xf]; 
0x0000000000410678: call qword ptr [rbx]; 
0x000000000042065a: call qword ptr [rdx]; 
0x0000000000415032: call qword ptr [rsi]; 
0x000000000045ed8c: call r12; mov edi, 0x6f; mov eax, 0x3c; syscall; 
0x0000000000406f6e: call rax; 
0x00000000004414f7: call rax; add rsp, 0x20; pop rbp; ret; 
0x000000000046198f: call rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000406f82: call rax; add rsp, 0x30; pop rbp; ret; 
0x0000000000461735: call rax; add rsp, 0x50; pop rbp; ret; 
0x000000000043385c: call rax; add rsp, 0x90; pop rbp; ret; 
0x000000000045ec84: call rax; mov rsp, qword ptr [rsp]; add rsp, 0x10; pop rbp; ret; 
0x000000000045ebf6: call rax; mov rsp, qword ptr [rsp]; mov qword ptr [rsp + 0x40], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000045e9a5: call rax; mov rsp, rbx; mov dword ptr [rsp + 0x38], eax; add rsp, 0x10; pop rbp; ret; 
0x000000000045e9de: call rax; mov rsp, rbx; pop rbp; ret; 
0x00000000004586c0: call rax; movzx eax, byte ptr [rsp + 6]; add rsp, 0x20; pop rbp; ret; 
0x000000000041e0b1: call rbx; 
0x0000000000405311: call rcx; 
0x0000000000454e18: call rcx; add rsp, 0x30; pop rbp; nop; ret; 
0x000000000046fecc: call rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000439e66: call rcx; add rsp, 0x60; pop rbp; ret; 
0x000000000040d8f0: call rdi; 
0x0000000000460769: call rdx; 
0x0000000000404144: call rsi; 
0x0000000000454d6c: call rsi; add rsp, 0x10; pop rbp; ret; 
0x000000000044f337: call rsi; add rsp, 0x20; pop rbp; ret; 
0x0000000000404144: call rsi; add rsp, 0x28; pop rbp; ret; 
0x000000000040d31c: call rsi; lea rax, [rip + 0x1443bb]; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000045b0ec: call rsp; 
0x000000000045ed8d: call rsp; mov edi, 0x6f; mov eax, 0x3c; syscall; 
0x000000000046bb0f: cdq; add al, byte ptr [rax]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000041a264: cdq; add dword ptr [rax], eax; mov eax, 1; add rsp, 0x28; pop rbp; ret; 
0x000000000041d87b: cdq; lock add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000044065e: cdq; mov eax, r8d; add rsp, 0x10; pop rbp; ret; 
0x0000000000454681: clc; add bh, byte ptr [rbp + 6]; add rsp, 0x30; pop rbp; ret; 
0x000000000047c409: clc; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000045ed54: clc; add byte ptr [rbp + rax - 0x77], dh; and al, 0x30; ret; 
0x0000000000474b75: clc; add cl, byte ptr [rdi]; xchg eax, esp; ret 0x5488; 
0x0000000000466556: clc; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x000000000042b636: clc; add rsp, 0x10; pop rbp; ret; 
0x0000000000451fd6: clc; add rsp, 0x178; pop rbp; nop; ret; 
0x000000000042df52: clc; add rsp, 0x18; pop rbp; ret; 
0x000000000044e804: clc; add rsp, 0x20; pop rbp; ret; 
0x0000000000415792: clc; add rsp, 0x28; pop rbp; ret; 
0x000000000040c88c: clc; add rsp, 0x40; pop rbp; ret; 
0x000000000046542d: clc; and bl, ch; cmp dword ptr [rax - 0x80], eax; jmp qword ptr [rbp + 0x75]; 
0x000000000045a034: clc; and byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x000000000046b5f3: clc; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x00000000004333e1: clc; call rcx; 
0x0000000000454d6b: clc; call rsi; 
0x0000000000454d6b: clc; call rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004458e5: clc; cli; je 0x458ef; add rsp, 0x18; pop rbp; ret; 
0x000000000042d2b9: clc; cmc; jne 0x2d2c9; add rsp, 0x20; pop rbp; ret; 
0x00000000004030f5: clc; cmp rcx, rdx; sete al; ret; 
0x00000000004030c2: clc; ja 0x310d; xor eax, eax; ret; 
0x00000000004033fe: clc; ja 0x344a; mov dword ptr [rbx], 0xffffffff; ret; 
0x00000000004035b9: clc; ja 0x3605; mov dword ptr [rax], 0xffffffff; ret; 
0x00000000004686bb: clc; mov ecx, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000045ddf7: clc; mov qword ptr [rdi], rax; mov qword ptr [rdi + rbx - 8], rcx; ret; 
0x000000000044eff3: clc; mov rax, rdi; add rsp, 0x18; pop rbp; ret; 
0x00000000004687bf: clc; mov rbx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004749e3: clc; mov rbx, rsi; add rsp, 0x38; pop rbp; ret; 
0x0000000000429d16: clc; mov rbx, rsi; ret; 
0x00000000004030f0: clc; mov rdx, qword ptr [rdi + rbx - 8]; cmp rcx, rdx; sete al; ret; 
0x0000000000472f5c: clc; or al, byte ptr [rax]; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xaf86e], rcx; pop rbp; ret; 
0x0000000000472f67: clc; or al, byte ptr [rax]; pop rbp; ret; 
0x0000000000445cf2: clc; or eax, 0xc0310874; add rsp, 0x20; pop rbp; ret; 
0x0000000000441401: clc; or esi, dword ptr [rdx + rsi*4 + 0x48]; add esp, 0x18; pop rbp; ret; 
0x000000000045dbe2: clc; ret; 
0x0000000000440b34: clc; sbb byte ptr [rdi], cl; or dword ptr [rcx + 0x48000000], 0xffffff83; ret 0x8830; 
0x0000000000403130: clc; shr rdi, cl; sub rdi, rsi; shl rdi, cl; sete al; ret; 
0x000000000045dd5f: clc; test eax, 7; je 0x5dd6d; mov rcx, rbx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041ded0: cld; add ecx, dword ptr [rax]; add byte ptr [rax - 0x77], cl; sbb dword ptr [rax + 0x48000000], 0x5d18c483; ret; 
0x0000000000478c84: cld; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000044a889: cld; dec dword ptr [rax - 0x77]; ret 0xf748; 
0x00000000004453fc: cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000046e63a: cld; dec dword ptr [rax - 0x7d]; ret 0x4830; 
0x00000000004346fd: cld; dec dword ptr [rdi]; mov dh, 0xd; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000046d39c: cld; jmp qword ptr [rsi - 0x70]; 
0x000000000045dde1: cld; mov dword ptr [rdi], eax; mov dword ptr [rdi + rbx - 4], ecx; ret; 
0x000000000045dbd5: cld; ret; 
0x00000000004534fb: cld; std; jmp qword ptr [rsi - 0x70]; 
0x000000000046a64c: cli; adc byte ptr [rax + 1], cl; retf 0x894c; ret; 
0x0000000000405442: cli; add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x0000000000444e1e: cli; add cl, byte ptr [rdi]; xchg eax, esp; ret 0x14eb; 
0x0000000000444382: cli; add cl, byte ptr [rdi]; xchg eax, esp; ret 0x6eb; 
0x0000000000423059: cli; add dword ptr [rdi], ecx; xchg eax, ebp; ret 0x9066; 
0x0000000000438cc2: cli; add dword ptr [rdi], ecx; xchg eax, esp; ret 0xd284; 
0x0000000000405310: cli; call rcx; 
0x0000000000474cf4: cli; dec dword ptr [rax - 0x75]; and al, 0x28; add rsp, 0x30; pop rbp; ret; 
0x00000000004607ae: cli; dec dword ptr [rax - 0x75]; sbb byte ptr [rax - 0x75], cl; and al, 0x48; call rcx; 
0x0000000000458b6f: cli; dec dword ptr [rax - 0x77]; add eax, 0xf7a58; pop rbp; ret; 
0x000000000046036f: cli; dec dword ptr [rax - 0x77]; ret; 
0x0000000000449bd2: cli; dec dword ptr [rdi]; xchg eax, esp; ret 0xb60f; 
0x0000000000449b19: cli; inc dword ptr [rcx + 0xf]; xchg eax, esp; ret 0xf45; 
0x000000000042797c: cli; jae 0x27985; add rsp, 0x28; pop rbp; ret; 
0x00000000004458e6: cli; je 0x458ef; add rsp, 0x18; pop rbp; ret; 
0x000000000042591f: cli; lock inc dword ptr [rax]; add byte ptr [rdi], cl; xchg eax, edi; ret 0xaeb; 
0x0000000000425a17: cli; lock inc dword ptr [rax]; add byte ptr [rdi], cl; xchg eax, edi; ret 0xeb90; 
0x00000000004685a3: cli; mov ecx, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004035cf: cli; mov qword ptr [r8], rdx; vzeroupper; ret; 
0x000000000045b164: cli; mov rdi, qword ptr [rdi]; call rdi; 
0x000000000045b1a3: cli; mov rdi, qword ptr [rdi]; pop rbp; jmp rdi; 
0x00000000004036c5: cli; mov rsi, rcx; mov rdi, rbx; syscall; 
0x0000000000406816: cmc; add al, byte ptr [rax]; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbp; ret; 
0x000000000042d2ba: cmc; jne 0x2d2c9; add rsp, 0x20; pop rbp; ret; 
0x000000000041e2c7: cmc; ret 0xfffe; 
0x00000000004548ac: cmovb ebx, ecx; lea rcx, [rsp + 0x48]; call 0x33300; add rsp, 0x60; pop rbp; ret; 
0x000000000041d460: cmovb ecx, edx; mov rax, rcx; ret; 
0x00000000004548ab: cmovb rbx, rcx; lea rcx, [rsp + 0x48]; call 0x33300; add rsp, 0x60; pop rbp; ret; 
0x000000000041d45f: cmovb rcx, rdx; mov rax, rcx; ret; 
0x000000000044a9d7: cmove eax, esi; mov ebx, 1; nop; ret; 
0x000000000042d91f: cmove edx, ecx; mov eax, edx; add rsp, 0x2020; pop rbp; ret; 
0x000000000044a9d6: cmove rax, rsi; mov ebx, 1; nop; ret; 
0x0000000000440d90: cmovl ebx, ebx; cmp rcx, rbx; setle al; pop rbp; ret; 
0x0000000000411c73: cmovl ecx, dword ptr [rbx + 0x12689a]; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000440cb3: cmovl edx, edi; cmp rdx, rsi; setge al; pop rbp; ret; 
0x0000000000440d8f: cmovl rbx, r11; cmp rcx, rbx; setle al; pop rbp; ret; 
0x0000000000440cb2: cmovl rdx, rdi; cmp rdx, rsi; setge al; pop rbp; ret; 
0x0000000000413fee: cmovne eax, edx; add rsp, 0x20; pop rbp; ret; 
0x000000000046ec64: cmovne ecx, edi; or rcx, rdx; or rcx, rsi; add rsp, 0x18; pop rbp; ret; 
0x0000000000413fed: cmovne rax, rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000046ec63: cmovne rcx, rdi; or rcx, rdx; or rcx, rsi; add rsp, 0x18; pop rbp; ret; 
0x00000000004014ca: cmovno eax, dword ptr [rbx - 0x77b97f35]; pushfq; adc al, 0x84; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret 0x8949; 
0x00000000004093ef: cmovns edi, dword ptr [rcx]; sbb byte ptr [rbp - 0x1f], dh; cmp qword ptr [r8 + 8], rcx; jne 0x93d6; mov rax, r8; ret; 
0x00000000004744d1: cmovs ecx, dword ptr [rbp + 0x25c8d05]; add byte ptr [rbx + 0x20], bh; pop rbp; nop; ret; 
0x0000000000461712: cmovs ecx, dword ptr [rbx + 0x48402454]; mov ecx, dword ptr [rdx]; call rcx; 
0x000000000046172c: cmovs ecx, dword ptr [rbx + 0x48482454]; mov eax, dword ptr [rdx]; call rax; 
0x0000000000454f89: cmovs ecx, dword ptr [rbx - 0x7217cfc0]; ret 0xfffa; 
0x000000000041fda7: cmovs ecx, dword ptr [rcx + 0x4820c65c]; inc dword ptr [rsi + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x000000000045cf00: cmp ah, bl; add eax, 0xf3ae9; aesenc xmm0, xmmword ptr [rip + 0xf3af0]; movq rax, xmm0; ret; 
0x000000000045cf09: cmp ah, bl; add eax, 0xf3af0; movq rax, xmm0; ret; 
0x000000000045cebf: cmp ah, bl; add eax, 0xf3b2a; aesenc xmm0, xmmword ptr [rip + 0xf3b31]; movq rax, xmm0; ret; 
0x000000000045cec8: cmp ah, bl; add eax, 0xf3b31; movq rax, xmm0; ret; 
0x000000000045a5db: cmp ah, bl; jmp qword ptr [rsi + 0x45]; 
0x000000000045a4a3: cmp ah, bl; jmp qword ptr [rsi + 0xf]; 
0x000000000045a3bb: cmp ah, bl; leave; aesenc xmm1, xmm1; aesenc xmm1, xmm1; movq rax, xmm1; ret; 
0x000000000045a3c0: cmp ah, bl; leave; aesenc xmm1, xmm1; movq rax, xmm1; ret; 
0x000000000045a3c5: cmp ah, bl; leave; movq rax, xmm1; ret; 
0x000000000045a49e: cmp ah, bl; mul byte ptr [rsi + 0xf]; cmp ah, bl; jmp qword ptr [rsi + 0xf]; 
0x000000000045a3e8: cmp ah, bl; shl byte ptr [rsi + 0x48], 0xf; jle 0x5a3b0; ret; 
0x0000000000454923: cmp al, 0; add byte ptr [rax], al; ret; 
0x000000000045e611: cmp al, 0; add byte ptr [rax], al; syscall; 
0x000000000046493d: cmp al, 0x11; lea r9, [rcx + r8]; mov rax, rbx; mov rbx, rdi; mov rcx, r9; call rsi; 
0x00000000004424a0: cmp al, 0x20; jb 0x424b1; lea rax, [rip + 0x5505a]; mov ebx, 0x13; ret; 
0x0000000000441c6c: cmp al, 0x24; add byte ptr [rsi + rax + 0x48], dh; add esp, 0x38; pop rbp; ret; 
0x000000000044cd0c: cmp al, 0x48; add esp, 0x58; pop rbp; ret; 
0x0000000000457563: cmp al, 0x48; add esp, 0x88; pop rbp; ret; 
0x000000000045ebe3: cmp al, 0x48; mov eax, dword ptr [rip + 0xc3b0d]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x00000000004508f2: cmp al, 0xb; jne 0x508fc; add rsp, 0x30; pop rbp; ret; 
0x0000000000454181: cmp al, 0xe; je 0x5418e; xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x000000000044441f: cmp al, 3; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000042a822: cmp al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x00000000004036a7: cmp al, ch; adc eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x38; pop rbp; ret; 
0x00000000004453f8: cmp al, ch; and cl, byte ptr [rax - 4]; dec dword ptr [rax - 0x77]; ret; 
0x000000000044566f: cmp al, ch; stosd dword ptr [rdi], eax; cld; dec dword ptr [rax - 0x77]; ret; 
0x0000000000452634: cmp al, dl; jae 0x5263e; mov eax, 1; ret; 
0x000000000042723d: cmp bh, 0xff; add r11, r9; mov rax, r11; lea rdx, [rsp + 0x110]; call rdi; 
0x00000000004618a7: cmp bh, 0xff; add rsp, 0x18; pop rbp; ret; 
0x0000000000477c37: cmp bh, 0xff; mov rcx, rax; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x000000000047b4b1: cmp bh, bh; dec dword ptr [rax - 0x77]; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000458e10: cmp bl, 0xff; add rsp, 0x10; pop rbp; ret; 
0x0000000000460c26: cmp bl, ch; adc al, 0xe8; xchg eax, edx; ret; 
0x0000000000431890: cmp byte ptr [r14 + 0xb1], 0; je 0x318a2; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x00000000004318e5: cmp byte ptr [r14 + 0xb1], 0; je 0x318f7; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x0000000000431927: cmp byte ptr [r14 + 0xb1], 0; je 0x31939; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x0000000000431951: cmp byte ptr [r14 + 0xb1], 0; je 0x31963; mov qword ptr [r14 + 0x10], -0x522; mov eax, 1; ret; 
0x000000000047072c: cmp byte ptr [r15], cl; xchg eax, esp; shr ebx, 2; xor ecx, ecx; mov eax, ecx; ret; 
0x0000000000431a32: cmp byte ptr [rax + 0x28], 1; sete al; add rsp, 8; pop rbp; ret; 
0x00000000004492bf: cmp byte ptr [rax + 0x28], 6; jne 0x492cb; add rsp, 0x10; pop rbp; ret; 
0x0000000000408911: cmp byte ptr [rax + 0x39], cl; ret 0x820f; 
0x0000000000432a78: cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000442063: cmp byte ptr [rax + 0x39], cl; retf 0x820f; add r8b, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x820f; 
0x0000000000464926: cmp byte ptr [rax + 0x39], cl; stc; jl 0x648e7; add rsp, 0x60; pop rbp; ret; 
0x0000000000456e1d: cmp byte ptr [rax + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x000000000041d72d: cmp byte ptr [rax + 2], 0x66; jne 0x1d73e; mov eax, 0xffffffff; add rsp, 0x10; pop rbp; ret; 
0x000000000043d433: cmp byte ptr [rax - 0x172776b8], dl; ret; 
0x00000000004313a1: cmp byte ptr [rax - 0x3b7cb7fe], cl; pop rbp; ret; 
0x0000000000420175: cmp byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x40; pop rbp; ret; 
0x00000000004331e9: cmp byte ptr [rax - 0x75], cl; and al, 0x28; call 0x329e0; add rsp, 0x40; pop rbp; ret; 
0x00000000004779b1: cmp byte ptr [rax - 0x75], cl; and al, 0x30; add rsp, 0x40; pop rbp; ret; 
0x0000000000432ac4: cmp byte ptr [rax - 0x75], cl; and al, 0x40; call 0x4f320; add rsp, 0x28; pop rbp; ret; 
0x0000000000413513: cmp byte ptr [rax - 0x75], cl; and al, 0x50; call 0x1d260; add rsp, 0x58; pop rbp; ret; 
0x000000000045b245: cmp byte ptr [rax - 0x75], cl; imul ebp, dword ptr [rax - 0x18], 0x31; add byte ptr [r8], al; call 0x5cde0; ret; 
0x0000000000463839: cmp byte ptr [rax - 0x75], cl; pop rsp; and al, 0x20; add rsp, 0x28; pop rbp; ret; 
0x000000000045b161: cmp byte ptr [rax - 0x77], cl; cli; mov rdi, qword ptr [rdi]; call rdi; 
0x00000000004479bb: cmp byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004137ee: cmp byte ptr [rax - 0x77], cl; ret; 
0x00000000004282bd: cmp byte ptr [rax - 0x7d], cl; ret 0x48d0; 
0x000000000046ab31: cmp byte ptr [rax - 1], cl; ret 0x894c; 
0x0000000000453a2b: cmp byte ptr [rax - 1], cl; ret 0x8b48; 
0x0000000000466b2b: cmp byte ptr [rax - 1], cl; ret; 
0x00000000004339ee: cmp byte ptr [rax], 0; je 0x339f8; call 0x3cb80; pop rbp; ret; 
0x000000000045b192: cmp byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; push 0; pop rbp; ret; 
0x000000000043b215: cmp byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rcx; xor byte ptr [rax - 0x77], cl; ret; 
0x0000000000452ba4: cmp byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x000000000045ed4c: cmp byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000004339ef: cmp byte ptr [rax], al; je 0x339f8; call 0x3cb80; pop rbp; ret; 
0x00000000004749ea: cmp byte ptr [rbp - 0x3d], bl; mov rcx, qword ptr [rsp + 0x60]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x68]; call rcx; 
0x000000000040913d: cmp byte ptr [rbp - 0x70], bl; ret; 
0x000000000044f787: cmp byte ptr [rbp - 0x75], cl; push rcx; adc byte ptr [rbp - 0x77], al; ret; 
0x000000000045fcb6: cmp byte ptr [rbx + 0x10], cl; jne 0x5fcc6; movzx ecx, byte ptr [rax + 0x11]; cmp byte ptr [rbx + 0x11], cl; sete al; ret; 
0x000000000045fcbf: cmp byte ptr [rbx + 0x11], cl; sete al; ret; 
0x00000000004600b9: cmp byte ptr [rbx + 0x31], cl; sete al; nop; ret; 
0x000000000045fc36: cmp byte ptr [rbx + 0xa], cl; sete al; ret; 
0x000000000045ff8a: cmp byte ptr [rbx + 4], cl; jne 0x5ff9a; movzx ecx, byte ptr [rax + 5]; cmp byte ptr [rbx + 5], cl; sete al; ret; 
0x000000000045ff93: cmp byte ptr [rbx + 5], cl; sete al; ret; 
0x0000000000403e83: cmp byte ptr [rbx], cl; sete al; ret; 
0x0000000000440fa0: cmp byte ptr [rcx + 0x29], cl; ret; 
0x000000000041a8f6: cmp byte ptr [rcx + rcx*4 - 0x74], cl; and al, 0x18; add eax, dword ptr [rax]; add byte ptr [rcx - 9], al; fimul dword ptr [rcx + 0x63]; ret 0x894c; 
0x0000000000404d75: cmp byte ptr [rcx + rcx*8 - 0x3fcef78b], al; add rsp, 0x60; pop rbp; ret; 
0x0000000000410656: cmp byte ptr [rcx - 0x77], al; ret; 
0x000000000044a284: cmp byte ptr [rcx - 0x77], cl; ret 0x8949; 
0x000000000040be1b: cmp byte ptr [rcx - 0x77], cl; ret; 
0x000000000042a9f9: cmp byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000045246c: cmp byte ptr [rcx], al; mov rsi, qword ptr [rsp + 0x50]; lea rdx, [rsp + 0x50]; mov eax, r8d; call rsi; 
0x00000000004397ce: cmp byte ptr [rdi], cl; mov dh, 0x74; and al, 0x1f; add rsp, 0x60; pop rbp; ret; 
0x000000000041f255: cmp byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000047072d: cmp byte ptr [rdi], cl; xchg eax, esp; shr ebx, 2; xor ecx, ecx; mov eax, ecx; ret; 
0x000000000043bf5a: cmp byte ptr [rip + 0x1144b4], 0; je 0x3bf68; call 0x38040; add rsp, 0x18; pop rbp; ret; 
0x0000000000431891: cmp byte ptr [rsi + 0xb1], 0; je 0x318a2; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x00000000004318e6: cmp byte ptr [rsi + 0xb1], 0; je 0x318f7; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x0000000000431928: cmp byte ptr [rsi + 0xb1], 0; je 0x31939; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x0000000000431952: cmp byte ptr [rsi + 0xb1], 0; je 0x31963; mov qword ptr [r14 + 0x10], -0x522; mov eax, 1; ret; 
0x000000000046febd: cmp byte ptr [rsi - 0x70], ah; call 0x6fca0; mov rcx, qword ptr [rax + 0x38]; mov rax, rbx; call rcx; 
0x000000000045b5e4: cmp byte ptr [rsi], bh; add byte ptr [rax], al; jmp rax; 
0x0000000000441c6b: cmp byte ptr [rsp], 0; je 0x41c77; add rsp, 0x38; pop rbp; ret; 
0x000000000044a9d3: cmp cl, 0x2d; cmove rax, rsi; mov ebx, 1; nop; ret; 
0x0000000000412923: cmp cl, 0xa1; jne 0x1292e; add rsp, 0x38; pop rbp; ret; 
0x000000000045ec76: cmp cl, byte ptr [rax + rax]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x000000000040d8e7: cmp cl, byte ptr [rax - 0x75]; and al, 0x70; mov rbx, rcx; call rdi; 
0x000000000043030a: cmp cl, byte ptr [rax - 1]; ret 0x4090; 
0x0000000000402e27: cmp cl, byte ptr [rdi + rbx]; seta al; lea rax, [rax*2 - 1]; ret; 
0x000000000042fa35: cmp cl, byte ptr [rdi]; add al, ch; ret; 
0x000000000045cf0d: cmp cl, byte ptr [rdi]; add byte ptr [rsi + 0x48], ah; movd eax, mm0; ret; 
0x000000000045cf04: cmp cl, byte ptr [rdi]; add byte ptr [rsi + 0xf], ah; cmp ah, bl; add eax, 0xf3af0; movq rax, xmm0; ret; 
0x000000000043f99b: cmp cl, byte ptr [rsi]; add byte ptr [rsi - 0x70], ah; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000463755: cmp cl, dl; je 0x63748; add rsp, 0x60; pop rbp; ret; 
0x000000000042b38b: cmp cl, dl; jne 0x2b395; add rsp, 0x10; pop rbp; ret; 
0x0000000000469cc8: cmp cx, ax; setne cl; mov eax, ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000469ba8: cmp cx, bx; setne cl; mov eax, ecx; add rsp, 0x10; pop rbp; ret; 
0x00000000004560ab: cmp dh, 0x10; ja 0x560be; mov eax, 1; add rsp, 0x120; pop rbp; ret; 
0x00000000004565a2: cmp dl, bl; je 0x5640f; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x000000000045780f: cmp dword ptr [r11], 0; jne 0x5781d; xor eax, eax; add rsp, 0x70; pop rbp; ret; 
0x00000000004226af: cmp dword ptr [rax + 0x10], 0; je 0x226bb; add rsp, 0x10; pop rbp; ret; 
0x00000000004226ef: cmp dword ptr [rax + 0x10], 0; jne 0x226fb; add rsp, 0x10; pop rbp; ret; 
0x0000000000460461: cmp dword ptr [rax + 0x18], 0; setne al; ret; 
0x000000000045f73f: cmp dword ptr [rax + 0x18], ecx; sete al; ret; 
0x000000000044ceae: cmp dword ptr [rax + 0x1c], ecx; ja 0x4cebe; mov eax, 0xffffffff; add rsp, 0x30; pop rbp; ret; 
0x000000000044cf2e: cmp dword ptr [rax + 0x1c], ecx; ja 0x4cf3e; mov eax, 0xffffffff; add rsp, 0x30; pop rbp; ret; 
0x0000000000454cbf: cmp dword ptr [rax + 0x28], 0; jne 0x54b46; xor eax, eax; add rsp, 0x58; pop rbp; ret; 
0x0000000000403de4: cmp dword ptr [rax + 0x40], edx; ja 0x3db0; mov rax, rcx; add rsp, 0x60; pop rbp; ret; 
0x0000000000406b5f: cmp dword ptr [rax + 0xc], 0x6753633; add rsp, 0x48; pop rbp; ret; 
0x00000000004093f6: cmp dword ptr [rax + 8], ecx; jne 0x93d6; mov rax, r8; ret; 
0x0000000000432f2c: cmp dword ptr [rax - 0x77], ecx; ret 0xb848; 
0x0000000000465430: cmp dword ptr [rax - 0x80], eax; jmp qword ptr [rbp + 0x75]; 
0x000000000046906b: cmp dword ptr [rax - 1], ecx; ret; 
0x00000000004093f1: cmp dword ptr [rax], ebx; jne 0x93d6; cmp qword ptr [r8 + 8], rcx; jne 0x93d6; mov rax, r8; ret; 
0x0000000000457272: cmp dword ptr [rbp + 0x3d830249], ecx; ret; 
0x000000000045f735: cmp dword ptr [rbx + 0x10], ecx; jne 0x5f746; mov rcx, qword ptr [rbx + 0x18]; cmp qword ptr [rax + 0x18], rcx; sete al; ret; 
0x000000000045fcf3: cmp dword ptr [rbx + 0x10], ecx; jne 0x5fd04; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x000000000045fe96: cmp dword ptr [rbx + 0x10], ecx; jne 0x5fea7; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x000000000045ffb6: cmp dword ptr [rbx + 0x10], ecx; jne 0x5ffc7; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x00000000004706b7: cmp dword ptr [rbx + 0x10], ecx; jne 0x706c8; movzx ecx, word ptr [rbx + 0x18]; cmp word ptr [rax + 0x18], cx; sete al; ret; 
0x000000000045fcfd: cmp dword ptr [rbx + 0x18], ecx; sete al; ret; 
0x0000000000401975: cmp dword ptr [rbx + 6], ecx; jne 0x1984; mov ecx, dword ptr [rax + 8]; cmp dword ptr [rbx + 8], ecx; sete al; ret; 
0x0000000000447ec6: cmp dword ptr [rbx + 8], ecx; jbe 0x47ed6; mov rdx, qword ptr [rbx + 0x10]; add rcx, rdx; mov qword ptr [rax + 0x68], rcx; ret; 
0x000000000045fc2d: cmp dword ptr [rbx + 8], ecx; jne 0x5fc3d; movzx ecx, byte ptr [rax + 0xa]; cmp byte ptr [rbx + 0xa], cl; sete al; ret; 
0x000000000040197d: cmp dword ptr [rbx + 8], ecx; sete al; ret; 
0x0000000000477b0b: cmp dword ptr [rbx], 0; je 0x77b15; call 0x6e920; add rsp, 0x20; pop rbp; ret; 
0x0000000000457810: cmp dword ptr [rbx], 0; jne 0x5781d; xor eax, eax; add rsp, 0x70; pop rbp; ret; 
0x0000000000409f14: cmp dword ptr [rbx], eax; jne 0x9f21; mov rax, rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000045f802: cmp dword ptr [rbx], ecx; jne 0x5f812; mov rcx, qword ptr [rax + 8]; cmp qword ptr [rbx + 8], rcx; sete al; ret; 
0x000000000045fbe4: cmp dword ptr [rbx], ecx; jne 0x5fbf4; mov rcx, qword ptr [rax + 8]; cmp qword ptr [rbx + 8], rcx; sete al; ret; 
0x000000000045fd64: cmp dword ptr [rbx], ecx; jne 0x5fd72; mov ecx, dword ptr [rax + 8]; cmp dword ptr [rbx + 8], ecx; sete al; ret; 
0x0000000000402a44: cmp dword ptr [rbx], ecx; sete al; ret; 
0x0000000000460496: cmp dword ptr [rcx + 0x18], 0; setne al; pop rbp; ret; 
0x000000000042306c: cmp dword ptr [rcx + 0x18], eax; ja 0x23077; cmp qword ptr [rcx + 0x78], rax; ja 0x2307a; xor eax, eax; ret; 
0x0000000000423072: cmp dword ptr [rcx + 0x78], eax; ja 0x2307a; xor eax, eax; ret; 
0x000000000042ed26: cmp dword ptr [rcx + 0xf0], 0; jne 0x2ed35; add rsp, 0x10; pop rbp; ret; 
0x000000000042eda5: cmp dword ptr [rcx + 0xf0], 0; jne 0x2edb4; add rsp, 0x10; pop rbp; ret; 
0x000000000043b048: cmp dword ptr [rdx + 0x50], 0; je 0x3b053; call 0x34440; add rsp, 0x10; pop rbp; ret; 
0x00000000004116b9: cmp dword ptr [rdx + 0x78], edi; ja 0x116c4; add rsp, 0x68; pop rbp; ret; 
0x00000000004447ed: cmp dword ptr [rdx + 8], esi; jbe 0x447fa; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x0000000000442199: cmp dword ptr [rip + 0x10e7e0], 1; jg 0x421ab; add rsp, 0x88; pop rbp; ret; 
0x000000000040aaf3: cmp dword ptr [rip + 0x113f8f], eax; jg 0xab08; lea rax, [rip + 0x8aec6]; mov ebx, 8; ret; 
0x00000000004172e7: cmp dword ptr [rip + 0x139173], ecx; jg 0x172b0; add rsp, 0x10; pop rbp; ret; 
0x000000000041432e: cmp dword ptr [rip + 0x13c68b], 0; jg 0x1433d; add rsp, 0x20; pop rbp; ret; 
0x0000000000461244: cmp dword ptr [rip + 0xc1386], edx; sete al; add rsp, 0x18; pop rbp; ret; 
0x000000000043cd32: cmp dword ptr [rsi + 0x110], 0; jne 0x3cd44; add rsp, 0x3a0; pop rbp; ret; 
0x000000000045394f: cmp dword ptr [rsi], 0; jne 0x5395c; xor eax, eax; mov ebx, 1; ret; 
0x000000000043fa1d: cmp dword ptr [rsi], ecx; add bh, bh; add eax, 0xe39e2; call 0x3e3c0; pop rbp; ret; 
0x000000000042e732: cmp dword ptr [rsp + 0x18], 0; je 0x2e742; add rsp, 0xc0; pop rbp; ret; 
0x000000000042d2b8: cmp eax, -0xb; jne 0x2d2c9; add rsp, 0x20; pop rbp; ret; 
0x00000000004458e4: cmp eax, -6; je 0x458ef; add rsp, 0x18; pop rbp; ret; 
0x000000000045e8c6: cmp eax, 0; je 0x5e905; call rax; 
0x000000000045ed53: cmp eax, 0; je 0x5ed5d; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000045eec7: cmp eax, 0; je 0x5ef20; call rax; 
0x000000000044219a: cmp eax, 0x10e7e0; add dword ptr [rdi + 9], edi; add rsp, 0x88; pop rbp; ret; 
0x000000000041432f: cmp eax, 0x13c68b; add byte ptr [rdi + 6], bh; add rsp, 0x20; pop rbp; ret; 
0x000000000046f453: cmp eax, 0x15; jne 0x6f45e; add rsp, 0x28; pop rbp; ret; 
0x000000000045a033: cmp eax, 0x20; jne 0x5a03e; add rsp, 0x10; pop rbp; ret; 
0x000000000041e650: cmp eax, 0x48ffffff; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x50; pop rbp; ret; 
0x0000000000456ca0: cmp eax, 0x7f; jle 0x56db2; lea rbx, [rcx + 2]; add rsp, 0x10; pop rbp; ret; 
0x000000000042dd5c: cmp eax, 0x89480012; add eax, 0xf4bca; add rsp, 0x40; pop rbp; ret; 
0x0000000000469a94: cmp eax, 0xad; setne al; add rsp, 0x10; pop rbp; ret; 
0x0000000000441400: cmp eax, 0xb; je 0x413b7; add rsp, 0x18; pop rbp; ret; 
0x0000000000439c12: cmp eax, 0xc031fffe; xor ebx, ebx; add rsp, 0x28; pop rbp; ret; 
0x0000000000454d5e: cmp eax, 0xcd945; mov rbx, rax; mov rdx, rcx; mov rax, rdi; call rsi; 
0x0000000000445cf1: cmp eax, 0xd; je 0x45cfe; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000470c2a: cmp eax, 0xdfa10; add byte ptr [rsi + rbx - 0x18], dh; leave; ret; 
0x000000000043e251: cmp eax, 0xeb631; add byte ptr [rdx + rcx - 0x18], dh; ret 0x125; 
0x000000000045e63b: cmp eax, 0xfffff001; jbe 0x5e647; mov eax, 0xffffffff; mov dword ptr [rsp + 0x18], eax; ret; 
0x000000000045e66c: cmp eax, 0xfffff001; jbe 0x5e678; mov eax, 0xffffffff; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000042ce4a: cmp eax, 1; sete al; add rsp, 0x28; pop rbp; ret; 
0x0000000000454680: cmp eax, 2; jge 0x5468b; add rsp, 0x30; pop rbp; ret; 
0x000000000045b061: cmp eax, dword ptr [rax + rax]; ret; 
0x0000000000431514: cmp eax, dword ptr [rax]; add byte ptr [rax + 1], bh; add rsp, 0x18; pop rbp; ret; 
0x0000000000477b0c: cmp eax, dword ptr [rax]; je 0x77b15; call 0x6e920; add rsp, 0x20; pop rbp; ret; 
0x0000000000457811: cmp eax, dword ptr [rax]; jne 0x5781d; xor eax, eax; add rsp, 0x70; pop rbp; ret; 
0x00000000004297a7: cmp eax, dword ptr [rbx]; add byte ptr [rax - 1], cl; ret; 
0x0000000000424261: cmp eax, dword ptr [rdx - 0x74b80000]; and al, 0x78; add rsp, 0x90; pop rbp; ret; 
0x0000000000465621: cmp eax, dword ptr [rdx]; add byte ptr [rax], al; add rsp, 0x120; pop rbp; ret; 
0x000000000044fbe1: cmp eax, dword ptr [rip - 0x74b80000]; and al, 0x10; mov qword ptr [rcx], rax; add rsp, 0x18; pop rbp; ret; 
0x0000000000452ec5: cmp eax, eax; jl 0x52e4e; add rsp, 0x300; pop rbp; ret; 
0x0000000000440cb0: cmp eax, ebx; cmovl rdx, rdi; cmp rdx, rsi; setge al; pop rbp; ret; 
0x0000000000403141: cmp eax, ebx; jne 0x314d; mov rax, 1; ret; 
0x0000000000403161: cmp eax, ebx; jne 0x316d; mov rax, 1; ret; 
0x0000000000432aa9: cmp eax, ecx; jb 0x32adb; mov qword ptr [rdx + 0xe8], rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000420be9: cmp eax, ecx; jne 0x20bc1; add rsp, 0x28; pop rbp; ret; 
0x0000000000454915: cmp eax, ecx; jne 0x5491f; mov eax, 0x21; ret; 
0x0000000000415bfe: cmp eax, ecx; setbe al; add rsp, 8; pop rbp; ret; 
0x0000000000458ea3: cmp eax, ecx; setne cl; mov eax, ecx; ret; 
0x0000000000430dd9: cmp eax, edx; jne 0x30dea; mov byte ptr [rcx + 0x30], 1; mov rax, qword ptr [rcx + 8]; mov rbx, qword ptr [rcx + 0x10]; ret; 
0x000000000045ed61: cmp ebp, 0; je 0x5ed8c; cmp r9, 0; je 0x5ed8c; mov eax, 0xba; syscall; 
0x000000000043d6e2: cmp ebp, 0x58d48ff; xchg eax, esp; ret 0xf; 
0x0000000000406241: cmp ebp, esp; add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x0000000000429aa1: cmp ebx, 0x40; ja 0x29ab1; call 0x29b20; add rsp, 0x18; pop rbp; ret; 
0x00000000004326e1: cmp ebx, dword ptr [rdx - 0x76b7ffff]; ret; 
0x000000000044a741: cmp ebx, ecx; ja 0x4a755; add rsp, 0x20; pop rbp; ret; 
0x000000000044cb21: cmp ebx, ecx; jb 0x4cb2e; mov rbx, rcx; add rsp, 0x38; pop rbp; ret; 
0x0000000000404130: cmp ebx, ecx; sete al; add rsp, 0x28; pop rbp; ret; 
0x0000000000429d21: cmp ebx, edx; jbe 0x29d30; mov rax, -1; mov rbx, rsi; ret; 
0x00000000004578ae: cmp ebx, edx; je 0x578ba; xor eax, eax; add rsp, 0x70; pop rbp; ret; 
0x0000000000402ed2: cmp ebx, edx; setg al; sete cl; lea rax, [rcx + rax*2 - 1]; ret; 
0x00000000004195b6: cmp ebx, esi; ja 0x195c2; xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x000000000045ed67: cmp ecx, 0; je 0x5ed8c; mov eax, 0xba; syscall; 
0x000000000045b5ac: cmp ecx, 0x10000000; ja 0x5b5bd; lea rax, [rip + 0x1465]; jmp rax; 
0x000000000045b564: cmp ecx, 0x1000000; ja 0x5b575; lea rax, [rip + 0x112d]; jmp rax; 
0x000000000045b51c: cmp ecx, 0x100000; ja 0x5b52d; lea rax, [rip + 0xdf5]; jmp rax; 
0x000000000045b4d4: cmp ecx, 0x10000; ja 0x5b4e5; lea rax, [rip + 0xabd]; jmp rax; 
0x000000000045b48c: cmp ecx, 0x1000; ja 0x5b49d; lea rax, [rip + 0x785]; jmp rax; 
0x000000000045b444: cmp ecx, 0x100; ja 0x5b455; lea rax, [rip + 0x44d]; jmp rax; 
0x000000000045b405: cmp ecx, 0x10; ja 0x5b413; lea rax, [rip + 0x1ef]; jmp rax; 
0x0000000000401069: cmp ecx, 0x11; jne 0x1073; mov rax, qword ptr [rax + 0x40]; ret; 
0x000000000046bf76: cmp ecx, 0x11; jne 0x6bf85; mov rax, qword ptr [rax + 0x40]; add rsp, 0x28; pop rbp; ret; 
0x0000000000401156: cmp ecx, 0x14; jne 0x1165; mov rax, qword ptr [rax + 0x40]; add rsp, 8; pop rbp; ret; 
0x000000000046bcb6: cmp ecx, 0x14; jne 0x6bcc5; mov rax, qword ptr [rax + 0x40]; add rsp, 8; pop rbp; ret; 
0x000000000046f121: cmp ecx, 0x18; jne 0x6f130; mov rax, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x000000000046f641: cmp ecx, 0x19; jne 0x6f650; mov rax, qword ptr [rax + 0x40]; add rsp, 0x28; pop rbp; ret; 
0x000000000045b5be: cmp ecx, 0x20000000; ja 0x5b5cf; lea rax, [rip + 0x1533]; jmp rax; 
0x000000000045b576: cmp ecx, 0x2000000; ja 0x5b587; lea rax, [rip + 0x11fb]; jmp rax; 
0x000000000045b52e: cmp ecx, 0x200000; ja 0x5b53f; lea rax, [rip + 0xec3]; jmp rax; 
0x000000000045b4e6: cmp ecx, 0x20000; ja 0x5b4f7; lea rax, [rip + 0xb8b]; jmp rax; 
0x000000000045b49e: cmp ecx, 0x2000; ja 0x5b4af; lea rax, [rip + 0x853]; jmp rax; 
0x000000000045b456: cmp ecx, 0x200; ja 0x5b467; lea rax, [rip + 0x51b]; jmp rax; 
0x000000000045b414: cmp ecx, 0x20; ja 0x5b422; lea rax, [rip + 0x280]; jmp rax; 
0x0000000000472197: cmp ecx, 0x27; sete cl; mov eax, ecx; add rsp, 0x20; pop rbp; ret; 
0x000000000045b5d0: cmp ecx, 0x40000000; ja 0x5b5e1; lea rax, [rip + 0x1601]; jmp rax; 
0x000000000045b588: cmp ecx, 0x4000000; ja 0x5b599; lea rax, [rip + 0x12c9]; jmp rax; 
0x000000000045b540: cmp ecx, 0x400000; ja 0x5b551; lea rax, [rip + 0xf91]; jmp rax; 
0x000000000045b4f8: cmp ecx, 0x40000; ja 0x5b509; lea rax, [rip + 0xc59]; jmp rax; 
0x000000000045b4b0: cmp ecx, 0x4000; ja 0x5b4c1; lea rax, [rip + 0x921]; jmp rax; 
0x000000000045b468: cmp ecx, 0x400; ja 0x5b479; lea rax, [rip + 0x5e9]; jmp rax; 
0x000000000045b423: cmp ecx, 0x40; ja 0x5b431; lea rax, [rip + 0x311]; jmp rax; 
0x00000000004495f4: cmp ecx, 0x80000000; je 0x49605; movsxd rax, ecx; add rsp, 8; pop rbp; ret; 
0x000000000045b59a: cmp ecx, 0x8000000; ja 0x5b5ab; lea rax, [rip + 0x1397]; jmp rax; 
0x000000000045b552: cmp ecx, 0x800000; ja 0x5b563; lea rax, [rip + 0x105f]; jmp rax; 
0x000000000045b50a: cmp ecx, 0x80000; ja 0x5b51b; lea rax, [rip + 0xd27]; jmp rax; 
0x000000000045b4c2: cmp ecx, 0x8000; ja 0x5b4d3; lea rax, [rip + 0x9ef]; jmp rax; 
0x000000000045b47a: cmp ecx, 0x800; ja 0x5b48b; lea rax, [rip + 0x6b7]; jmp rax; 
0x000000000045b432: cmp ecx, 0x80; ja 0x5b443; lea rax, [rip + 0x39f]; jmp rax; 
0x00000000004188b2: cmp ecx, 1; jne 0x188bd; add rsp, 0x10; pop rbp; ret; 
0x000000000046d341: cmp ecx, 1; jne 0x6d34c; add rsp, 0x28; pop rbp; ret; 
0x000000000047341f: cmp ecx, 1; sete al; add rsp, 0x18; pop rbp; ret; 
0x000000000047213c: cmp ecx, 1; sete cl; mov eax, ecx; add rsp, 0x20; pop rbp; ret; 
0x000000000047223b: cmp ecx, 2; sete al; add rsp, 0x20; pop rbp; ret; 
0x000000000045e8f6: cmp ecx, dword ptr [rax + 1]; ror byte ptr [rax - 0x77], 1; and al, 0x20; add rsp, 0x10; pop rbp; ret; 
0x000000000045eaf6: cmp ecx, dword ptr [rax + rax]; jmp rax; 
0x000000000045eb21: cmp ecx, dword ptr [rax + rax]; lea r8, [rip + 0xf2095]; lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000045eae8: cmp ecx, dword ptr [rax + rax]; lea r9, [rip - 0xf2]; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x000000000045ebe8: cmp ecx, dword ptr [rax + rax]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x0000000000439981: cmp ecx, dword ptr [rdi*8 + 0x48c031ff]; add esp, 0x18; pop rbp; ret; 
0x000000000045cecc: cmp ecx, dword ptr [rdi]; add byte ptr [rsi + 0x48], ah; movd eax, mm0; ret; 
0x000000000045cec3: cmp ecx, dword ptr [rdi]; add byte ptr [rsi + 0xf], ah; cmp ah, bl; add eax, 0xf3b31; movq rax, xmm0; ret; 
0x0000000000465de1: cmp ecx, dword ptr [rdx]; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x0000000000455305: cmp ecx, eax; jb 0x55456; add rsp, 0x48; pop rbp; ret; 
0x00000000004067f5: cmp ecx, eax; jne 0x67ff; add rsp, 0x10; pop rbp; ret; 
0x000000000040a329: cmp ecx, eax; jne 0xa333; add rsp, 0x20; pop rbp; ret; 
0x0000000000469cc9: cmp ecx, eax; setne cl; mov eax, ecx; add rsp, 0x10; pop rbp; ret; 
0x00000000004013bb: cmp ecx, ebx; jb 0x13c1; pop rbp; ret; 
0x0000000000440d94: cmp ecx, ebx; setle al; pop rbp; ret; 
0x0000000000469ba9: cmp ecx, ebx; setne cl; mov eax, ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000464928: cmp ecx, edi; jl 0x648e7; add rsp, 0x60; pop rbp; ret; 
0x000000000041d45d: cmp ecx, edx; cmovb rcx, rdx; mov rax, rcx; ret; 
0x00000000004346c1: cmp ecx, edx; ja 0x34690; add rsp, 0x20; pop rbp; ret; 
0x00000000004012a1: cmp ecx, edx; jb 0x12aa; mov rbx, rdx; pop rbp; ret; 
0x00000000004030e4: cmp ecx, edx; je 0x30cb; xor rax, rax; ret; 
0x000000000042c334: cmp ecx, edx; jg 0x2c33e; add rsp, 0x18; pop rbp; ret; 
0x00000000004647f9: cmp ecx, edx; jl 0x647c2; add rsp, 0x78; pop rbp; ret; 
0x000000000044190c: cmp ecx, edx; jne 0x41916; add rsp, 0x10; pop rbp; ret; 
0x00000000004030f7: cmp ecx, edx; sete al; ret; 
0x0000000000449301: cmp ecx, esi; ja 0x4930b; add rsp, 0x10; pop rbp; ret; 
0x0000000000465f32: cmp ecx, esi; jg 0x65f3f; add rsp, 0x690; pop rbp; ret; 
0x0000000000444b33: cmp edi, 0xc48348ff; pop rax; pop rbp; ret; 
0x0000000000405441: cmp edi, edx; add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x00000000004033f9: cmp edi, edx; jb 0x33bf; vzeroupper; mov qword ptr [r11], -1; ret; 
0x0000000000440d8d: cmp edi, esi; cmovl rbx, r11; cmp rcx, rbx; setle al; pop rbp; ret; 
0x000000000044a98b: cmp edi, esi; jae 0x4a950; xor eax, eax; xor ebx, ebx; ret; 
0x000000000046ef41: cmp edx, 0x17; jne 0x6ef50; mov rax, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000403079: cmp edx, 0xffff; je 0x301d; xor rax, rax; ret; 
0x0000000000456da0: cmp edx, 0xfffff; ja 0x56db2; lea rbx, [rcx + 4]; add rsp, 0x10; pop rbp; ret; 
0x00000000004030b9: cmp edx, 0xffffffff; je 0x3085; vzeroupper; xor rax, rax; ret; 
0x000000000041a5c0: cmp edx, 6; jne 0x1a5d0; xor eax, eax; add rsp, 0x328; pop rbp; ret; 
0x0000000000434b76: cmp edx, eax; jl 0x34b81; add rsp, 0x18; pop rbp; nop; ret; 
0x0000000000451b55: cmp edx, eax; jne 0x51b5f; add rsp, 0x30; pop rbp; ret; 
0x000000000040354c: cmp edx, ebx; jae 0x351a; mov qword ptr [r8], rdx; ret; 
0x00000000004495c2: cmp edx, ebx; jg 0x495ad; mov dword ptr [rip + 0xcfb8c], ebx; ret; 
0x0000000000464755: cmp edx, ecx; jg 0x64725; add rsp, 0x78; pop rbp; ret; 
0x000000000042797b: cmp edx, edi; jae 0x27985; add rsp, 0x28; pop rbp; ret; 
0x0000000000440cb7: cmp edx, esi; setge al; pop rbp; ret; 
0x000000000042d5a1: cmp esi, 0x8b48ffff; and al, 0x40; add rsp, 0x680; pop rbp; ret; 
0x0000000000455041: cmp esi, eax; jb 0x5519b; add rsp, 0x48; pop rbp; ret; 
0x000000000042c9a0: cmp esi, ecx; je 0x2c9ac; ret; 
0x000000000042b627: cmp esi, edx; jbe 0x2b5f7; mov rax, r8; add rsp, 0x10; pop rbp; ret; 
0x000000000044a9c4: cmp esi, edx; jbe 0x4a9cd; xor eax, eax; xor ebx, ebx; ret; 
0x0000000000454096: cmp esi, edx; jne 0x540a5; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000045ce15: cmp esp, dword ptr [rax]; ja 0x5ce1e; call 0x5cde0; ret; 
0x00000000004093f5: cmp qword ptr [r8 + 8], rcx; jne 0x93d6; mov rax, r8; ret; 
0x00000000004093f0: cmp qword ptr [r8], rbx; jne 0x93d6; cmp qword ptr [r8 + 8], rcx; jne 0x93d6; mov rax, r8; ret; 
0x00000000004226ae: cmp qword ptr [rax + 0x10], 0; je 0x226bb; add rsp, 0x10; pop rbp; ret; 
0x00000000004226ee: cmp qword ptr [rax + 0x10], 0; jne 0x226fb; add rsp, 0x10; pop rbp; ret; 
0x0000000000460460: cmp qword ptr [rax + 0x18], 0; setne al; ret; 
0x000000000045f73e: cmp qword ptr [rax + 0x18], rcx; sete al; ret; 
0x0000000000454cbe: cmp qword ptr [rax + 0x28], 0; jne 0x54b46; xor eax, eax; add rsp, 0x58; pop rbp; ret; 
0x0000000000403de3: cmp qword ptr [rax + 0x40], rdx; ja 0x3db0; mov rax, rcx; add rsp, 0x60; pop rbp; ret; 
0x000000000045fe95: cmp qword ptr [rbx + 0x10], rcx; jne 0x5fea7; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x000000000045ffb5: cmp qword ptr [rbx + 0x10], rcx; jne 0x5ffc7; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x00000000004706b6: cmp qword ptr [rbx + 0x10], rcx; jne 0x706c8; movzx ecx, word ptr [rbx + 0x18]; cmp word ptr [rax + 0x18], cx; sete al; ret; 
0x000000000045fcfc: cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x0000000000447ec5: cmp qword ptr [rbx + 8], rcx; jbe 0x47ed6; mov rdx, qword ptr [rbx + 0x10]; add rcx, rdx; mov qword ptr [rax + 0x68], rcx; ret; 
0x000000000045f80a: cmp qword ptr [rbx + 8], rcx; sete al; ret; 
0x0000000000477b0a: cmp qword ptr [rbx], 0; je 0x77b15; call 0x6e920; add rsp, 0x20; pop rbp; ret; 
0x0000000000409f13: cmp qword ptr [rbx], rax; jne 0x9f21; mov rax, rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000045fbe3: cmp qword ptr [rbx], rcx; jne 0x5fbf4; mov rcx, qword ptr [rax + 8]; cmp qword ptr [rbx + 8], rcx; sete al; ret; 
0x000000000045fd63: cmp qword ptr [rbx], rcx; jne 0x5fd72; mov ecx, dword ptr [rax + 8]; cmp dword ptr [rbx + 8], ecx; sete al; ret; 
0x0000000000402a43: cmp qword ptr [rbx], rcx; sete al; ret; 
0x0000000000460495: cmp qword ptr [rcx + 0x18], 0; setne al; pop rbp; ret; 
0x000000000042306b: cmp qword ptr [rcx + 0x18], rax; ja 0x23077; cmp qword ptr [rcx + 0x78], rax; ja 0x2307a; xor eax, eax; ret; 
0x0000000000423071: cmp qword ptr [rcx + 0x78], rax; ja 0x2307a; xor eax, eax; ret; 
0x000000000043b047: cmp qword ptr [rdx + 0x50], 0; je 0x3b053; call 0x34440; add rsp, 0x10; pop rbp; ret; 
0x00000000004116b8: cmp qword ptr [rdx + 0x78], rdi; ja 0x116c4; add rsp, 0x68; pop rbp; ret; 
0x00000000004447ec: cmp qword ptr [rdx + 8], rsi; jbe 0x447fa; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000040aaf2: cmp qword ptr [rip + 0x113f8f], rax; jg 0xab08; lea rax, [rip + 0x8aec6]; mov ebx, 8; ret; 
0x0000000000461243: cmp qword ptr [rip + 0xc1386], rdx; sete al; add rsp, 0x18; pop rbp; ret; 
0x000000000045394e: cmp qword ptr [rsi], 0; jne 0x5395c; xor eax, eax; mov ebx, 1; ret; 
0x000000000045ed60: cmp r13, 0; je 0x5ed8c; cmp r9, 0; je 0x5ed8c; mov eax, 0xba; syscall; 
0x000000000042ce49: cmp r8, 1; sete al; add rsp, 0x28; pop rbp; ret; 
0x0000000000440caf: cmp r8, rbx; cmovl rdx, rdi; cmp rdx, rsi; setge al; pop rbp; ret; 
0x0000000000454180: cmp r8b, 0xe; je 0x5418e; xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x000000000045ed66: cmp r9, 0; je 0x5ed8c; mov eax, 0xba; syscall; 
0x000000000047341e: cmp r9, 1; sete al; add rsp, 0x18; pop rbp; ret; 
0x000000000045e63a: cmp rax, -0xfff; jbe 0x5e647; mov eax, 0xffffffff; mov dword ptr [rsp + 0x18], eax; ret; 
0x000000000045e66b: cmp rax, -0xfff; jbe 0x5e678; mov eax, 0xffffffff; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000045e8c5: cmp rax, 0; je 0x5e905; call rax; 
0x000000000045ed52: cmp rax, 0; je 0x5ed5d; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000045eec6: cmp rax, 0; je 0x5ef20; call rax; 
0x000000000046f452: cmp rax, 0x15; jne 0x6f45e; add rsp, 0x28; pop rbp; ret; 
0x000000000045a032: cmp rax, 0x20; jne 0x5a03e; add rsp, 0x10; pop rbp; ret; 
0x0000000000452ec4: cmp rax, r8; jl 0x52e4e; add rsp, 0x300; pop rbp; ret; 
0x0000000000403140: cmp rax, rbx; jne 0x314d; mov rax, 1; ret; 
0x0000000000403160: cmp rax, rbx; jne 0x316d; mov rax, 1; ret; 
0x0000000000432aa8: cmp rax, rcx; jb 0x32adb; mov qword ptr [rdx + 0xe8], rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000454914: cmp rax, rcx; jne 0x5491f; mov eax, 0x21; ret; 
0x0000000000415bfd: cmp rax, rcx; setbe al; add rsp, 8; pop rbp; ret; 
0x0000000000458ea2: cmp rax, rcx; setne cl; mov eax, ecx; ret; 
0x0000000000430dd8: cmp rax, rdx; jne 0x30dea; mov byte ptr [rcx + 0x30], 1; mov rax, qword ptr [rcx + 8]; mov rbx, qword ptr [rcx + 0x10]; ret; 
0x0000000000429aa0: cmp rbx, 0x40; ja 0x29ab1; call 0x29b20; add rsp, 0x18; pop rbp; ret; 
0x000000000044a740: cmp rbx, rcx; ja 0x4a755; add rsp, 0x20; pop rbp; ret; 
0x000000000044cb20: cmp rbx, rcx; jb 0x4cb2e; mov rbx, rcx; add rsp, 0x38; pop rbp; ret; 
0x000000000040412f: cmp rbx, rcx; sete al; add rsp, 0x28; pop rbp; ret; 
0x0000000000429d20: cmp rbx, rdx; jbe 0x29d30; mov rax, -1; mov rbx, rsi; ret; 
0x0000000000402ed1: cmp rbx, rdx; setg al; sete cl; lea rax, [rcx + rax*2 - 1]; ret; 
0x00000000004195b5: cmp rbx, rsi; ja 0x195c2; xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x000000000045b5ab: cmp rcx, 0x10000000; ja 0x5b5bd; lea rax, [rip + 0x1465]; jmp rax; 
0x000000000045b563: cmp rcx, 0x1000000; ja 0x5b575; lea rax, [rip + 0x112d]; jmp rax; 
0x000000000045b51b: cmp rcx, 0x100000; ja 0x5b52d; lea rax, [rip + 0xdf5]; jmp rax; 
0x000000000045b4d3: cmp rcx, 0x10000; ja 0x5b4e5; lea rax, [rip + 0xabd]; jmp rax; 
0x000000000045b48b: cmp rcx, 0x1000; ja 0x5b49d; lea rax, [rip + 0x785]; jmp rax; 
0x000000000045b443: cmp rcx, 0x100; ja 0x5b455; lea rax, [rip + 0x44d]; jmp rax; 
0x000000000045b404: cmp rcx, 0x10; ja 0x5b413; lea rax, [rip + 0x1ef]; jmp rax; 
0x0000000000401068: cmp rcx, 0x11; jne 0x1073; mov rax, qword ptr [rax + 0x40]; ret; 
0x000000000046bf75: cmp rcx, 0x11; jne 0x6bf85; mov rax, qword ptr [rax + 0x40]; add rsp, 0x28; pop rbp; ret; 
0x0000000000401155: cmp rcx, 0x14; jne 0x1165; mov rax, qword ptr [rax + 0x40]; add rsp, 8; pop rbp; ret; 
0x000000000046bcb5: cmp rcx, 0x14; jne 0x6bcc5; mov rax, qword ptr [rax + 0x40]; add rsp, 8; pop rbp; ret; 
0x000000000046f120: cmp rcx, 0x18; jne 0x6f130; mov rax, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x000000000046f640: cmp rcx, 0x19; jne 0x6f650; mov rax, qword ptr [rax + 0x40]; add rsp, 0x28; pop rbp; ret; 
0x000000000045b5bd: cmp rcx, 0x20000000; ja 0x5b5cf; lea rax, [rip + 0x1533]; jmp rax; 
0x000000000045b575: cmp rcx, 0x2000000; ja 0x5b587; lea rax, [rip + 0x11fb]; jmp rax; 
0x000000000045b52d: cmp rcx, 0x200000; ja 0x5b53f; lea rax, [rip + 0xec3]; jmp rax; 
0x000000000045b4e5: cmp rcx, 0x20000; ja 0x5b4f7; lea rax, [rip + 0xb8b]; jmp rax; 
0x000000000045b49d: cmp rcx, 0x2000; ja 0x5b4af; lea rax, [rip + 0x853]; jmp rax; 
0x000000000045b455: cmp rcx, 0x200; ja 0x5b467; lea rax, [rip + 0x51b]; jmp rax; 
0x000000000045b413: cmp rcx, 0x20; ja 0x5b422; lea rax, [rip + 0x280]; jmp rax; 
0x0000000000472196: cmp rcx, 0x27; sete cl; mov eax, ecx; add rsp, 0x20; pop rbp; ret; 
0x000000000045b5cf: cmp rcx, 0x40000000; ja 0x5b5e1; lea rax, [rip + 0x1601]; jmp rax; 
0x000000000045b587: cmp rcx, 0x4000000; ja 0x5b599; lea rax, [rip + 0x12c9]; jmp rax; 
0x000000000045b53f: cmp rcx, 0x400000; ja 0x5b551; lea rax, [rip + 0xf91]; jmp rax; 
0x000000000045b4f7: cmp rcx, 0x40000; ja 0x5b509; lea rax, [rip + 0xc59]; jmp rax; 
0x000000000045b4af: cmp rcx, 0x4000; ja 0x5b4c1; lea rax, [rip + 0x921]; jmp rax; 
0x000000000045b467: cmp rcx, 0x400; ja 0x5b479; lea rax, [rip + 0x5e9]; jmp rax; 
0x000000000045b422: cmp rcx, 0x40; ja 0x5b431; lea rax, [rip + 0x311]; jmp rax; 
0x000000000045b599: cmp rcx, 0x8000000; ja 0x5b5ab; lea rax, [rip + 0x1397]; jmp rax; 
0x000000000045b551: cmp rcx, 0x800000; ja 0x5b563; lea rax, [rip + 0x105f]; jmp rax; 
0x000000000045b509: cmp rcx, 0x80000; ja 0x5b51b; lea rax, [rip + 0xd27]; jmp rax; 
0x000000000045b4c1: cmp rcx, 0x8000; ja 0x5b4d3; lea rax, [rip + 0x9ef]; jmp rax; 
0x000000000045b479: cmp rcx, 0x800; ja 0x5b48b; lea rax, [rip + 0x6b7]; jmp rax; 
0x000000000045b431: cmp rcx, 0x80; ja 0x5b443; lea rax, [rip + 0x39f]; jmp rax; 
0x000000000046d340: cmp rcx, 1; jne 0x6d34c; add rsp, 0x28; pop rbp; ret; 
0x000000000047213b: cmp rcx, 1; sete cl; mov eax, ecx; add rsp, 0x20; pop rbp; ret; 
0x000000000047223a: cmp rcx, 2; sete al; add rsp, 0x20; pop rbp; ret; 
0x0000000000455304: cmp rcx, rax; jb 0x55456; add rsp, 0x48; pop rbp; ret; 
0x00000000004067f4: cmp rcx, rax; jne 0x67ff; add rsp, 0x10; pop rbp; ret; 
0x000000000040a328: cmp rcx, rax; jne 0xa333; add rsp, 0x20; pop rbp; ret; 
0x00000000004013ba: cmp rcx, rbx; jb 0x13c1; pop rbp; ret; 
0x0000000000440d93: cmp rcx, rbx; setle al; pop rbp; ret; 
0x0000000000464927: cmp rcx, rdi; jl 0x648e7; add rsp, 0x60; pop rbp; ret; 
0x000000000041d45c: cmp rcx, rdx; cmovb rcx, rdx; mov rax, rcx; ret; 
0x00000000004346c0: cmp rcx, rdx; ja 0x34690; add rsp, 0x20; pop rbp; ret; 
0x00000000004012a0: cmp rcx, rdx; jb 0x12aa; mov rbx, rdx; pop rbp; ret; 
0x00000000004030e3: cmp rcx, rdx; je 0x30cb; xor rax, rax; ret; 
0x000000000042c333: cmp rcx, rdx; jg 0x2c33e; add rsp, 0x18; pop rbp; ret; 
0x00000000004647f8: cmp rcx, rdx; jl 0x647c2; add rsp, 0x78; pop rbp; ret; 
0x000000000044190b: cmp rcx, rdx; jne 0x41916; add rsp, 0x10; pop rbp; ret; 
0x00000000004030f6: cmp rcx, rdx; sete al; ret; 
0x0000000000449300: cmp rcx, rsi; ja 0x4930b; add rsp, 0x10; pop rbp; ret; 
0x0000000000465f31: cmp rcx, rsi; jg 0x65f3f; add rsp, 0x690; pop rbp; ret; 
0x00000000004033f8: cmp rdi, rdx; jb 0x33bf; vzeroupper; mov qword ptr [r11], -1; ret; 
0x0000000000440d8c: cmp rdi, rsi; cmovl rbx, r11; cmp rcx, rbx; setle al; pop rbp; ret; 
0x000000000044a98a: cmp rdi, rsi; jae 0x4a950; xor eax, eax; xor ebx, ebx; ret; 
0x000000000046ef40: cmp rdx, 0x17; jne 0x6ef50; mov rax, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000451b54: cmp rdx, rax; jne 0x51b5f; add rsp, 0x30; pop rbp; ret; 
0x0000000000464754: cmp rdx, rcx; jg 0x64725; add rsp, 0x78; pop rbp; ret; 
0x000000000042797a: cmp rdx, rdi; jae 0x27985; add rsp, 0x28; pop rbp; ret; 
0x0000000000440cb6: cmp rdx, rsi; setge al; pop rbp; ret; 
0x000000000042b626: cmp rsi, r10; jbe 0x2b5f7; mov rax, r8; add rsp, 0x10; pop rbp; ret; 
0x0000000000455040: cmp rsi, rax; jb 0x5519b; add rsp, 0x48; pop rbp; ret; 
0x000000000044a9c3: cmp rsi, rdx; jbe 0x4a9cd; xor eax, eax; xor ebx, ebx; ret; 
0x0000000000454095: cmp rsi, rdx; jne 0x540a5; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000045ce14: cmp rsp, qword ptr [rax]; ja 0x5ce1e; call 0x5cde0; ret; 
0x00000000004560aa: cmp sil, 0x10; ja 0x560be; mov eax, 1; add rsp, 0x120; pop rbp; ret; 
0x000000000045780e: cmp word ptr [r11], 0; jne 0x5781d; xor eax, eax; add rsp, 0x70; pop rbp; ret; 
0x00000000004706c0: cmp word ptr [rax + 0x18], cx; sete al; ret; 
0x0000000000406b5e: cmp word ptr [rax + 0xc], 0x3633; jne 0x6b6c; add rsp, 0x48; pop rbp; ret; 
0x0000000000401974: cmp word ptr [rbx + 6], cx; jne 0x1984; mov ecx, dword ptr [rax + 8]; cmp dword ptr [rbx + 8], ecx; sete al; ret; 
0x000000000045fc2c: cmp word ptr [rbx + 8], cx; jne 0x5fc3d; movzx ecx, byte ptr [rax + 0xa]; cmp byte ptr [rbx + 0xa], cl; sete al; ret; 
0x0000000000403ea3: cmp word ptr [rbx], cx; sete al; ret; 
0x0000000000416231: cmpsb byte ptr [rsi], byte ptr [rdi]; adc eax, dword ptr [rax]; call 0x184c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004165b0: cmpsb byte ptr [rsi], byte ptr [rdi]; mov rax, qword ptr [rsp + 0x28]; mov byte ptr [rax], 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000466b76: cmpsb byte ptr [rsi], byte ptr [rdi]; sbb al, 0; add byte ptr [rax - 1], cl; ret; 
0x0000000000461a49: cmpsd dword ptr [rsi], dword ptr [rdi]; add rsp, 0x28; pop rbp; ret; 
0x0000000000435595: cmpxchg dword ptr [rbx + 0x90], ecx; sete al; add rsp, 0x10; pop rbp; ret; 
0x0000000000435aed: cmpxchg dword ptr [rcx + 0x90], edx; sete al; add rsp, 0x10; pop rbp; ret; 
0x0000000000460208: cmpxchg dword ptr [rdx], ecx; sete al; ret; 
0x000000000042c96d: cmpxchg dword ptr [rsi + 0x18], edx; sete cl; test cl, cl; je 0x2c959; ret; 
0x0000000000460207: cmpxchg qword ptr [rdx], rcx; sete al; ret; 
0x0000000000402708: cpuid; mov dword ptr [rsp + 0x10], eax; mov dword ptr [rsp + 0x14], ebx; mov dword ptr [rsp + 0x18], ecx; mov dword ptr [rsp + 0x1c], edx; ret; 
0x000000000041d6f2: cvttps2pi mm0, xmm0; bts rax, 0x3f; xchg qword ptr [rcx + 0x18], rax; ret; 
0x000000000040c5c2: cvttps2pi mm0, xmm0; inc eax; ret; 
0x000000000040c5c1: cvttsd2si eax, xmm0; inc eax; ret; 
0x000000000041d6f0: cvttsd2si rax, xmm0; bts rax, 0x3f; xchg qword ptr [rcx + 0x18], rax; ret; 
0x0000000000452eaf: cwde; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4828; 
0x000000000044be55: cwde; add byte ptr [rax], al; add al, ch; ret 0xfe6a; 
0x000000000047c95e: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; call rcx; 
0x0000000000438f0e: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000465765: cwde; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; pushfq; ret; 
0x000000000044e8f8: cwde; and al, byte ptr [rax]; add byte ptr [rcx], dh; jmp qword ptr [rsi - 0x70]; 
0x00000000004396d3: cwde; or dword ptr [rax], eax; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x9eb; 
0x0000000000461728: dec byte ptr [rax + 0x480f2444]; mov edx, dword ptr [rsp + 0x48]; mov rax, qword ptr [rdx]; call rax; 
0x000000000045edee: dec byte ptr [rax - 0x39]; mov dword ptr [rdx], 0x48000010; mov eax, 0x9e; syscall; 
0x00000000004186de: dec byte ptr [rax - 0x77]; mov rcx, rdi; call 0x18800; add rsp, 0x50; pop rbp; ret; 
0x000000000044cdf8: dec byte ptr [rax - 0x77]; ret 0x8948; 
0x0000000000466739: dec byte ptr [rbp + 0x54883057]; xor edi, edi; mov rax, rsi; add rsp, 0x70; pop rbp; ret; 
0x0000000000408e65: dec byte ptr [rbx + rcx*4 + 0x40]; or byte ptr [rcx + 0x31], cl; fmul dword ptr [rax - 0x77]; ret; 
0x000000000043b27e: dec dword ptr [rax + 0x108]; add rsp, 0x28; pop rbp; ret; 
0x000000000043b635: dec dword ptr [rax + 0x108]; add rsp, 0x60; pop rbp; ret; 
0x00000000004598e6: dec dword ptr [rax + 0x108]; ret; 
0x000000000040dd6c: dec dword ptr [rax + 0x21]; ret 0x8948; 
0x00000000004647f7: dec dword ptr [rax + 0x39]; sar dword ptr [rbp + rax*8 + 0x48], 1; add esp, 0x78; pop rbp; ret; 
0x000000000045ce13: dec dword ptr [rax + 0x3b]; and byte ptr [rdi + 5], dh; call 0x5cde0; ret; 
0x000000000043cfa9: dec dword ptr [rax + 0xf0]; add rsp, 0x3a0; pop rbp; ret; 
0x00000000004298ec: dec dword ptr [rax + 0xf]; fisttp word ptr [rax - 0x7d]; ret; 
0x0000000000403469: dec dword ptr [rax + 1]; iretd; sub rdi, r10; mov qword ptr [r11], rdi; ret; 
0x000000000041f787: dec dword ptr [rax + 1]; ret; 
0x000000000045af40: dec dword ptr [rax - 0x39]; ret 0; 
0x00000000004036e2: dec dword ptr [rax - 0x39]; ret; 
0x00000000004376b1: dec dword ptr [rax - 0x73]; add eax, 0x119127; call 0x42600; add rsp, 0x30; pop rbp; ret; 
0x0000000000433c81: dec dword ptr [rax - 0x73]; add eax, 0x6a797; call 0x5b0a0; add rsp, 0x10; pop rbp; ret; 
0x000000000043d6e4: dec dword ptr [rax - 0x73]; add eax, 0xfc294; call 0xa580; add rsp, 0x18; pop rbp; ret; 
0x000000000041dd03: dec dword ptr [rax - 0x73]; or eax, 0x1329d5; xchg qword ptr [rcx], rax; ret; 
0x0000000000450074: dec dword ptr [rax - 0x73]; or eax, 0xe98fc; add rsp, 0x10; pop rbp; ret; 
0x0000000000436fed: dec dword ptr [rax - 0x73]; or eax, 0xec433; lock xadd dword ptr [rcx], eax; add rsp, 0x48; pop rbp; ret; 
0x000000000041d66b: dec dword ptr [rax - 0x75]; adc byte ptr [r8 + 0x39], cl; ret 0xf48; 
0x0000000000478f0f: dec dword ptr [rax - 0x75]; adc byte ptr [rax - 0x75], cl; pop rax; or byte ptr [rax - 1], cl; ret; 
0x000000000047c244: dec dword ptr [rax - 0x75]; adc byte ptr [rax - 0x75], cl; pop rdx; or byte ptr [rax - 1], cl; ret; 
0x000000000044919a: dec dword ptr [rax - 0x75]; adc byte ptr [rax - 0x7d], cl; ret 0x48f8; 
0x000000000044f2f9: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 8; pop rbp; ret; 
0x000000000045eb31: dec dword ptr [rax - 0x75]; add eax, 0xc3b9f; jmp rax; 
0x000000000045eaf1: dec dword ptr [rax - 0x75]; add eax, 0xc3bdf; jmp rax; 
0x0000000000434c0e: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x18; pop rbp; ret; 
0x00000000004502f0: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x20; pop rbp; ret; 
0x000000000043ed54: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x30; pop rbp; nop; ret; 
0x0000000000425a95: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x38; pop rbp; ret; 
0x000000000040b698: dec dword ptr [rax - 0x75]; and al, 0x10; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rbp; ret; 
0x0000000000473ae4: dec dword ptr [rax - 0x75]; and al, 0x10; mov rbx, qword ptr [rsp + 8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000473a51: dec dword ptr [rax - 0x75]; and al, 0x10; mov rbx, qword ptr [rsp + 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000422b33: dec dword ptr [rax - 0x75]; and al, 0x18; add rsp, 0x20; pop rbp; ret; 
0x0000000000412dcf: dec dword ptr [rax - 0x75]; and al, 0x18; add rsp, 0x28; pop rbp; ret; 
0x0000000000446e54: dec dword ptr [rax - 0x75]; and al, 0x18; add rsp, 0x30; pop rbp; nop; ret; 
0x0000000000413b07: dec dword ptr [rax - 0x75]; and al, 0x18; add rsp, 0x30; pop rbp; ret; 
0x00000000004252bc: dec dword ptr [rax - 0x75]; and al, 0x18; add rsp, 0x38; pop rbp; ret; 
0x000000000041e653: dec dword ptr [rax - 0x75]; and al, 0x18; add rsp, 0x50; pop rbp; ret; 
0x00000000004639da: dec dword ptr [rax - 0x75]; and al, 0x18; add rsp, 0x78; pop rbp; ret; 
0x0000000000425c97: dec dword ptr [rax - 0x75]; and al, 0x18; movups xmmword ptr [rax], xmm15; add rsp, 0x20; pop rbp; ret; 
0x00000000004132ee: dec dword ptr [rax - 0x75]; and al, 0x20; add rsp, 0x38; pop rbp; ret; 
0x000000000042a217: dec dword ptr [rax - 0x75]; and al, 0x20; add rsp, 0x40; pop rbp; ret; 
0x000000000046394a: dec dword ptr [rax - 0x75]; and al, 0x20; add rsp, 0x78; pop rbp; ret; 
0x00000000004046a8: dec dword ptr [rax - 0x75]; and al, 0x20; mov rbx, qword ptr [rsp + 0x28]; add rsp, 0x68; pop rbp; ret; 
0x0000000000474ec9: dec dword ptr [rax - 0x75]; and al, 0x20; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x48; pop rbp; ret; 
0x0000000000426ada: dec dword ptr [rax - 0x75]; and al, 0x20; shl rax, 0xd; sub rsp, -0x80; pop rbp; ret; 
0x0000000000474cf5: dec dword ptr [rax - 0x75]; and al, 0x28; add rsp, 0x30; pop rbp; ret; 
0x000000000042a1d0: dec dword ptr [rax - 0x75]; and al, 0x28; add rsp, 0x40; pop rbp; ret; 
0x0000000000436290: dec dword ptr [rax - 0x75]; and al, 0x28; add rsp, 0x50; pop rbp; ret; 
0x0000000000423628: dec dword ptr [rax - 0x75]; and al, 0x28; add rsp, 0xa0; pop rbp; ret; 
0x00000000004332a9: dec dword ptr [rax - 0x75]; and al, 0x30; call 0x33020; add rsp, 0x20; pop rbp; ret; 
0x000000000042d5a4: dec dword ptr [rax - 0x75]; and al, 0x40; add rsp, 0x680; pop rbp; ret; 
0x0000000000442e14: dec dword ptr [rax - 0x75]; and al, 0x40; call 0x33fe0; add rsp, 0x58; pop rbp; ret; 
0x0000000000471c0e: dec dword ptr [rax - 0x75]; and al, 0x50; mov rcx, qword ptr [rcx + 0xf8]; mov rax, qword ptr [rsp + 0xb0]; call rcx; 
0x000000000044526e: dec dword ptr [rax - 0x75]; and al, 0x58; add rsp, 0x68; pop rbp; ret; 
0x000000000041ec59: dec dword ptr [rax - 0x75]; and al, 0x60; add rsp, 0x78; pop rbp; ret; 
0x0000000000461e0a: dec dword ptr [rax - 0x75]; and al, 0x60; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x88; pop rbp; ret; 
0x0000000000453768: dec dword ptr [rax - 0x75]; and al, 0x68; mov rbx, qword ptr [rsp + 0x70]; add rsp, 0x258; pop rbp; ret; 
0x000000000041e09c: dec dword ptr [rax - 0x75]; and al, 0x70; mov rdx, qword ptr [rcx + 0x80]; mov rbx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; call rbx; 
0x0000000000422a92: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x10; pop rbp; ret; 
0x000000000040c648: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x38; pop rbp; ret; 
0x0000000000453e3e: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x58; pop rbp; ret; 
0x000000000043295e: dec dword ptr [rax - 0x75]; and al, 8; dec dword ptr [rcx + 0x108]; add rsp, 0x10; pop rbp; ret; 
0x00000000004068d1: dec dword ptr [rax - 0x75]; and al, 8; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x30; pop rbp; ret; 
0x000000000045e624: dec dword ptr [rax - 0x75]; je 0x5e64d; or byte ptr [rbx + 0x44102454], cl; mov edx, dword ptr [rsp + 0x14]; mov eax, 0x101; syscall; 
0x000000000045b241: dec dword ptr [rax - 0x75]; movsxd rdi, dword ptr [rax]; mov rbp, qword ptr [rbx + 0x68]; call 0x5f580; call 0x5cde0; ret; 
0x0000000000439f67: dec dword ptr [rax - 0x75]; or eax, 0x64481; mov rax, qword ptr [rsp + 0x20]; lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000439e52: dec dword ptr [rax - 0x75]; or eax, 0x64596; mov rax, qword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; 
0x000000000046cb69: dec dword ptr [rax - 0x75]; push rax; sbb byte ptr [rax - 0x75], cl; pop rax; adc byte ptr [rax - 1], cl; ret; 
0x000000000042fb86: dec dword ptr [rax - 0x75]; push rsp; and al, 0x18; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000042ab92: dec dword ptr [rax - 0x75]; push rsp; and al, 0x30; mov rax, qword ptr [rdx]; call rax; 
0x000000000043688a: dec dword ptr [rax - 0x75]; push rsp; and al, 0x68; mov rcx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x50]; call rcx; 
0x000000000047c104: dec dword ptr [rax - 0x75]; pushfq; and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret; 
0x000000000041b33c: dec dword ptr [rax - 0x75]; sbb byte ptr [rax - 0x73], cl; add al, 0xa; add rsp, 0x20; pop rbp; ret; 
0x00000000004607af: dec dword ptr [rax - 0x75]; sbb byte ptr [rax - 0x75], cl; and al, 0x48; call rcx; 
0x000000000047c44e: dec dword ptr [rax - 0x75]; xchg eax, esp; and al, 0x60; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4818; 
0x000000000047bb10: dec dword ptr [rax - 0x75]; xchg eax, esp; and al, 0xc8; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x8b48; 
0x00000000004489f5: dec dword ptr [rax - 0x75]; xchg eax, esp; and al, 0xf0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x0000000000458b70: dec dword ptr [rax - 0x77]; add eax, 0xf7a58; pop rbp; ret; 
0x000000000045f27e: dec dword ptr [rax - 0x77]; and al, 0x20; mov qword ptr [rsp + 0x28], rbx; add rsp, 8; pop rbp; ret; 
0x00000000004642ec: dec dword ptr [rax - 0x77]; and al, 0x28; mov rax, rbx; mov rbx, rdx; call rsi; 
0x000000000046472c: dec dword ptr [rax - 0x77]; and al, 0x68; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000451fd3: dec dword ptr [rax - 0x77]; clc; add rsp, 0x178; pop rbp; nop; ret; 
0x0000000000429d13: dec dword ptr [rax - 0x77]; clc; mov rbx, rsi; ret; 
0x000000000045cd7e: dec dword ptr [rax - 0x77]; hlt; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x000000000047b584: dec dword ptr [rax - 0x77]; ret 0x18e9; 
0x00000000004484f8: dec dword ptr [rax - 0x77]; ret 0x2c6; 
0x00000000004286ba: dec dword ptr [rax - 0x77]; ret 0x4890; 
0x0000000000423f3d: dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000478c85: dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000044e42f: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000044a88a: dec dword ptr [rax - 0x77]; ret 0xf748; 
0x000000000040a538: dec dword ptr [rax - 0x77]; ret; 
0x000000000042e328: dec dword ptr [rax - 0x77]; retf; add rsp, 0x38; pop rbp; ret; 
0x000000000040b1c4: dec dword ptr [rax - 0x77]; retf; add rsp, 0x90; pop rbp; ret; 
0x00000000004771cd: dec dword ptr [rax - 0x77]; ror byte ptr [rax - 0x77], 1; call 0x75420; add rsp, 0xd8; pop rbp; ret; 
0x00000000004704dd: dec dword ptr [rax - 0x77]; ror dword ptr [rax - 0x77], 0xc8; add rsp, 0x18; pop rbp; ret; 
0x0000000000429771: dec dword ptr [rax - 0x77]; ror dword ptr [rax - 0x77], 0xc8; add rsp, 0x30; pop rbp; ret; 
0x000000000047814a: dec dword ptr [rax - 0x77]; ror dword ptr [rax - 0x77], 0xda; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rdx; call rcx; 
0x000000000047b4b3: dec dword ptr [rax - 0x77]; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000413fe4: dec dword ptr [rax - 0x7b]; fstp xword ptr [rdx]; cmovne rax, rdx; add rsp, 0x20; pop rbp; ret; 
0x00000000004245f2: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; out dx, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000047b299: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x95; ret 0x8b48; 
0x0000000000457dc6: dec dword ptr [rax - 0x7b]; sal byte ptr [rbp + 9], 0x48; add esp, 0x88; pop rbp; ret; 
0x0000000000463bb4: dec dword ptr [rax - 0x7b]; sar byte ptr [rbp + 0xd], 0x48; mov eax, 0xffffffff; add rsp, 0x78; pop rbp; ret; 
0x000000000046b364: dec dword ptr [rax - 0x7d]; ret 0x4830; 
0x0000000000429521: dec dword ptr [rax - 1]; ret 0x3948; 
0x0000000000401d7b: dec dword ptr [rax - 1]; ret 0x4890; 
0x00000000004671b0: dec dword ptr [rax - 1]; ret 0xc149; 
0x000000000046675a: dec dword ptr [rax - 1]; ret; 
0x000000000043280f: dec dword ptr [rbp + 0x29]; ret 0x894c; 
0x000000000041ea5c: dec dword ptr [rbp + 1]; ret 0x894c; 
0x000000000042723f: dec dword ptr [rbp + 1]; retf; mov rax, r11; lea rdx, [rsp + 0x110]; call rdi; 
0x0000000000442e31: dec dword ptr [rbp - 0x76b7008e]; ret; 
0x000000000045f662: dec dword ptr [rbx + 0x48102444]; add esp, 0x18; pop rbp; ret; 
0x000000000044f35d: dec dword ptr [rbx + 0x48182444]; add esp, 0x20; pop rbp; ret; 
0x00000000004049c4: dec dword ptr [rbx + 0x48182444]; mov ecx, dword ptr [rsp + 0x20]; mov dword ptr [rcx], eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000459ecb: dec dword ptr [rbx + 0x481c2444]; add esp, 0x20; pop rbp; ret; 
0x00000000004504a4: dec dword ptr [rbx + 0x481c2444]; add esp, 0x60; pop rbp; ret; 
0x000000000044cd08: dec dword ptr [rbx + 0x483c244c]; add esp, 0x58; pop rbp; ret; 
0x00000000004692d5: dec dword ptr [rbx + 0x9824bc]; add byte ptr [rax], al; mov byte ptr [rbx + rax - 1], dil; add rsp, 0x70; pop rbp; ret; 
0x00000000004026b6: dec dword ptr [rbx + 0xf142444]; mov edx, 0x920f1be0; add eax, 0x14e3e5; add rsp, 0x50; pop rbp; ret; 
0x000000000047bfb2: dec dword ptr [rbx + rcx*4 + 0x50]; adc byte ptr [rbx + rcx*4 + 0x58], cl; or byte ptr [rcx - 1], cl; ret; 
0x000000000042da35: dec dword ptr [rbx - 0x7adbdbbc]; sal byte ptr [rbp + 6], 0x48; add esp, 0x60; pop rbp; ret; 
0x0000000000432964: dec dword ptr [rcx + 0x108]; add rsp, 0x10; pop rbp; ret; 
0x00000000004208f4: dec dword ptr [rcx + 0x108]; mov rax, -1; add rsp, 0x40; pop rbp; ret; 
0x000000000045f6a7: dec dword ptr [rcx + 0x48402444]; add esp, 0x18; pop rbp; ret; 
0x00000000004097fb: dec dword ptr [rcx + rcx*4 + 0x58]; sbb byte ptr [rcx], dh; sal byte ptr [rcx], 0xdb; add rsp, 0xa0; pop rbp; ret; 
0x0000000000402ce7: dec dword ptr [rcx + rcx*4 - 0x20]; add rsp, 0x40; pop rbp; ret; 
0x000000000042a24a: dec dword ptr [rcx + rcx*4 - 0x28]; add rsp, 0x40; pop rbp; ret; 
0x0000000000433dc9: dec dword ptr [rcx + rcx*4 - 0x38]; add rsp, 0x58; pop rbp; ret; 
0x0000000000429bcb: dec dword ptr [rcx - 0x3f]; loope 0x29bd6; sub r9, rsi; mov rax, r9; mov rbx, rdx; ret; 
0x000000000047c95a: dec dword ptr [rcx - 0x75]; mov bl, byte ptr [rax + 0x48000000]; mov eax, edi; call rcx; 
0x000000000042e2e4: dec dword ptr [rcx - 0x75]; xor byte ptr [rbx - 0x76b7dbf4], r9b; add rsp, 8; pop rbp; ret; 
0x0000000000460ffb: dec dword ptr [rcx - 0x77]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x73], cl; push rcx; or byte ptr [rax - 0x77], cl; ret; 
0x000000000046fa76: dec dword ptr [rcx - 0x77]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000046d00f: dec dword ptr [rcx - 0x77]; fisttp qword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000042b855: dec dword ptr [rcx - 0x77]; ret 0xc149; 
0x0000000000442b9c: dec dword ptr [rcx - 0x77]; ror dword ptr [rcx + 0xf45f0d0], 0xb1; add dword ptr [rdi], ecx; xchg eax, esp; ret 0xd284; 
0x000000000040d838: dec dword ptr [rcx - 1]; ret 0x1f0f; 
0x00000000004784a6: dec dword ptr [rdi + 0xf]; test byte ptr [rbp - 0x7d000000], ah; call qword ptr [rbp + 0xf]; 
0x0000000000429cec: dec dword ptr [rdi + rcx + 0x44]; ret 0x8d49; 
0x0000000000456da3: dec dword ptr [rdi]; add byte ptr [rdi + 0xa], dh; lea rbx, [rcx + 4]; add rsp, 0x10; pop rbp; ret; 
0x000000000044deed: dec dword ptr [rdi]; mov dh, 0x44; and al, 0x13; add rsp, 0x38; pop rbp; ret; 
0x0000000000479cad: dec dword ptr [rdi]; mov dh, 0x44; and al, 0x2b; add rsp, 0x248; pop rbp; ret; 
0x00000000004586d1: dec dword ptr [rdi]; mov dh, 0x44; and al, 6; add rsp, 0x20; pop rbp; ret; 
0x00000000004346fe: dec dword ptr [rdi]; mov dh, 0xd; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000466450: dec dword ptr [rdi]; mov es, word ptr [rbx]; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x000000000040d0c2: dec dword ptr [rdi]; test al, ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000449bd3: dec dword ptr [rdi]; xchg eax, esp; ret 0xb60f; 
0x000000000047cc04: dec dword ptr [rdx]; add rsp, 0x60; pop rbp; ret; 
0x000000000045397e: dec dword ptr [rsi]; mov eax, 1; xor ebx, ebx; ret; 
0x0000000000472d75: dec eax; mov qword ptr [rip + 0xdd89a], rax; pop rbp; nop; ret; 
0x0000000000467ef0: dec ecx; mov qword ptr [rdx + 0x20], r9; add rsp, 0x88; pop rbp; ret; 
0x00000000004645e9: dec ecx; mov rax, rbx; mov rbx, r9; call rsi; 
0x0000000000429544: dec edx; or qword ptr [rax + rsi*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x00000000004771cc: dec qword ptr [r8 - 0x77]; ror byte ptr [rax - 0x77], 1; call 0x75420; add rsp, 0xd8; pop rbp; ret; 
0x00000000004642eb: dec qword ptr [rax - 0x77]; and al, 0x28; mov rax, rbx; mov rbx, rdx; call rsi; 
0x000000000046472b: dec qword ptr [rax - 0x77]; and al, 0x68; mov rax, rbx; mov rbx, rdx; call rsi; 
0x00000000004203b9: dec qword ptr [rax - 0x77]; ret; 
0x000000000045397d: dec qword ptr [rsi]; mov eax, 1; xor ebx, ebx; ret; 
0x0000000000467eef: dec r9; mov qword ptr [rdx + 0x20], r9; add rsp, 0x88; pop rbp; ret; 
0x00000000004645e8: dec r9; mov rax, rbx; mov rbx, r9; call rsi; 
0x0000000000472d74: dec rax; mov qword ptr [rip + 0xdd89a], rax; pop rbp; nop; ret; 
0x0000000000429543: dec rdx; or qword ptr [rax + rsi*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000041f528: div byte ptr [rax - 0x15]; ror byte ptr [rax - 0x77], 1; ret; 
0x00000000004541d8: div byte ptr [rbp + 0xb]; mov eax, 1; add rsp, 0x30; pop rbp; ret; 
0x00000000004599a2: div byte ptr [rbp + 6]; mov eax, 1; ret; 
0x00000000004209b2: div byte ptr [rbx + rdx*8 - 0x7b]; ror byte ptr [rdi], cl; xchg eax, esp; ret 0xc748; 
0x0000000000474abd: div byte ptr [rcx]; shr bl, cl; sbb eax, 0xe0ba0f90; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xa948; 
0x00000000004351f7: div byte ptr [rdi + rax + 0x48]; add esp, 0x30; pop rbp; nop; ret; 
0x000000000043cd2f: div byte ptr [rdx + rdx - 0x7d]; mov esi, 0x110; add byte ptr [rbp + 9], dh; add rsp, 0x3a0; pop rbp; ret; 
0x0000000000443047: div byte ptr [rdx - 0x7b]; shr bl, cl; add ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000470fd9: div byte ptr [rsi + rcx - 0x48]; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x108; pop rbp; ret; 
0x000000000043684f: div byte ptr [rsp + rbx*8 + 0x48]; mov dword ptr [rsp + 0x48], ecx; mov rdx, qword ptr [rsp + 0x68]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000437f0a: div byte ptr [rsp + rsi + 0x48]; mov edx, dword ptr [rip + 0xeb5d4]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x000000000044a98c: div dword ptr [rbx - 0x3f]; xor eax, eax; xor ebx, ebx; ret; 
0x0000000000402eb4: div dword ptr [rsp + rdx + 0x48]; bsr ecx, edi; shr rsi, cl; and rsi, 1; lea rax, [rsi*2 - 1]; ret; 
0x0000000000404342: div ecx; test rdx, rdx; jne 0x434f; add rsp, 0x10; pop rbp; ret; 
0x0000000000404341: div rcx; test rdx, rdx; jne 0x434f; add rsp, 0x10; pop rbp; ret; 
0x0000000000415b25: divps xmm2, xmm0; ucomisd xmm2, xmm1; seta al; add rsp, 8; pop rbp; ret; 
0x0000000000415b24: divsd xmm2, xmm0; ucomisd xmm2, xmm1; seta al; add rsp, 8; pop rbp; ret; 
0x000000000042ec76: fadd dword ptr [rax]; add byte ptr [rax], al; pop rbp; ret; 
0x000000000044fa3c: fadd dword ptr [rax]; add byte ptr [rbp - 0x77], cl; fld qword ptr [rcx - 0x7d]; int 0x80; 
0x000000000045cf01: fadd qword ptr [rip + 0xf3ae9]; aesenc xmm0, xmmword ptr [rip + 0xf3af0]; movq rax, xmm0; ret; 
0x000000000045cf0a: fadd qword ptr [rip + 0xf3af0]; movq rax, xmm0; ret; 
0x000000000045cec0: fadd qword ptr [rip + 0xf3b2a]; aesenc xmm0, xmmword ptr [rip + 0xf3b31]; movq rax, xmm0; ret; 
0x000000000045cec9: fadd qword ptr [rip + 0xf3b31]; movq rax, xmm0; ret; 
0x000000000045a3e9: fadd st(0), st(0); movq rax, xmm0; ret; 
0x00000000004395c8: fbstp tbyte ptr [rcx]; sal byte ptr [rcx], 0xdb; add rsp, 0x60; pop rbp; ret; 
0x0000000000449c44: fbstp tbyte ptr [rcx]; test byte ptr [rbp + 0x31], 0xc0; mov r9, r8; add rsp, 0xd8; pop rbp; ret; 
0x0000000000478c7d: fbstp tbyte ptr [rdx - 0x25180000]; frndint; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000004615c5: fcmovb st(0), st(1); sti; add eax, dword ptr [rbp - 0x8cb8b25]; ret 7; 
0x00000000004160c1: fcmovne st(0), st(5); add al, byte ptr [rax]; add rsp, 0x88; pop rbp; ret; 
0x0000000000478c82: fcmovu st(0), st(1); cld; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000041f8ec: fcom dword ptr [rax + 0x10874890]; add rsp, 0x20; pop rbp; ret; 
0x000000000041f7c7: fcom dword ptr [rax + 0x38428748]; add rsp, 0x28; pop rbp; ret; 
0x000000000045004e: fcom dword ptr [rcx]; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000045a42d: fcom st(0), st(2); aesenc xmm3, xmm3; pxor xmm2, xmm3; movq rax, xmm2; ret; 
0x00000000004059a1: fcomi st(4); add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x0000000000459c71: fcomip st(4); or eax, dword ptr [rax]; xchg dword ptr [rcx], eax; add rsp, 0x10; pop rbp; ret; 
0x000000000045a428: fcomp st(0), st(3); aesenc xmm2, xmm2; aesenc xmm3, xmm3; pxor xmm2, xmm3; movq rax, xmm2; ret; 
0x000000000045a432: fcomp st(0), st(3); pxor xmm2, xmm3; movq rax, xmm2; ret; 
0x000000000047acbb: fcos; jmp qword ptr [rsi - 0x70]; 
0x0000000000403142: fdiv dword ptr [rbp + 8]; mov rax, 1; ret; 
0x0000000000460205: fdiv st(0); cmpxchg qword ptr [rdx], rcx; sete al; ret; 
0x000000000045a4cc: fdiv st(7), st(0); pxor xmm4, xmm6; pxor xmm5, xmm7; pxor xmm4, xmm5; movq rax, xmm4; ret; 
0x000000000046bf22: fdivp st(1); dec dword ptr [rax - 0x77]; ret; 
0x000000000041f4ff: fdivr dword ptr [rbx + 0x1ff]; add rsp, 0x40; pop rbp; ret; 
0x0000000000420817: fdivr dword ptr [rbx + 1]; add rsp, 0x10; pop rbp; ret; 
0x000000000044ab91: fdivr dword ptr [rbx + 1]; add rsp, 0x18; pop rbp; ret; 
0x00000000004576ca: fiadd dword ptr [rcx + 0x29]; ret; 
0x000000000042b825: fiadd dword ptr [rcx + 0xf]; xchg eax, esp; ret 0x8eb; 
0x000000000045e7ef: fiadd word ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000045e7ef: fiadd word ptr [rax]; add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000040354d: fidiv dword ptr [rbx - 0x36]; mov qword ptr [r8], rdx; ret; 
0x000000000041103c: fidiv dword ptr [rdi - 0x52]; mov qword ptr [rax + 0x30], rdx; mov rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x0000000000468a32: fidiv word ptr [rcx]; ror byte ptr [rax - 0x77], 0xcb; add rsp, 0x88; pop rbp; ret; 
0x00000000004495c3: fidivr dword ptr [rdi - 0x19]; mov dword ptr [rip + 0xcfb8c], ebx; ret; 
0x0000000000443401: fild dword ptr [rax + rax]; add bl, ch; mov eax, 0x20c48348; pop rbp; ret; 
0x000000000046de37: fild dword ptr [rbp + 0x31]; shr bl, cl; adc byte ptr [rcx + 1], cl; ret 0x8149; 
0x000000000042d2b7: fild dword ptr [rbx + 0xc75f5f8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000467887: fild dword ptr [rcx + 0xf]; xchg eax, ebp; ret 0x944; 
0x0000000000426121: fild dword ptr [rcx]; add byte ptr [rax], al; add rsp, 0x70; pop rbp; ret; 
0x00000000004304b7: fild dword ptr [rdi + rcx - 0x4a]; or cl, byte ptr [rax - 1]; ret 0x4190; 
0x000000000045e813: fild word ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000045e813: fild word ptr [rax]; add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x00000000004122c5: fimul dword ptr [rax + 0x21]; adc al, 0xc6; add rsp, 0x10; pop rbp; ret; 
0x000000000042964a: fimul dword ptr [rax + 0x21]; adc al, 0xf0; add rsp, 0x10; pop rbp; ret; 
0x000000000041192d: fimul dword ptr [rax + 9]; retf 0xf748; ret 7; 
0x00000000004101c0: fimul dword ptr [rax - 0x73]; add al, 0x19; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x0000000000408ecf: fimul dword ptr [rax - 0x77]; ret; 
0x0000000000470567: fimul dword ptr [rax - 0x77]; ror dword ptr [rax - 0x77], 0xc8; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004703a7: fimul dword ptr [rax - 0x77]; ror dword ptr [rax - 0x77], 0xc8; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000042591c: fimul dword ptr [rax - 0x7f]; cli; lock inc dword ptr [rax]; add byte ptr [rdi], cl; xchg eax, edi; ret 0xaeb; 
0x0000000000429542: fimul dword ptr [rax - 1]; retf 0x948; adc al, 0xf0; add rsp, 0x10; pop rbp; ret; 
0x0000000000429647: fimul dword ptr [rax - 9]; fimul dword ptr [rax + 0x21]; adc al, 0xf0; add rsp, 0x10; pop rbp; ret; 
0x000000000041a901: fimul dword ptr [rcx + 0x63]; ret 0x894c; 
0x00000000004682a9: fimul dword ptr [rcx - 0x77]; push rcx; sbb byte ptr [rax - 0x7d], cl; ret 0x4c08; 
0x0000000000478d37: fimul dword ptr [rcx - 0x77]; ret; 
0x0000000000421d0d: fimul dword ptr [rdi]; xchg eax, ebp; ret 0x5488; 
0x0000000000423f97: fimul dword ptr [rdi]; xchg eax, edx; ret 0xbb41; 
0x0000000000444ba1: fimul dword ptr [rip - 0x2d7ab800]; je 0x44bd4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x000000000045c9d9: fimul word ptr [rax + 0x29]; fld1; mov esi, 0x48ffffd8; add esp, 0x8000000; pop rbp; ret; 
0x000000000045c2d9: fimul word ptr [rax + 0x29]; fld1; mov esi, 0x48ffffdf; add esp, 0x80000; pop rbp; ret; 
0x0000000000428a74: fimul word ptr [rax + 0x29]; ret; 
0x000000000043fc05: fimul word ptr [rax + 0x39]; ret 0x2876; 
0x000000000045eb1c: fimul word ptr [rax - 0x75]; or eax, 0xc3b7c; lea r8, [rip + 0xf2095]; lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x0000000000408da1: fimul word ptr [rax - 0x77]; imul ecx; movabs eax, dword ptr [0xdee9ca8948000001]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000041262c: fimul word ptr [rcx - 0x77]; ret; 
0x000000000041f84c: fist dword ptr [rax + 0x30588748]; mov rcx, qword ptr [rip + 0xf9947]; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000044c39e: fist dword ptr [rax + 0xc8e9]; add byte ptr [rcx], dh; sal byte ptr [rcx], 0xdb; add rsp, 0x10; pop rbp; ret; 
0x00000000004329ad: fist dword ptr [rcx]; add al, ch; or edi, dword ptr [rbp + rdi*8 - 1]; add rsp, 8; pop rbp; ret; 
0x0000000000448c41: fistp dword ptr [rsi + rdi*8 + 0x58d48ff]; call qword ptr [rax]; 
0x000000000045eaf5: fistp qword ptr [rbx]; or al, 0; jmp rax; 
0x00000000004397b5: fistp qword ptr [rsi + 1]; xor ebx, ebx; add rsp, 0x60; pop rbp; ret; 
0x0000000000458a0d: fisttp dword ptr [rax + 0x21]; fmul dword ptr [rax - 0x77]; ret; 
0x0000000000421a0f: fisttp dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000404a81: fisttp dword ptr [rbx + 5]; add byte ptr [rbx + 0x481c2444], cl; add esp, 0x28; pop rbp; ret; 
0x0000000000467a9d: fisttp dword ptr [rcx + rax - 0x40]; mov qword ptr [rcx + 0x20], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000041154f: fisttp dword ptr [rcx + rcx*4 - 0x2f]; mov rdi, rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004093fa: fisttp dword ptr [rcx + rcx*4 - 0x40]; ret; 
0x0000000000439046: fisttp dword ptr [rcx - 0x3b7eb727]; add byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004765cb: fisttp dword ptr [rdi + rcx + 0x45]; ret 0x8d4b; 
0x0000000000431fe7: fisttp dword ptr [rdi]; mov dh, 0x4c; and al, 0x16; add rsp, 0x68; pop rbp; ret; 
0x0000000000475d7e: fisttp dword ptr [rdi]; pushfq; ret 0x2eb; 
0x000000000043eb6b: fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x00000000004150ef: fisttp dword ptr [rdi]; xchg eax, esp; ret; 
0x0000000000425ae1: fisttp dword ptr [rdx - 2]; dec dword ptr [rax - 0x75]; and al, 0x20; add rsp, 0x38; pop rbp; ret; 
0x000000000046d012: fisttp qword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000043decf: fisttp qword ptr [rbx + 0xe]; add byte ptr [rax - 1], cl; ret; 
0x00000000004272b1: fisttp word ptr [rax + 0x39]; ret; 
0x000000000047950f: fisttp word ptr [rax - 0x77]; ret; 
0x00000000004298f0: fisttp word ptr [rax - 0x7d]; ret; 
0x0000000000403dbd: fisttp word ptr [rax - 1]; ret 0x8948; 
0x000000000046579e: fisttp word ptr [rcx + 0x4dae8d6]; add byte ptr [rax], al; add rsp, 0x120; pop rbp; ret; 
0x0000000000412795: fisttp word ptr [rcx - 0x77]; ret; 
0x00000000004733e4: fisttp word ptr [rdi + rcx + 0x45]; retf 0x8948; ret 0x8948; 
0x0000000000458e9d: fisubr word ptr [rbp + 0x48deadde]; cmp eax, ecx; setne cl; mov eax, ecx; ret; 
0x0000000000458e9f: fisubr word ptr [rbp - 0x37c6b722]; setne cl; mov eax, ecx; ret; 
0x0000000000451a43: fld dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x68; pop rbp; ret; 
0x0000000000468ecb: fld dword ptr [rcx - 0x77]; ret; 
0x000000000044fa41: fld qword ptr [rcx - 0x7d]; int 0x80; 
0x000000000046c316: fld qword ptr [rcx]; add al, ch; and al, byte ptr [rsi - 1]; jmp qword ptr [rsi - 0x70]; 
0x0000000000421ae1: fld xword ptr [rip - 0x74b80000]; and al, 0x28; call 0xa580; add rsp, 0x38; pop rbp; ret; 
0x00000000004042c3: fld1; ja 0x4265; add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x000000000045c9dc: fld1; mov esi, 0x48ffffd8; add esp, 0x8000000; pop rbp; ret; 
0x000000000045c2dc: fld1; mov esi, 0x48ffffdf; add esp, 0x80000; pop rbp; ret; 
0x0000000000432e17: fld1; ret; 
0x0000000000402e20: fmul dword ptr [rax + 0x31]; ror byte ptr [rdx + 0xc3a1e0c], 0x1f; seta al; lea rax, [rax*2 - 1]; ret; 
0x000000000042950a: fmul dword ptr [rax + 0xf]; stosd dword ptr [rdi], eax; rcl dword ptr [rax - 0x27f376b8], 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000440cb1: fmul dword ptr [rax + 0xf]; xlatb; cmp rdx, rsi; setge al; pop rbp; ret; 
0x0000000000454e10: fmul dword ptr [rax + rax]; lea rbx, [rsp + 0x10]; call rcx; 
0x0000000000429790: fmul dword ptr [rax - 0x2d]; call 0x4804781b; add esp, 0x30; pop rbp; ret; 
0x000000000045cf30: fmul dword ptr [rax - 0x57]; sldt word ptr [rax]; add byte ptr [rdi], cl; xchg eax, esp; and al, 8; ret; 
0x0000000000444b6a: fmul dword ptr [rax - 0x73]; pop rsp; and al, 0x48; mov rcx, rdi; call rsi; 
0x0000000000441352: fmul dword ptr [rax - 0x75]; or byte ptr [rax - 0x77], cl; retf 0xf48; mov edx, 0x894821e9; ret; 
0x000000000046b5f0: fmul dword ptr [rax - 0x77]; clc; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x00000000004433fb: fmul dword ptr [rax - 0x77]; rcl dword ptr [rax + 0x4dbe8], cl; add bl, ch; mov eax, 0x20c48348; pop rbp; ret; 
0x0000000000408e6c: fmul dword ptr [rax - 0x77]; ret; 
0x0000000000409fe7: fmul dword ptr [rax - 0x77]; retf; add rsp, 0x20; pop rbp; ret; 
0x000000000040c470: fmul dword ptr [rax - 0x77]; retf; call 0x2a480; add rsp, 0x28; pop rbp; ret; 
0x0000000000403c45: fmul dword ptr [rax - 0x77]; retf; call 0x3780; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c56: fmul dword ptr [rax - 0x77]; retf; call 0x3860; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c67: fmul dword ptr [rax - 0x77]; retf; call 0x3940; add rsp, 0x60; pop rbp; ret; 
0x0000000000403ca0: fmul dword ptr [rax - 0x77]; retf; call 0x3b00; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cc3: fmul dword ptr [rax - 0x77]; retf; call 0x5ce80; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cf4: fmul dword ptr [rax - 0x77]; retf; call 0x5cee0; add rsp, 0x60; pop rbp; ret; 
0x0000000000410f1d: fmul dword ptr [rax - 0x77]; retf; call 0x5d9c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000404140: fmul dword ptr [rax - 0x77]; retf; call rsi; 
0x0000000000404140: fmul dword ptr [rax - 0x77]; retf; call rsi; add rsp, 0x28; pop rbp; ret; 
0x0000000000476316: fmul dword ptr [rax - 0x77]; retf; mov rcx, rdi; add rsp, 0x28; pop rbp; ret; 
0x00000000004647d1: fmul dword ptr [rax - 0x77]; retf; mov rcx, rsi; call rdx; 
0x000000000040fcc2: fmul dword ptr [rax - 0x77]; shr eax, cl; xor eax, 0x48ffffee; add esp, 0x98; pop rbp; ret; 
0x000000000046b690: fmul dword ptr [rax - 0x77]; sti; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x000000000047bcb3: fmul dword ptr [rax - 0x77]; sti; call rcx; 
0x0000000000464945: fmul dword ptr [rax - 0x77]; sti; mov rcx, r9; call rsi; 
0x000000000043a340: fmul dword ptr [rax - 0x77]; xor ecx, ecx; add rsp, 0x38; pop rbp; ret; 
0x000000000044302e: fmul dword ptr [rbx + 0x74d28511]; sbb dword ptr [rbp - 0x76b7008e], ecx; ret; 
0x00000000004510fa: fmul dword ptr [rcx + 0x1f0fcb]; call 0x4c120; add rsp, 0x18; pop rbp; ret; 
0x00000000004645ed: fmul dword ptr [rcx + rcx*4 - 0x35]; call rsi; 
0x00000000004648fa: fmul dword ptr [rcx + rcx*4 - 0x3d]; mov rcx, r9; call rdi; 
0x0000000000478831: fmul dword ptr [rcx - 0x77]; ret 0x8948; 
0x0000000000479816: fmul dword ptr [rcx - 0x77]; ret 0x8b48; 
0x0000000000465dbc: fmul dword ptr [rdi + rcx + 0x4f]; ret 0x294d; 
0x0000000000474f52: fmul dword ptr [rdx]; add byte ptr [rcx - 0x77], cl; or byte ptr [r8 - 0x77], cl; add eax, 0xad8b0; pop rbp; ret; 
0x0000000000436851: fmul qword ptr [rax - 0x77]; and al, 0x48; mov rdx, qword ptr [rsp + 0x68]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x000000000045e9a9: fmul qword ptr [rcx + 0x48382444]; add esp, 0x10; pop rbp; ret; 
0x000000000045a3bc: fmul st(1), st(0); aesenc xmm1, xmm1; aesenc xmm1, xmm1; movq rax, xmm1; ret; 
0x000000000045a3c1: fmul st(1), st(0); aesenc xmm1, xmm1; movq rax, xmm1; ret; 
0x000000000045a3c6: fmul st(1), st(0); movq rax, xmm1; ret; 
0x000000000044ab82: fnstenv [rbx + 0xa]; xor eax, eax; xor ebx, ebx; add rsp, 0x18; pop rbp; ret; 
0x0000000000472634: fnstenv [rcx]; dec dword ptr [rax - 0x77]; ret; 
0x000000000044abff: fnstenv [rcx]; shr bl, cl; and al, 0x31; ror byte ptr [rax - 0x7d], 0xc4; pop rbp; ret; 
0x00000000004013bc: fnstenv [rdx + 2]; pop rbp; ret; 
0x000000000045dd69: fpatan; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000478c83: frndint; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000044405b: fsin; jmp qword ptr [rsi - 0x70]; 
0x0000000000439091: fstp xword ptr [rcx + 1]; add rsp, 0x100; pop rbp; nop; ret; 
0x0000000000439053: fstp xword ptr [rcx + 1]; add rsp, 0x100; pop rbp; ret; 
0x00000000004615f0: fstp xword ptr [rcx + 1]; call 0x59f40; add rsp, 0x18; pop rbp; ret; 
0x0000000000464fc3: fstp xword ptr [rdi + 0x52]; jl 0x64feb; add rsp, 0x18; pop rbp; ret; 
0x0000000000409ce1: fstp xword ptr [rdi]; add eax, 0x448b4800; and al, 0x18; add rsp, 0x28; pop rbp; ret; 
0x0000000000413fe7: fstp xword ptr [rdx]; cmovne rax, rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000046effd: fsub dword ptr [rsi - 0x70]; call 0x58c80; add rsp, 0x18; pop rbp; ret; 
0x00000000004657dd: fsub dword ptr [rsi - 0x70]; call 0x66b00; add rsp, 0x120; pop rbp; ret; 
0x000000000046fd00: fsub qword ptr [rsp + rax]; add rsp, 0x20; pop rbp; ret; 
0x0000000000473658: fsubr st(0); ret 0xf966; 
0x000000000043d437: fsubr st(0); ret; 
0x00000000004734ad: fsubr st(0); sub eax, 0x48000005; add esp, 0x10; pop rbp; ret; 
0x0000000000413a32: fucomi st(0); call 0x48013b0a; add esp, 0x18; pop rbp; ret; 
0x0000000000410cf0: fucomi st(0); or cl, byte ptr [rcx]; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000411e84: fucomi st(1); mov byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x48; pop rbp; ret; 
0x000000000041c122: fucomi st(1); ret; 
0x000000000040eceb: fucomi st(3); adc al, 0x48; lea eax, [rip + 0x1429eb]; add rsp, 0x10; pop rbp; ret; 
0x0000000000455722: fucomi st(3); adc dword ptr [rcx], esi; sal byte ptr [rcx], 0xdb; add rsp, 0x18; pop rbp; ret; 
0x000000000040aa81: fucomi st(3); add al, 0; movzx eax, byte ptr [rsp + 0x17]; add rsp, 0x28; pop rbp; ret; 
0x000000000043029a: fucomi st(3); add eax, 0x894cf189; ret; 
0x0000000000420335: fucomi st(3); add ecx, dword ptr [rax - 0x77]; ret; 
0x000000000044065c: fucomi st(3); cdq; mov eax, r8d; add rsp, 0x10; pop rbp; ret; 
0x0000000000463981: fucomi st(3); insd dword ptr [rdi], dx; mov rax, -1; add rsp, 0x78; pop rbp; ret; 
0x000000000044cde9: fucomi st(3); sbb byte ptr [rbx - 0x74cfdb8c], cl; jl 0x4ce17; xor al, 0x39; test dword ptr [rdi], 0x8948fe4c; ret 0x8948; 
0x0000000000461ab1: fucomi st(3); xor eax, eax; xor ebx, ebx; add rsp, 0x28; pop rbp; ret; 
0x0000000000429c05: fucomip st(3); mov byte ptr [rcx - 0x3f], cl; loope 0x29c12; lea rax, [rsi + r9]; mov rbx, rdx; ret; 
0x00000000004059a2: hlt; add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x000000000045cd81: hlt; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x0000000000407524: hlt; or byte ptr [rax], al; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x0000000000459c72: hlt; or eax, dword ptr [rax]; xchg dword ptr [rcx], eax; add rsp, 0x10; pop rbp; ret; 
0x000000000042ee68: hlt; ret; 
0x0000000000473a9b: idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000045f0e8: idiv byte ptr [rax + 3]; add byte ptr [rcx + 0xf], bh; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x00000000004356ab: imul bl; adc eax, 0x24548b48; and byte ptr [rax - 1], cl; ret 0x8b48; 
0x0000000000408e22: imul bl; add al, 0x48; mov eax, ebx; ret; 
0x0000000000413395: imul bl; add ecx, dword ptr [rax - 1]; ret; 
0x0000000000440823: imul bl; add rsp, 0x120; pop rbp; ret; 
0x0000000000465428: imul bl; and cl, byte ptr [rcx - 0x7d]; clc; and bl, ch; cmp dword ptr [rax - 0x80], eax; jmp qword ptr [rbp + 0x75]; 
0x0000000000422278: imul bl; and eax, 0x48c48348; pop rbp; ret; 
0x00000000004232b4: imul bl; or al, 0x48; add esp, 0x60; pop rbp; ret; 
0x000000000044a948: imul bl; or esi, dword ptr [rcx]; sal byte ptr [rcx], 0xdb; ret; 
0x000000000046c9c6: imul bl; push rdi; sub rsp, -0x80; pop rbp; ret; 
0x0000000000469b44: imul bl; sbb dword ptr [rax + 1], edi; add rsp, 0x10; pop rbp; ret; 
0x000000000045e8f1: imul eax, eax, 0x3b9aca00; add rax, rdx; mov qword ptr [rsp + 0x20], rax; add rsp, 0x10; pop rbp; ret; 
0x0000000000403829: imul eax, ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000403a56: imul eax, edx; add rsp, 0x28; pop rbp; ret; 
0x00000000004037f1: imul eax, edx; mov qword ptr [rcx + 0x120], rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000045b248: imul ebp, dword ptr [rax - 0x18], 0x31; add byte ptr [r8], al; call 0x5cde0; ret; 
0x0000000000403a51: imul ebp, edi, 0x52; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8348; 
0x00000000004037ec: imul ebp, edi, 0x52; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000047bbec: imul ecx, dword ptr [rax - 0x75], 0x4a; adc byte ptr [rax - 0x75], cl; pop rdx; or byte ptr [rax - 1], cl; ret; 
0x0000000000465f2e: imul ecx, ecx, 0x64; cmp rcx, rsi; jg 0x65f3f; add rsp, 0x690; pop rbp; ret; 
0x000000000042c42e: imul ecx, edx, 0x498; add rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000408da4: imul ecx; movabs eax, dword ptr [0xdee9ca8948000001]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000042de02: imul edi, ebp, 0xc48348ff; pop rbp; ret; 
0x00000000004792b9: imul edi, edi, 0xc18948ff; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000424cb5: imul edx, dword ptr [rax - 0x7936ce70], 8; ret; 
0x000000000044f32b: imul esi, dword ptr [rbx], 0x8548000d; sal byte ptr [rbx + rcx + 0x48], cl; mov esi, dword ptr [rdx]; call rsi; 
0x000000000046bf15: imul esp, esi, 2; add al, ch; add ah, ah; std; jmp qword ptr [rsi - 0x70]; 
0x000000000045e8f0: imul rax, rax, 0x3b9aca00; add rax, rdx; mov qword ptr [rsp + 0x20], rax; add rsp, 0x10; pop rbp; ret; 
0x0000000000403828: imul rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000403a55: imul rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x00000000004037f0: imul rax, rdx; mov qword ptr [rcx + 0x120], rsi; add rsp, 0x18; pop rbp; ret; 
0x0000000000465f2d: imul rcx, rcx, 0x64; cmp rcx, rsi; jg 0x65f3f; add rsp, 0x690; pop rbp; ret; 
0x000000000042c42d: imul rcx, rdx, 0x498; add rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000045e908: in al, 0; add byte ptr [rax], al; syscall; 
0x0000000000461786: in al, 0x75; or al, 0x48; mov eax, dword ptr [rdx + 8]; mov ecx, 1; xchg dword ptr [rax], ecx; ret; 
0x00000000004244f8: in al, 0x87; add eax, dword ptr [rax]; add rsp, 0x30; pop rbp; ret; 
0x0000000000440475: in al, 0x89; ret; 
0x0000000000444ba0: in al, 0xda; or eax, 0xd2854800; je 0x44bd4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x00000000004344a6: in al, 0xe; add byte ptr [rax - 1], cl; ret; 
0x000000000045e9a3: in al, 0xf0; call rax; 
0x000000000045e9dc: in al, 0xf0; call rax; mov rsp, rbx; pop rbp; ret; 
0x000000000045ebf0: in al, 0xf0; mov qword ptr [rsp], rbx; call rax; 
0x000000000046bf1b: in al, 0xfd; jmp qword ptr [rsi - 0x70]; 
0x0000000000458e0c: in al, dx; adc al, ch; int 0x80; 
0x0000000000459cac: in al, dx; adc al, ch; sub eax, 0x48ffffb3; add esp, 0x10; pop rbp; ret; 
0x0000000000406242: in al, dx; add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x000000000045b0f0: in al, dx; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000472630: in al, dx; and byte ptr [rax - 0x77], cl; fnstenv [rcx]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000414170: in al, dx; and byte ptr [rax - 0x77], cl; ret 0x8b4c; 
0x0000000000472290: in al, dx; and byte ptr [rax - 0x77], cl; ret; 
0x000000000044b8a0: in al, dx; insd dword ptr [rdi], dx; or eax, 0x1874800; add rsp, 0x60; pop rbp; ret; 
0x00000000004626ac: in al, dx; or byte ptr [rax + 0x20], bh; call 0x5a020; add rsp, 8; pop rbp; ret; 
0x000000000045856c: in al, dx; or byte ptr [rax + 1], bh; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x000000000045860c: in al, dx; or byte ptr [rax + 2], bh; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x0000000000457ecc: in al, dx; or byte ptr [rcx - 0x75], cl; xor byte ptr [rax - 0x75], r9b; adc eax, 0xe8000000; movabs byte ptr [0x5d08c48348fffd47], al; ret; 
0x0000000000401050: in al, dx; ret 5; 
0x000000000040c32c: in al, dx; sbb byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000041842c: in al, dx; sbb byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000455710: in al, dx; sbb byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rcx + 0xf], 0xb6; adc dh, dh; ret 0x7404; 
0x000000000040370c: in al, dx; sbb byte ptr [rcx + 0x10], bh; call 0x5ce60; add rsp, 0x18; pop rbp; ret; 
0x000000000045ff4c: in al, dx; sbb byte ptr [rcx + 0x21], bh; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000047450c: in al, dx; sbb byte ptr [rcx + 0x33], bh; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045fd2c: in al, dx; sbb byte ptr [rcx + 0x4ac], bh; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045ff0c: in al, dx; sbb byte ptr [rcx + 0x800], bh; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045fc6c: in al, dx; sbb byte ptr [rcx + 0xa8], bh; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x00000000004059c6: in al, dx; sbb byte ptr [rcx + 1], bh; call 0x59e0; add rsp, 0x18; pop rbp; ret; 
0x0000000000411346: in al, dx; sub byte ptr [rax - 0x46], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret 0xc148; 
0x0000000000414086: in al, dx; sub byte ptr [rax - 0x77], cl; ret; 
0x000000000042e426: in al, dx; sub byte ptr [rcx - 0x76c7dbbc], cl; ret 0x8948; 
0x000000000040e2f0: in al, dx; xor byte ptr [rax - 0x75], cl; adc ecx, dword ptr [rax - 1]; ret 0x8348; 
0x0000000000458e09: in eax, 0x48; sub esp, 0x10; call 0x10ee0; add rsp, 0x10; pop rbp; ret; 
0x0000000000459ca9: in eax, 0x48; sub esp, 0x10; call 0x54fe0; add rsp, 0x10; pop rbp; ret; 
0x0000000000459ce9: in eax, 0x48; sub esp, 0x10; call 0x55260; add rsp, 0x10; pop rbp; ret; 
0x0000000000459d29: in eax, 0x48; sub esp, 0x10; call 0x55520; add rsp, 0x10; pop rbp; ret; 
0x0000000000458dc9: in eax, 0x48; sub esp, 0x18; call 0x10c60; add rsp, 0x18; pop rbp; ret; 
0x0000000000459f49: in eax, 0x48; sub esp, 0x18; call 0x42ea0; add rsp, 0x18; pop rbp; ret; 
0x000000000045a209: in eax, 0x48; sub esp, 0x18; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x0000000000458ce9: in eax, 0x48; sub esp, 0x18; call 0xdb60; add rsp, 0x18; pop rbp; ret; 
0x0000000000433129: in eax, 0x48; sub esp, 8; call 0x33020; add rsp, 8; pop rbp; ret; 
0x0000000000458d29: in eax, 0x48; sub esp, 8; call 0xde00; add rsp, 8; pop rbp; ret; 
0x000000000045a4d9: in eax, 0x66; movd rax, mm4; ret; 
0x0000000000402f84: in eax, 0x74; ret 0xfdc5; 
0x00000000004026c2: in eax, 0xe3; adc al, 0; add rsp, 0x50; pop rbp; ret; 
0x0000000000445f49: in eax, 0xe8; adc dword ptr [rax], eax; add byte ptr [rax], al; call 0x460a0; pop rbp; ret; 
0x00000000004221c9: in eax, dx; adc al, byte ptr [rax]; call 0x1cd20; add rsp, 0x18; pop rbp; ret; 
0x000000000040112f: in eax, dx; ret 5; 
0x0000000000462ee8: inc byte ptr [rbx - 0x317cc01a]; add byte ptr [rax - 0x78], 0x74; add edi, edi; add rsp, 0x48; pop rbp; ret; 
0x000000000042005f: inc dword ptr [rax + 0x140]; add rsp, 0x18; pop rbp; ret; 
0x000000000043baf1: inc dword ptr [rax + 0x14]; add rsp, 0x20; pop rbp; ret; 
0x000000000041822f: inc dword ptr [rax + 0x72009896]; and ecx, dword ptr [rax - 0x77]; ret 0xb848; 
0x00000000004095a2: inc dword ptr [rax + 8]; ret; 
0x00000000004596b9: inc dword ptr [rax + rax*8 + 0x3d801c75]; ret; 
0x0000000000456986: inc dword ptr [rax + rax*8 - 0x3fce4c8b]; add rsp, 0x120; pop rbp; ret; 
0x000000000045684e: inc dword ptr [rax + rax*8 - 0x3fce638b]; add rsp, 0x120; pop rbp; ret; 
0x000000000046fff6: inc dword ptr [rax + rax*8 - 0x3fce6e8b]; add rsp, 0x48; pop rbp; ret; 
0x000000000041027a: inc dword ptr [rax + rax*8 - 0x72b7f28b]; add eax, 0x14145a; add rsp, 0x58; pop rbp; ret; 
0x0000000000412a92: inc dword ptr [rax - 0x78]; xor ecx, dword ptr [rax - 0x7d]; ret 0x90f8; 
0x0000000000463626: inc dword ptr [rax]; add byte ptr [rbp - 0x40], dh; mov rax, rcx; add rsp, 0x30; pop rbp; ret; 
0x00000000004629f2: inc dword ptr [rax]; add byte ptr [rbx + 1], bh; add rsp, 0x10; pop rbp; nop; ret; 
0x0000000000462931: inc dword ptr [rax]; add byte ptr [rbx + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x0000000000462c81: inc dword ptr [rax]; add byte ptr [rbx + 1], bh; add rsp, 0x18; pop rbp; ret; 
0x0000000000425921: inc dword ptr [rax]; add byte ptr [rdi], cl; xchg eax, edi; ret 0xaeb; 
0x0000000000425a19: inc dword ptr [rax]; add byte ptr [rdi], cl; xchg eax, edi; ret 0xeb90; 
0x000000000040307c: inc dword ptr [rax]; add byte ptr [rsp + rbx*4 + 0x48], dh; xor eax, eax; ret; 
0x000000000043e759: inc dword ptr [rax]; add rsp, 0x28; pop rbp; ret; 
0x000000000047673a: inc dword ptr [rbp + 0x31]; jmp qword ptr [rsi - 0x70]; 
0x0000000000411c36: inc dword ptr [rbp + 0x31]; shr bl, 0xa; add rsp, 0x58; pop rbp; ret; 
0x0000000000479d7a: inc dword ptr [rbp + 0x484175c0]; mov ecx, dword ptr [rsp + 0x30]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x178]; call rcx; 
0x0000000000479c7a: inc dword ptr [rbp + 0x484175c0]; mov ecx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x180]; call rcx; 
0x000000000042e731: inc dword ptr [rbx + 0x18247c]; je 0x2e742; add rsp, 0xc0; pop rbp; ret; 
0x00000000004598c5: inc dword ptr [rcx + 0x108]; mov rcx, qword ptr [rcx + 0xd0]; movsxd rax, dword ptr [rcx]; ret; 
0x0000000000449b1a: inc dword ptr [rcx + 0xf]; xchg eax, esp; ret 0xf45; 
0x000000000041f501: inc dword ptr [rcx]; add byte ptr [rax], al; add rsp, 0x40; pop rbp; ret; 
0x000000000045982f: inc dword ptr [rdx + 0x14]; mov byte ptr [rcx + 0xb7], 0; add rsp, 0x30; pop rbp; ret; 
0x000000000043fa20: inc dword ptr [rip + 0xe39e2]; call 0x3e3c0; pop rbp; ret; 
0x000000000041fdae: inc dword ptr [rsi + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x00000000004674f9: inc eax; mov qword ptr [rdx + 0x20], r8; add rsp, 0x38; pop rbp; ret; 
0x0000000000467799: inc eax; mov qword ptr [rdx + 0x20], r8; add rsp, 0x40; pop rbp; ret; 
0x000000000045eb90: inc eax; mov qword ptr [rsp + 0x28], 0; mov qword ptr [rsp + 0x30], rax; ret; 
0x000000000040c5c5: inc eax; ret; 
0x0000000000418842: inc ecx; xchg dword ptr [rax + 0x48], ecx; ret; 
0x000000000042005e: inc qword ptr [rax + 0x140]; add rsp, 0x18; pop rbp; ret; 
0x00000000004095a1: inc qword ptr [rax + 8]; ret; 
0x000000000043e758: inc qword ptr [rax]; add rsp, 0x28; pop rbp; ret; 
0x000000000041fdad: inc qword ptr [rsi + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x00000000004674f8: inc r8; mov qword ptr [rdx + 0x20], r8; add rsp, 0x38; pop rbp; ret; 
0x0000000000467798: inc r8; mov qword ptr [rdx + 0x20], r8; add rsp, 0x40; pop rbp; ret; 
0x000000000045eb8f: inc rax; mov qword ptr [rsp + 0x28], 0; mov qword ptr [rsp + 0x30], rax; ret; 
0x000000000041a2f9: insb byte ptr [rdi], dx; adc eax, dword ptr [rax]; lock xadd qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000043714d: insb byte ptr [rdi], dx; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x4890; 
0x000000000045e5c4: insb byte ptr [rdi], dx; and al, 0x28; add rsp, 0x30; ret; 
0x000000000045a8e4: insb byte ptr [rdi], dx; and al, 0x68; add rsp, 0x70; pop rbp; ret; 
0x0000000000444704: insb byte ptr [rdi], dx; mov ebp, 0x1870010; add rsp, 0x20; pop rbp; ret; 
0x00000000004020c8: insb byte ptr [rdi], dx; or dword ptr [rdx], edx; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043eef0: insb byte ptr [rdi], dx; ret; 
0x000000000046fc63: insd dword ptr [rdi], dx; add al, byte ptr [rax]; mov ebx, 0xf; add rsp, 0x38; pop rbp; ret; 
0x000000000041a596: insd dword ptr [rdi], dx; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004483f1: insd dword ptr [rdi], dx; add byte ptr [rax - 0x73], cl; test byte ptr [rax + rcx*4], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004747af: insd dword ptr [rdi], dx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x0000000000463983: insd dword ptr [rdi], dx; mov rax, -1; add rsp, 0x78; pop rbp; ret; 
0x000000000044b8a1: insd dword ptr [rdi], dx; or eax, 0x1874800; add rsp, 0x60; pop rbp; ret; 
0x000000000040a115: int 0x48; add esp, 0x18; pop rbp; ret; 
0x000000000044fa44: int 0x80; 
0x00000000004791f6: int1; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000046ec6c: int1; add rsp, 0x18; pop rbp; ret; 
0x00000000004686ad: int1; add rsp, 0x20; pop rbp; ret; 
0x0000000000463f97: int1; add rsp, 0x28; pop rbp; ret; 
0x00000000004724ce: int1; add rsp, 0x30; pop rbp; ret; 
0x0000000000472900: int1; add rsp, 0x40; pop rbp; ret; 
0x00000000004747d1: int1; add rsp, 0x50; pop rbp; ret; 
0x000000000047410f: int1; add rsp, 0xa0; pop rbp; ret; 
0x00000000004729ef: int1; call 0x36a0; add rsp, 0x38; pop rbp; ret; 
0x0000000000439f96: int1; call 0x402a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000410eac: int1; call 0x5dcc0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x00000000004647d7: int1; call rdx; 
0x0000000000449302: int1; ja 0x4930b; add rsp, 0x10; pop rbp; ret; 
0x0000000000465f33: int1; jg 0x65f3f; add rsp, 0x690; pop rbp; ret; 
0x0000000000429bd2: int1; mov rax, r9; mov rbx, rdx; ret; 
0x000000000041d454: int1; mov rdx, qword ptr [rbx + 0x98]; cmp rcx, rdx; cmovb rcx, rdx; mov rax, rcx; ret; 
0x000000000046352a: int1; or eax, dword ptr [rax]; add rsp, 0x30; pop rbp; ret; 
0x000000000044a76b: int1; ret 0; 
0x0000000000444124: int1; ret 0x10; 
0x000000000046ef6b: int1; ret 0xfffe; 
0x0000000000404343: int1; test rdx, rdx; jne 0x434f; add rsp, 0x10; pop rbp; ret; 
0x0000000000439c6b: int1; xor eax, 0x5ebffff; call 0x38040; pop rbp; ret; 
0x000000000045ed46: iretd; add byte ptr [rax], al; or byte ptr [rax], al; mov eax, 0x38; syscall; 
0x0000000000460ee8: iretd; add rsp, 0x28; pop rbp; ret; 
0x000000000045a3e5: iretd; aesenc xmm0, xmm0; movq rax, xmm0; ret; 
0x000000000044a364: iretd; call 0x4a0e0; add rsp, 0x40; pop rbp; ret; 
0x000000000044a4f7: iretd; call 0x4a0e0; add rsp, 0x60; pop rbp; ret; 
0x000000000044a621: iretd; call 0x4a0e0; add rsp, 0x70; pop rbp; ret; 
0x0000000000407485: iretd; call 0x4a0e0; add rsp, 0xf8; pop rbp; ret; 
0x00000000004646af: iretd; call 0x64500; add rsp, 0x78; pop rbp; ret; 
0x000000000044479f: iretd; call 0x6480; add rsp, 0x30; pop rbp; ret; 
0x00000000004502ed: iretd; movabs byte ptr [0x481024448b48fffb], al; add esp, 0x20; pop rbp; ret; 
0x0000000000411ebc: iretd; nop dword ptr [rax]; call 0x12140; add rsp, 0x48; pop rbp; ret; 
0x000000000044a41c: iretd; nop dword ptr [rax]; call 0x4a0e0; add rsp, 0x50; pop rbp; ret; 
0x000000000046ec66: iretd; or rcx, rdx; or rcx, rsi; add rsp, 0x18; pop rbp; ret; 
0x0000000000402eba: iretd; shr rsi, cl; and rsi, 1; lea rax, [rsi*2 - 1]; ret; 
0x000000000040346c: iretd; sub rdi, r10; mov qword ptr [r11], rdi; ret; 
0x000000000041103d: ja 0x10fed; mov qword ptr [rax + 0x30], rdx; mov rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x00000000004116b6: ja 0x116be; cmp qword ptr [rdx + 0x78], rdi; ja 0x116c4; add rsp, 0x68; pop rbp; ret; 
0x00000000004116bc: ja 0x116c4; add rsp, 0x68; pop rbp; ret; 
0x0000000000412d03: ja 0x12cee; pop rbp; ret; 
0x00000000004195b8: ja 0x195c2; xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x000000000041e458: ja 0x1e466; mov rax, rcx; movups xmm0, xmm1; add rsp, 0x20; pop rbp; ret; 
0x0000000000421fc5: ja 0x21fb1; add al, byte ptr [rax]; add rsp, 0x10; pop rbp; ret; 
0x000000000042306f: ja 0x23077; cmp qword ptr [rcx + 0x78], rax; ja 0x2307a; xor eax, eax; ret; 
0x0000000000423075: ja 0x2307a; xor eax, eax; ret; 
0x0000000000429aa4: ja 0x29ab1; call 0x29b20; add rsp, 0x18; pop rbp; ret; 
0x000000000042b463: ja 0x2b468; mov rcx, rbx; mov rbx, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000042ce47: ja 0x2ce61; cmp r8, 1; sete al; add rsp, 0x28; pop rbp; ret; 
0x00000000004030c3: ja 0x310d; xor eax, eax; ret; 
0x00000000004323d8: ja 0x323e1; add rsp, 0x18; pop rbp; nop; ret; 
0x00000000004326b0: ja 0x32725; mov eax, 1; add rsp, 0x70; pop rbp; ret; 
0x0000000000403464: ja 0x3400; lea rdi, [rsi - 1]; add rdi, rcx; sub rdi, r10; mov qword ptr [r11], rdi; ret; 
0x00000000004033ff: ja 0x344a; mov dword ptr [rbx], 0xffffffff; ret; 
0x00000000004346c3: ja 0x34690; add rsp, 0x20; pop rbp; ret; 
0x00000000004035ba: ja 0x3605; mov dword ptr [rax], 0xffffffff; ret; 
0x000000000043bcf8: ja 0x3bd08; add byte ptr [rax - 0x7d], cl; mov ecx, 0xd0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x5488; 
0x0000000000403de7: ja 0x3db0; mov rax, rcx; add rsp, 0x60; pop rbp; ret; 
0x00000000004042c5: ja 0x4265; add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x0000000000446529: ja 0x4652c; add byte ptr [rax - 0x75], cl; and al, 0x30; add rsp, 0x38; pop rbp; ret; 
0x0000000000449303: ja 0x4930b; add rsp, 0x10; pop rbp; ret; 
0x000000000044a743: ja 0x4a755; add rsp, 0x20; pop rbp; ret; 
0x000000000044cceb: ja 0x4ccf3; add byte ptr [rbx + 1], bh; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000044cd17: ja 0x4cd1f; add byte ptr [rbx + 1], bh; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000044ceb1: ja 0x4cebe; mov eax, 0xffffffff; add rsp, 0x30; pop rbp; ret; 
0x000000000044cf31: ja 0x4cf3e; mov eax, 0xffffffff; add rsp, 0x30; pop rbp; ret; 
0x00000000004560ae: ja 0x560be; mov eax, 1; add rsp, 0x120; pop rbp; ret; 
0x0000000000456da6: ja 0x56db2; lea rbx, [rcx + 4]; add rsp, 0x10; pop rbp; ret; 
0x000000000045b408: ja 0x5b413; lea rax, [rip + 0x1ef]; jmp rax; 
0x000000000045b417: ja 0x5b422; lea rax, [rip + 0x280]; jmp rax; 
0x000000000045b426: ja 0x5b431; lea rax, [rip + 0x311]; jmp rax; 
0x000000000045b438: ja 0x5b443; lea rax, [rip + 0x39f]; jmp rax; 
0x000000000045b44a: ja 0x5b455; lea rax, [rip + 0x44d]; jmp rax; 
0x000000000045b45c: ja 0x5b467; lea rax, [rip + 0x51b]; jmp rax; 
0x000000000045b46e: ja 0x5b479; lea rax, [rip + 0x5e9]; jmp rax; 
0x000000000045b480: ja 0x5b48b; lea rax, [rip + 0x6b7]; jmp rax; 
0x000000000045b492: ja 0x5b49d; lea rax, [rip + 0x785]; jmp rax; 
0x000000000045b4a4: ja 0x5b4af; lea rax, [rip + 0x853]; jmp rax; 
0x000000000045b4b6: ja 0x5b4c1; lea rax, [rip + 0x921]; jmp rax; 
0x000000000045b4c8: ja 0x5b4d3; lea rax, [rip + 0x9ef]; jmp rax; 
0x000000000045b4da: ja 0x5b4e5; lea rax, [rip + 0xabd]; jmp rax; 
0x000000000045b4ec: ja 0x5b4f7; lea rax, [rip + 0xb8b]; jmp rax; 
0x000000000045b4fe: ja 0x5b509; lea rax, [rip + 0xc59]; jmp rax; 
0x000000000045b510: ja 0x5b51b; lea rax, [rip + 0xd27]; jmp rax; 
0x000000000045b522: ja 0x5b52d; lea rax, [rip + 0xdf5]; jmp rax; 
0x000000000045b534: ja 0x5b53f; lea rax, [rip + 0xec3]; jmp rax; 
0x000000000045b546: ja 0x5b551; lea rax, [rip + 0xf91]; jmp rax; 
0x000000000045b558: ja 0x5b563; lea rax, [rip + 0x105f]; jmp rax; 
0x000000000045b56a: ja 0x5b575; lea rax, [rip + 0x112d]; jmp rax; 
0x000000000045b57c: ja 0x5b587; lea rax, [rip + 0x11fb]; jmp rax; 
0x000000000045b58e: ja 0x5b599; lea rax, [rip + 0x12c9]; jmp rax; 
0x000000000045b5a0: ja 0x5b5ab; lea rax, [rip + 0x1397]; jmp rax; 
0x000000000045b5b2: ja 0x5b5bd; lea rax, [rip + 0x1465]; jmp rax; 
0x000000000045b5c4: ja 0x5b5cf; lea rax, [rip + 0x1533]; jmp rax; 
0x000000000045b5d6: ja 0x5b5e1; lea rax, [rip + 0x1601]; jmp rax; 
0x000000000045ce0d: ja 0x5ce14; call 0x5cde0; cmp rsp, qword ptr [rax]; ja 0x5ce1e; call 0x5cde0; ret; 
0x000000000045ce17: ja 0x5ce1e; call 0x5cde0; ret; 
0x00000000004714c3: ja 0x714e1; jae 0x714d5; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x000000000041008c: jae 0x1009a; lea rax, [rsp + 0x78]; mov rbx, rsi; call rcx; 
0x0000000000410401: jae 0x1040f; lea rax, [rsp + 0x80]; mov rbx, rsi; call rcx; 
0x00000000004172e9: jae 0x1727c; adc eax, dword ptr [rax]; jg 0x172b0; add rsp, 0x10; pop rbp; ret; 
0x000000000041fda6: jae 0x1fdb7; mov qword ptr [rsi + rax*8 + 0x20], rbx; inc qword ptr [rsi + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x0000000000422081: jae 0x220fd; adc al, byte ptr [rax]; nop; lea rax, [rip + 0x127a63]; xchg qword ptr [rax], rdx; ret; 
0x00000000004224b4: jae 0x224c1; mov rax, qword ptr [rdx + rax*8 + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x0000000000423c87: jae 0x23c9e; mov rax, qword ptr [rdx + rax*8 + 0xdc8]; mov qword ptr [rdx + 0xdc8], rbx; add rsp, 0x20; pop rbp; ret; 
0x0000000000402694: jae 0x269c; add rsp, 0x50; pop rbp; ret; 
0x000000000042797d: jae 0x27985; add rsp, 0x28; pop rbp; ret; 
0x000000000042e3ee: jae 0x2e3f6; add rsp, 0x40; pop rbp; ret; 
0x000000000042f029: jae 0x2efd7; std; dec dword ptr [rax - 0x77]; ret; 
0x00000000004326b1: jae 0x3266b; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x70; pop rbp; ret; 
0x000000000040354e: jae 0x351a; mov qword ptr [r8], rdx; ret; 
0x0000000000440710: jae 0x40732; xchg dword ptr [rdi + 0x194], edx; mov rax, rsi; add rsp, 0x20; pop rbp; ret; 
0x000000000044111c: jae 0x4112a; lea rax, [r8 + 0x80]; call 0xa660; sub rsp, -0x80; pop rbp; ret; 
0x0000000000441377: jae 0x41385; lea rax, [rbx + 0x80]; call 0xa660; add rsp, 8; pop rbp; ret; 
0x0000000000444d11: jae 0x44d1d; add rsp, 0x58; pop rbp; ret; 
0x0000000000445d80: jae 0x45d8d; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000044a98d: jae 0x4a950; xor eax, eax; xor ebx, ebx; ret; 
0x000000000044ab83: jae 0x4ab8f; xor eax, eax; xor ebx, ebx; add rsp, 0x18; pop rbp; ret; 
0x0000000000452636: jae 0x5263e; mov eax, 1; ret; 
0x000000000046f5a1: jae 0x6f5ab; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x000000000046f7f7: jae 0x6f7fc; mov rbx, qword ptr [rbx]; mov rax, rbx; add rsp, 0x20; pop rbp; ret; 
0x00000000004714c5: jae 0x714d5; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x0000000000471860: jae 0x71870; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x000000000040d30e: jae 0xd31e; mov rdx, qword ptr [rax + 0x48]; mov rsi, qword ptr [rdx]; mov rax, rcx; xor ebx, ebx; call rsi; 
0x000000000040db0b: jae 0xdb10; mov rcx, qword ptr [rcx]; mov rax, rcx; add rsp, 0x78; pop rbp; ret; 
0x000000000040e7be: jae 0xe7cc; mov rax, r13; mov rbx, rsi; call rcx; 
0x000000000040ec4e: jae 0xec5c; lea rax, [rsp + 0x30]; mov rbx, rsi; call rcx; 
0x000000000040edce: jae 0xeddc; lea rax, [rsp + 0x30]; mov rbx, rsi; call rcx; 
0x000000000040ef37: jae 0xef45; lea rax, [rsp + 0x50]; mov rbx, rsi; call rcx; 
0x000000000040f6b8: jae 0xf6c6; lea rax, [rsp + 0x30]; mov rbx, rsi; call rcx; 
0x000000000040f83f: jae 0xf84d; lea rax, [rsp + 0x50]; mov rbx, rsi; call rcx; 
0x00000000004012a3: jb 0x12aa; mov rbx, rdx; pop rbp; ret; 
0x0000000000412f0a: jb 0x12f76; adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x00000000004013bd: jb 0x13c1; pop rbp; ret; 
0x000000000041828c: jb 0x1829c; mov rax, rsi; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000428855: jb 0x2885f; mov rdi, qword ptr [rsi]; mov r8, qword ptr [rdx + 0x10]; mov qword ptr [rsp + 0x20], r8; mov rdx, rsi; call rdi; 
0x000000000042a382: jb 0x2a3e5; adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000431b29: jb 0x31b5c; shr bl, 9; add rsp, 0x40; pop rbp; ret; 
0x0000000000432aab: jb 0x32adb; mov qword ptr [rdx + 0xe8], rcx; add rsp, 0x28; pop rbp; ret; 
0x00000000004033fb: jb 0x33bf; vzeroupper; mov qword ptr [r11], -1; ret; 
0x00000000004424a2: jb 0x424b1; lea rax, [rip + 0x5505a]; mov ebx, 0x13; ret; 
0x00000000004447ee: jb 0x447f8; jbe 0x447fa; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000044cb23: jb 0x4cb2e; mov rbx, rcx; add rsp, 0x38; pop rbp; ret; 
0x0000000000451c99: jb 0x51ca8; mov rax, rcx; mov rax, qword ptr [rax + 0x10]; add rsp, 0x10; pop rbp; ret; 
0x0000000000455043: jb 0x5519b; add rsp, 0x48; pop rbp; ret; 
0x0000000000455307: jb 0x55456; add rsp, 0x48; pop rbp; ret; 
0x0000000000463740: jb 0x63724; add rsp, 0x60; pop rbp; ret; 
0x000000000047124b: jb 0x71268; jbe 0x7125d; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x0000000000474b04: jb 0x74b58; add rsp, 0x28; pop rbp; ret; 
0x000000000040810a: jb 0x80b4; add al, byte ptr [rax]; sub rsp, -0x80; pop rbp; ret; 
0x0000000000401036: jbe 0x1045; mov rax, qword ptr [rdx]; mov rbx, qword ptr [rdx + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000429d23: jbe 0x29d30; mov rax, -1; mov rbx, rsi; ret; 
0x000000000042b629: jbe 0x2b5f7; mov rax, r8; add rsp, 0x10; pop rbp; ret; 
0x000000000042b6ee: jbe 0x2b700; mov rax, r9; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004324c7: jbe 0x324d3; xor eax, eax; xor ebx, ebx; add rsp, 0x70; pop rbp; ret; 
0x000000000043cc44: jbe 0x3cc51; push rbp; mov rbp, rsp; call 0x3cc40; pop rbp; ret; 
0x000000000043cc64: jbe 0x3cc71; push rbp; mov rbp, rsp; call 0x3cc60; pop rbp; ret; 
0x000000000043cc84: jbe 0x3cc91; push rbp; mov rbp, rsp; call 0x3cc80; pop rbp; ret; 
0x000000000043cca4: jbe 0x3ccb1; push rbp; mov rbp, rsp; call 0x3cca0; pop rbp; ret; 
0x000000000043ccc4: jbe 0x3ccd1; push rbp; mov rbp, rsp; call 0x3ccc0; pop rbp; ret; 
0x000000000043cce4: jbe 0x3ccf1; push rbp; mov rbp, rsp; call 0x3cce0; pop rbp; ret; 
0x00000000004414e9: jbe 0x414ec; add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdx, qword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004447f0: jbe 0x447fa; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x00000000004460ce: jbe 0x46059; ret 0x8348; 
0x0000000000447ec9: jbe 0x47ed6; mov rdx, qword ptr [rbx + 0x10]; add rcx, rdx; mov qword ptr [rax + 0x68], rcx; ret; 
0x000000000044a9c6: jbe 0x4a9cd; xor eax, eax; xor ebx, ebx; ret; 
0x0000000000456d28: jbe 0x56db2; lea rbx, [rcx + 3]; add rsp, 0x10; pop rbp; ret; 
0x0000000000456e15: jbe 0x56f28; mov byte ptr [rax], dil; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000457d04: jbe 0x57d11; push rbp; mov rbp, rsp; call 0x360e0; pop rbp; ret; 
0x00000000004582c4: jbe 0x582d1; push rbp; mov rbp, rsp; call 0x360e0; pop rbp; ret; 
0x0000000000458644: jbe 0x58651; push rbp; mov rbp, rsp; call 0x20520; pop rbp; ret; 
0x0000000000458fe4: jbe 0x58ff1; push rbp; mov rbp, rsp; call 0x2ca00; pop rbp; ret; 
0x000000000045e640: jbe 0x5e647; mov eax, 0xffffffff; mov dword ptr [rsp + 0x18], eax; ret; 
0x000000000045e671: jbe 0x5e678; mov eax, 0xffffffff; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000046292d: jbe 0x62940; mov eax, 0xfffd; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000462968: jbe 0x6297a; mov eax, 0xfffd; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000462aad: jbe 0x62ac0; mov eax, 0xfffd; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000462ae8: jbe 0x62afa; mov eax, 0xfffd; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000462cf5: jbe 0x62e08; mov byte ptr [rax], dil; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000469789: jbe 0x697d3; mov ebx, edx; add rsp, 0x70; pop rbp; ret; 
0x000000000047124d: jbe 0x7125d; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x00000000004745a6: jbe 0x74591; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000413d43: je 0x13d50; mov eax, 1; add rsp, 0x30; pop rbp; ret; 
0x000000000041494f: je 0x1495d; lea rax, [rip + 0x89b20]; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x00000000004155b1: je 0x155b9; add rsp, 0x28; pop rbp; ret; 
0x0000000000415b78: je 0x15b82; xor eax, eax; add rsp, 8; pop rbp; ret; 
0x0000000000415ce2: je 0x15cec; mov qword ptr [rsi + 0x10], -0x522; add rsp, 0x88; pop rbp; ret; 
0x0000000000415e28: je 0x15dfa; add al, byte ptr [rax]; add rsp, 0x88; pop rbp; ret; 
0x00000000004165af: je 0x16557; mov rax, qword ptr [rsp + 0x28]; mov byte ptr [rax], 1; add rsp, 0x30; pop rbp; ret; 
0x00000000004171ed: je 0x171f7; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x1b8; pop rbp; nop; ret; 
0x0000000000417f49: je 0x17f12; call 0x2a2e0; add rsp, 0x18; pop rbp; ret; 
0x000000000041809c: je 0x180a3; mov rax, qword ptr [rdx]; call rax; 
0x0000000000418a52: je 0x189e4; mov rax, r8; mov rbx, rcx; ret; 
0x0000000000418f10: je 0x18f25; lea rax, [rdx + 1]; mov qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000419ef0: je 0x19f16; push -0x6f69fcb8; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000041d74f: je 0x1d757; add rsp, 0x10; pop rbp; ret; 
0x000000000041d7e2: je 0x1d7ea; add rsp, 0x20; pop rbp; ret; 
0x000000000041d96a: je 0x1d934; add rsp, 0x20; pop rbp; ret; 
0x000000000041da44: je 0x1da14; add rsp, 0x18; pop rbp; ret; 
0x000000000041e64e: je 0x1e591; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x50; pop rbp; ret; 
0x000000000041f4f1: je 0x1f4ca; xor eax, eax; xor ebx, ebx; add rsp, 0x40; pop rbp; ret; 
0x0000000000420307: je 0x202e2; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000420813: je 0x20823; mov rax, rbx; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000421fc2: je 0x21fc9; call 0x50a40; add rsp, 0x10; pop rbp; ret; 
0x00000000004226b3: je 0x226bb; add rsp, 0x10; pop rbp; ret; 
0x000000000042340e: je 0x23418; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x60; pop rbp; ret; 
0x0000000000423990: je 0x2399f; xor edi, edi; call 0x23d20; add rsp, 0x18; pop rbp; ret; 
0x00000000004252b3: je 0x252bd; mov qword ptr [r14 + 0x10], -0x522; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; pop rbp; ret; 
0x00000000004254af: je 0x254b9; mov qword ptr [r14 + 0x10], -0x522; mov eax, 1; add rsp, 0x40; pop rbp; ret; 
0x0000000000425667: je 0x2566f; add rsp, 0x20; pop rbp; ret; 
0x0000000000425dd3: je 0x25df9; mov byte ptr [rdx + 0x10131], sil; add rsp, 0x20; pop rbp; ret; 
0x0000000000426d10: je 0x26d1b; mov rax, rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000426d28: je 0x26d30; add rsp, 0x10; pop rbp; ret; 
0x000000000042aa5c: je 0x2aa70; lea rbx, [rip + 0x739b3]; call 0x2aaa0; add rsp, 0x10; pop rbp; ret; 
0x000000000042c1ec: je 0x2c1f7; mov rax, rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000042c262: je 0x2c26a; add rsp, 0x18; pop rbp; ret; 
0x0000000000402ce2: je 0x2c2c; mov rax, r12; add rsp, 0x40; pop rbp; ret; 
0x000000000042c976: je 0x2c959; ret; 
0x000000000042c9a2: je 0x2c9ac; ret; 
0x000000000042d2b6: je 0x2d293; cmp eax, -0xb; jne 0x2d2c9; add rsp, 0x20; pop rbp; ret; 
0x000000000042e077: je 0x2e081; xor eax, eax; add rsp, 0x40; pop rbp; ret; 
0x000000000042e737: je 0x2e742; add rsp, 0xc0; pop rbp; ret; 
0x0000000000402eb5: je 0x2ecb; bsr rcx, rdi; shr rsi, cl; and rsi, 1; lea rax, [rsi*2 - 1]; ret; 
0x000000000042ed24: je 0x2ed2f; cmp dword ptr [rcx + 0xf0], 0; jne 0x2ed35; add rsp, 0x10; pop rbp; ret; 
0x000000000042eda3: je 0x2edae; cmp dword ptr [rcx + 0xf0], 0; jne 0x2edb4; add rsp, 0x10; pop rbp; ret; 
0x000000000042f975: je 0x2f97f; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x60; pop rbp; ret; 
0x000000000042fce9: je 0x2fd2b; mov rcx, qword ptr [rax + 0x18]; mov rax, rbx; call rcx; 
0x000000000040307f: je 0x301d; xor rax, rax; ret; 
0x00000000004030bf: je 0x3085; vzeroupper; xor rax, rax; ret; 
0x00000000004030e6: je 0x30cb; xor rax, rax; ret; 
0x0000000000431898: je 0x318a2; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x00000000004318ed: je 0x318f7; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x000000000043192f: je 0x31939; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x0000000000431959: je 0x31963; mov qword ptr [r14 + 0x10], -0x522; mov eax, 1; ret; 
0x00000000004319b2: je 0x319bf; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004319cc: je 0x319d6; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000431a30: je 0x31a3f; cmp byte ptr [rax + 0x28], 1; sete al; add rsp, 8; pop rbp; ret; 
0x0000000000431e44: je 0x31e6a; sub cl, ch; ret; 
0x0000000000432671: je 0x3267d; xor eax, eax; xor ebx, ebx; add rsp, 0x70; pop rbp; ret; 
0x00000000004333da: je 0x333f4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x0000000000433783: je 0x3391f; mov rax, qword ptr [rdx]; call rax; 
0x00000000004339f1: je 0x339f8; call 0x3cb80; pop rbp; ret; 
0x0000000000433dc0: je 0x33dca; mov qword ptr [r14 + 0x10], -0x522; mov rax, r9; add rsp, 0x58; pop rbp; ret; 
0x000000000043412f: je 0x34139; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x60; pop rbp; ret; 
0x000000000040350f: je 0x34d9; pmovmskb edx, xmm1; bsf edx, edx; jne 0x3522; mov qword ptr [r8], -1; ret; 
0x0000000000434f2d: je 0x34f37; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x40; pop rbp; ret; 
0x000000000040354a: je 0x351a; cmp edx, ebx; jae 0x351a; mov qword ptr [r8], rdx; ret; 
0x000000000040356c: je 0x351a; mov qword ptr [r8], rdx; ret; 
0x00000000004351f8: je 0x35201; add rsp, 0x30; pop rbp; nop; ret; 
0x00000000004035af: je 0x358a; vptest ymm3, ymm3; jne 0x35c3; vzeroupper; mov qword ptr [r8], -1; ret; 
0x0000000000435a7a: je 0x35a5d; add rsp, 0x10; pop rbp; ret; 
0x0000000000435d6d: je 0x35d77; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x0000000000436287: je 0x36291; mov qword ptr [r14 + 0x10], -0x522; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x50; pop rbp; ret; 
0x00000000004363ec: je 0x363ff; mov rax, qword ptr [rdx]; call rax; 
0x0000000000436850: je 0x3682e; mov qword ptr [rsp + 0x48], rcx; mov rdx, qword ptr [rsp + 0x68]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000436a27: je 0x36a31; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x58; pop rbp; ret; 
0x0000000000436ab3: je 0x36b0b; mov rdx, qword ptr [rip + 0xeca2c]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x000000000043758d: je 0x37597; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x00000000004375c5: je 0x375cf; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x0000000000437779: je 0x37783; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x00000000004377c7: je 0x377d1; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x0000000000437bd4: je 0x37bde; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x40; pop rbp; ret; 
0x0000000000437c1d: je 0x37c27; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x40; pop rbp; ret; 
0x0000000000437c6d: je 0x37c77; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x40; pop rbp; ret; 
0x0000000000437f0b: je 0x37f41; mov rdx, qword ptr [rip + 0xeb5d4]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000437fdb: je 0x37fe5; nop dword ptr [rax]; call 0x39c40; add rsp, 0x18; pop rbp; ret; 
0x00000000004380f8: je 0x38102; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x000000000043814e: je 0x38158; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x000000000043b04c: je 0x3b053; call 0x34440; add rsp, 0x10; pop rbp; ret; 
0x000000000043bf61: je 0x3bf68; call 0x38040; add rsp, 0x18; pop rbp; ret; 
0x000000000043c2c2: je 0x3c2cc; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x28; pop rbp; ret; 
0x000000000043cd30: je 0x3cd44; cmp dword ptr [rsi + 0x110], 0; jne 0x3cd44; add rsp, 0x3a0; pop rbp; ret; 
0x000000000043e5cc: je 0x3e5b6; add rsp, 0x50; pop rbp; ret; 
0x000000000043ff96: je 0x3ff9e; add rsp, 8; pop rbp; ret; 
0x000000000044002f: je 0x40002; add rsp, 0x20; pop rbp; ret; 
0x0000000000441403: je 0x413b7; add rsp, 0x18; pop rbp; ret; 
0x000000000040412d: je 0x413b; cmp rbx, rcx; sete al; add rsp, 0x28; pop rbp; ret; 
0x0000000000441c6f: je 0x41c77; add rsp, 0x38; pop rbp; ret; 
0x00000000004041ed: je 0x41fb; cmp rbx, rcx; sete al; add rsp, 0x28; pop rbp; ret; 
0x0000000000442695: je 0x4269f; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x10; pop rbp; ret; 
0x0000000000442bac: je 0x42b90; add rsp, 0x58; pop rbp; ret; 
0x0000000000444129: je 0x44135; test al, al; jne 0x44135; add rsp, 0x50; pop rbp; ret; 
0x0000000000444307: je 0x4430f; add rsp, 8; pop rbp; ret; 
0x0000000000444ba7: je 0x44bd4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x00000000004458e7: je 0x458ef; add rsp, 0x18; pop rbp; ret; 
0x00000000004458e2: je 0x458ef; cmp eax, -6; je 0x458ef; add rsp, 0x18; pop rbp; ret; 
0x0000000000445cf4: je 0x45cfe; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x00000000004479b9: je 0x479df; cmp byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004492bd: je 0x492cb; cmp byte ptr [rax + 0x28], 6; jne 0x492cb; add rsp, 0x10; pop rbp; ret; 
0x00000000004495fa: je 0x49605; movsxd rax, ecx; add rsp, 8; pop rbp; ret; 
0x000000000044a6e3: je 0x4a76a; mov ebx, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000044ab07: je 0x4ab14; test rax, rax; jl 0x4ab14; add rsp, 0x18; pop rbp; ret; 
0x000000000044ab36: je 0x4ab5c; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000044ac75: je 0x4ac0c; mov rcx, qword ptr [rsp + 0x28]; add rax, rcx; add rsp, 0x48; pop rbp; ret; 
0x000000000044c5cd: je 0x4c5df; mov eax, 0xffffffff; xor ebx, ebx; add rsp, 0xb0; pop rbp; ret; 
0x000000000044cded: je 0x4ce13; xor byte ptr [rbx + 0x3934247c], cl; test dword ptr [rdi], 0x8948fe4c; ret 0x8948; 
0x0000000000404d02: je 0x4d0c; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000044d24f: je 0x4d275; xor byte ptr [rcx - 0x77], al; ror byte ptr [rax - 0x77], 0xd0; add rsp, 0x58; pop rbp; ret; 
0x000000000044f332: je 0x4f33f; mov rsi, qword ptr [rdx]; call rsi; 
0x000000000044f332: je 0x4f33f; mov rsi, qword ptr [rdx]; call rsi; add rsp, 0x20; pop rbp; ret; 
0x000000000044f8e9: je 0x4f8f1; lea rax, [rdx - 2]; mov byte ptr [rcx], al; add rsp, 0x68; pop rbp; ret; 
0x0000000000450047: je 0x50058; mov ebx, dword ptr [rcx]; add rcx, 0x11d8; add rsp, 0x10; pop rbp; ret; 
0x00000000004500ed: je 0x500f7; mov qword ptr [r14 + 0x10], -0x522; add rsp, 8; pop rbp; ret; 
0x0000000000450429: je 0x50433; mov eax, ebx; add rsp, 0x60; pop rbp; ret; 
0x00000000004508a3: je 0x508ad; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x38; pop rbp; ret; 
0x00000000004508f0: je 0x508f6; cmp al, 0xb; jne 0x508fc; add rsp, 0x30; pop rbp; ret; 
0x0000000000450fc3: je 0x50fcd; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x38; pop rbp; ret; 
0x0000000000405122: je 0x51c5; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x0000000000452470: je 0x52496; push rax; lea rdx, [rsp + 0x50]; mov eax, r8d; call rsi; 
0x00000000004538d5: je 0x531b5; mov rax, qword ptr [rsp + 0x68]; mov rbx, qword ptr [rsp + 0x70]; add rsp, 0x258; pop rbp; ret; 
0x0000000000454184: je 0x5418e; xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x000000000045490e: je 0x54922; mov rcx, qword ptr [rdx + 0x10]; cmp rax, rcx; jne 0x5491f; mov eax, 0x21; ret; 
0x000000000045498d: je 0x54997; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004055d3: je 0x55f9; adc cl, ch; ret; 
0x00000000004565a4: je 0x5640f; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x00000000004578b0: je 0x578ba; xor eax, eax; add rsp, 0x70; pop rbp; ret; 
0x0000000000457cc7: je 0x57cd1; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x0000000000458728: je 0x58732; mov rax, qword ptr [rsp + 8]; mov byte ptr [rax], 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000458c83: je 0x58c89; mov rax, qword ptr [rax]; ret; 
0x0000000000458da3: je 0x58da9; mov rax, qword ptr [rax]; ret; 
0x00000000004593a7: je 0x5933a; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000459583: je 0x5958f; mov ebx, 3; call 0x2cc60; add rsp, 0x30; pop rbp; ret; 
0x000000000045a307: je 0x5a30e; call 0x5cde0; ret; 
0x000000000045af38: je 0x5af6b; lea rsi, [rip - 0xc21]; mov rdx, 0; mov rcx, 0; call rax; 
0x000000000045cda8: je 0x5cdce; sub byte ptr [rax - 0x77], cl; hlt; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x000000000045d2c5: je 0x5d2eb; sub byte ptr [rbx + rcx*4 + 0x7c], cl; and al, 0x20; add rsp, 0x98; pop rbp; ret; 
0x000000000045dd65: je 0x5dd6d; mov rcx, rbx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000045e5ba: je 0x5e5e0; sbb byte ptr [rbx + rcx*4 + 0x7c], cl; and al, 0x20; mov rbp, qword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x000000000045e627: je 0x5e64d; or byte ptr [rbx + 0x44102454], cl; mov edx, dword ptr [rsp + 0x14]; mov eax, 0x101; syscall; 
0x000000000045e687: je 0x5e6ad; adc byte ptr [rbx - 0x47e7dbac], cl; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000045e6a6: je 0x5e6cc; adc byte ptr [rbx - 0x47e7dbac], cl; add byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000045e6c6: je 0x5e6ec; or byte ptr [rax + 0x125], bh; syscall; 
0x000000000045e6c6: je 0x5e6ec; or byte ptr [rax + 0x125], bh; syscall; mov dword ptr [rsp + 0x18], eax; ret; 
0x000000000045e78a: je 0x5e7b0; or byte ptr [rax + 0x3e], bh; syscall; 
0x000000000045e78a: je 0x5e7b0; or byte ptr [rax + 0x3e], bh; syscall; ret; 
0x000000000045e7c7: je 0x5e7ed; adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov eax, 0xea; syscall; 
0x000000000045e7e6: je 0x5e80c; adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov eax, 0xde; syscall; 
0x000000000045e805: je 0x5e82b; or al, 0x48; mov edx, dword ptr [rsp + 0x10]; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x000000000045e847: je 0x5e86d; adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov eax, 0x1b; syscall; 
0x000000000045e8c9: je 0x5e905; call rax; 
0x000000000045ea5a: je 0x5ea80; sbb byte ptr [rbx + rcx*4 + 0x7c], cl; and al, 0x20; mov rbp, qword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x000000000045ec27: je 0x5ec4d; adc byte ptr [rax - 0x39], cl; ror byte ptr [rbx], 0; add byte ptr [rax], al; syscall; 
0x000000000045eca7: je 0x5eccd; adc byte ptr [rbx + 0x48182454], cl; mov eax, 0x1c; syscall; 
0x000000000045eca7: je 0x5eccd; adc byte ptr [rbx + 0x48182454], cl; mov eax, 0x1c; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045ed06: je 0x5ed2c; adc byte ptr [rax - 0x39], cl; ret 0; 
0x000000000045ed37: je 0x5ed4b; lea r8, [r13 + 0x88]; add r8, 8; or rdi, 0x80000; mov eax, 0x38; syscall; 
0x000000000045ed56: je 0x5ed5d; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000045ed64: je 0x5ed8c; cmp r9, 0; je 0x5ed8c; mov eax, 0xba; syscall; 
0x000000000045ed6a: je 0x5ed8c; mov eax, 0xba; syscall; 
0x000000000045ee47: je 0x5ee6d; adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov eax, 0xcc; syscall; 
0x000000000045eebc: je 0x5eee2; adc byte ptr [rax - 0x75], cl; add eax, 0xf172a; cmp rax, 0; je 0x5ef20; call rax; 
0x000000000045eeca: je 0x5ef20; call rax; 
0x000000000045f150: je 0x5f15e; mov rcx, qword ptr [rax]; mov rbx, qword ptr [rax + 8]; mov rax, rcx; pop rbp; ret; 
0x0000000000460343: je 0x6034e; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000460423: je 0x6042f; mov rax, qword ptr [rax + 0x40]; add rsp, 0x10; pop rbp; ret; 
0x0000000000460490: je 0x6049f; mov rcx, qword ptr [rax]; cmp qword ptr [rcx + 0x18], 0; setne al; pop rbp; ret; 
0x0000000000460552: je 0x6055e; mov rax, qword ptr [rcx + 0x40]; add rsp, 0x10; pop rbp; ret; 
0x0000000000460750: je 0x60773; mov rdx, qword ptr [rax + 0x18]; mov rax, rbx; mov rbx, qword ptr [rsp + 0x88]; mov rcx, qword ptr [rsp + 0x90]; call rdx; 
0x0000000000460877: je 0x60831; mov eax, 1; add rsp, 0x68; pop rbp; ret; 
0x0000000000461236: je 0x61218; mov eax, 1; add rsp, 0x18; pop rbp; ret; 
0x000000000046153b: je 0x61545; nop dword ptr [rax]; call 0x61560; add rsp, 0x10; pop rbp; ret; 
0x0000000000461724: je 0x61737; and eax, 0xfffffffe; mov byte ptr [rsp + 0xf], al; mov rdx, qword ptr [rsp + 0x48]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000461a48: je 0x619f1; add rsp, 0x28; pop rbp; ret; 
0x0000000000461b11: je 0x61abe; add rsp, 0x28; pop rbp; ret; 
0x0000000000461fd4: je 0x61fde; or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004625b4: je 0x62593; add rsp, 0x10; pop rbp; ret; 
0x0000000000462c7d: je 0x62c8f; mov eax, 0xfffd; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000463757: je 0x63748; add rsp, 0x60; pop rbp; ret; 
0x00000000004639a2: je 0x639ac; xor eax, eax; add rsp, 0x78; pop rbp; ret; 
0x00000000004647cc: je 0x647f2; push 0x48d88948; mov ebx, ecx; mov rcx, rsi; call rdx; 
0x0000000000467a9c: je 0x67a79; add rax, r8; mov qword ptr [rcx + 0x20], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000046817b: je 0x681ad; jmp qword ptr [rsi - 0x70]; 
0x00000000004691c2: je 0x6914c; push rsp; add edi, edi; add rsp, 0x48; pop rbp; ret; 
0x000000000046bd63: je 0x6bd6e; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x000000000046f784: je 0x6f789; mov rbx, qword ptr [rbx]; mov rax, rbx; add rsp, 0x20; pop rbp; ret; 
0x000000000046f7c7: je 0x6f85b; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x000000000046f9e3: je 0x6fa09; and byte ptr [rsi + rax + 0x24548b48], al; sbb byte ptr [rax - 9], cl; ret 0x60; 
0x0000000000470470: je 0x7047c; mov rax, qword ptr [rax + 0x10]; and eax, 0x1f; nop; pop rbp; ret; 
0x0000000000470fda: je 0x70fea; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x00000000004716aa: je 0x716b5; add rsp, 0x108; pop rbp; ret; 
0x000000000047194d: je 0x7189b; add rsp, 0x108; pop rbp; ret; 
0x0000000000471a19: je 0x71967; add rsp, 0x108; pop rbp; ret; 
0x0000000000471d87: je 0x71d93; xor eax, eax; xor ebx, ebx; add rsp, 0x18; pop rbp; ret; 
0x0000000000471e02: je 0x71e16; mov rax, -1; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000471f48: je 0x71f56; mov rax, rbx; mov rbx, rcx; add rsp, 0x20; pop rbp; ret; 
0x0000000000472090: je 0x7209b; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000473522: je 0x7352e; mov rax, qword ptr [rsp + 0x20]; call 0x739e0; add rsp, 0x10; pop rbp; ret; 
0x0000000000473582: je 0x7358e; mov rax, qword ptr [rsp + 0x20]; call 0x739e0; add rsp, 0x10; pop rbp; ret; 
0x0000000000473988: je 0x73996; mov rcx, qword ptr [rsp + 0x20]; mov dword ptr [rcx + 0x2c], 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004744d0: je 0x744e1; lea rax, [rip + 0x25c8d]; mov ebx, 0x20; pop rbp; nop; ret; 
0x0000000000475a6a: je 0x75a90; sub byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004760dc: je 0x76102; mov byte ptr [rsi + 0xe], dl; add rsp, 0x38; pop rbp; ret; 
0x0000000000476746: je 0x76751; mov rbx, qword ptr [rax + 0x18]; call 0x752a0; add rsp, 0x60; pop rbp; ret; 
0x00000000004769c9: je 0x769d3; sub rbx, rdx; call 0x752a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000477b0e: je 0x77b15; call 0x6e920; add rsp, 0x20; pop rbp; ret; 
0x000000000047c2bf: je 0x7c2e5; js 0x7c30b; mov esi, dword ptr [rsi + 0xf8]; mov rax, qword ptr [rsp + 0x108]; call rsi; 
0x0000000000408ca3: je 0x8c5b; mov rcx, qword ptr [rip + 0x957bc]; mov rax, rsi; lea rdx, [rip + 0x957b2]; call rcx; 
0x0000000000409250: je 0x9261; xor eax, eax; add rsp, 0x38; pop rbp; ret; 
0x0000000000409597: je 0x95a6; test rdi, rdi; jne 0x957d; xchg qword ptr [r8], rbx; inc qword ptr [rax + 8]; ret; 
0x000000000040a06f: je 0xa07c; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x000000000040a0f3: je 0xa0e3; mov qword ptr [rsp + 8], rdx; mov rcx, qword ptr [rax]; mov rdx, rax; mov rax, rbx; call rcx; 
0x000000000040a1e2: je 0xa1c7; add rsp, 0x30; pop rbp; ret; 
0x000000000040a457: je 0xa47d; and bl, ch; add rsp, 0x30; pop rbp; ret; 
0x000000000040a524: je 0xa50d; add rsp, 0x30; pop rbp; ret; 
0x000000000040a549: je 0xa52c; add rsp, 0x30; pop rbp; ret; 
0x000000000040a607: je 0xa611; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x10; pop rbp; ret; 
0x000000000040bbba: je 0xbbc4; mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x58; pop rbp; ret; 
0x0000000000414335: jg 0x1433d; add rsp, 0x20; pop rbp; ret; 
0x0000000000415ad9: jg 0x15ae6; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x00000000004172ed: jg 0x172b0; add rsp, 0x10; pop rbp; ret; 
0x000000000041d7c6: jg 0x1d810; add esp, 0x20; pop rbp; ret; 
0x000000000042c336: jg 0x2c33e; add rsp, 0x18; pop rbp; ret; 
0x0000000000433b9a: jg 0x33bae; lea rax, [rip + 0x6a835]; call 0x5b0a0; add rsp, 8; pop rbp; ret; 
0x000000000043b48b: jg 0x3b49b; add al, ch; sub eax, 0x48fffcf1; add esp, 0x10; pop rbp; ret; 
0x00000000004421a0: jg 0x421ab; add rsp, 0x88; pop rbp; ret; 
0x00000000004495c4: jg 0x495ad; mov dword ptr [rip + 0xcfb8c], ebx; ret; 
0x000000000044a988: jg 0x4a95a; cmp rdi, rsi; jae 0x4a950; xor eax, eax; xor ebx, ebx; ret; 
0x0000000000452e41: jg 0x52e43; add byte ptr [rax], al; add rsp, 0x300; pop rbp; ret; 
0x000000000045808c: jg 0x5809b; mov rax, qword ptr [rsp + 0x28]; xor ebx, ebx; add rsp, 0x38; pop rbp; ret; 
0x000000000045cd56: jg 0x5cd60; sub rdi, rdx; mov qword ptr [rsp + 0x28], rdi; mov rdi, rbx; mov rcx, rbx; call rax; 
0x000000000045d600: jg 0x5d612; movups xmmword ptr [rdi + 0x20], xmm15; movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d605: jg 0x5d627; movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d60a: jg 0x5d63c; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d60e: jg 0x5d650; ret; 
0x000000000045dbfa: jg 0x5dc0c; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045dbe7: jg 0x5dc28; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045dbf4: jg 0x5dc35; movdqu xmmword ptr [rdi + 0x10], xmm15; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045dc20: jg 0x5dc52; movdqu xmmword ptr [rdi + rbx - 0x40], xmm15; movdqu xmmword ptr [rdi + rbx - 0x30], xmm15; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045dbf9: jg 0x5dc7a; adc bl, dh; movq qword ptr [rdi + rbx - 0x20], mm7; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045de0d: jg 0x5de16; movdqu xmmword ptr [rdi + rbx - 0x10], xmm1; ret; 
0x000000000045de2d: jg 0x5de36; movdqu xmmword ptr [rdi + 0x10], xmm1; movdqu xmmword ptr [rdi + rbx - 0x20], xmm2; movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000045de31: jg 0x5de82; adc bl, dh; movq qword ptr [rdi + rbx - 0x20], mm2; movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000045e12f: jg 0x5e17c; sal bl, 0x44; movq qword ptr [rbx - 0x30], mm2; movdqu xmmword ptr [rbx - 0x20], xmm11; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e135: jg 0x5e18a; sal bl, 1; movq qword ptr [rbx - 0x20], mm3; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e20b: jg 0x5e256; sal bl, 0x44; movq qword ptr [rcx - 0x30], mm2; movdqu xmmword ptr [rcx - 0x20], xmm11; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000045e211: jg 0x5e264; sal bl, 1; movq qword ptr [rcx - 0x20], mm3; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000045e2dd: jg 0x5e327; movdqu xmmword ptr [rax + 0x50], xmm10; movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000045e2e3: jg 0x5e335; push rax; movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000045e369: jg 0x5e3b3; movdqu xmmword ptr [rax + 0x50], xmm10; movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000045e36f: jg 0x5e3c1; push rax; movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000464757: jg 0x64725; add rsp, 0x78; pop rbp; ret; 
0x0000000000464fc4: jg 0x65018; jl 0x64feb; add rsp, 0x18; pop rbp; ret; 
0x0000000000465f34: jg 0x65f3f; add rsp, 0x690; pop rbp; ret; 
0x000000000047341c: jg 0x7341e; cmp r9, 1; sete al; add rsp, 0x18; pop rbp; ret; 
0x000000000040aaf9: jg 0xab08; lea rax, [rip + 0x8aec6]; mov ebx, 8; ret; 
0x000000000040ac89: jg 0xacd3; lea ecx, [rip + 0x146257]; xchg qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000041035f: jge 0x10374; adc al, 0; add rsp, 0x58; pop rbp; ret; 
0x00000000004413ed: jge 0x4140b; mov qword ptr [rsp + 8], rcx; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x0000000000454683: jge 0x5468b; add rsp, 0x30; pop rbp; ret; 
0x0000000000463bb8: jge 0x63bc7; mov rax, -1; add rsp, 0x78; pop rbp; ret; 
0x000000000041578d: jl 0x157b3; sbb byte ptr [rax - 0x77], cl; clc; add rsp, 0x28; pop rbp; ret; 
0x000000000041cd16: jl 0x1cd3c; and cl, ch; ret 0xfffb; 
0x0000000000422274: jl 0x2229a; jo 0x222a9; imul bl; and eax, 0x48c48348; pop rbp; ret; 
0x0000000000423c5c: jl 0x23ca6; add eax, 0x16848; call 0x15740; add rsp, 0x20; pop rbp; ret; 
0x000000000042c708: jl 0x2c6de; add rax, 0x1268; call 0x2c600; add rsp, 0x38; pop rbp; ret; 
0x000000000042d55d: jl 0x2d583; pop rsp; or byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000042d6c6: jl 0x2d6ec; xor byte ptr [rax - 0x77], cl; ret 0xb848; 
0x000000000042d783: jl 0x2d78b; add rsp, 0x48; pop rbp; ret; 
0x0000000000402d56: jl 0x2d7c; and cl, ch; ret 0xfffd; 
0x000000000042db78: jl 0x2db82; xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x000000000042e733: jl 0x2e759; sbb byte ptr [rax], al; je 0x2e742; add rsp, 0xc0; pop rbp; ret; 
0x000000000043469d: jl 0x346c3; or byte ptr [rax + 0x48c28948], dl; mov eax, esi; call rcx; 
0x0000000000434b78: jl 0x34b81; add rsp, 0x18; pop rbp; nop; ret; 
0x0000000000439cd7: jl 0x39ce4; call 0x38040; add rsp, 0x10; pop rbp; ret; 
0x000000000043b9bb: jl 0x3b9e1; lldt word ptr [rax - 0x3fcef78b]; add rsp, 0x38; pop rbp; ret; 
0x000000000044aab2: jl 0x4aae5; sal byte ptr [rcx], 0xdb; add rsp, 0x18; pop rbp; ret; 
0x000000000044aae3: jl 0x4aaeb; add rsp, 0x18; pop rbp; ret; 
0x000000000044ab0c: jl 0x4ab14; add rsp, 0x18; pop rbp; ret; 
0x000000000044cdf1: jl 0x4ce17; xor al, 0x39; test dword ptr [rdi], 0x8948fe4c; ret 0x8948; 
0x0000000000452ec7: jl 0x52e4e; add rsp, 0x300; pop rbp; ret; 
0x00000000004553c3: jl 0x5540d; add esp, 0x48; pop rbp; ret; 
0x000000000045dc26: jl 0x5dc47; sal bl, 0x44; movq qword ptr [rdi + rbx - 0x30], mm7; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045dc2d: jl 0x5dc4e; sal bl, 1; movq qword ptr [rdi + rbx - 0x20], mm7; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045dc8e: jl 0x5dcaf; sal bl, 0x44; movq qword ptr [rdi + rbx - 0x30], mm7; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045dc95: jl 0x5dcb6; sal bl, 1; movq qword ptr [rdi + rbx - 0x20], mm7; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045e5bf: jl 0x5e5e5; and byte ptr [rax - 0x75], cl; insb byte ptr [rdi], dx; and al, 0x28; add rsp, 0x30; ret; 
0x000000000045e5e1: jl 0x5e607; or byte ptr [rax + 0xe7], bh; syscall; 
0x000000000045e5e1: jl 0x5e607; or byte ptr [rax + 0xe7], bh; syscall; ret; 
0x000000000045e661: jl 0x5e687; or byte ptr [rax + 3], bh; syscall; 
0x000000000045e6c2: jl 0x5e6e8; adc byte ptr [rbx - 0x47f7db8c], cl; and eax, 0xf000001; add eax, 0x18244489; ret; 
0x000000000045e801: jl 0x5e827; or byte ptr [rbx + 0x480c2474], cl; mov edx, dword ptr [rsp + 0x10]; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x000000000045e821: jl 0x5e847; or byte ptr [rax + 0xe2], bh; syscall; 
0x000000000045e821: jl 0x5e847; or byte ptr [rax + 0xe2], bh; syscall; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000045ea5f: jl 0x5ea85; and byte ptr [rax - 0x75], cl; insb byte ptr [rdi], dx; and al, 0x28; add rsp, 0x30; ret; 
0x000000000045eb20: jl 0x5eb5d; or al, 0; lea r8, [rip + 0xf2095]; lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000045eca2: jl 0x5ecc8; or byte ptr [rax - 0x75], cl; je 0x5eccd; adc byte ptr [rbx + 0x48182454], cl; mov eax, 0x1c; syscall; 
0x000000000045ed01: jl 0x5ed27; or byte ptr [rax - 0x75], cl; je 0x5ed2c; adc byte ptr [rax - 0x39], cl; ret 0; 
0x00000000004613c9: jl 0x613ef; xor byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x00000000004647fb: jl 0x647c2; add rsp, 0x78; pop rbp; ret; 
0x000000000046492a: jl 0x648e7; add rsp, 0x60; pop rbp; ret; 
0x0000000000464fc6: jl 0x64feb; add rsp, 0x18; pop rbp; ret; 
0x0000000000469a92: jl 0x69aa2; cmp eax, 0xad; setne al; add rsp, 0x10; pop rbp; ret; 
0x0000000000471103: jl 0x71121; jle 0x71115; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x0000000000475e10: jl 0x75e36; sub byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x0000000000476738: jl 0x76762; inc dword ptr [rbp + 0x31]; jmp qword ptr [rsi - 0x70]; 
0x000000000040aaf0: jl 0xaafb; cmp qword ptr [rip + 0x113f8f], rax; jg 0xab08; lea rax, [rip + 0x8aec6]; mov ebx, 8; ret; 
0x000000000040c887: jl 0xc8ad; xor byte ptr [rax - 0x77], cl; clc; add rsp, 0x40; pop rbp; ret; 
0x000000000041c8b3: jle 0x1c87d; nop; xchg qword ptr [rcx + 0x100], rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000403468: jle 0x3469; add rdi, rcx; sub rdi, r10; mov qword ptr [r11], rdi; ret; 
0x000000000044ad03: jle 0x4ad08; out 0x48, eax; xor ecx, eax; mul rcx; xor rax, rdx; ret; 
0x000000000045262e: jle 0x52661; movzx edx, byte ptr [rdx + 0x14]; cmp al, dl; jae 0x5263e; mov eax, 1; ret; 
0x0000000000455103: jle 0x55105; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x40]; add rsp, 0x48; pop rbp; ret; 
0x00000000004563ad: jle 0x563e0; ror byte ptr [rax - 0x7f], 0xc4; and byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000456ca3: jle 0x56db2; lea rbx, [rcx + 2]; add rsp, 0x10; pop rbp; ret; 
0x000000000045a3cb: jle 0x5a395; ret; 
0x000000000045a3ee: jle 0x5a3b0; ret; 
0x000000000045a43b: jle 0x5a40d; ret; 
0x000000000045a4dd: jle 0x5a4bf; ret; 
0x000000000045a669: jle 0x5a62b; ret; 
0x000000000045a897: jle 0x5a859; ret; 
0x000000000045b3dc: jle 0x5b38a; and al, 0xb0; add byte ptr [rax], al; add bl, dh; movd dword ptr [r12 + 0xb8], mm6; ret; 
0x000000000045ced2: jle 0x5ce94; ret; 
0x000000000045cf13: jle 0x5ced5; ret; 
0x0000000000471105: jle 0x71115; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x00000000004717ec: jle 0x717fc; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x00000000004303c0: jmp qword ptr [rax]; 
0x0000000000465433: jmp qword ptr [rbp + 0x75]; 
0x0000000000477257: jmp qword ptr [rbp + 0xf]; 
0x0000000000478493: jmp qword ptr [rbx + 0xf]; 
0x00000000004206dd: jmp qword ptr [rbx]; 
0x000000000043bdce: jmp qword ptr [rcx]; 
0x0000000000465446: jmp qword ptr [rdi + 0x75]; 
0x0000000000475af5: jmp qword ptr [rdi]; 
0x0000000000475f77: jmp qword ptr [rdx + 0x4d]; 
0x00000000004784d0: jmp qword ptr [rdx + 0x74]; 
0x000000000046536c: jmp qword ptr [rdx + 0xf]; 
0x0000000000408966: jmp qword ptr [rsi + 0x41]; 
0x000000000045a5ad: jmp qword ptr [rsi + 0x45]; 
0x000000000040357e: jmp qword ptr [rsi + 0x48]; 
0x000000000045a665: jmp qword ptr [rsi + 0x4c]; 
0x000000000041c4cf: jmp qword ptr [rsi + 0xf]; 
0x000000000040ab9d: jmp qword ptr [rsi - 0x70]; 
0x00000000004031a1: jmp qword ptr [rsi - 0x75]; 
0x0000000000446ff1: jmp qword ptr [rsi - 0x77]; 
0x000000000047b3b2: jmp qword ptr [rsi]; 
0x000000000045b411: jmp rax; 
0x000000000045a29e: jmp rbx; 
0x000000000045b1a8: jmp rdi; 
0x000000000042da6a: jmp rsi; 
0x000000000041027d: jne 0x1028c; lea rax, [rip + 0x14145a]; add rsp, 0x58; pop rbp; ret; 
0x000000000040106c: jne 0x1073; mov rax, qword ptr [rax + 0x40]; ret; 
0x00000000004115c5: jne 0x115aa; xor ecx, ecx; mov rsi, rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000401159: jne 0x1165; mov rax, qword ptr [rax + 0x40]; add rsp, 8; pop rbp; ret; 
0x0000000000412926: jne 0x1292e; add rsp, 0x38; pop rbp; ret; 
0x0000000000413c7a: jne 0x13c89; mov byte ptr [rip + 0x13c78e], 0; add rsp, 0x10; pop rbp; ret; 
0x00000000004142b9: jne 0x142c1; add rsp, 0x20; pop rbp; ret; 
0x00000000004142b4: jne 0x142c1; test rbx, rbx; jne 0x142c1; add rsp, 0x20; pop rbp; ret; 
0x000000000041436c: jne 0x14374; add rsp, 0x20; pop rbp; ret; 
0x0000000000414367: jne 0x14374; test rbx, rbx; jne 0x14374; add rsp, 0x20; pop rbp; ret; 
0x00000000004144ed: jne 0x144f5; add rsp, 0x20; pop rbp; ret; 
0x00000000004145b4: jne 0x145bc; add rsp, 0x38; pop rbp; ret; 
0x00000000004145af: jne 0x145bc; test rbx, rbx; jne 0x145bc; add rsp, 0x38; pop rbp; ret; 
0x00000000004188b5: jne 0x188bd; add rsp, 0x10; pop rbp; ret; 
0x0000000000401978: jne 0x1984; mov ecx, dword ptr [rax + 8]; cmp dword ptr [rbx + 8], ecx; sete al; ret; 
0x0000000000419de2: jne 0x19df5; mov qword ptr [rax + 0x190], 0; add rsp, 0x58; pop rbp; ret; 
0x000000000041a5c3: jne 0x1a5d0; xor eax, eax; add rsp, 0x328; pop rbp; ret; 
0x000000000041a859: jne 0x1a869; mov rax, qword ptr [rsp + 0x40]; add rsp, 0x328; pop rbp; ret; 
0x000000000041d731: jne 0x1d73e; mov eax, 0xffffffff; add rsp, 0x10; pop rbp; ret; 
0x000000000041d74b: jne 0x1d757; test bl, bl; je 0x1d757; add rsp, 0x10; pop rbp; ret; 
0x0000000000420beb: jne 0x20bc1; add rsp, 0x28; pop rbp; ret; 
0x00000000004220c8: jne 0x220cf; call 0x22720; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rcx + 8], rax; pop rbp; ret; 
0x00000000004221c3: jne 0x221d1; lea rax, [rip + 0x12ed14]; call 0x1cd20; add rsp, 0x18; pop rbp; ret; 
0x0000000000422357: jne 0x22365; lea rax, [rip + 0x12eb80]; call 0x1cd20; add rsp, 0x48; pop rbp; ret; 
0x00000000004226f3: jne 0x226fb; add rsp, 0x10; pop rbp; ret; 
0x0000000000422df2: jne 0x22d8e; add rsp, 0x38; pop rbp; ret; 
0x0000000000429aa7: jne 0x29aa9; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000042a44d: jne 0x2a3e9; add rsp, 0x20; pop rbp; ret; 
0x000000000042b38d: jne 0x2b395; add rsp, 0x10; pop rbp; ret; 
0x000000000042d2bb: jne 0x2d2c9; add rsp, 0x20; pop rbp; ret; 
0x000000000042da3c: jne 0x2da44; add rsp, 0x60; pop rbp; ret; 
0x000000000042ed2d: jne 0x2ed35; add rsp, 0x10; pop rbp; ret; 
0x000000000042edac: jne 0x2edb4; add rsp, 0x10; pop rbp; ret; 
0x0000000000430ddb: jne 0x30dea; mov byte ptr [rcx + 0x30], 1; mov rax, qword ptr [rcx + 8]; mov rbx, qword ptr [rcx + 0x10]; ret; 
0x0000000000403143: jne 0x314d; mov rax, 1; ret; 
0x0000000000403163: jne 0x316d; mov rax, 1; ret; 
0x000000000043188e: jne 0x318a2; cmp byte ptr [r14 + 0xb1], 0; je 0x318a2; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x00000000004318e3: jne 0x318f7; cmp byte ptr [r14 + 0xb1], 0; je 0x318f7; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x0000000000431925: jne 0x31939; cmp byte ptr [r14 + 0xb1], 0; je 0x31939; mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x000000000043194f: jne 0x31963; cmp byte ptr [r14 + 0xb1], 0; je 0x31963; mov qword ptr [r14 + 0x10], -0x522; mov eax, 1; ret; 
0x0000000000433829: jne 0x3384c; mov rax, qword ptr [rip + 0x6aa6e]; lea rdx, [rip + 0x6aa67]; call rax; 
0x0000000000403518: jne 0x3522; mov qword ptr [r8], -1; ret; 
0x00000000004035b6: jne 0x35c3; vzeroupper; mov qword ptr [r8], -1; ret; 
0x0000000000436064: jne 0x3606c; add rsp, 0x58; pop rbp; ret; 
0x000000000043702d: jne 0x37034; call 0x37060; add rsp, 8; pop rbp; ret; 
0x0000000000438073: jne 0x3807b; add rsp, 0x20; pop rbp; ret; 
0x0000000000439497: jne 0x394a1; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004394a7: jne 0x394b1; add byte ptr [rax], al; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000439d49: jne 0x39d4d; add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x000000000043a231: jne 0x3a065; call 0x385c0; add rsp, 0x28; pop rbp; ret; 
0x000000000043b9c0: jne 0x3b9ca; xor eax, eax; add rsp, 0x38; pop rbp; ret; 
0x000000000043c34f: jne 0x3c35c; xor eax, eax; add rsp, 0x210; pop rbp; ret; 
0x000000000043cd39: jne 0x3cd44; add rsp, 0x3a0; pop rbp; ret; 
0x000000000043e751: jne 0x3e75b; mov rax, qword ptr [rsp + 0x20]; inc qword ptr [rax]; add rsp, 0x28; pop rbp; ret; 
0x000000000044190e: jne 0x41916; add rsp, 0x10; pop rbp; ret; 
0x0000000000404347: jne 0x434f; add rsp, 0x10; pop rbp; ret; 
0x000000000044412d: jne 0x44135; add rsp, 0x50; pop rbp; ret; 
0x0000000000445d2a: jne 0x45d34; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x00000000004492c3: jne 0x492cb; add rsp, 0x10; pop rbp; ret; 
0x000000000044ca2c: jne 0x4c9fc; mov eax, dword ptr [rdi + r9 + 0xc]; xor ebx, ebx; add rsp, 0xb0; pop rbp; ret; 
0x000000000044ce54: jne 0x4cdec; mov eax, dword ptr [rsp + 0x34]; add rsp, 0x68; pop rbp; nop; ret; 
0x0000000000404d78: jne 0x4d82; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x00000000004508f4: jne 0x508fc; add rsp, 0x30; pop rbp; ret; 
0x0000000000451b57: jne 0x51b5f; add rsp, 0x30; pop rbp; ret; 
0x0000000000451d6e: jne 0x51d5f; add rsp, 0x28; pop rbp; ret; 
0x0000000000452df5: jne 0x52e0e; mov rcx, qword ptr [rsp + 0x2c8]; mov eax, 1; lea rdx, [rsp + 0x2c8]; call rcx; 
0x000000000045394c: jne 0x5395c; cmp qword ptr [rsi], 0; jne 0x5395c; xor eax, eax; mov ebx, 1; ret; 
0x0000000000453952: jne 0x5395c; xor eax, eax; mov ebx, 1; ret; 
0x0000000000454098: jne 0x540a5; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x00000000004541d9: jne 0x541e6; mov eax, 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000454917: jne 0x5491f; mov eax, 0x21; ret; 
0x0000000000454976: jne 0x54981; xor eax, eax; add rsp, 0x10; pop rbp; nop; ret; 
0x0000000000454a99: jne 0x54a49; add rsp, 0x60; pop rbp; ret; 
0x0000000000454cc3: jne 0x54b46; xor eax, eax; add rsp, 0x58; pop rbp; ret; 
0x0000000000454f88: jne 0x54f99; mov rax, qword ptr [rax + 0x30]; call 0x1220; add rsp, 0x10; pop rbp; ret; 
0x000000000045601c: jne 0x56029; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x0000000000456851: jne 0x567ef; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x0000000000456989: jne 0x5693e; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x0000000000457813: jne 0x5781d; xor eax, eax; add rsp, 0x70; pop rbp; ret; 
0x0000000000457dca: jne 0x57dd5; add rsp, 0x88; pop rbp; ret; 
0x0000000000457fc3: jne 0x57fd3; mov rax, rbx; call 0x1dfa0; add rsp, 0x18; pop rbp; ret; 
0x00000000004592a4: jne 0x592ad; nop; xor ecx, ecx; xchg qword ptr [rax + 0x28], rcx; xor eax, eax; ret; 
0x00000000004599a3: jne 0x599ab; mov eax, 1; ret; 
0x000000000045999a: jne 0x599ab; nop dword ptr [rax]; test rsi, rsi; jne 0x599ab; mov eax, 1; ret; 
0x000000000045a036: jne 0x5a03e; add rsp, 0x10; pop rbp; ret; 
0x000000000045a183: jne 0x5a18f; xor eax, eax; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000045ccc9: jne 0x5ccc4; ret; 
0x000000000045ce27: jne 0x5ce39; rdtscp; shl rdx, 0x20; add rax, rdx; mov qword ptr [rsp + 8], rax; ret; 
0x000000000045eb1b: jne 0x5eafb; mov rcx, qword ptr [rip + 0xc3b7c]; lea r8, [rip + 0xf2095]; lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000045eae2: jne 0x5eafb; mov rcx, qword ptr [rip + 0xc3bb5]; lea r9, [rip - 0xf2]; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x000000000045f738: jne 0x5f746; mov rcx, qword ptr [rbx + 0x18]; cmp qword ptr [rax + 0x18], rcx; sete al; ret; 
0x000000000045f804: jne 0x5f812; mov rcx, qword ptr [rax + 8]; cmp qword ptr [rbx + 8], rcx; sete al; ret; 
0x000000000045fbe6: jne 0x5fbf4; mov rcx, qword ptr [rax + 8]; cmp qword ptr [rbx + 8], rcx; sete al; ret; 
0x000000000045fc30: jne 0x5fc3d; movzx ecx, byte ptr [rax + 0xa]; cmp byte ptr [rbx + 0xa], cl; sete al; ret; 
0x000000000045fcb9: jne 0x5fcc6; movzx ecx, byte ptr [rax + 0x11]; cmp byte ptr [rbx + 0x11], cl; sete al; ret; 
0x000000000045fcf6: jne 0x5fd04; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x000000000045fd66: jne 0x5fd72; mov ecx, dword ptr [rax + 8]; cmp dword ptr [rbx + 8], ecx; sete al; ret; 
0x000000000045fe99: jne 0x5fea7; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x000000000045ff8d: jne 0x5ff9a; movzx ecx, byte ptr [rax + 5]; cmp byte ptr [rbx + 5], cl; sete al; ret; 
0x000000000045ffb9: jne 0x5ffc7; mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x00000000004600b3: jne 0x600c1; movzx ecx, byte ptr [rax + 0x31]; cmp byte ptr [rbx + 0x31], cl; sete al; nop; ret; 
0x0000000000461787: jne 0x61795; mov rax, qword ptr [rdx + 8]; mov ecx, 1; xchg dword ptr [rax], ecx; ret; 
0x0000000000463629: jne 0x635eb; mov rax, rcx; add rsp, 0x30; pop rbp; ret; 
0x000000000046734c: jne 0x67359; movups xmmword ptr [rax + 0x18], xmm15; add rsp, 0x38; pop rbp; ret; 
0x00000000004675e3: jne 0x675f0; movups xmmword ptr [rax + 0x18], xmm15; add rsp, 0x40; pop rbp; ret; 
0x00000000004067f7: jne 0x67ff; add rsp, 0x10; pop rbp; ret; 
0x000000000046a53d: jne 0x6a551; mov rbx, qword ptr [rbx + 0x30]; call 0x6a420; add rsp, 0x100; pop rbp; ret; 
0x000000000046a662: jne 0x6a604; xor eax, eax; add rsp, 0x100; pop rbp; ret; 
0x0000000000406b64: jne 0x6b6c; add rsp, 0x48; pop rbp; ret; 
0x0000000000406b5c: jne 0x6b6c; cmp word ptr [rax + 0xc], 0x3633; jne 0x6b6c; add rsp, 0x48; pop rbp; ret; 
0x000000000046bcb9: jne 0x6bcc5; mov rax, qword ptr [rax + 0x40]; add rsp, 8; pop rbp; ret; 
0x000000000046bf79: jne 0x6bf85; mov rax, qword ptr [rax + 0x40]; add rsp, 0x28; pop rbp; ret; 
0x000000000046c004: jne 0x6c018; lea rax, [rip + 0x294d3]; mov ebx, 4; add rsp, 0x28; pop rbp; ret; 
0x000000000046d344: jne 0x6d34c; add rsp, 0x28; pop rbp; ret; 
0x000000000046ef44: jne 0x6ef50; mov rax, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x000000000046f124: jne 0x6f130; mov rax, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x000000000046f456: jne 0x6f45e; add rsp, 0x28; pop rbp; ret; 
0x000000000046f644: jne 0x6f650; mov rax, qword ptr [rax + 0x40]; add rsp, 0x28; pop rbp; ret; 
0x000000000046fb84: jne 0x6fb93; mov rax, qword ptr [rbx]; mov rbx, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x000000000046ff76: jne 0x6ff30; xor eax, eax; add rsp, 0x48; pop rbp; nop; ret; 
0x000000000046fff9: jne 0x6ff8c; xor eax, eax; add rsp, 0x48; pop rbp; ret; 
0x00000000004706ba: jne 0x706c8; movzx ecx, word ptr [rbx + 0x18]; cmp word ptr [rax + 0x18], cx; sete al; ret; 
0x00000000004731cf: jne 0x7319a; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x00000000004734a9: jne 0x734b9; mov rax, rbx; call 0x739e0; add rsp, 0x10; pop rbp; ret; 
0x0000000000479c7d: jne 0x79cc0; mov rcx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x180]; call rcx; 
0x0000000000479d7d: jne 0x79dc0; mov rcx, qword ptr [rsp + 0x30]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x178]; call rcx; 
0x00000000004093f3: jne 0x93d6; cmp qword ptr [r8 + 8], rcx; jne 0x93d6; mov rax, r8; ret; 
0x00000000004093f9: jne 0x93d6; mov rax, r8; ret; 
0x000000000040959c: jne 0x957d; xchg qword ptr [r8], rbx; inc qword ptr [rax + 8]; ret; 
0x0000000000409f16: jne 0x9f21; mov rax, rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000040a32b: jne 0xa333; add rsp, 0x20; pop rbp; ret; 
0x000000000040a9e2: jne 0xa9ef; call 0xa800; add rsp, 0x10; pop rbp; ret; 
0x00000000004156c4: jno 0x156fe; mov byte ptr [rcx + 0x40], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045afeb: jno 0x5afed; add byte ptr [rax], al; call 0x5cde0; ret; 
0x00000000004647c8: jno 0x647cb; mov qword ptr [rsp + 0x68], rsi; mov rax, rbx; mov rbx, rcx; mov rcx, rsi; call rdx; 
0x0000000000410a5a: jnp 0x10a68; mov rax, rsi; mov rbx, rdi; call rcx; 
0x0000000000411ec1: jnp 0x11ec5; add byte ptr [rax], al; add rsp, 0x48; pop rbp; ret; 
0x0000000000421f85: jnp 0x21f99; add byte ptr [rax + 0x29], cl; retf 0x3948; ret 0x2b7d; 
0x0000000000435e21: jnp 0x35df3; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000436341: jnp 0x36344; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000403641: jnp 0x3643; add byte ptr [rax], al; mov rbx, rcx; add rsp, 0x40; pop rbp; ret; 
0x00000000004414ab: jnp 0x414b5; mov rax, rsi; mov rbx, rdi; call rcx; 
0x0000000000404541: jnp 0x45a3; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000046bf21: jnp 0x6bf01; stc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000478148: jnp 0x78149; dec dword ptr [rax - 0x77]; ror dword ptr [rax - 0x77], 0xda; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rdx; call rcx; 
0x000000000047a861: jnp 0x7a863; add byte ptr [rax], al; add rsp, 0x90; pop rbp; ret; 
0x000000000040d287: jnp 0xd295; mov rax, rcx; mov rbx, rdi; call rsi; 
0x000000000040d47d: jnp 0xd48b; mov rax, rcx; mov rbx, rdi; call rsi; 
0x000000000040d688: jnp 0xd696; mov rax, rcx; mov rbx, rdi; call rsi; 
0x000000000040e0b2: jnp 0xe0c0; mov rax, r12; mov rbx, rdi; call rcx; 
0x000000000040f496: jnp 0xf4a4; mov rax, rsi; mov rbx, rdi; nop; call rcx; 
0x000000000040f761: jnp 0xf782; adc al, 0; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000040fdb6: jnp 0xfdc4; mov rax, rsi; mov rbx, rdi; nop; call rcx; 
0x0000000000450048: jnp 0xffffffffc1864867; fcom dword ptr [rcx]; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000443688: jns 0x43692; mov dword ptr [rcx + 0x30], 0; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x000000000045f069: jns 0x5f06e; add byte ptr [rcx + 0xf], bh; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000046fc23: jns 0x6fc25; add byte ptr [rax], al; mov rcx, qword ptr [rax + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000472f5b: jns 0x72f55; or al, byte ptr [rax]; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xaf86e], rcx; pop rbp; ret; 
0x0000000000477980: jns 0x77992; mov rsi, rax; mov rax, qword ptr [rsp + 0x58]; mov rcx, rdx; call rsi; 
0x0000000000477a60: jns 0x77a72; mov rsi, rax; mov rax, qword ptr [rsp + 0x58]; mov rcx, rdx; call rsi; 
0x0000000000409a43: jns 0x9a50; add byte ptr [rax], al; add rsp, 0x38; pop rbp; ret; 
0x00000000004157e0: jo 0x157f2; mov rax, rsi; call rcx; 
0x000000000041bb9e: jo 0x1bbe8; mov dword ptr [rsi + 0x10], eax; add rsp, 0x40; pop rbp; ret; 
0x000000000041e0a1: jo 0x1e0eb; mov edx, dword ptr [rcx + 0x80]; mov rbx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; call rbx; 
0x000000000041e1bb: jo 0x1e205; add esp, 0x60; pop rbp; ret; 
0x000000000041e245: jo 0x1e28f; mov eax, ecx; call 0x1e2a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000422276: jo 0x222a9; imul bl; and eax, 0x48c48348; pop rbp; ret; 
0x0000000000426128: jo 0x26187; ret; 
0x0000000000427f94: jo 0x27ff3; ret; 
0x000000000042a616: jo 0x2a619; add byte ptr [rax], al; pop rbp; ret; 
0x000000000042b0b0: jo 0x2b10f; ret; 
0x000000000042bef8: jo 0x2bf42; xchg dword ptr [rax], ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000042d065: jo 0x2d0c4; ret; 
0x0000000000431834: jo 0x31893; ret; 
0x00000000004324d0: jo 0x3252f; ret; 
0x000000000043267a: jo 0x326d9; ret; 
0x00000000004326ba: jo 0x32719; ret; 
0x00000000004326cd: jo 0x3272c; ret; 
0x00000000004326f0: jo 0x3274f; ret; 
0x00000000004326fa: jo 0x32759; ret; 
0x0000000000432704: jo 0x32763; ret; 
0x000000000043270e: jo 0x3276d; ret; 
0x0000000000432718: jo 0x32777; ret; 
0x0000000000432722: jo 0x32781; ret; 
0x0000000000447188: jo 0x4718e; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x00000000004472b9: jo 0x472bf; add byte ptr [rax], al; add rsp, 0x38; pop rbp; ret; 
0x000000000044a62a: jo 0x4a689; ret; 
0x000000000045137f: jo 0x51390; xchg eax, esp; ret 0x2eb; 
0x0000000000453772: jo 0x537bc; add esp, 0x258; pop rbp; ret; 
0x00000000004538e4: jo 0x5392e; add esp, 0x258; pop rbp; ret; 
0x0000000000453d52: jo 0x53db1; ret; 
0x00000000004540ac: jo 0x540ae; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000454b4a: jo 0x54b94; mov eax, dword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000045770a: jo 0x5774d; call rcx; 
0x000000000045781a: jo 0x57879; ret; 
0x00000000004578b7: jo 0x57916; ret; 
0x00000000004578dd: jo 0x5793c; nop; ret; 
0x00000000004578e6: jo 0x57945; ret; 
0x000000000045a8ea: jo 0x5a949; ret; 
0x000000000045e528: jo 0x5e52b; add byte ptr [rax], al; popfq; pop rbp; ret; 
0x0000000000463fb8: jo 0x63fda; mov rdx, qword ptr [rdx + 0x18]; mov rax, rsi; call rdx; 
0x00000000004642e7: jo 0x64311; lea rcx, [rdx - 1]; mov qword ptr [rsp + 0x28], rcx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000464339: jo 0x6435b; lea rcx, [rdx - 1]; mov rax, rbx; mov rbx, rdx; call rsi; 
0x00000000004645e3: jo 0x64605; sub r9, rcx; dec r9; mov rax, rbx; mov rbx, r9; call rsi; 
0x0000000000464727: jo 0x64751; lea rcx, [rdx - 1]; mov qword ptr [rsp + 0x68], rcx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000466747: jo 0x667a6; ret; 
0x00000000004692e5: jo 0x69344; ret; 
0x0000000000469394: jo 0x693f3; ret; 
0x0000000000469440: jo 0x6949f; ret; 
0x0000000000469790: jo 0x697ef; ret; 
0x0000000000469d90: jo 0x69def; ret; 
0x0000000000469e41: jo 0x69ea0; ret; 
0x000000000046b978: jo 0x6b97c; add byte ptr [rax], al; pop rbp; ret; 
0x000000000046d780: jo 0x6d7df; ret; 
0x0000000000472af0: jo 0x72b3a; mov ebx, dword ptr [rsp + 0x68]; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x78; pop rbp; ret; 
0x00000000004730c4: jo 0x730c8; add byte ptr [rbx + 0x20], bh; ret; 
0x0000000000476b6f: jo 0x76bce; ret; 
0x0000000000476bb1: jo 0x76c10; ret; 
0x000000000047a2f0: jo 0x7a2f2; add byte ptr [rax], al; call 0x79120; add rsp, 0x90; pop rbp; ret; 
0x000000000040882d: jo 0x888c; ret; 
0x000000000040d8ec: jo 0xd936; mov ebx, ecx; call rdi; 
0x00000000004116ba: jp 0x11734; ja 0x116c4; add rsp, 0x68; pop rbp; ret; 
0x0000000000434699: jp 0x3469c; mov qword ptr [rsp + 8], rdi; nop; mov rdx, rax; mov rax, rsi; call rcx; 
0x0000000000447cc2: jp 0x47cfc; add byte ptr [rdx + rcx + 0x31], dh; shr bl, 0x15; sub rsp, -0x80; pop rbp; ret; 
0x0000000000458b67: jp 0x58b78; add byte ptr [rax - 0x73], cl; add eax, 0xffface6f; mov qword ptr [rip + 0xf7a58], rax; pop rbp; ret; 
0x0000000000410092: js 0x100dc; mov ebx, esi; call rcx; 
0x000000000041b6d9: js 0x1b738; ret; 
0x000000000041d72e: js 0x1d732; jne 0x1d73e; mov eax, 0xffffffff; add rsp, 0x10; pop rbp; ret; 
0x000000000041ec62: js 0x1ecc1; ret; 
0x000000000041ec8e: js 0x1eced; ret; 
0x00000000004226b0: js 0x226c2; add byte ptr [rsi + rax + 0x48], dh; add esp, 0x10; pop rbp; ret; 
0x00000000004226f0: js 0x22702; add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000000424269: js 0x242b3; add esp, 0x90; pop rbp; ret; 
0x000000000042920c: js 0x29192; add cl, byte ptr [rcx - 0x77]; ret 0x8141; 
0x000000000042fa34: js 0x2fa70; verw ax; ret; 
0x0000000000430624: js 0x305ef; add al, byte ptr [rax]; mov qword ptr [r11], rcx; mov qword ptr [rax + 0x28], 0; pop rbp; ret; 
0x000000000044967d: js 0x496dc; nop; ret; 
0x0000000000449734: js 0x49793; ret; 
0x000000000044979c: js 0x497fb; ret; 
0x000000000044cbef: js 0x4cbf7; add byte ptr [rbx + 1], bh; add rsp, 0x28; pop rbp; ret; 
0x000000000044cc01: js 0x4cc09; add byte ptr [rbx + 1], bh; add rsp, 0x28; pop rbp; ret; 
0x0000000000404cf0: js 0x4d2a; add byte ptr [rdi], cl; xchg eax, esp; ret 0x8eb; 
0x000000000044e288: js 0x4e2e7; ret; 
0x000000000044e4e9: js 0x4e548; ret; 
0x0000000000451fda: js 0x51fdd; add byte ptr [rax], al; pop rbp; nop; ret; 
0x000000000045f0e9: js 0x5f0ee; add byte ptr [rcx + 0xf], bh; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000045f1a9: js 0x5f1bc; mov rax, rdx; call 0x75e0; add rsp, 0x18; pop rbp; ret; 
0x0000000000463953: js 0x639b2; ret; 
0x000000000046398e: js 0x639ed; ret; 
0x00000000004639a9: js 0x63a08; ret; 
0x00000000004639b6: js 0x63a15; ret; 
0x00000000004639e3: js 0x63a42; ret; 
0x00000000004639eb: js 0x63a4a; ret; 
0x0000000000463bc4: js 0x63c23; ret; 
0x0000000000463bd7: js 0x63c36; ret; 
0x0000000000463be2: js 0x63c41; ret; 
0x0000000000463bef: js 0x63c4e; ret; 
0x0000000000463bfc: js 0x63c5b; ret; 
0x0000000000463e35: js 0x63e94; ret; 
0x0000000000463e42: js 0x63ea1; ret; 
0x0000000000463e4d: js 0x63eac; ret; 
0x0000000000463e5a: js 0x63eb9; ret; 
0x0000000000463e67: js 0x63ec6; ret; 
0x0000000000464070: js 0x64082; mov rax, rsi; call rdx; 
0x00000000004646b8: js 0x64717; ret; 
0x000000000046475c: js 0x647bb; ret; 
0x0000000000464800: js 0x6485f; ret; 
0x00000000004669ea: js 0x66a49; ret; 
0x00000000004671a9: js 0x67208; ret; 
0x0000000000467351: js 0x6736b; add rsp, 0x38; pop rbp; ret; 
0x00000000004675e8: js 0x67602; add rsp, 0x40; pop rbp; ret; 
0x0000000000467d87: js 0x67da1; add rsp, 0x88; pop rbp; ret; 
0x000000000046aaf0: js 0x6ab4f; ret; 
0x000000000046ac47: js 0x6aca6; ret; 
0x0000000000406b60: js 0x6b6e; xor esi, dword ptr [rsi]; jne 0x6b6c; add rsp, 0x48; pop rbp; ret; 
0x000000000046c9c4: js 0x6c9f7; imul bl; push rdi; sub rsp, -0x80; pop rbp; ret; 
0x000000000046d062: js 0x6d0c1; ret; 
0x000000000046d08f: js 0x6d0ee; ret; 
0x0000000000472afe: js 0x72b5d; ret; 
0x00000000004740b9: js 0x74103; mov dword ptr [rsp + 0x80], ebx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004740dd: js 0x74127; mov ecx, dword ptr [rsp + 0x80]; add rsp, 0xa0; pop rbp; ret; 
0x0000000000474330: js 0x7437a; mov dword ptr [rsp + 0x80], ecx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000047435c: js 0x743a6; add esp, 0xa0; pop rbp; ret; 
0x000000000047436f: js 0x743b9; mov dword ptr [rsp + 0x80], ecx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000474393: js 0x743dd; mov ecx, dword ptr [rsp + 0x80]; add rsp, 0xa0; pop rbp; ret; 
0x00000000004743ae: js 0x743f8; mov dword ptr [rsp + 0x80], ecx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004743d2: js 0x7441c; mov ecx, dword ptr [rsp + 0x80]; add rsp, 0xa0; pop rbp; ret; 
0x00000000004743fd: js 0x74447; mov ecx, dword ptr [rsp + 0x80]; add rsp, 0xa0; pop rbp; ret; 
0x0000000000479d8c: js 0x79d8f; add byte ptr [rax], al; call rcx; 
0x000000000047b45f: js 0x7b4aa; mov ecx, dword ptr [rcx + 0x48]; mov rax, rbx; call rcx; 
0x000000000047c2c1: js 0x7c30b; mov esi, dword ptr [rsi + 0xf8]; mov rax, qword ptr [rsp + 0x108]; call rsi; 
0x000000000047ca53: js 0x7cab2; ret; 
0x0000000000408f9f: js 0x9005; sbb eax, 0x3148a076; ret 0x8948; 
0x0000000000409000: js 0x9066; sbb eax, 0x3148a076; ret 0x8948; 
0x000000000040db16: js 0xdb75; ret; 
0x000000000045eb35: lahf; cmp ecx, dword ptr [rax + rax]; jmp rax; 
0x00000000004730c3: lahf; jo 0x730c8; add byte ptr [rbx + 0x20], bh; ret; 
0x000000000042a7ff: lahf; ret 0x8eb; 
0x0000000000469368: lcall [rax + rcx*2 - 1]; ret; 
0x000000000040ed27: lea eax, [rax + 0x28]; add rsp, 0x10; pop rbp; ret; 
0x000000000040eea9: lea eax, [rax + 0x28]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000429e7e: lea eax, [rax + 0x30]; add rsp, 0x10; pop rbp; ret; 
0x000000000040f79e: lea eax, [rax + 0x48]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000044111f: lea eax, [rax + 0x80]; call 0xa660; sub rsp, -0x80; pop rbp; ret; 
0x00000000004101c6: lea eax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x000000000042b5ee: lea eax, [rax + 1]; add rsp, 0x10; pop rbp; ret; 
0x0000000000463bd1: lea eax, [rax + 1]; add rsp, 0x78; pop rbp; ret; 
0x0000000000418dd7: lea eax, [rax + 2]; mov dword ptr [rip + 0x10a0d8], eax; pop rbp; ret; 
0x000000000046b68e: lea eax, [rax + rbx*8]; mov rbx, rdi; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x0000000000429e7a: lea eax, [rax + rcx*8]; lea rax, [rax + 0x30]; add rsp, 0x10; pop rbp; ret; 
0x0000000000418dd4: lea eax, [rax + rcx]; lea eax, [rax + 2]; mov dword ptr [rip + 0x10a0d8], eax; pop rbp; ret; 
0x0000000000463bcd: lea eax, [rax + rcx]; lea rax, [rax + 1]; add rsp, 0x78; pop rbp; ret; 
0x00000000004090a0: lea eax, [rax + rdx*8]; mov ecx, 1; lock xadd qword ptr [rax], rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000042b5ea: lea eax, [rax + rsi]; lea rax, [rax + 1]; add rsp, 0x10; pop rbp; ret; 
0x000000000046a175: lea eax, [rax - 0x30]; add rsp, 0xc8; pop rbp; ret; 
0x000000000046a3c8: lea eax, [rax - 0x30]; mov ebx, ecx; sub rsp, -0x80; pop rbp; ret; 
0x0000000000402e2e: lea eax, [rax*2 - 1]; ret; 
0x000000000045ed3a: lea eax, [rbp + 0x88]; add r8, 8; or rdi, 0x80000; mov eax, 0x38; syscall; 
0x000000000044137a: lea eax, [rbx + 0x80]; call 0xa660; add rsp, 8; pop rbp; ret; 
0x000000000042c25d: lea eax, [rcx + 1]; test eax, eax; je 0x2c26a; add rsp, 0x18; pop rbp; ret; 
0x0000000000402edb: lea eax, [rcx + rax*2 - 1]; ret; 
0x000000000043d2e7: lea eax, [rcx + rax*4]; not esi; lock and dword ptr [rax], esi; add rsp, 0x10; pop rbp; ret; 
0x000000000042983e: lea eax, [rcx + rax]; add rsp, 0x30; pop rbp; ret; 
0x00000000004101c2: lea eax, [rcx + rbx]; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x0000000000421157: lea eax, [rcx + rdx*8]; call 0x2bd80; xor eax, eax; add rsp, 0xf8; pop rbp; ret; 
0x0000000000402ae7: lea eax, [rcx + rdx]; and eax, 0x7f; ret; 
0x00000000004648f1: lea eax, [rcx + rdx]; lea r9, [rcx + rsi]; mov rax, rbx; mov rbx, r8; mov rcx, r9; call rdi; 
0x00000000004102a4: lea eax, [rcx + rdx]; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x000000000042df4d: lea eax, [rcx + rdx]; sar rax, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000418f13: lea eax, [rdx + 1]; mov qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000041b342: lea eax, [rdx + rcx]; add rsp, 0x20; pop rbp; ret; 
0x000000000040ed23: lea eax, [rdx + rcx]; lea rax, [rax + 0x28]; add rsp, 0x10; pop rbp; ret; 
0x000000000040eea5: lea eax, [rdx + rcx]; lea rax, [rax + 0x28]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000040f79a: lea eax, [rdx + rcx]; lea rax, [rax + 0x48]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000046a171: lea eax, [rdx + rcx]; lea rax, [rax - 0x30]; add rsp, 0xc8; pop rbp; ret; 
0x0000000000410247: lea eax, [rdx + rsi]; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x000000000046a3c4: lea eax, [rdx + rsi]; lea rax, [rax - 0x30]; mov ebx, ecx; sub rsp, -0x80; pop rbp; ret; 
0x0000000000451ca9: lea eax, [rdx - 1]; add rsp, 0x10; pop rbp; ret; 
0x000000000044f8ec: lea eax, [rdx - 2]; mov byte ptr [rcx], al; add rsp, 0x68; pop rbp; ret; 
0x0000000000422cbb: lea eax, [rip + 0x10016f]; call 0xa5c0; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000422a00: lea eax, [rip + 0x10039a]; call 0xa180; add rsp, 0x10; pop rbp; ret; 
0x00000000004229a0: lea eax, [rip + 0x100442]; call 0xa180; add rsp, 0x10; pop rbp; ret; 
0x0000000000420baf: lea eax, [rip + 0x101f47]; call 0x20380; add rsp, 0x28; pop rbp; nop; ret; 
0x000000000045b55b: lea eax, [rip + 0x105f]; jmp rax; 
0x000000000044944b: lea eax, [rip + 0x10804f]; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x000000000041a3e8: lea eax, [rip + 0x108b1a]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000041a231: lea eax, [rip + 0x108cd1]; call 0xa5c0; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000041a15d: lea eax, [rip + 0x108da5]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x00000000004466b8: lea eax, [rip + 0x109d42]; mov rcx, rbx; add rsp, 0x60; pop rbp; ret; 
0x0000000000417edb: lea eax, [rip + 0x10abff]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000418b3f: lea eax, [rip + 0x10aeeb]; lock xadd qword ptr [rax], rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004181e8: lea eax, [rip + 0x10b2c2]; call 0xa5c0; add rsp, 0x30; pop rbp; ret; 
0x000000000045b56d: lea eax, [rip + 0x112d]; jmp rax; 
0x000000000042621b: lea eax, [rip + 0x11375f]; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x0000000000421b5d: lea eax, [rip + 0x117e1d]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004376b3: lea eax, [rip + 0x119127]; call 0x42600; add rsp, 0x30; pop rbp; ret; 
0x0000000000434632: lea eax, [rip + 0x11bf40]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x000000000043457d: lea eax, [rip + 0x11bff5]; call 0xa5c0; add rsp, 0x48; pop rbp; ret; 
0x000000000043352c: lea eax, [rip + 0x11d01e]; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x00000000004329aa: lea eax, [rip + 0x11dba0]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x00000000004327e0: lea eax, [rip + 0x11dd6a]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000045b57f: lea eax, [rip + 0x11fb]; jmp rax; 
0x000000000042ca47: lea eax, [rip + 0x123ad3]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000042dd59: lea eax, [rip + 0x123d81]; mov qword ptr [rip + 0xf4bca], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000042b228: lea eax, [rip + 0x1252e2]; call 0xa5c0; add rsp, 0x48; pop rbp; ret; 
0x000000000042b0a2: lea eax, [rip + 0x125468]; call 0xa5c0; add rsp, 0x70; pop rbp; ret; 
0x000000000042a9eb: lea eax, [rip + 0x125aff]; call 0xa5c0; add rsp, 0x138; pop rbp; ret; 
0x000000000042a380: lea eax, [rip + 0x126172]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x000000000042a20d: lea eax, [rip + 0x1262d5]; call 0xa5c0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x40; pop rbp; ret; 
0x0000000000412f08: lea eax, [rip + 0x126a72]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x0000000000422087: lea eax, [rip + 0x127a63]; xchg qword ptr [rax], rdx; ret; 
0x00000000004255bf: lea eax, [rip + 0x12adb3]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000045b591: lea eax, [rip + 0x12c9]; jmp rax; 
0x0000000000422658: lea eax, [rip + 0x12e882]; nop; call 0x1cd20; add rsp, 8; pop rbp; ret; 
0x000000000042235a: lea eax, [rip + 0x12eb80]; call 0x1cd20; add rsp, 0x48; pop rbp; ret; 
0x00000000004221c6: lea eax, [rip + 0x12ed14]; call 0x1cd20; add rsp, 0x18; pop rbp; ret; 
0x000000000041e88c: lea eax, [rip + 0x131cbe]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000041dcf2: lea eax, [rip + 0x1329e8]; xchg qword ptr [rax], rdx; ret; 
0x000000000045b5a3: lea eax, [rip + 0x1397]; jmp rax; 
0x000000000041035d: lea eax, [rip + 0x14137d]; add rsp, 0x58; pop rbp; ret; 
0x0000000000410280: lea eax, [rip + 0x14145a]; add rsp, 0x58; pop rbp; ret; 
0x0000000000410134: lea eax, [rip + 0x1415a6]; add rsp, 0x58; pop rbp; nop; ret; 
0x0000000000410078: lea eax, [rip + 0x141662]; add rsp, 0x58; pop rbp; ret; 
0x000000000040f75f: lea eax, [rip + 0x141f7b]; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000040ee6f: lea eax, [rip + 0x14286b]; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000040ee43: lea eax, [rip + 0x142897]; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000040ecef: lea eax, [rip + 0x1429eb]; add rsp, 0x10; pop rbp; ret; 
0x000000000040ecc3: lea eax, [rip + 0x142a17]; add rsp, 0x10; pop rbp; ret; 
0x000000000040c13b: lea eax, [rip + 0x1442bf]; add rsp, 0x58; pop rbp; ret; 
0x000000000040d34f: lea eax, [rip + 0x14438b]; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000040d31f: lea eax, [rip + 0x1443bb]; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000045b5b5: lea eax, [rip + 0x1465]; jmp rax; 
0x000000000045b5c7: lea eax, [rip + 0x1533]; jmp rax; 
0x000000000045b5d9: lea eax, [rip + 0x1601]; jmp rax; 
0x000000000046c8fb: lea eax, [rip + 0x176df]; add rsp, 8; pop rbp; ret; 
0x000000000047761e: lea eax, [rip + 0x1a19c]; add rsp, 0x10; pop rbp; ret; 
0x000000000045b40b: lea eax, [rip + 0x1ef]; jmp rax; 
0x000000000045b02b: lea eax, [rip + 0x202f]; ret; 
0x00000000004730e1: lea eax, [rip + 0x230fe]; mov ebx, 0xb; ret; 
0x00000000004744d3: lea eax, [rip + 0x25c8d]; mov ebx, 0x20; pop rbp; nop; ret; 
0x000000000046fc60: lea eax, [rip + 0x26d13]; mov ebx, 0xf; add rsp, 0x38; pop rbp; ret; 
0x00000000004730c1: lea eax, [rip + 0x2709f]; mov ebx, 0x20; ret; 
0x000000000045b41a: lea eax, [rip + 0x280]; jmp rax; 
0x000000000046d2e9: lea eax, [rip + 0x29413]; mov ebx, 0xe; add rsp, 0x128; pop rbp; ret; 
0x000000000046c007: lea eax, [rip + 0x294d3]; mov ebx, 4; add rsp, 0x28; pop rbp; ret; 
0x000000000046c057: lea eax, [rip + 0x2964e]; mov ebx, 6; add rsp, 0x28; pop rbp; ret; 
0x000000000045b429: lea eax, [rip + 0x311]; jmp rax; 
0x000000000045b43b: lea eax, [rip + 0x39f]; jmp rax; 
0x000000000045b5e2: lea eax, [rip + 0x3e38]; jmp rax; 
0x0000000000474edb: lea eax, [rip + 0x405d7]; lea rbx, [rip + 0x3ff88]; add rsp, 0x48; pop rbp; ret; 
0x00000000004749d5: lea eax, [rip + 0x40abd]; add rsp, 0x38; pop rbp; ret; 
0x00000000004738ab: lea eax, [rip + 0x41bc7]; add rsp, 0x18; pop rbp; ret; 
0x000000000045b1ab: lea eax, [rip + 0x440f]; call rax; 
0x00000000004597eb: lea eax, [rip + 0x44be7]; call 0x5b0a0; add rsp, 0x30; pop rbp; ret; 
0x000000000045b44d: lea eax, [rip + 0x44d]; jmp rax; 
0x000000000046fd4c: lea eax, [rip + 0x4648e]; add rsp, 0x20; pop rbp; ret; 
0x000000000046fd3c: lea eax, [rip + 0x4649e]; add rsp, 0x20; pop rbp; ret; 
0x000000000046fcfe: lea eax, [rip + 0x464dc]; add rsp, 0x20; pop rbp; ret; 
0x000000000045b45f: lea eax, [rip + 0x51b]; jmp rax; 
0x00000000004424a5: lea eax, [rip + 0x5505a]; mov ebx, 0x13; ret; 
0x000000000045b471: lea eax, [rip + 0x5e9]; jmp rax; 
0x0000000000432cd7: lea eax, [rip + 0x6279a]; mov ebx, 3; call 0x331a0; add rsp, 0x28; pop rbp; ret; 
0x0000000000432bc8: lea eax, [rip + 0x629c6]; mov ebx, 5; call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x000000000043ad31: lea eax, [rip + 0x63691]; call 0x5b0a0; add rsp, 0x28; pop rbp; ret; 
0x000000000044cd14: lea eax, [rip + 0x6772e]; mov ebx, 1; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000044cbfe: lea eax, [rip + 0x67844]; mov ebx, 1; add rsp, 0x28; pop rbp; ret; 
0x000000000044cbec: lea eax, [rip + 0x67856]; mov ebx, 1; add rsp, 0x28; pop rbp; ret; 
0x0000000000430661: lea eax, [rip + 0x692f3]; mov ebx, 0x1e; ret; 
0x0000000000433c83: lea eax, [rip + 0x6a797]; call 0x5b0a0; add rsp, 0x10; pop rbp; ret; 
0x0000000000433b9d: lea eax, [rip + 0x6a835]; call 0x5b0a0; add rsp, 8; pop rbp; ret; 
0x0000000000433a2f: lea eax, [rip + 0x6a90b]; call 0x3bea0; add rsp, 8; pop rbp; nop; ret; 
0x000000000045b483: lea eax, [rip + 0x6b7]; jmp rax; 
0x000000000045b495: lea eax, [rip + 0x785]; jmp rax; 
0x000000000041dece: lea eax, [rip + 0x803fc]; mov qword ptr [rcx + 0x98], rax; add rsp, 0x18; pop rbp; ret; 
0x000000000045b4a7: lea eax, [rip + 0x853]; jmp rax; 
0x0000000000414952: lea eax, [rip + 0x89b20]; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x000000000040ab22: lea eax, [rip + 0x8a9f8]; mov ebx, 4; ret; 
0x000000000040ab2f: lea eax, [rip + 0x8acc4]; mov ebx, 7; ret; 
0x000000000040aafc: lea eax, [rip + 0x8aec6]; mov ebx, 8; ret; 
0x000000000045b4b9: lea eax, [rip + 0x921]; jmp rax; 
0x00000000004068f5: lea eax, [rip + 0x92baa]; mov ebx, 0x1d; add rsp, 0x30; pop rbp; ret; 
0x00000000004068e3: lea eax, [rip + 0x92bbc]; mov ebx, 0x1d; add rsp, 0x30; pop rbp; ret; 
0x0000000000406ee1: lea eax, [rip + 0x97421]; call 0x5b0a0; add rsp, 0x18; pop rbp; ret; 
0x000000000046f793: lea eax, [rip + 0x9a7]; add rsp, 0x20; pop rbp; ret; 
0x000000000045b4cb: lea eax, [rip + 0x9ef]; jmp rax; 
0x00000000004777c1: lea eax, [rip + 0xa7419]; call 0x61820; add rsp, 0x18; pop rbp; ret; 
0x000000000045b4dd: lea eax, [rip + 0xabd]; jmp rax; 
0x000000000045b4ef: lea eax, [rip + 0xb8b]; jmp rax; 
0x000000000045b501: lea eax, [rip + 0xc59]; jmp rax; 
0x000000000045b513: lea eax, [rip + 0xd27]; jmp rax; 
0x000000000044f4d6: lea eax, [rip + 0xda3a4]; nop dword ptr [rax]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000044f428: lea eax, [rip + 0xda452]; call 0xa5c0; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x000000000045b525: lea eax, [rip + 0xdf5]; jmp rax; 
0x00000000004583e9: lea eax, [rip + 0xe1591]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000457f6d: lea eax, [rip + 0xe1a0d]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000044038e: lea eax, [rip + 0xe3064]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000043f879: lea eax, [rip + 0xe3b79]; nop; call 0xa5c0; add rsp, 0xb0; pop rbp; ret; 
0x000000000043f53f: lea eax, [rip + 0xe3eb3]; call 0xa5c0; add rsp, 0xb0; pop rbp; ret; 
0x000000000043e39b: lea eax, [rip + 0xe5057]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000043cb40: lea eax, [rip + 0xe693a]; call 0xa5c0; add rsp, 0x50; pop rbp; ret; 
0x000000000043b488: lea eax, [rip + 0xe7f6a]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000043b3c2: lea eax, [rip + 0xe8030]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000043a68f: lea eax, [rip + 0xe8d63]; call 0xa5c0; call 0x3a000; add rsp, 0x28; pop rbp; ret; 
0x0000000000439f5d: lea eax, [rip + 0xe9495]; call 0xa5c0; mov rcx, qword ptr [rip + 0x64481]; mov rax, qword ptr [rsp + 0x20]; lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000439e48: lea eax, [rip + 0xe95aa]; call 0xa5c0; mov rcx, qword ptr [rip + 0x64596]; mov rax, qword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; 
0x00000000004745a4: lea eax, [rip + 0xe976]; add rsp, 0x20; pop rbp; ret; 
0x0000000000437ecc: lea eax, [rip + 0xeb526]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000045b537: lea eax, [rip + 0xec3]; jmp rax; 
0x0000000000436af5: lea eax, [rip + 0xec8fd]; nop dword ptr [rax + rax]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000045eb25: lea eax, [rip + 0xf2095]; lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x0000000000447038: lea eax, [rip + 0xf2942]; mov ecx, 1; call 0x24840; add rsp, 0x28; pop rbp; ret; 
0x000000000045819f: lea eax, [rip + 0xf841b]; call 0xa180; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045b549: lea eax, [rip + 0xf91]; jmp rax; 
0x00000000004585d2: lea eax, [rip + 0xfb748]; call 0x9040; add rsp, 0x10; pop rbp; ret; 
0x000000000043d799: lea eax, [rip + 0xfc1e1]; nop; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000043d6e6: lea eax, [rip + 0xfc294]; call 0xa580; add rsp, 0x18; pop rbp; ret; 
0x0000000000455543: lea eax, [rip - 0x4b409]; add rsp, 0x40; pop rbp; ret; 
0x0000000000458b6b: lea eax, [rip - 0x53191]; mov qword ptr [rip + 0xf7a58], rax; pop rbp; ret; 
0x000000000041141e: lea eax, [rsi + rax]; nop; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000041034c: lea eax, [rsi + rcx]; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x0000000000429c0d: lea eax, [rsi + rcx]; mov rbx, rdx; ret; 
0x0000000000426fc7: lea eax, [rsi + rcx]; shl rdi, 0x16; sub rdi, rsi; mov rbx, rdi; lea rdx, [rsp + 0x110]; call rcx; 
0x00000000004247ff: lea eax, [rsi + rdx]; mov ebx, 1; add rsp, 0x60; pop rbp; ret; 
0x00000000004183f4: lea eax, [rsi + rdx]; sub rbx, rdi; add rsp, 0x10; pop rbp; nop; ret; 
0x0000000000402ec3: lea eax, [rsi*2 - 1]; ret; 
0x0000000000413a2d: lea eax, [rsp + 0x10]; xor ebx, ebx; call 0x20c20; add rsp, 0x18; pop rbp; ret; 
0x0000000000418e4a: lea eax, [rsp + 0x20]; call 0x34660; add rsp, 0x30; pop rbp; ret; 
0x0000000000454ae5: lea eax, [rsp + 0x28]; call 0x54d20; add rsp, 0x60; pop rbp; ret; 
0x00000000004616e9: lea eax, [rsp + 0x30]; mov qword ptr [rsp + 0x40], rax; mov byte ptr [rsp + 0xf], 3; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000040ec51: lea eax, [rsp + 0x30]; mov rbx, rsi; call rcx; 
0x00000000004545f2: lea eax, [rsp + 0x38]; call 0x34660; add rsp, 0x58; pop rbp; ret; 
0x0000000000444f93: lea eax, [rsp + 0x48]; call 0x44020; add rsp, 0x58; pop rbp; ret; 
0x000000000040ef3a: lea eax, [rsp + 0x50]; mov rbx, rsi; call rcx; 
0x000000000041008f: lea eax, [rsp + 0x78]; mov rbx, rsi; call rcx; 
0x0000000000410404: lea eax, [rsp + 0x80]; mov rbx, rsi; call rcx; 
0x0000000000430da1: lea eax, [rsp + 8]; ret; 
0x000000000047a273: lea ebx, [rax + 0x40]; mov qword ptr [rsp + 0x58], rbx; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x000000000046b5ee: lea ebx, [rax + rbx*8]; mov rax, rdi; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x0000000000447497: lea ebx, [rax + rcx]; add rsp, 0x68; pop rbp; nop; ret; 
0x000000000046623b: lea ebx, [rbx + 1]; mov rax, rcx; call 0x65060; add rsp, 0x690; pop rbp; ret; 
0x0000000000456db3: lea ebx, [rcx + 1]; mov eax, 0xfffd; add rsp, 0x10; pop rbp; ret; 
0x0000000000456caa: lea ebx, [rcx + 2]; add rsp, 0x10; pop rbp; ret; 
0x0000000000456d2f: lea ebx, [rcx + 3]; add rsp, 0x10; pop rbp; ret; 
0x0000000000456da9: lea ebx, [rcx + 4]; add rsp, 0x10; pop rbp; ret; 
0x0000000000447567: lea ebx, [rcx + rdx]; mov rax, rcx; add rsp, 0x68; pop rbp; ret; 
0x000000000042890b: lea ebx, [rdi + rdx]; nop; nop; add rsp, 0x10; pop rbp; ret; 
0x00000000004744d5: lea ebx, [rdx + rax]; mov ebx, 0x20; pop rbp; nop; ret; 
0x00000000004720b3: lea ebx, [rip + 0x236b8]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000046fc4e: lea ebx, [rip + 0x257ce]; call 0x4a3c0; add rsp, 0x38; pop rbp; ret; 
0x000000000046bb0c: lea ebx, [rip + 0x299da]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000045f0e6: lea ebx, [rip + 0x378f6]; mov ecx, 0xf; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x0000000000479f9b: lea ebx, [rip + 0x3b5c7]; mov rcx, qword ptr [rsp + 0x258]; mov edi, dword ptr [rsp + 0x2c]; call rdx; 
0x0000000000474ee2: lea ebx, [rip + 0x3ff88]; add rsp, 0x48; pop rbp; ret; 
0x0000000000473066: lea ebx, [rip + 0x4244c]; mov rcx, rax; mov rax, -1; add rsp, 0x10; pop rbp; ret; 
0x000000000043440f: lea ebx, [rip + 0x64e5d]; mov ecx, 0x1c; call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x000000000042aa5f: lea ebx, [rip + 0x739b3]; call 0x2aaa0; add rsp, 0x10; pop rbp; ret; 
0x0000000000407521: lea ebx, [rip + 0x8f4bb]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x00000000004074b9: lea ebx, [rip + 0x909ce]; nop; call 0x4a480; add rsp, 0xf8; pop rbp; ret; 
0x0000000000445922: lea ebx, [rip - 0xec8]; mov eax, dword ptr [rsp + 0x28]; call 0x2e340; add rsp, 0x18; pop rbp; ret; 
0x0000000000454e14: lea ebx, [rsp + 0x10]; call rcx; 
0x000000000047202d: lea ebx, [rsp + 0x18]; call 0x727a0; add rsp, 0x28; pop rbp; ret; 
0x0000000000444b6c: lea ebx, [rsp + 0x48]; mov rcx, rdi; call rsi; 
0x000000000040e2a7: lea ecx, [r9 + 1]; mov byte ptr [rax + 0x4b], cl; mov qword ptr [rax + 0x58], r10; add rsp, 0x60; pop rbp; ret; 
0x000000000042c601: lea ecx, [rax + 0x10]; mov qword ptr [rax], rcx; add rcx, 0x1000; mov qword ptr [rax + 8], rcx; ret; 
0x00000000004684d0: lea ecx, [rbx + 1]; mov qword ptr [rax + 0x20], rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000040e2a8: lea ecx, [rcx + 1]; mov byte ptr [rax + 0x4b], cl; mov qword ptr [rax + 0x58], r10; add rsp, 0x60; pop rbp; ret; 
0x0000000000468354: lea ecx, [rcx + 1]; mov qword ptr [rax + 0x20], rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000464940: lea ecx, [rcx + rax]; mov rax, rbx; mov rbx, rdi; mov rcx, r9; call rsi; 
0x00000000004648f5: lea ecx, [rcx + rsi]; mov rax, rbx; mov rbx, r8; mov rcx, r9; call rdi; 
0x000000000042b5e8: lea ecx, [rcx - 0x73]; add al, 0x30; lea rax, [rax + 1]; add rsp, 0x10; pop rbp; ret; 
0x00000000004642ea: lea ecx, [rdx - 1]; mov qword ptr [rsp + 0x28], rcx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x000000000046472a: lea ecx, [rdx - 1]; mov qword ptr [rsp + 0x68], rcx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x000000000046433c: lea ecx, [rdx - 1]; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000444702: lea ecx, [rip + 0x10bd6c]; xchg dword ptr [rcx], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000042c204: lea ecx, [rip + 0x126ace]; call 0xc5e0; add rsp, 0x18; pop rbp; ret; 
0x000000000041dd05: lea ecx, [rip + 0x1329d5]; xchg qword ptr [rcx], rax; ret; 
0x000000000040ac8b: lea ecx, [rip + 0x146257]; xchg qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000040642f: lea ecx, [rip + 0x14a163]; xchg dword ptr [rcx], eax; add rsp, 0x58; pop rbp; ret; 
0x000000000045273a: lea ecx, [rip + 0x42f17]; mov edi, 5; add rsp, 0x20; pop rbp; ret; 
0x0000000000442854: lea ecx, [rip + 0x544b0]; mov qword ptr [rdx + rax], rcx; add rsp, 0x58; pop rbp; ret; 
0x0000000000406c19: lea ecx, [rip + 0x91242]; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000406973: lea ecx, [rip + 0x9216b]; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000406ba9: lea ecx, [rip + 0x93028]; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000459c6f: lea ecx, [rip + 0xbf4df]; xchg dword ptr [rcx], eax; add rsp, 0x10; pop rbp; ret; 
0x000000000044b89e: lea ecx, [rip + 0xd6dec]; xchg qword ptr [rcx], rax; add rsp, 0x60; pop rbp; ret; 
0x0000000000450076: lea ecx, [rip + 0xe98fc]; add rsp, 0x10; pop rbp; ret; 
0x0000000000436fef: lea ecx, [rip + 0xec433]; lock xadd dword ptr [rcx], eax; add rsp, 0x48; pop rbp; ret; 
0x000000000045eb2c: lea ecx, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000045eaec: lea ecx, [rip - 0xf2]; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x00000000004548b0: lea ecx, [rsp + 0x48]; call 0x33300; add rsp, 0x60; pop rbp; ret; 
0x000000000045869c: lea ecx, [rsp + 8]; mov qword ptr [rsp + 0x18], rcx; mov byte ptr [rsp + 7], 1; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x000000000046493c: lea edi, [rcx + rdx]; lea r9, [rcx + r8]; mov rax, rbx; mov rbx, rdi; mov rcx, r9; call rsi; 
0x000000000045d60d: lea edi, [rdi + 0x40]; ret; 
0x000000000044a987: lea edi, [rdi - 0x30]; cmp rdi, rsi; jae 0x4a950; xor eax, eax; xor ebx, ebx; ret; 
0x0000000000434698: lea edi, [rdx + 1]; mov qword ptr [rsp + 8], rdi; nop; mov rdx, rax; mov rax, rsi; call rcx; 
0x0000000000403467: lea edi, [rsi - 1]; add rdi, rcx; sub rdi, r10; mov qword ptr [r11], rdi; ret; 
0x000000000045e6c1: lea edi, [rsp + 0x10]; mov esi, dword ptr [rsp + 8]; mov eax, 0x125; syscall; 
0x000000000045e6c1: lea edi, [rsp + 0x10]; mov esi, dword ptr [rsp + 8]; mov eax, 0x125; syscall; mov dword ptr [rsp + 0x18], eax; ret; 
0x000000000042c330: lea edx, [rbx + rcx*2]; cmp rcx, rdx; jg 0x2c33e; add rsp, 0x18; pop rbp; ret; 
0x000000000046673a: lea edx, [rdi + 0x30]; mov byte ptr [rbx + rsi - 1], dl; mov rax, rsi; add rsp, 0x70; pop rbp; ret; 
0x000000000044003b: lea edx, [rdi + 1]; mov qword ptr [rax + rcx*8 + 0x198], rbx; xchg dword ptr [rax + 0x194], edx; add rsp, 0x20; pop rbp; ret; 
0x00000000004647f5: lea edx, [rdi - 1]; cmp rcx, rdx; jl 0x647c2; add rsp, 0x78; pop rbp; ret; 
0x000000000044cf4a: lea edx, [rdx + 1]; mov ecx, dword ptr [rdx]; call 0x4c4c0; add rsp, 0x30; pop rbp; ret; 
0x00000000004517b5: lea edx, [rdx + 1]; mov qword ptr [rcx + 0x18], rdx; add rsp, 0x60; pop rbp; ret; 
0x00000000004517b1: lea edx, [rdx + rax]; lea rdx, [rdx + 1]; mov qword ptr [rcx + 0x18], rdx; add rsp, 0x60; pop rbp; ret; 
0x0000000000437457: lea edx, [rip + 0x119133]; xchg qword ptr [rdx], rcx; add rsp, 8; pop rbp; ret; 
0x000000000042cc4b: lea edx, [rip + 0x1237eb]; lock xadd dword ptr [rdx], ecx; add rsp, 8; pop rbp; ret; 
0x000000000041483e: lea edx, [rip + 0x13bbe0]; lock or dword ptr [rdx], ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000439f75: lea edx, [rip + 0x64475]; call rcx; 
0x0000000000439e60: lea edx, [rip + 0x6458a]; call rcx; 
0x0000000000439e60: lea edx, [rip + 0x6458a]; call rcx; add rsp, 0x60; pop rbp; ret; 
0x0000000000433833: lea edx, [rip + 0x6aa67]; call rax; 
0x0000000000408cb0: lea edx, [rip + 0x957b2]; call rcx; 
0x0000000000473b1a: lea edx, [rip + 0xdc8e0]; mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004424b9: lea edx, [rip + 0xdd781]; mov rax, qword ptr [rdx + rcx]; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000043ffa5: lea edx, [rip + 0xe3495]; xchg dword ptr [rdx], ecx; xor eax, eax; add rsp, 8; pop rbp; ret; 
0x0000000000426fd5: lea edx, [rsp + 0x110]; call rcx; 
0x0000000000427247: lea edx, [rsp + 0x110]; call rdi; 
0x0000000000452de9: lea edx, [rsp + 0x2c8]; call rcx; 
0x0000000000452474: lea edx, [rsp + 0x50]; mov eax, r8d; call rsi; 
0x0000000000428566: lea edx, [rsp + 0x80]; call rdi; 
0x00000000004115db: lea esi, [rax + rdx*8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000452736: lea esi, [rax + rdx]; lea rcx, [rip + 0x42f17]; mov edi, 5; add rsp, 0x20; pop rbp; ret; 
0x00000000004647c7: lea esi, [rcx + 1]; mov qword ptr [rsp + 0x68], rsi; mov rax, rbx; mov rbx, rcx; mov rcx, rsi; call rdx; 
0x000000000044f42f: lea esi, [rcx - 0x3fce0005]; add rsp, 0x10; pop rbp; ret; 
0x0000000000458a1b: lea esi, [rdi + rax]; and rbx, rsi; mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000047a0c7: lea esi, [rip + 0x1b4d1]; mov r8d, 5; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000047a187: lea esi, [rip + 0x1b4ee]; mov r8d, 6; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000047a067: lea esi, [rip + 0x1b608]; mov r8d, 6; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000045af3b: lea esi, [rip - 0xc21]; mov rdx, 0; mov rcx, 0; call rax; 
0x000000000045eebb: lea esi, [rsp + 0x10]; mov rax, qword ptr [rip + 0xf172a]; cmp rax, 0; je 0x5ef20; call rax; 
0x000000000045ef2f: lea esi, [rsp]; mov rax, 0xe4; syscall; 
0x000000000045eed4: lea esi, [rsp]; mov rax, qword ptr [rip + 0xf1712]; call rax; 
0x000000000045e8bb: lea esi, [rsp]; mov rax, qword ptr [rip + 0xf1d2b]; cmp rax, 0; je 0x5e905; call rax; 
0x00000000004701af: lea esp, [rsp + 0x28]; call 0x5b340; add rsp, 0x138; pop rbp; ret; 
0x00000000004701ae: lea r12, [rsp + 0x28]; call 0x5b340; add rsp, 0x138; pop rbp; ret; 
0x000000000045ed39: lea r8, [r13 + 0x88]; add r8, 8; or rdi, 0x80000; mov eax, 0x38; syscall; 
0x00000000004648f0: lea r8, [rcx + rdx]; lea r9, [rcx + rsi]; mov rax, rbx; mov rbx, r8; mov rcx, r9; call rdi; 
0x000000000045eb24: lea r8, [rip + 0xf2095]; lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000046493f: lea r9, [rcx + r8]; mov rax, rbx; mov rbx, rdi; mov rcx, r9; call rsi; 
0x00000000004648f4: lea r9, [rcx + rsi]; mov rax, rbx; mov rbx, r8; mov rcx, r9; call rdi; 
0x000000000045eb2b: lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000045eaeb: lea r9, [rip - 0xf2]; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x000000000044111e: lea rax, [r8 + 0x80]; call 0xa660; sub rsp, -0x80; pop rbp; ret; 
0x000000000042b5e9: lea rax, [r8 + rsi]; lea rax, [rax + 1]; add rsp, 0x10; pop rbp; ret; 
0x000000000040ed26: lea rax, [rax + 0x28]; add rsp, 0x10; pop rbp; ret; 
0x000000000040eea8: lea rax, [rax + 0x28]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000429e7d: lea rax, [rax + 0x30]; add rsp, 0x10; pop rbp; ret; 
0x000000000040f79d: lea rax, [rax + 0x48]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004101c5: lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x000000000042b5ed: lea rax, [rax + 1]; add rsp, 0x10; pop rbp; ret; 
0x0000000000463bd0: lea rax, [rax + 1]; add rsp, 0x78; pop rbp; ret; 
0x000000000046b68d: lea rax, [rax + rbx*8]; mov rbx, rdi; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x0000000000429e79: lea rax, [rax + rcx*8]; lea rax, [rax + 0x30]; add rsp, 0x10; pop rbp; ret; 
0x0000000000463bcc: lea rax, [rax + rcx]; lea rax, [rax + 1]; add rsp, 0x78; pop rbp; ret; 
0x000000000040909f: lea rax, [rax + rdx*8]; mov ecx, 1; lock xadd qword ptr [rax], rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000046a174: lea rax, [rax - 0x30]; add rsp, 0xc8; pop rbp; ret; 
0x000000000046a3c7: lea rax, [rax - 0x30]; mov ebx, ecx; sub rsp, -0x80; pop rbp; ret; 
0x0000000000402e2d: lea rax, [rax*2 - 1]; ret; 
0x0000000000441379: lea rax, [rbx + 0x80]; call 0xa660; add rsp, 8; pop rbp; ret; 
0x000000000042c25c: lea rax, [rcx + 1]; test eax, eax; je 0x2c26a; add rsp, 0x18; pop rbp; ret; 
0x000000000042983d: lea rax, [rcx + r8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000402eda: lea rax, [rcx + rax*2 - 1]; ret; 
0x000000000043d2e6: lea rax, [rcx + rax*4]; not esi; lock and dword ptr [rax], esi; add rsp, 0x10; pop rbp; ret; 
0x00000000004101c1: lea rax, [rcx + rbx]; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x0000000000421156: lea rax, [rcx + rdx*8]; call 0x2bd80; xor eax, eax; add rsp, 0xf8; pop rbp; ret; 
0x0000000000402ae6: lea rax, [rcx + rdx]; and eax, 0x7f; ret; 
0x00000000004102a3: lea rax, [rcx + rdx]; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x000000000042df4c: lea rax, [rcx + rdx]; sar rax, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000418f12: lea rax, [rdx + 1]; mov qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000041b341: lea rax, [rdx + rcx]; add rsp, 0x20; pop rbp; ret; 
0x000000000040ed22: lea rax, [rdx + rcx]; lea rax, [rax + 0x28]; add rsp, 0x10; pop rbp; ret; 
0x000000000040eea4: lea rax, [rdx + rcx]; lea rax, [rax + 0x28]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000040f799: lea rax, [rdx + rcx]; lea rax, [rax + 0x48]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000046a170: lea rax, [rdx + rcx]; lea rax, [rax - 0x30]; add rsp, 0xc8; pop rbp; ret; 
0x0000000000410246: lea rax, [rdx + rsi]; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x000000000046a3c3: lea rax, [rdx + rsi]; lea rax, [rax - 0x30]; mov ebx, ecx; sub rsp, -0x80; pop rbp; ret; 
0x0000000000451ca8: lea rax, [rdx - 1]; add rsp, 0x10; pop rbp; ret; 
0x000000000044f8eb: lea rax, [rdx - 2]; mov byte ptr [rcx], al; add rsp, 0x68; pop rbp; ret; 
0x0000000000422cba: lea rax, [rip + 0x10016f]; call 0xa5c0; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x00000000004229ff: lea rax, [rip + 0x10039a]; call 0xa180; add rsp, 0x10; pop rbp; ret; 
0x000000000042299f: lea rax, [rip + 0x100442]; call 0xa180; add rsp, 0x10; pop rbp; ret; 
0x0000000000420bae: lea rax, [rip + 0x101f47]; call 0x20380; add rsp, 0x28; pop rbp; nop; ret; 
0x000000000045b55a: lea rax, [rip + 0x105f]; jmp rax; 
0x000000000044944a: lea rax, [rip + 0x10804f]; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x000000000041a3e7: lea rax, [rip + 0x108b1a]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000041a230: lea rax, [rip + 0x108cd1]; call 0xa5c0; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000041a15c: lea rax, [rip + 0x108da5]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x00000000004466b7: lea rax, [rip + 0x109d42]; mov rcx, rbx; add rsp, 0x60; pop rbp; ret; 
0x0000000000417eda: lea rax, [rip + 0x10abff]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000418b3e: lea rax, [rip + 0x10aeeb]; lock xadd qword ptr [rax], rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004181e7: lea rax, [rip + 0x10b2c2]; call 0xa5c0; add rsp, 0x30; pop rbp; ret; 
0x000000000045b56c: lea rax, [rip + 0x112d]; jmp rax; 
0x000000000042621a: lea rax, [rip + 0x11375f]; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x0000000000421b5c: lea rax, [rip + 0x117e1d]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004376b2: lea rax, [rip + 0x119127]; call 0x42600; add rsp, 0x30; pop rbp; ret; 
0x0000000000434631: lea rax, [rip + 0x11bf40]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x000000000043457c: lea rax, [rip + 0x11bff5]; call 0xa5c0; add rsp, 0x48; pop rbp; ret; 
0x000000000043352b: lea rax, [rip + 0x11d01e]; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x00000000004329a9: lea rax, [rip + 0x11dba0]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x00000000004327df: lea rax, [rip + 0x11dd6a]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000045b57e: lea rax, [rip + 0x11fb]; jmp rax; 
0x000000000042ca46: lea rax, [rip + 0x123ad3]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000042dd58: lea rax, [rip + 0x123d81]; mov qword ptr [rip + 0xf4bca], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000042b227: lea rax, [rip + 0x1252e2]; call 0xa5c0; add rsp, 0x48; pop rbp; ret; 
0x000000000042b0a1: lea rax, [rip + 0x125468]; call 0xa5c0; add rsp, 0x70; pop rbp; ret; 
0x000000000042a9ea: lea rax, [rip + 0x125aff]; call 0xa5c0; add rsp, 0x138; pop rbp; ret; 
0x000000000042a37f: lea rax, [rip + 0x126172]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x000000000042a20c: lea rax, [rip + 0x1262d5]; call 0xa5c0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x40; pop rbp; ret; 
0x0000000000412f07: lea rax, [rip + 0x126a72]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x0000000000422086: lea rax, [rip + 0x127a63]; xchg qword ptr [rax], rdx; ret; 
0x00000000004255be: lea rax, [rip + 0x12adb3]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000045b590: lea rax, [rip + 0x12c9]; jmp rax; 
0x0000000000422657: lea rax, [rip + 0x12e882]; nop; call 0x1cd20; add rsp, 8; pop rbp; ret; 
0x0000000000422359: lea rax, [rip + 0x12eb80]; call 0x1cd20; add rsp, 0x48; pop rbp; ret; 
0x00000000004221c5: lea rax, [rip + 0x12ed14]; call 0x1cd20; add rsp, 0x18; pop rbp; ret; 
0x000000000041e88b: lea rax, [rip + 0x131cbe]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000041dcf1: lea rax, [rip + 0x1329e8]; xchg qword ptr [rax], rdx; ret; 
0x000000000045b5a2: lea rax, [rip + 0x1397]; jmp rax; 
0x000000000041035c: lea rax, [rip + 0x14137d]; add rsp, 0x58; pop rbp; ret; 
0x000000000041027f: lea rax, [rip + 0x14145a]; add rsp, 0x58; pop rbp; ret; 
0x0000000000410133: lea rax, [rip + 0x1415a6]; add rsp, 0x58; pop rbp; nop; ret; 
0x0000000000410077: lea rax, [rip + 0x141662]; add rsp, 0x58; pop rbp; ret; 
0x000000000040f75e: lea rax, [rip + 0x141f7b]; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000040ee6e: lea rax, [rip + 0x14286b]; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000040ee42: lea rax, [rip + 0x142897]; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000040ecee: lea rax, [rip + 0x1429eb]; add rsp, 0x10; pop rbp; ret; 
0x000000000040ecc2: lea rax, [rip + 0x142a17]; add rsp, 0x10; pop rbp; ret; 
0x000000000040c13a: lea rax, [rip + 0x1442bf]; add rsp, 0x58; pop rbp; ret; 
0x000000000040d34e: lea rax, [rip + 0x14438b]; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000040d31e: lea rax, [rip + 0x1443bb]; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000045b5b4: lea rax, [rip + 0x1465]; jmp rax; 
0x000000000045b5c6: lea rax, [rip + 0x1533]; jmp rax; 
0x000000000045b5d8: lea rax, [rip + 0x1601]; jmp rax; 
0x000000000046c8fa: lea rax, [rip + 0x176df]; add rsp, 8; pop rbp; ret; 
0x000000000047761d: lea rax, [rip + 0x1a19c]; add rsp, 0x10; pop rbp; ret; 
0x000000000045b40a: lea rax, [rip + 0x1ef]; jmp rax; 
0x000000000045b02a: lea rax, [rip + 0x202f]; ret; 
0x00000000004730e0: lea rax, [rip + 0x230fe]; mov ebx, 0xb; ret; 
0x00000000004744d2: lea rax, [rip + 0x25c8d]; mov ebx, 0x20; pop rbp; nop; ret; 
0x000000000046fc5f: lea rax, [rip + 0x26d13]; mov ebx, 0xf; add rsp, 0x38; pop rbp; ret; 
0x00000000004730c0: lea rax, [rip + 0x2709f]; mov ebx, 0x20; ret; 
0x000000000045b419: lea rax, [rip + 0x280]; jmp rax; 
0x000000000046d2e8: lea rax, [rip + 0x29413]; mov ebx, 0xe; add rsp, 0x128; pop rbp; ret; 
0x000000000046c006: lea rax, [rip + 0x294d3]; mov ebx, 4; add rsp, 0x28; pop rbp; ret; 
0x000000000046c056: lea rax, [rip + 0x2964e]; mov ebx, 6; add rsp, 0x28; pop rbp; ret; 
0x000000000045b428: lea rax, [rip + 0x311]; jmp rax; 
0x000000000045b43a: lea rax, [rip + 0x39f]; jmp rax; 
0x000000000045b5e1: lea rax, [rip + 0x3e38]; jmp rax; 
0x0000000000474eda: lea rax, [rip + 0x405d7]; lea rbx, [rip + 0x3ff88]; add rsp, 0x48; pop rbp; ret; 
0x00000000004749d4: lea rax, [rip + 0x40abd]; add rsp, 0x38; pop rbp; ret; 
0x00000000004738aa: lea rax, [rip + 0x41bc7]; add rsp, 0x18; pop rbp; ret; 
0x000000000045b1aa: lea rax, [rip + 0x440f]; call rax; 
0x00000000004597ea: lea rax, [rip + 0x44be7]; call 0x5b0a0; add rsp, 0x30; pop rbp; ret; 
0x000000000045b44c: lea rax, [rip + 0x44d]; jmp rax; 
0x000000000046fd4b: lea rax, [rip + 0x4648e]; add rsp, 0x20; pop rbp; ret; 
0x000000000046fd3b: lea rax, [rip + 0x4649e]; add rsp, 0x20; pop rbp; ret; 
0x000000000046fcfd: lea rax, [rip + 0x464dc]; add rsp, 0x20; pop rbp; ret; 
0x000000000045b45e: lea rax, [rip + 0x51b]; jmp rax; 
0x00000000004424a4: lea rax, [rip + 0x5505a]; mov ebx, 0x13; ret; 
0x000000000045b470: lea rax, [rip + 0x5e9]; jmp rax; 
0x0000000000432cd6: lea rax, [rip + 0x6279a]; mov ebx, 3; call 0x331a0; add rsp, 0x28; pop rbp; ret; 
0x0000000000432bc7: lea rax, [rip + 0x629c6]; mov ebx, 5; call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x000000000043ad30: lea rax, [rip + 0x63691]; call 0x5b0a0; add rsp, 0x28; pop rbp; ret; 
0x000000000044cd13: lea rax, [rip + 0x6772e]; mov ebx, 1; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000044cbfd: lea rax, [rip + 0x67844]; mov ebx, 1; add rsp, 0x28; pop rbp; ret; 
0x000000000044cbeb: lea rax, [rip + 0x67856]; mov ebx, 1; add rsp, 0x28; pop rbp; ret; 
0x0000000000430660: lea rax, [rip + 0x692f3]; mov ebx, 0x1e; ret; 
0x0000000000433c82: lea rax, [rip + 0x6a797]; call 0x5b0a0; add rsp, 0x10; pop rbp; ret; 
0x0000000000433b9c: lea rax, [rip + 0x6a835]; call 0x5b0a0; add rsp, 8; pop rbp; ret; 
0x0000000000433a2e: lea rax, [rip + 0x6a90b]; call 0x3bea0; add rsp, 8; pop rbp; nop; ret; 
0x000000000045b482: lea rax, [rip + 0x6b7]; jmp rax; 
0x000000000045b494: lea rax, [rip + 0x785]; jmp rax; 
0x000000000041decd: lea rax, [rip + 0x803fc]; mov qword ptr [rcx + 0x98], rax; add rsp, 0x18; pop rbp; ret; 
0x000000000045b4a6: lea rax, [rip + 0x853]; jmp rax; 
0x0000000000414951: lea rax, [rip + 0x89b20]; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x000000000040ab21: lea rax, [rip + 0x8a9f8]; mov ebx, 4; ret; 
0x000000000040ab2e: lea rax, [rip + 0x8acc4]; mov ebx, 7; ret; 
0x000000000040aafb: lea rax, [rip + 0x8aec6]; mov ebx, 8; ret; 
0x000000000045b4b8: lea rax, [rip + 0x921]; jmp rax; 
0x00000000004068f4: lea rax, [rip + 0x92baa]; mov ebx, 0x1d; add rsp, 0x30; pop rbp; ret; 
0x00000000004068e2: lea rax, [rip + 0x92bbc]; mov ebx, 0x1d; add rsp, 0x30; pop rbp; ret; 
0x0000000000406ee0: lea rax, [rip + 0x97421]; call 0x5b0a0; add rsp, 0x18; pop rbp; ret; 
0x000000000046f792: lea rax, [rip + 0x9a7]; add rsp, 0x20; pop rbp; ret; 
0x000000000045b4ca: lea rax, [rip + 0x9ef]; jmp rax; 
0x00000000004777c0: lea rax, [rip + 0xa7419]; call 0x61820; add rsp, 0x18; pop rbp; ret; 
0x000000000045b4dc: lea rax, [rip + 0xabd]; jmp rax; 
0x000000000045b4ee: lea rax, [rip + 0xb8b]; jmp rax; 
0x000000000045b500: lea rax, [rip + 0xc59]; jmp rax; 
0x000000000045b512: lea rax, [rip + 0xd27]; jmp rax; 
0x000000000044f4d5: lea rax, [rip + 0xda3a4]; nop dword ptr [rax]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000044f427: lea rax, [rip + 0xda452]; call 0xa5c0; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x000000000045b524: lea rax, [rip + 0xdf5]; jmp rax; 
0x00000000004583e8: lea rax, [rip + 0xe1591]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000457f6c: lea rax, [rip + 0xe1a0d]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000044038d: lea rax, [rip + 0xe3064]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000043f878: lea rax, [rip + 0xe3b79]; nop; call 0xa5c0; add rsp, 0xb0; pop rbp; ret; 
0x000000000043f53e: lea rax, [rip + 0xe3eb3]; call 0xa5c0; add rsp, 0xb0; pop rbp; ret; 
0x000000000043e39a: lea rax, [rip + 0xe5057]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000043cb3f: lea rax, [rip + 0xe693a]; call 0xa5c0; add rsp, 0x50; pop rbp; ret; 
0x000000000043b487: lea rax, [rip + 0xe7f6a]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000043b3c1: lea rax, [rip + 0xe8030]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000043a68e: lea rax, [rip + 0xe8d63]; call 0xa5c0; call 0x3a000; add rsp, 0x28; pop rbp; ret; 
0x0000000000439f5c: lea rax, [rip + 0xe9495]; call 0xa5c0; mov rcx, qword ptr [rip + 0x64481]; mov rax, qword ptr [rsp + 0x20]; lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000439e47: lea rax, [rip + 0xe95aa]; call 0xa5c0; mov rcx, qword ptr [rip + 0x64596]; mov rax, qword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; 
0x00000000004745a3: lea rax, [rip + 0xe976]; add rsp, 0x20; pop rbp; ret; 
0x0000000000437ecb: lea rax, [rip + 0xeb526]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000045b536: lea rax, [rip + 0xec3]; jmp rax; 
0x0000000000436af4: lea rax, [rip + 0xec8fd]; nop dword ptr [rax + rax]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x0000000000447037: lea rax, [rip + 0xf2942]; mov ecx, 1; call 0x24840; add rsp, 0x28; pop rbp; ret; 
0x000000000045819e: lea rax, [rip + 0xf841b]; call 0xa180; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045b548: lea rax, [rip + 0xf91]; jmp rax; 
0x00000000004585d1: lea rax, [rip + 0xfb748]; call 0x9040; add rsp, 0x10; pop rbp; ret; 
0x000000000043d798: lea rax, [rip + 0xfc1e1]; nop; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000043d6e5: lea rax, [rip + 0xfc294]; call 0xa580; add rsp, 0x18; pop rbp; ret; 
0x0000000000455542: lea rax, [rip - 0x4b409]; add rsp, 0x40; pop rbp; ret; 
0x0000000000458b6a: lea rax, [rip - 0x53191]; mov qword ptr [rip + 0xf7a58], rax; pop rbp; ret; 
0x000000000041141d: lea rax, [rsi + r8]; nop; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x0000000000429c0c: lea rax, [rsi + r9]; mov rbx, rdx; ret; 
0x0000000000426fc6: lea rax, [rsi + r9]; shl rdi, 0x16; sub rdi, rsi; mov rbx, rdi; lea rdx, [rsp + 0x110]; call rcx; 
0x000000000041034b: lea rax, [rsi + rcx]; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x00000000004247fe: lea rax, [rsi + rdx]; mov ebx, 1; add rsp, 0x60; pop rbp; ret; 
0x00000000004183f3: lea rax, [rsi + rdx]; sub rbx, rdi; add rsp, 0x10; pop rbp; nop; ret; 
0x0000000000402ec2: lea rax, [rsi*2 - 1]; ret; 
0x0000000000413a2c: lea rax, [rsp + 0x10]; xor ebx, ebx; call 0x20c20; add rsp, 0x18; pop rbp; ret; 
0x0000000000418e49: lea rax, [rsp + 0x20]; call 0x34660; add rsp, 0x30; pop rbp; ret; 
0x0000000000454ae4: lea rax, [rsp + 0x28]; call 0x54d20; add rsp, 0x60; pop rbp; ret; 
0x00000000004616e8: lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x40], rax; mov byte ptr [rsp + 0xf], 3; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000040ec50: lea rax, [rsp + 0x30]; mov rbx, rsi; call rcx; 
0x00000000004545f1: lea rax, [rsp + 0x38]; call 0x34660; add rsp, 0x58; pop rbp; ret; 
0x0000000000444f92: lea rax, [rsp + 0x48]; call 0x44020; add rsp, 0x58; pop rbp; ret; 
0x000000000040ef39: lea rax, [rsp + 0x50]; mov rbx, rsi; call rcx; 
0x000000000041008e: lea rax, [rsp + 0x78]; mov rbx, rsi; call rcx; 
0x0000000000410403: lea rax, [rsp + 0x80]; mov rbx, rsi; call rcx; 
0x0000000000430da0: lea rax, [rsp + 8]; ret; 
0x000000000047a272: lea rbx, [rax + 0x40]; mov qword ptr [rsp + 0x58], rbx; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x000000000046b5ed: lea rbx, [rax + rbx*8]; mov rax, rdi; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x0000000000447496: lea rbx, [rax + rcx]; add rsp, 0x68; pop rbp; nop; ret; 
0x000000000046623a: lea rbx, [rbx + 1]; mov rax, rcx; call 0x65060; add rsp, 0x690; pop rbp; ret; 
0x0000000000456db2: lea rbx, [rcx + 1]; mov eax, 0xfffd; add rsp, 0x10; pop rbp; ret; 
0x0000000000456ca9: lea rbx, [rcx + 2]; add rsp, 0x10; pop rbp; ret; 
0x0000000000456d2e: lea rbx, [rcx + 3]; add rsp, 0x10; pop rbp; ret; 
0x0000000000456da8: lea rbx, [rcx + 4]; add rsp, 0x10; pop rbp; ret; 
0x0000000000447566: lea rbx, [rcx + rdx]; mov rax, rcx; add rsp, 0x68; pop rbp; ret; 
0x000000000042890a: lea rbx, [rdi + rdx]; nop; nop; add rsp, 0x10; pop rbp; ret; 
0x00000000004720b2: lea rbx, [rip + 0x236b8]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000046fc4d: lea rbx, [rip + 0x257ce]; call 0x4a3c0; add rsp, 0x38; pop rbp; ret; 
0x000000000046bb0b: lea rbx, [rip + 0x299da]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000045f0e5: lea rbx, [rip + 0x378f6]; mov ecx, 0xf; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x0000000000479f9a: lea rbx, [rip + 0x3b5c7]; mov rcx, qword ptr [rsp + 0x258]; mov edi, dword ptr [rsp + 0x2c]; call rdx; 
0x0000000000474ee1: lea rbx, [rip + 0x3ff88]; add rsp, 0x48; pop rbp; ret; 
0x0000000000473065: lea rbx, [rip + 0x4244c]; mov rcx, rax; mov rax, -1; add rsp, 0x10; pop rbp; ret; 
0x000000000043440e: lea rbx, [rip + 0x64e5d]; mov ecx, 0x1c; call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x000000000042aa5e: lea rbx, [rip + 0x739b3]; call 0x2aaa0; add rsp, 0x10; pop rbp; ret; 
0x0000000000407520: lea rbx, [rip + 0x8f4bb]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x00000000004074b8: lea rbx, [rip + 0x909ce]; nop; call 0x4a480; add rsp, 0xf8; pop rbp; ret; 
0x0000000000445921: lea rbx, [rip - 0xec8]; mov eax, dword ptr [rsp + 0x28]; call 0x2e340; add rsp, 0x18; pop rbp; ret; 
0x0000000000454e13: lea rbx, [rsp + 0x10]; call rcx; 
0x000000000047202c: lea rbx, [rsp + 0x18]; call 0x727a0; add rsp, 0x28; pop rbp; ret; 
0x0000000000444b6b: lea rbx, [rsp + 0x48]; mov rcx, rdi; call rsi; 
0x0000000000466239: lea rbx, ds:[rbx + 1]; mov rax, rcx; call 0x65060; add rsp, 0x690; pop rbp; ret; 
0x0000000000468353: lea rcx, [r9 + 1]; mov qword ptr [rax + 0x20], rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000042c600: lea rcx, [rax + 0x10]; mov qword ptr [rax], rcx; add rcx, 0x1000; mov qword ptr [rax + 8], rcx; ret; 
0x00000000004684cf: lea rcx, [rbx + 1]; mov qword ptr [rax + 0x20], rcx; add rsp, 0x18; pop rbp; ret; 
0x00000000004642e9: lea rcx, [rdx - 1]; mov qword ptr [rsp + 0x28], rcx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000464729: lea rcx, [rdx - 1]; mov qword ptr [rsp + 0x68], rcx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x000000000046433b: lea rcx, [rdx - 1]; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000444701: lea rcx, [rip + 0x10bd6c]; xchg dword ptr [rcx], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000042c203: lea rcx, [rip + 0x126ace]; call 0xc5e0; add rsp, 0x18; pop rbp; ret; 
0x000000000041dd04: lea rcx, [rip + 0x1329d5]; xchg qword ptr [rcx], rax; ret; 
0x000000000040ac8a: lea rcx, [rip + 0x146257]; xchg qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000040642e: lea rcx, [rip + 0x14a163]; xchg dword ptr [rcx], eax; add rsp, 0x58; pop rbp; ret; 
0x0000000000452739: lea rcx, [rip + 0x42f17]; mov edi, 5; add rsp, 0x20; pop rbp; ret; 
0x0000000000442853: lea rcx, [rip + 0x544b0]; mov qword ptr [rdx + rax], rcx; add rsp, 0x58; pop rbp; ret; 
0x0000000000406c18: lea rcx, [rip + 0x91242]; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000406972: lea rcx, [rip + 0x9216b]; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000406ba8: lea rcx, [rip + 0x93028]; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000459c6e: lea rcx, [rip + 0xbf4df]; xchg dword ptr [rcx], eax; add rsp, 0x10; pop rbp; ret; 
0x000000000044b89d: lea rcx, [rip + 0xd6dec]; xchg qword ptr [rcx], rax; add rsp, 0x60; pop rbp; ret; 
0x0000000000450075: lea rcx, [rip + 0xe98fc]; add rsp, 0x10; pop rbp; ret; 
0x0000000000436fee: lea rcx, [rip + 0xec433]; lock xadd dword ptr [rcx], eax; add rsp, 0x48; pop rbp; ret; 
0x00000000004548af: lea rcx, [rsp + 0x48]; call 0x33300; add rsp, 0x60; pop rbp; ret; 
0x000000000045869b: lea rcx, [rsp + 8]; mov qword ptr [rsp + 0x18], rcx; mov byte ptr [rsp + 7], 1; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x000000000046493b: lea rdi, [rcx + rdx]; lea r9, [rcx + r8]; mov rax, rbx; mov rbx, rdi; mov rcx, r9; call rsi; 
0x000000000045d60c: lea rdi, [rdi + 0x40]; ret; 
0x000000000044a986: lea rdi, [rdi - 0x30]; cmp rdi, rsi; jae 0x4a950; xor eax, eax; xor ebx, ebx; ret; 
0x0000000000434697: lea rdi, [rdx + 1]; mov qword ptr [rsp + 8], rdi; nop; mov rdx, rax; mov rax, rsi; call rcx; 
0x0000000000403466: lea rdi, [rsi - 1]; add rdi, rcx; sub rdi, r10; mov qword ptr [r11], rdi; ret; 
0x000000000045e6c0: lea rdi, [rsp + 0x10]; mov esi, dword ptr [rsp + 8]; mov eax, 0x125; syscall; 
0x000000000045e6c0: lea rdi, [rsp + 0x10]; mov esi, dword ptr [rsp + 8]; mov eax, 0x125; syscall; mov dword ptr [rsp + 0x18], eax; ret; 
0x000000000042c32f: lea rdx, [rbx + rcx*2]; cmp rcx, rdx; jg 0x2c33e; add rsp, 0x18; pop rbp; ret; 
0x00000000004647f4: lea rdx, [rdi - 1]; cmp rcx, rdx; jl 0x647c2; add rsp, 0x78; pop rbp; ret; 
0x000000000044cf49: lea rdx, [rdx + 1]; mov ecx, dword ptr [rdx]; call 0x4c4c0; add rsp, 0x30; pop rbp; ret; 
0x00000000004517b4: lea rdx, [rdx + 1]; mov qword ptr [rcx + 0x18], rdx; add rsp, 0x60; pop rbp; ret; 
0x00000000004517b0: lea rdx, [rdx + rax]; lea rdx, [rdx + 1]; mov qword ptr [rcx + 0x18], rdx; add rsp, 0x60; pop rbp; ret; 
0x0000000000437456: lea rdx, [rip + 0x119133]; xchg qword ptr [rdx], rcx; add rsp, 8; pop rbp; ret; 
0x000000000042cc4a: lea rdx, [rip + 0x1237eb]; lock xadd dword ptr [rdx], ecx; add rsp, 8; pop rbp; ret; 
0x000000000041483d: lea rdx, [rip + 0x13bbe0]; lock or dword ptr [rdx], ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000439f74: lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000439e5f: lea rdx, [rip + 0x6458a]; call rcx; 
0x0000000000439e5f: lea rdx, [rip + 0x6458a]; call rcx; add rsp, 0x60; pop rbp; ret; 
0x0000000000433832: lea rdx, [rip + 0x6aa67]; call rax; 
0x0000000000408caf: lea rdx, [rip + 0x957b2]; call rcx; 
0x0000000000473b19: lea rdx, [rip + 0xdc8e0]; mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004424b8: lea rdx, [rip + 0xdd781]; mov rax, qword ptr [rdx + rcx]; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000043ffa4: lea rdx, [rip + 0xe3495]; xchg dword ptr [rdx], ecx; xor eax, eax; add rsp, 8; pop rbp; ret; 
0x0000000000426fd4: lea rdx, [rsp + 0x110]; call rcx; 
0x0000000000427246: lea rdx, [rsp + 0x110]; call rdi; 
0x0000000000452de8: lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000452473: lea rdx, [rsp + 0x50]; mov eax, r8d; call rsi; 
0x0000000000428565: lea rdx, [rsp + 0x80]; call rdi; 
0x00000000004115da: lea rsi, [rax + rdx*8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000452735: lea rsi, [rax + rdx]; lea rcx, [rip + 0x42f17]; mov edi, 5; add rsp, 0x20; pop rbp; ret; 
0x00000000004647c6: lea rsi, [rcx + 1]; mov qword ptr [rsp + 0x68], rsi; mov rax, rbx; mov rbx, rcx; mov rcx, rsi; call rdx; 
0x0000000000458a1a: lea rsi, [rdi + rax]; and rbx, rsi; mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000047a0c6: lea rsi, [rip + 0x1b4d1]; mov r8d, 5; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000047a186: lea rsi, [rip + 0x1b4ee]; mov r8d, 6; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000047a066: lea rsi, [rip + 0x1b608]; mov r8d, 6; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000045af3a: lea rsi, [rip - 0xc21]; mov rdx, 0; mov rcx, 0; call rax; 
0x000000000045eeba: lea rsi, [rsp + 0x10]; mov rax, qword ptr [rip + 0xf172a]; cmp rax, 0; je 0x5ef20; call rax; 
0x000000000045ef2e: lea rsi, [rsp]; mov rax, 0xe4; syscall; 
0x000000000045eed3: lea rsi, [rsp]; mov rax, qword ptr [rip + 0xf1712]; call rax; 
0x000000000045e8ba: lea rsi, [rsp]; mov rax, qword ptr [rip + 0xf1d2b]; cmp rax, 0; je 0x5e905; call rax; 
0x0000000000416502: leave; add al, byte ptr [rax]; add rsp, 0x48; pop rbp; ret; 
0x0000000000430625: leave; add al, byte ptr [rax]; mov qword ptr [r11], rcx; mov qword ptr [rax + 0x28], 0; pop rbp; ret; 
0x000000000041fb13: leave; add dword ptr [rax + 0x48084888], edx; add esp, 0x18; pop rbp; ret; 
0x00000000004390dc: leave; add rsp, 0x100; pop rbp; ret; 
0x00000000004625c1: leave; add rsp, 0x10; pop rbp; ret; 
0x0000000000463f43: leave; add rsp, 0x28; pop rbp; ret; 
0x0000000000460abc: leave; add rsp, 0x30; pop rbp; ret; 
0x000000000043a345: leave; add rsp, 0x38; pop rbp; ret; 
0x00000000004778cd: leave; add rsp, 0x40; pop rbp; ret; 
0x000000000044ccf4: leave; add rsp, 0x58; pop rbp; ret; 
0x0000000000431ffb: leave; add rsp, 0x68; pop rbp; ret; 
0x0000000000449679: leave; add rsp, 0x78; pop rbp; nop; ret; 
0x0000000000449730: leave; add rsp, 0x78; pop rbp; ret; 
0x000000000045a3bd: leave; aesenc xmm1, xmm1; aesenc xmm1, xmm1; movq rax, xmm1; ret; 
0x000000000045a3c2: leave; aesenc xmm1, xmm1; movq rax, xmm1; ret; 
0x000000000040c129: leave; call 0x15c40; mov rax, qword ptr [rsp + 0x48]; add rsp, 0x58; pop rbp; ret; 
0x0000000000437e79: leave; call 0x37a40; add rsp, 0x18; pop rbp; ret; 
0x0000000000444b30: leave; call 0x3cd00; add rsp, 0x58; pop rbp; ret; 
0x0000000000459ff2: leave; call 0x42ea0; add rsp, 0x18; pop rbp; ret; 
0x0000000000415e26: leave; call 0x42ea0; add rsp, 0x88; pop rbp; ret; 
0x000000000042e3a8: leave; call 0x4820; add rsp, 0x38; pop rbp; ret; 
0x000000000042e40a: leave; call 0x4820; add rsp, 0x40; pop rbp; ret; 
0x0000000000409f26: leave; call 0x9100; add rsp, 0x18; pop rbp; ret; 
0x0000000000464900: leave; call rdi; 
0x000000000046494b: leave; call rsi; 
0x0000000000402ed0: leave; cmp rbx, rdx; setg al; sete cl; lea rax, [rcx + rax*2 - 1]; ret; 
0x0000000000465f2f: leave; cmp rcx, rsi; jg 0x65f3f; add rsp, 0x690; pop rbp; ret; 
0x00000000004645e7: leave; dec r9; mov rax, rbx; mov rbx, r9; call rsi; 
0x0000000000412d02: leave; ja 0x12cee; pop rbp; ret; 
0x0000000000417f48: leave; je 0x17f12; call 0x2a2e0; add rsp, 0x18; pop rbp; ret; 
0x000000000041da43: leave; je 0x1da14; add rsp, 0x18; pop rbp; ret; 
0x0000000000426d0f: leave; je 0x26d1b; mov rax, rbx; add rsp, 0x10; pop rbp; ret; 
0x000000000042c975: leave; je 0x2c959; ret; 
0x000000000044a6e2: leave; je 0x4a76a; mov ebx, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000405121: leave; je 0x51c5; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x000000000045498c: leave; je 0x54997; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004593a6: leave; je 0x5933a; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000045a306: leave; je 0x5a30e; call 0x5cde0; ret; 
0x0000000000460342: leave; je 0x6034e; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000460551: leave; je 0x6055e; mov rax, qword ptr [rcx + 0x40]; add rsp, 0x10; pop rbp; ret; 
0x00000000004625b3: leave; je 0x62593; add rsp, 0x10; pop rbp; ret; 
0x000000000046bd62: leave; je 0x6bd6e; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x000000000040924f: leave; je 0x9261; xor eax, eax; add rsp, 0x38; pop rbp; ret; 
0x0000000000415ad8: leave; jg 0x15ae6; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x0000000000439cd6: leave; jl 0x39ce4; call 0x38040; add rsp, 0x10; pop rbp; ret; 
0x0000000000419de1: leave; jne 0x19df5; mov qword ptr [rax + 0x190], 0; add rsp, 0x58; pop rbp; ret; 
0x000000000042a44c: leave; jne 0x2a3e9; add rsp, 0x20; pop rbp; ret; 
0x0000000000404d77: leave; jne 0x4d82; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000045eae1: leave; jne 0x5eafb; mov rcx, qword ptr [rip + 0xc3bb5]; lea r9, [rip - 0xf2]; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x000000000047a271: leave; lea rbx, [rax + 0x40]; mov qword ptr [rsp + 0x58], rbx; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x000000000046ecfb: leave; mov byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x00000000004731d0: leave; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x00000000004549d0: leave; mov eax, ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000456118: leave; mov eax, ecx; add rsp, 0x120; pop rbp; ret; 
0x000000000045fbb2: leave; mov eax, ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000472cf9: leave; mov eax, ecx; add rsp, 0x28; pop rbp; ret; 
0x000000000045427c: leave; mov eax, ecx; add rsp, 0x30; pop rbp; ret; 
0x0000000000415bb5: leave; mov eax, ecx; add rsp, 8; pop rbp; ret; 
0x0000000000401210: leave; mov eax, ecx; pop rbp; ret; 
0x0000000000403f16: leave; mov eax, ecx; ret; 
0x0000000000460f5c: leave; mov edi, 1; add rsp, 0x28; pop rbp; ret; 
0x0000000000460ef4: leave; mov edi, ecx; add rsp, 0x28; pop rbp; ret; 
0x0000000000440620: leave; mov qword ptr [rbx + rcx*8], rdx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000430a2d: leave; mov qword ptr [rcx], 0; add rsp, 0xa0; pop rbp; ret; 
0x0000000000467ef1: leave; mov qword ptr [rdx + 0x20], r9; add rsp, 0x88; pop rbp; ret; 
0x00000000004645ea: leave; mov rax, rbx; mov rbx, r9; call rsi; 
0x000000000040c25c: leave; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000434855: leave; mov rax, rcx; mov rbx, rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000040193d: leave; mov rax, rcx; ret; 
0x00000000004608f9: leave; mov rdx, qword ptr [rax + 0x28]; mov rax, rcx; call rdx; 
0x0000000000477fd6: leave; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x00000000004115c8: leave; mov rsi, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000045a3c7: leave; movq rax, xmm1; ret; 
0x000000000041fcba: leave; movsd qword ptr [rax + 0x28], xmm1; mov byte ptr [rax + 0x31], 1; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x0000000000435e1e: leave; nop; call 0x42ea0; add rsp, 0x18; pop rbp; ret; 
0x00000000004160bd: leave; nop; call 0x42ea0; add rsp, 0x88; pop rbp; ret; 
0x0000000000456e4a: leave; or byte ptr [rax + 0x2b80148], 0; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000456ef1: leave; or byte ptr [rax + 0x4b80348], 0; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x00000000004348f3: leave; ret; 
0x0000000000415bd5: leave; setg al; add rsp, 8; pop rbp; ret; 
0x000000000040a931: leave; setne al; add rsp, 0x30; pop rbp; ret; 
0x0000000000458989: leave; setne al; ret; 
0x0000000000402e62: leave; shr rax, cl; and rax, 1; lea rax, [rax*2 - 1]; ret; 
0x000000000042ec70: leave; xchg byte ptr [rax], cl; add rsp, 0xd8; pop rbp; ret; 
0x0000000000418883: leave; xchg byte ptr [rax], cl; ret; 
0x000000000044441c: leave; xchg dword ptr [rax + 0x33c], ecx; add rsp, 0x20; pop rbp; ret; 
0x000000000046fa04: leave; xchg eax, edi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000042c0e8: leave; xchg qword ptr [rax + 0x10], rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000044dacd: leave; xchg qword ptr [rax + 0x1210], rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000044d926: leave; xchg qword ptr [rax + 0x1210], rcx; mov rax, rbx; add rsp, 0x28; pop rbp; ret; 
0x00000000004592a8: leave; xchg qword ptr [rax + 0x28], rcx; xor eax, eax; ret; 
0x0000000000452b90: leave; xor esi, esi; call 0x52be0; add rsp, 0x28; pop rbp; ret; 
0x00000000004546fd: leave; xor esi, esi; call 0x52be0; add rsp, 0x30; pop rbp; ret; 
0x0000000000478371: ljmp [rcx]; mov byte ptr [rax + 0xb3], 0; add rsp, 0x88; pop rbp; ret; 
0x000000000043b9bd: lldt word ptr [rax - 0x3fcef78b]; add rsp, 0x38; pop rbp; ret; 
0x00000000004485a9: lock add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x00000000004489fa: lock add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x000000000042ed28: lock add byte ptr [rax], al; add byte ptr [rax], al; jne 0x2ed35; add rsp, 0x10; pop rbp; ret; 
0x000000000042eda7: lock add byte ptr [rax], al; add byte ptr [rax], al; jne 0x2edb4; add rsp, 0x10; pop rbp; ret; 
0x000000000047b204: lock add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000471664: lock add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0x4d20; 
0x000000000041d87c: lock add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000043ad2c: lock add dword ptr [r8], r8d; lea rax, [rip + 0x63691]; call 0x5b0a0; add rsp, 0x28; pop rbp; ret; 
0x0000000000439907: lock add dword ptr [rbp - 0x7c], eax; sal byte ptr [rsp + rsi*4 - 0x15], 0x2b; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x000000000043d2ec: lock and dword ptr [rax], esi; add rsp, 0x10; pop rbp; ret; 
0x0000000000435594: lock cmpxchg dword ptr [rbx + 0x90], ecx; sete al; add rsp, 0x10; pop rbp; ret; 
0x0000000000435aec: lock cmpxchg dword ptr [rcx + 0x90], edx; sete al; add rsp, 0x10; pop rbp; ret; 
0x000000000042c96c: lock cmpxchg dword ptr [rsi + 0x18], edx; sete cl; test cl, cl; je 0x2c959; ret; 
0x0000000000460206: lock cmpxchg qword ptr [rdx], rcx; sete al; ret; 
0x0000000000425920: lock inc dword ptr [rax]; add byte ptr [rdi], cl; xchg eax, edi; ret 0xaeb; 
0x0000000000425a18: lock inc dword ptr [rax]; add byte ptr [rdi], cl; xchg eax, edi; ret 0xeb90; 
0x000000000040dda7: lock or byte ptr [rcx], dl; mov rax, rsi; call 0xde00; add rsp, 0x10; pop rbp; ret; 
0x0000000000413d50: lock or byte ptr [rdx], bl; xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x0000000000414844: lock or dword ptr [rdx], ecx; add rsp, 0x18; pop rbp; ret; 
0x00000000004149a5: lock or dword ptr [rdx], ecx; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x0000000000436ff5: lock xadd dword ptr [rcx], eax; add rsp, 0x48; pop rbp; ret; 
0x0000000000446356: lock xadd dword ptr [rdi], ecx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000044630f: lock xadd dword ptr [rdi], ecx; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x000000000044d4cf: lock xadd dword ptr [rdx + 0x22a0], eax; add rsp, 0x48; pop rbp; ret; 
0x00000000004614eb: lock xadd dword ptr [rdx], eax; add rsp, 0x40; pop rbp; ret; 
0x00000000004584a8: lock xadd dword ptr [rdx], eax; mov byte ptr [rcx + 0x1260], 0; add rsp, 8; pop rbp; ret; 
0x000000000042cc51: lock xadd dword ptr [rdx], ecx; add rsp, 8; pop rbp; ret; 
0x00000000004463d2: lock xadd dword ptr [rdx], ecx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004371a4: lock xadd dword ptr [rdx], ecx; mov rax, qword ptr [rsp + 0x18]; call 0x37420; add rsp, 0x28; pop rbp; ret; 
0x00000000004090cc: lock xadd qword ptr [rax + 0x500], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090b8: lock xadd qword ptr [rax + 0x508], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090a8: lock xadd qword ptr [rax], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004620d4: lock xadd qword ptr [rax], rcx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000418b45: lock xadd qword ptr [rax], rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000041a2fc: lock xadd qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000413eeb: lock xadd qword ptr [rcx], rdx; call 0x14080; add rsp, 0x10; pop rbp; ret; 
0x00000000004580a8: lock xadd qword ptr [rcx], rdx; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x38; pop rbp; ret; 
0x00000000004225ad: lock xadd qword ptr [rdx], rax; mov qword ptr [rcx + 0x18], 0; add rsp, 8; pop rbp; nop; ret; 
0x0000000000421465: lock xadd qword ptr [rdx], rcx; mov eax, 1; add rsp, 0xf8; pop rbp; ret; 
0x000000000042115c: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; xor eax, eax; add rsp, 0xf8; pop rbp; ret; 
0x00000000004692b8: lodsb al, byte ptr [rsi]; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x000000000045b3dd: lodsb al, byte ptr [rsi]; and al, 0xb0; add byte ptr [rax], al; add bl, dh; movd dword ptr [r12 + 0xb8], mm6; ret; 
0x000000000040356d: lodsb al, byte ptr [rsi]; mov qword ptr [r8], rdx; ret; 
0x0000000000458288: lodsb al, byte ptr [rsi]; or al, 0; call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x000000000040ab32: lodsb al, byte ptr [rsi]; or byte ptr [rax], al; mov ebx, 7; ret; 
0x00000000004195f0: lodsb al, byte ptr [rsi]; sbb eax, 0x8b480000; and al, 0x28; add rsp, 0x30; pop rbp; ret; 
0x000000000042f02a: lodsb al, byte ptr [rsi]; std; dec dword ptr [rax - 0x77]; ret; 
0x00000000004495a4: lodsb al, byte ptr [rsi]; sti; or al, 0; add byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x0000000000458287: lodsb al, byte ptr gs:[rsi]; or al, 0; call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x00000000004255c2: lodsd eax, dword ptr [rsi]; adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000458e9c: lodsd eax, dword ptr [rsi]; fisubr word ptr [rbp + 0x48deadde]; cmp eax, ecx; setne cl; mov eax, ecx; ret; 
0x0000000000458e9e: lodsd eax, dword ptr [rsi]; fisubr word ptr [rbp - 0x37c6b722]; setne cl; mov eax, ecx; ret; 
0x000000000042eeea: lodsd eax, dword ptr [rsi]; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000041075c: loope 0x10759; mov byte ptr [rbx + 8], cl; add rsp, 0x60; pop rbp; ret; 
0x0000000000401066: loope 0x1087; cmp rcx, 0x11; jne 0x1073; mov rax, qword ptr [rax + 0x40]; ret; 
0x0000000000411bc5: loope 0x11bb0; ret; 
0x000000000041fa2c: loope 0x1fa2c; nop; mov byte ptr [rax + 8], cl; add rsp, 0x18; pop rbp; ret; 
0x0000000000420b23: loope 0x20b25; add byte ptr [rax], al; add byte ptr [rbp - 0x72db8a37], 0x72; add dword ptr [rax - 0x77], ecx; ret; 
0x0000000000429bce: loope 0x29bd6; sub r9, rsi; mov rax, r9; mov rbx, rdx; ret; 
0x0000000000429c0a: loope 0x29c12; lea rax, [rsi + r9]; mov rbx, rdx; ret; 
0x000000000042bd2c: loope 0x2bd32; mov rax, rdx; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x00000000004346fb: loope 0x346cf; cld; dec dword ptr [rdi]; mov dh, 0xd; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000435a7b: loope 0x35ac5; add esp, 0x10; pop rbp; ret; 
0x00000000004424b6: loope 0x424bc; lea rdx, [rip + 0xdd781]; mov rax, qword ptr [rdx + rcx]; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000044ad0b: loope 0x4ad55; xor eax, edx; ret; 
0x000000000045499f: loope 0x549a2; setae al; add rsp, 0x10; pop rbp; ret; 
0x0000000000454ec7: loope 0x54eca; add rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x00000000004602a7: loope 0x602aa; add rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000046b967: loope 0x6b9c9; or rcx, 0x13; mov rbx, qword ptr [rsp + 0xe8]; add rsp, 0x270; pop rbp; ret; 
0x000000000046bb87: loope 0x6bb8a; add rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000046ef0c: loope 0x6ef2d; mov rax, rcx; ret; 
0x000000000046f59f: loope 0x6f5aa; jae 0x6f5ab; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000408e4b: loope 0x8e95; xor eax, edx; mul rdi; xor rax, rdx; ret; 
0x0000000000408fbf: loope 0x9009; xor eax, edx; nop; nop; ret; 
0x0000000000409020: loope 0x906a; xor eax, edx; nop; nop; ret; 
0x00000000004093f4: loope 0x943f; cmp dword ptr [rax + 8], ecx; jne 0x93d6; mov rax, r8; ret; 
0x000000000040a54a: loope 0xa594; add esp, 0x30; pop rbp; ret; 
0x000000000040eba1: loope 0xeb9a; mov byte ptr [rax + 8], cl; pop rbp; ret; 
0x000000000040f1aa: loope 0xf1a7; mov byte ptr [rbx + 8], cl; add rsp, 0x30; pop rbp; ret; 
0x000000000040fad4: loope 0xfad1; mov byte ptr [rbx + 8], cl; add rsp, 0x30; pop rbp; ret; 
0x0000000000427556: mov ah, 0; add al, ch; ret 0xb3; 
0x0000000000405a56: mov ah, 0; add byte ptr [rax + 1], bh; xor ebx, ebx; add rsp, 0x68; pop rbp; ret; 
0x000000000045028f: mov ah, 0x10; sbb byte ptr [rax + rax], al; add byte ptr [rax - 1], cl; ret 0x8948; 
0x0000000000440845: mov ah, 0x24; or byte ptr [rcx], al; add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x108]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000046448d: mov ah, 0x48; add esp, 0x40; pop rbp; ret; 
0x00000000004414e8: mov ah, 0x76; add dword ptr [rax], eax; mov rcx, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000418048: mov ah, 0xae; adc byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000046ffca: mov ah, byte ptr [rax + 0x48000000]; mov eax, ebx; call rcx; 
0x0000000000471c1f: mov al, 0; add byte ptr [rax], al; call rcx; 
0x000000000045b31f: mov al, 0; add byte ptr [rax], al; movq qword ptr [r12 + 0xb8], xmm14; ret; 
0x000000000045b3df: mov al, 0; add byte ptr [rax], al; movq xmm14, qword ptr [r12 + 0xb8]; ret; 
0x0000000000426545: mov al, 0; add byte ptr [rax], al; pop rbp; ret; 
0x000000000043fb49: mov al, 0x48; add esp, 0x30; pop rbp; ret; 
0x0000000000474f5c: mov al, 0xd8; or al, byte ptr [rax]; pop rbp; ret; 
0x000000000045e12b: mov al, 0xf3; movq qword ptr [rbx - 0x40], mm1; movdqu xmmword ptr [rbx - 0x30], xmm10; movdqu xmmword ptr [rbx - 0x20], xmm11; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e207: mov al, 0xf3; movq qword ptr [rcx - 0x40], mm1; movdqu xmmword ptr [rcx - 0x30], xmm10; movdqu xmmword ptr [rcx - 0x20], xmm11; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000045dc89: mov al, 0xf3; movq qword ptr [rdi + rbx - 0x40], mm7; movdqu xmmword ptr [rdi + rbx - 0x30], xmm15; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x0000000000453f2f: mov al, 1; add byte ptr [rax], al; mov qword ptr [rdx], rax; add rsp, 0x1b8; pop rbp; ret; 
0x000000000046c419: mov al, 3; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000455632: mov al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x40; pop rbp; ret; 
0x000000000045ddbc: mov al, byte ptr [rsi]; mov cl, byte ptr [rsi + rbx - 1]; mov byte ptr [rdi], al; mov byte ptr [rdi + rbx - 1], cl; ret; 
0x000000000045ddcf: mov ax, word ptr [rsi]; mov cl, byte ptr [rsi + 2]; mov word ptr [rdi], ax; mov byte ptr [rdi + 2], cl; ret; 
0x000000000045b025: mov bh, 0x1d; add byte ptr [rax], al; ret; 
0x000000000040cb66: mov bh, 0x50; or bh, bh; ret 0x8966; 
0x0000000000457394: mov bh, 0x51; add ah, byte ptr [rsi - 9]; ret 1; 
0x000000000040cbce: mov bh, 0x57; or bh, bh; ret 0x8966; 
0x000000000044610e: mov bh, 0xf7; ret 6; 
0x000000000045b485: mov bh, 6; add byte ptr [rax], al; jmp rax; 
0x0000000000403ea1: mov bh, 8; cmp word ptr [rbx], cx; sete al; ret; 
0x0000000000474ee4: mov bh, bh; add eax, dword ptr [rax]; add rsp, 0x48; pop rbp; ret; 
0x0000000000473301: mov bh, byte ptr [rax + 1]; add rsp, 0x30; pop rbp; ret; 
0x0000000000405b02: mov bl, 0; add byte ptr [rax + 1], bh; xor ebx, ebx; add rsp, 0x68; pop rbp; ret; 
0x000000000045698a: mov bl, 0x31; ror byte ptr [rax - 0x7f], 0xc4; and byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000042f3e9: mov bl, 0xa8; std; dec dword ptr [rax - 0x77]; ret; 
0x00000000004255c1: mov bl, 0xad; adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000042eee9: mov bl, 0xad; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000429612: mov bl, 0xd1; nop; mov qword ptr [rax + rbx*8], rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000462719: mov bl, 0xfe; or eax, dword ptr [rax]; add rsp, 0x10; pop rbp; ret; 
0x000000000047c95d: mov bl, byte ptr [rax + 0x48000000]; mov eax, edi; call rcx; 
0x000000000042bd32: mov bl, byte ptr [rdi]; add eax, dword ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x000000000047844f: mov byte ptr [r10 + 0x4c], dl; add rsp, 0x38; pop rbp; ret; 
0x000000000041f268: mov byte ptr [r8 + 0x4c], bl; mov rax, r8; call 0x28c80; add rsp, 0x18; pop rbp; ret; 
0x000000000042f6e1: mov byte ptr [r8 + 1], 1; mov rax, r8; add rsp, 0x58; pop rbp; ret; 
0x000000000041acea: mov byte ptr [rax + 0x110], 0; add rsp, 0x58; pop rbp; ret; 
0x0000000000437a24: mov byte ptr [rax + 0x114], 1; ret; 
0x000000000042c647: mov byte ptr [rax + 0x12], ch; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x000000000041850b: mov byte ptr [rax + 0x21], 0; call 0x188a0; add rsp, 0x18; pop rbp; ret; 
0x000000000041fca2: mov byte ptr [rax + 0x30], 1; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x000000000041fcc0: mov byte ptr [rax + 0x31], 1; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x00000000004445e5: mov byte ptr [rax + 0x48000000], al; add esp, 0x68; pop rbp; ret; 
0x000000000046fe55: mov byte ptr [rax + 0x48000000], bl; mov eax, ebx; call rcx; 
0x000000000040e2ab: mov byte ptr [rax + 0x4b], cl; mov qword ptr [rax + 0x58], r10; add rsp, 0x60; pop rbp; ret; 
0x000000000041f269: mov byte ptr [rax + 0x4c], bl; mov rax, r8; call 0x28c80; add rsp, 0x18; pop rbp; ret; 
0x0000000000478373: mov byte ptr [rax + 0xb3], 0; add rsp, 0x88; pop rbp; ret; 
0x000000000043235e: mov byte ptr [rax + 0xb4], 0; add rsp, 0x10; pop rbp; ret; 
0x0000000000406d15: mov byte ptr [rax + 0xb4], 0; add rsp, 0x40; pop rbp; ret; 
0x0000000000458140: mov byte ptr [rax + 0xb6], 0; mov qword ptr [rax + 0x190], 0; ret; 
0x0000000000419566: mov byte ptr [rax + 0xb6], 1; add rsp, 0x40; pop rbp; ret; 
0x000000000042f6e2: mov byte ptr [rax + 1], 1; mov rax, r8; add rsp, 0x58; pop rbp; ret; 
0x0000000000456e4c: mov byte ptr [rax + 1], cl; mov eax, 2; add rsp, 0x10; pop rbp; ret; 
0x0000000000456eb1: mov byte ptr [rax + 2], dl; mov eax, 3; add rsp, 0x10; pop rbp; ret; 
0x0000000000456ef3: mov byte ptr [rax + 3], cl; mov eax, 4; add rsp, 0x10; pop rbp; ret; 
0x000000000041fa2f: mov byte ptr [rax + 8], cl; add rsp, 0x18; pop rbp; ret; 
0x000000000040eba3: mov byte ptr [rax + 8], cl; pop rbp; ret; 
0x00000000004351f4: mov byte ptr [rax - 0x7c], 0xf6; je 0x35201; add rsp, 0x30; pop rbp; nop; ret; 
0x0000000000449162: mov byte ptr [rax], 0; ret; 
0x00000000004572db: mov byte ptr [rax], 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004165b6: mov byte ptr [rax], 1; add rsp, 0x30; pop rbp; ret; 
0x000000000045ed3c: mov byte ptr [rax], al; add byte ptr [rax], al; add r8, 8; or rdi, 0x80000; mov eax, 0x38; syscall; 
0x000000000046ecfc: mov byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000465bf4: mov byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x3d0; pop rbp; ret; 
0x0000000000411e86: mov byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x48; pop rbp; ret; 
0x00000000004101c8: mov byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x00000000004326c6: mov byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x70; pop rbp; ret; 
0x0000000000433855: mov byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdx]; call rax; 
0x000000000041e382: mov byte ptr [rax], al; add byte ptr [rax], al; mov rbx, qword ptr [rdx]; mov eax, 0x10000; call rbx; 
0x000000000046075d: mov byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x90]; call rdx; 
0x0000000000465338: mov byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x98]; add rsp, 0x120; pop rbp; ret; 
0x0000000000406751: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000456e1c: mov byte ptr [rax], bh; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000456e1b: mov byte ptr [rax], dil; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004540a7: mov byte ptr [rbp - 0x77], 0xc8; call 0x54120; add rsp, 0x20; pop rbp; ret; 
0x000000000040f1ac: mov byte ptr [rbx + 8], cl; add rsp, 0x30; pop rbp; ret; 
0x000000000041075e: mov byte ptr [rbx + 8], cl; add rsp, 0x60; pop rbp; ret; 
0x0000000000477d50: mov byte ptr [rbx + rax - 1], 0x3f; sub rsp, -0x80; pop rbp; ret; 
0x0000000000469095: mov byte ptr [rbx + rax - 1], al; mov rcx, rdx; add rsp, 0x88; pop rbp; ret; 
0x00000000004692de: mov byte ptr [rbx + rax - 1], bh; add rsp, 0x70; pop rbp; ret; 
0x0000000000465e1c: mov byte ptr [rbx + rax - 1], cl; add rsp, 0x58; pop rbp; ret; 
0x0000000000462ef0: mov byte ptr [rbx + rax - 1], dh; add rsp, 0x48; pop rbp; ret; 
0x00000000004692dd: mov byte ptr [rbx + rax - 1], dil; add rsp, 0x70; pop rbp; ret; 
0x0000000000462e7c: mov byte ptr [rbx + rax - 1], dl; add rsp, 0x48; pop rbp; ret; 
0x0000000000469094: mov byte ptr [rbx + rax - 1], r8b; mov rcx, rdx; add rsp, 0x88; pop rbp; ret; 
0x0000000000465e1b: mov byte ptr [rbx + rax - 1], r9b; add rsp, 0x58; pop rbp; ret; 
0x0000000000462eef: mov byte ptr [rbx + rax - 1], sil; add rsp, 0x48; pop rbp; ret; 
0x0000000000465e16: mov byte ptr [rbx + rax - 2], 0x25; mov byte ptr [rbx + rax - 1], r9b; add rsp, 0x58; pop rbp; ret; 
0x000000000044441e: mov byte ptr [rbx + rax], bh; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000047836e: mov byte ptr [rbx + rdx - 1], 0x29; mov byte ptr [rax + 0xb3], 0; add rsp, 0x88; pop rbp; ret; 
0x000000000047cc01: mov byte ptr [rbx + rdx - 1], 0xa; add rsp, 0x60; pop rbp; ret; 
0x000000000046673d: mov byte ptr [rbx + rsi - 1], dl; mov rax, rsi; add rsp, 0x70; pop rbp; ret; 
0x0000000000446077: mov byte ptr [rcx + 0x116], 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000450984: mov byte ptr [rcx + 0x11e0], 1; movups xmmword ptr [rcx + 0x11e8], xmm15; add rsp, 0x10; pop rbp; ret; 
0x00000000004584ac: mov byte ptr [rcx + 0x1260], 0; add rsp, 8; pop rbp; ret; 
0x0000000000430ddd: mov byte ptr [rcx + 0x30], 1; mov rax, qword ptr [rcx + 8]; mov rbx, qword ptr [rcx + 0x10]; ret; 
0x00000000004156c6: mov byte ptr [rcx + 0x40], 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000459832: mov byte ptr [rcx + 0xb7], 0; add rsp, 0x30; pop rbp; ret; 
0x000000000045e752: mov byte ptr [rcx + rcx*4 - 0x19], 0x8b; push rsp; and al, 8; mov eax, 0xea; syscall; 
0x000000000045e752: mov byte ptr [rcx + rcx*4 - 0x19], 0x8b; push rsp; and al, 8; mov eax, 0xea; syscall; ret; 
0x0000000000429c07: mov byte ptr [rcx - 0x3f], cl; loope 0x29c12; lea rax, [rsi + r9]; mov rbx, rdx; ret; 
0x0000000000479eb5: mov byte ptr [rcx], al; add byte ptr [rax], al; call rdx; 
0x000000000044f8ef: mov byte ptr [rcx], al; add rsp, 0x68; pop rbp; ret; 
0x000000000045ddd8: mov byte ptr [rdi + 2], cl; ret; 
0x0000000000415434: mov byte ptr [rdi + 3], cl; add al, ch; ret; 
0x000000000045dbc1: mov byte ptr [rdi + rbx - 1], al; ret; 
0x000000000045ddc4: mov byte ptr [rdi + rbx - 1], cl; ret; 
0x000000000045dbbf: mov byte ptr [rdi], al; mov byte ptr [rdi + rbx - 1], al; ret; 
0x000000000045ddc2: mov byte ptr [rdi], al; mov byte ptr [rdi + rbx - 1], cl; ret; 
0x00000000004019b4: mov byte ptr [rdi], dl; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000425dd7: mov byte ptr [rdx + 0x10131], dh; add rsp, 0x20; pop rbp; ret; 
0x0000000000425dd6: mov byte ptr [rdx + 0x10131], sil; add rsp, 0x20; pop rbp; ret; 
0x0000000000450ab8: mov byte ptr [rdx + 0x11e0], 0; add rsp, 0x40; pop rbp; ret; 
0x0000000000418468: mov byte ptr [rdx + 0x20], cl; mov byte ptr [rdx + 0x21], 1; add rsp, 0x18; pop rbp; ret; 
0x000000000041846b: mov byte ptr [rdx + 0x21], 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000478450: mov byte ptr [rdx + 0x4c], dl; add rsp, 0x38; pop rbp; ret; 
0x0000000000479a83: mov byte ptr [rdx + 0x50], cl; add rsp, 0x90; pop rbp; ret; 
0x0000000000474b03: mov byte ptr [rdx + 0x52], dh; add rsp, 0x28; pop rbp; ret; 
0x0000000000474b02: mov byte ptr [rdx + 0x52], sil; add rsp, 0x28; pop rbp; ret; 
0x0000000000475e55: mov byte ptr [rdx + 0xe], cl; add rsp, 0x38; pop rbp; ret; 
0x00000000004313a2: mov byte ptr [rdx], al; add rsp, 0x40; pop rbp; ret; 
0x0000000000408cf8: mov byte ptr [rip + 0x119d99], 0; add rsp, 0x20; pop rbp; ret; 
0x0000000000434720: mov byte ptr [rip + 0x11bce9], cl; add rsp, 0x10; pop rbp; ret; 
0x0000000000413c7c: mov byte ptr [rip + 0x13c78e], 0; add rsp, 0x10; pop rbp; ret; 
0x0000000000413bf6: mov byte ptr [rip + 0x13c814], 1; add rsp, 0x38; pop rbp; ret; 
0x00000000004159bd: mov byte ptr [rip + 0x13e354], 1; add rsp, 0x18; pop rbp; ret; 
0x000000000040630d: mov byte ptr [rip + 0x14a0fd], al; ret; 
0x0000000000464a34: mov byte ptr [rip + 0xeb9cf], al; ret; 
0x000000000045827e: mov byte ptr [rip + 0xf83bc], cl; mov rax, qword ptr [rip + 0xcac65]; call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x00000000004760df: mov byte ptr [rsi + 0xe], dl; add rsp, 0x38; pop rbp; ret; 
0x0000000000475cc6: mov byte ptr [rsi + 0xe], dl; add rsp, 0x50; pop rbp; ret; 
0x0000000000476f8b: mov byte ptr [rsi + 0xe], dl; add rsp, 0xd8; pop rbp; ret; 
0x0000000000473cb8: mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x000000000043384c: mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x88]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004740c2: mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000452dd7: mov byte ptr [rsp + 0x2f8], dh; mov rcx, qword ptr [rsp + 0x2c8]; xor eax, eax; lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000452dd6: mov byte ptr [rsp + 0x2f8], sil; mov rcx, qword ptr [rsp + 0x2c8]; xor eax, eax; lea rdx, [rsp + 0x2c8]; call rcx; 
0x000000000042fd9c: mov byte ptr [rsp + 0x2f], 0; call 0x57da0; add rsp, 0x50; pop rbp; ret; 
0x0000000000461d96: mov byte ptr [rsp + 0x47], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000461dcf: mov byte ptr [rsp + 0x47], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; nop; call rax; 
0x000000000046170b: mov byte ptr [rsp + 0xe], al; mov byte ptr [rsp + 0xf], al; mov rdx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rdx]; call rcx; 
0x00000000004616f2: mov byte ptr [rsp + 0xf], 3; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000046170f: mov byte ptr [rsp + 0xf], al; mov rdx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000461729: mov byte ptr [rsp + 0xf], al; mov rdx, qword ptr [rsp + 0x48]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000406f75: mov byte ptr [rsp + 7], 0; mov rdx, qword ptr [rsp + 0x28]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004586a5: mov byte ptr [rsp + 7], 1; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x0000000000406f61: mov byte ptr [rsp + 7], 1; mov rdx, qword ptr [rsp + 0x10]; mov rax, qword ptr [rdx]; call rax; 
0x000000000045eae7: mov ch, 0x3b; or al, 0; lea r9, [rip - 0xf2]; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x00000000004793a7: mov ch, 0xd2; cld; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000004135ab: mov ch, byte ptr [rax + 0x48000004]; add esp, 0x18; pop rbp; ret; 
0x0000000000431954: mov cl, 0; add byte ptr [rax], al; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; mov eax, 1; ret; 
0x0000000000431893: mov cl, 0; add byte ptr [rax], al; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; xor eax, eax; ret; 
0x0000000000431fd3: mov cl, 0; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7f], cl; ret 0x3a0; 
0x0000000000430ecb: mov cl, 0x1a; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000042feab: mov cl, 0x2c; add byte ptr [rax], al; call 0x32980; add rsp, 0x10; pop rbp; ret; 
0x000000000041f253: mov cl, 0x50; cmp byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000043b937: mov cl, 0x51; add al, 0xf; xchg eax, esp; ret 0x1f0f; 
0x000000000043b42a: mov cl, 0x51; add al, 0xf; xchg eax, esp; ret 0x7eb; 
0x000000000043edf3: mov cl, 0x51; add al, 0xf; xchg eax, esp; ret; 
0x00000000004411b6: mov cl, 0x5e; adc byte ptr [rdi], cl; xchg eax, esp; ret 0x1f0f; 
0x000000000041c6cb: mov cl, 0x62; add dword ptr [rax], eax; add rsp, 0x40; pop rbp; ret; 
0x000000000041f222: mov cl, 0x70; xor byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x00000000004396d1: mov cl, 0x8a; cwde; or dword ptr [rax], eax; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x9eb; 
0x0000000000440605: mov cl, 0x90; add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000041d95f: mov cl, 0x91; lock add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x0000000000435a6f: mov cl, 0x91; nop; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000043980f: mov cl, 0x92; nop; add dword ptr [rax], eax; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x8445; 
0x0000000000440155: mov cl, 0x96; nop; add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret 0x9066; 
0x000000000041d87a: mov cl, 0x99; lock add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x0000000000460209: mov cl, 0xa; sete al; ret; 
0x0000000000440604: mov cl, 0xb1; nop; add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x0000000000405882: mov cl, 0xbb; push 0xf000001; xchg eax, esp; ret; 
0x000000000044f417: mov cl, 0xfb; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x10; pop rbp; ret; 
0x0000000000458982: mov cl, byte ptr [rip + 0xf7f9c]; test cl, cl; setne al; ret; 
0x000000000045ddd2: mov cl, byte ptr [rsi + 2]; mov word ptr [rdi], ax; mov byte ptr [rdi + 2], cl; ret; 
0x000000000045ddbe: mov cl, byte ptr [rsi + rbx - 1]; mov byte ptr [rdi], al; mov byte ptr [rdi + rbx - 1], cl; ret; 
0x0000000000402e24: mov cl, byte ptr [rsi + rbx]; cmp cl, byte ptr [rdi + rbx]; seta al; lea rax, [rax*2 - 1]; ret; 
0x000000000041ec56: mov cx, 0xfffe; mov rax, qword ptr [rsp + 0x60]; add rsp, 0x78; pop rbp; ret; 
0x0000000000458142: mov dh, 0; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; adc byte ptr [rax + 1], 0; add byte ptr [rax], al; ret; 
0x000000000046b502: mov dh, 0x14; xor dword ptr [rbx + 0xf4107e0], eax; stosd dword ptr [rdi], eax; ret 0x8845; 
0x000000000040dee6: mov dh, 0x1c; add dword ptr [rcx - 0x7d], eax; ret; 
0x000000000047690f: mov dh, 0x24; and dword ptr [rbp + 0x39], ecx; ret; 
0x000000000044deef: mov dh, 0x44; and al, 0x13; add rsp, 0x38; pop rbp; ret; 
0x000000000040aa86: mov dh, 0x44; and al, 0x17; add rsp, 0x28; pop rbp; ret; 
0x00000000004250d2: mov dh, 0x44; and al, 0x17; xor eax, 1; add rsp, 0x38; pop rbp; ret; 
0x0000000000479caf: mov dh, 0x44; and al, 0x2b; add rsp, 0x248; pop rbp; ret; 
0x0000000000435dcb: mov dh, 0x44; and al, 0x2f; call 0x35b40; add rsp, 0x30; pop rbp; ret; 
0x00000000004525bb: mov dh, 0x44; and al, 0x38; nop; call rcx; 
0x00000000004586c3: mov dh, 0x44; and al, 6; add rsp, 0x20; pop rbp; ret; 
0x0000000000408ca4: mov dh, 0x48; mov ecx, dword ptr [rip + 0x957bc]; mov rax, rsi; lea rdx, [rip + 0x957b2]; call rcx; 
0x0000000000431fe9: mov dh, 0x4c; and al, 0x16; add rsp, 0x68; pop rbp; ret; 
0x000000000043a433: mov dh, 0x4c; and al, 0x17; add rsp, 0x38; pop rbp; ret; 
0x0000000000460dfa: mov dh, 0x4c; and al, 0x1f; mov rbx, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbp; ret; 
0x0000000000403c13: mov dh, 0x50; adc al, 0xf6; ret 0xf08; 
0x0000000000411e37: mov dh, 0x50; push -0xa; ret 0x7501; 
0x000000000043aa0f: mov dh, 0x50; sub esi, esi; ret 0x7502; 
0x0000000000452631: mov dh, 0x52; adc al, 0x38; sal byte ptr [rbx + 6], 1; mov eax, 1; ret; 
0x000000000040d2cf: mov dh, 0x52; or byte ptr [rcx - 0xa], al; ret 0x7508; 
0x000000000040ec97: mov dh, 0x52; or dh, dh; ret 0x7508; 
0x0000000000409128: mov dh, 0x53; adc al, 0xf6; ret 0x7501; 
0x000000000040e00d: mov dh, 0x53; or byte ptr [rcx - 0xa], al; ret 0xf08; 
0x000000000040e4ef: mov dh, 0x53; or byte ptr [rdi], cl; mov dh, 0x73; or esi, esi; ret 0x7508; 
0x00000000004691bf: mov dh, 0x54; and al, 0x74; mov byte ptr [rbx + rax - 1], dl; add rsp, 0x48; pop rbp; ret; 
0x000000000041bb8f: mov dh, 0x57; push -0xa; ret 0x7401; 
0x0000000000415092: mov dh, 0x58; adc al, 0xf6; ret; 
0x00000000004525b3: mov dh, 0x5c; and al, 0x17; mov rcx, rax; movzx eax, byte ptr [rsp + 0x38]; nop; call rcx; 
0x0000000000405e6e: mov dh, 0x5c; and al, 0x2f; add rsp, 0x68; pop rbp; ret; 
0x000000000045246a: mov dh, 0x5c; cmp byte ptr [rcx], al; mov rsi, qword ptr [rsp + 0x50]; lea rdx, [rsp + 0x50]; mov eax, r8d; call rsi; 
0x000000000040e4f3: mov dh, 0x73; or esi, esi; ret 0x7508; 
0x00000000004397d0: mov dh, 0x74; and al, 0x1f; add rsp, 0x60; pop rbp; ret; 
0x0000000000474afe: mov dh, 0x74; and al, 0x27; mov byte ptr [rdx + 0x52], sil; add rsp, 0x28; pop rbp; ret; 
0x0000000000425dd2: mov dh, 0x74; and al, 0x48; mov byte ptr [rdx + 0x10131], sil; add rsp, 0x20; pop rbp; ret; 
0x00000000004357ad: mov dh, 0x97; mov esp, 0xff000000; ret 0x9788; 
0x000000000041883e: mov dh, 0xb4; adc eax, dword ptr [rax]; inc ecx; xchg dword ptr [rax + 0x48], ecx; ret; 
0x000000000040af09: mov dh, 0xbc; and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004424b2: mov dh, 0xc8; shl rcx, 4; lea rdx, [rip + 0xdd781]; mov rax, qword ptr [rdx + rcx]; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000044061f: mov dh, 0xc9; mov qword ptr [rbx + rcx*8], rdx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000402b4b: mov dh, 0xc; adc dword ptr [rax - 1], ecx; ret 0x8d43; 
0x0000000000412920: mov dh, 0xc; sbb dword ptr [rax + 0x675a1f9], eax; add rsp, 0x38; pop rbp; ret; 
0x00000000004799a6: mov dh, 0xcc; cld; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x0000000000434700: mov dh, 0xd; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043470d: mov dh, 0xd; pushfq; ret; 
0x000000000044eed4: mov dh, 0xfb; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x10; pop rbp; ret; 
0x0000000000469d84: mov dh, 2; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000403e81: mov dh, 8; cmp byte ptr [rbx], cl; sete al; ret; 
0x0000000000478c7e: mov dl, 0; add al, ch; fcmovu st(0), st(1); cld; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000004181de: mov dl, 0x10; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x58d4890], dl; ret 0x10b2; 
0x0000000000441404: mov dl, 0x48; add esp, 0x18; pop rbp; ret; 
0x0000000000408cb2: mov dl, 0x57; or dword ptr [rax], eax; call rcx; 
0x0000000000473651: mov dl, 0xa; add bl, ch; adc cl, byte ptr [rax - 0x77]; fsubr st(0); ret 0xf966; 
0x000000000041544a: mov dl, 0xb9; add dword ptr [rax], eax; add rsp, 0xc8; pop rbp; ret; 
0x000000000040eb14: mov dl, 1; add al, 0; add byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000047352a: mov dl, 4; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000408fbb: mov ds, word ptr [rip + 0x48e1f748]; xor eax, edx; nop; nop; ret; 
0x000000000045b23b: mov dword ptr [0xfffffffffffffff8], ebx; mov rsp, qword ptr [rbx + 0x38]; mov rbp, qword ptr [rbx + 0x68]; call 0x5f580; call 0x5cde0; ret; 
0x000000000045cdc7: mov dword ptr [0xfffffffffffffff8], ebx; ret; 
0x000000000045a322: mov dword ptr [0xfffffffffffffff8], edi; mov r14, rdi; ret; 
0x000000000045cd78: mov dword ptr [0xfffffffffffffff8], edi; mov rsp, rsi; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x000000000045b154: mov dword ptr [0xfffffffffffffff8], edx; mov r14, rdx; mov rsp, qword ptr [rdx + 0x38]; mov rdx, rdi; mov rdi, qword ptr [rdi]; call rdi; 
0x0000000000461034: mov dword ptr [rax + 0x10], 0; mov qword ptr [rax + 0x18], 0; add rsp, 0x10; pop rbp; ret; 
0x000000000040e491: mov dword ptr [rax + 0x10], ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000043c8ca: mov dword ptr [rax + 0x10], ecx; mov rcx, rax; mov rax, rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000040cf6b: mov dword ptr [rax + 0x10], edx; mov rdx, rcx; mov rax, rdx; add rsp, 0x38; pop rbp; ret; 
0x000000000042c646: mov dword ptr [rax + 0x1268], ecx; add rsp, 8; pop rbp; ret; 
0x0000000000424af7: mov dword ptr [rax + 0x16860], edx; add rsp, 0x48; pop rbp; ret; 
0x000000000046103c: mov dword ptr [rax + 0x18], 0; add rsp, 0x10; pop rbp; ret; 
0x00000000004491d1: mov dword ptr [rax + 0x18], ebx; pop rbp; ret; 
0x0000000000415873: mov dword ptr [rax + 0x18], ebx; ret; 
0x00000000004097fd: mov dword ptr [rax + 0x18], ebx; xor eax, eax; xor ebx, ebx; add rsp, 0xa0; pop rbp; ret; 
0x00000000004684cc: mov dword ptr [rax + 0x18], ecx; lea rcx, [rbx + 1]; mov qword ptr [rax + 0x20], rcx; add rsp, 0x18; pop rbp; ret; 
0x00000000004445db: mov dword ptr [rax + 0x18], ecx; mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rax + 0x80], rcx; add rsp, 0x68; pop rbp; ret; 
0x0000000000419de5: mov dword ptr [rax + 0x190], 0; add rsp, 0x58; pop rbp; ret; 
0x0000000000458148: mov dword ptr [rax + 0x190], 0; ret; 
0x0000000000468358: mov dword ptr [rax + 0x20], ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000404c31: mov dword ptr [rax + 0x20], ecx; mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rax + 8], rcx; add rsp, 0x30; pop rbp; ret; 
0x000000000043062c: mov dword ptr [rax + 0x28], 0; pop rbp; ret; 
0x00000000004572d8: mov dword ptr [rax + 0x28], ecx; mov byte ptr [rax], 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000429e1d: mov dword ptr [rax + 0x28], edx; add rsp, 0x18; pop rbp; ret; 
0x00000000004110ae: mov dword ptr [rax + 0x30], ebx; mov rax, r8; add rsp, 0x28; pop rbp; ret; 
0x0000000000415868: mov dword ptr [rax + 0x30], ecx; mov rcx, qword ptr [rax + 0x18]; mov qword ptr [rbx], rcx; mov qword ptr [rax + 0x18], rbx; ret; 
0x0000000000411040: mov dword ptr [rax + 0x30], edx; mov rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000046a1a3: mov dword ptr [rax + 0x30], edx; xor eax, eax; add rsp, 0xc8; pop rbp; ret; 
0x000000000043e278: mov dword ptr [rax + 0x38], 0; mov dword ptr [rax + 4], 0; add rsp, 0x38; pop rbp; ret; 
0x000000000045b190: mov dword ptr [rax + 0x38], 0; mov qword ptr [rax + 0x68], 0; pop rbp; ret; 
0x0000000000463f2f: mov dword ptr [rax + 0x40], 0; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000041372a: mov dword ptr [rax + 0x40], ebx; add rsp, 0x48; pop rbp; ret; 
0x0000000000410f8e: mov dword ptr [rax + 0x40], ecx; ret; 
0x000000000042e2ed: mov dword ptr [rax + 0x48], ecx; add rsp, 8; pop rbp; ret; 
0x000000000042c5eb: mov dword ptr [rax + 0x48], edx; ret; 
0x000000000040e2af: mov dword ptr [rax + 0x58], edx; add rsp, 0x60; pop rbp; ret; 
0x000000000045b198: mov dword ptr [rax + 0x68], 0; pop rbp; ret; 
0x0000000000447ed3: mov dword ptr [rax + 0x68], ecx; ret; 
0x00000000004445e4: mov dword ptr [rax + 0x80], ecx; add rsp, 0x68; pop rbp; ret; 
0x000000000043e27f: mov dword ptr [rax + 4], 0; add rsp, 0x38; pop rbp; ret; 
0x000000000043d65f: mov dword ptr [rax + 4], 4; add rsp, 0x58; pop rbp; ret; 
0x000000000047cbfe: mov dword ptr [rax + 8], ebx; mov byte ptr [rbx + rdx - 1], 0xa; add rsp, 0x60; pop rbp; ret; 
0x0000000000424e83: mov dword ptr [rax + 8], ebx; mov qword ptr [rax], rbx; mov qword ptr [rbx + 0x10], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000040ca38: mov dword ptr [rax + 8], ebx; mov rax, rdx; add rsp, 0x30; pop rbp; ret; 
0x000000000044388b: mov dword ptr [rax + 8], ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000404c3a: mov dword ptr [rax + 8], ecx; add rsp, 0x30; pop rbp; ret; 
0x0000000000424d0f: mov dword ptr [rax + 8], ecx; movups xmmword ptr [rbx], xmm15; mov qword ptr [rbx + 0x10], 0; add rsp, 0x28; pop rbp; ret; 
0x000000000042c60f: mov dword ptr [rax + 8], ecx; ret; 
0x00000000004507bc: mov dword ptr [rax + 8], edx; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000044f1f3: mov dword ptr [rax + rax*8], esi; add rsp, 0x18; pop rbp; ret; 
0x0000000000429511: mov dword ptr [rax + rbx*8], ecx; add rsp, 0x10; pop rbp; ret; 
0x000000000044003f: mov dword ptr [rax + rcx*8 + 0x198], ebx; xchg dword ptr [rax + 0x194], edx; add rsp, 0x20; pop rbp; ret; 
0x0000000000422fa4: mov dword ptr [rax + rcx*8], ebx; add rsp, 0x38; pop rbp; ret; 
0x000000000044eff1: mov dword ptr [rax + rdi*8], esi; mov rax, rdi; add rsp, 0x18; pop rbp; ret; 
0x000000000042acbc: mov dword ptr [rax + rdx*8], ecx; add rsp, 0x30; pop rbp; ret; 
0x000000000040a545: mov dword ptr [rax - 0x7c], 0x48e174ff; add esp, 0x30; pop rbp; ret; 
0x0000000000431175: mov dword ptr [rax], 0; add rsp, 0x30; pop rbp; ret; 
0x0000000000431305: mov dword ptr [rax], 0; add rsp, 0x40; pop rbp; ret; 
0x000000000045e605: mov dword ptr [rax], 0; mov edi, 0; mov eax, 0x3c; syscall; 
0x000000000042d7d7: mov dword ptr [rax], 0x1006; add rsp, 0x48; pop rbp; ret; 
0x000000000040351b: mov dword ptr [rax], 0xffffffff; ret; 
0x0000000000440a19: mov dword ptr [rax], 2; add rsp, 0x120; pop rbp; ret; 
0x0000000000477dd0: mov dword ptr [rax], eax; sub rsp, -0x80; pop rbp; ret; 
0x0000000000424e87: mov dword ptr [rax], ebx; mov qword ptr [rbx + 0x10], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000042c605: mov dword ptr [rax], ecx; add rcx, 0x1000; mov qword ptr [rax + 8], rcx; ret; 
0x0000000000409e15: mov dword ptr [rax], ecx; add rsp, 0x18; pop rbp; ret; 
0x000000000043c571: mov dword ptr [rax], ecx; add rsp, 0x210; pop rbp; ret; 
0x000000000040697a: mov dword ptr [rax], ecx; add rsp, 0x48; pop rbp; ret; 
0x000000000042cb74: mov dword ptr [rax], ecx; ret; 
0x0000000000409eb5: mov dword ptr [rax], edi; add rsp, 0x18; pop rbp; ret; 
0x0000000000403529: mov dword ptr [rax], edi; ret; 
0x0000000000478cc6: mov dword ptr [rax], edx; add rsp, 0xa8; pop rbp; ret; 
0x0000000000463524: mov dword ptr [rax], edx; mov qword ptr [rip + 0xbf18b], rcx; add rsp, 0x30; pop rbp; ret; 
0x0000000000409d61: mov dword ptr [rax], edx; mov rcx, rax; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000403551: mov dword ptr [rax], edx; ret; 
0x00000000004035d1: mov dword ptr [rax], edx; vzeroupper; ret; 
0x00000000004753c9: mov dword ptr [rax], esi; add rsp, 0x38; pop rbp; ret; 
0x0000000000424d17: mov dword ptr [rbx + 0x10], 0; add rsp, 0x28; pop rbp; ret; 
0x0000000000424e8a: mov dword ptr [rbx + 0x10], eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000443335: mov dword ptr [rbx + 0x10], eax; mov qword ptr [rsi + 0x48], rcx; mov qword ptr [rcx + 0x40], 0; add rsp, 0x20; pop rbp; ret; 
0x000000000041b060: mov dword ptr [rbx + 0x18], 0; add rsp, 0x50; pop rbp; ret; 
0x000000000045a28b: mov dword ptr [rbx + 0x18], 0; mov qword ptr [rbx + 0x30], 0; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x0000000000470950: mov dword ptr [rbx + 0x18], eax; mov qword ptr [rbx + rdx*8], r8; mov qword ptr [rbx + rdx*8 + 8], r9; add rsp, 0x10; pop rbp; ret; 
0x000000000045a283: mov dword ptr [rbx + 0x20], 0; mov qword ptr [rbx + 0x18], 0; mov qword ptr [rbx + 0x30], 0; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x000000000045a293: mov dword ptr [rbx + 0x30], 0; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x00000000004776a7: mov dword ptr [rbx + 0x49], 0; mov rax, rbx; add rsp, 0x18; pop rbp; ret; 
0x00000000004156bf: mov dword ptr [rbx + 8], eax; mov qword ptr [rcx + 0x38], rsi; mov byte ptr [rcx + 0x40], 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000472f60: mov dword ptr [rbx + 8], eax; mov qword ptr [rip + 0xaf86e], rcx; pop rbp; ret; 
0x0000000000460923: mov dword ptr [rbx + 8], eax; mov qword ptr [rip + 0xc1e5b], rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000042acb8: mov dword ptr [rbx + 8], ebx; mov qword ptr [rax + rdx*8], rcx; add rsp, 0x30; pop rbp; ret; 
0x000000000042fc3f: mov dword ptr [rbx + 8], ebx; mov qword ptr [rdx + 0x28], rcx; call 0x2f800; add rsp, 0x28; pop rbp; ret; 
0x000000000040e48d: mov dword ptr [rbx + 8], ecx; mov qword ptr [rax + 0x10], rbx; add rsp, 0x30; pop rbp; ret; 
0x00000000004491cd: mov dword ptr [rbx + 8], ecx; mov qword ptr [rax + 0x18], rbx; pop rbp; ret; 
0x000000000044f1ef: mov dword ptr [rbx + 8], ecx; mov qword ptr [rax + r8*8], rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000044efed: mov dword ptr [rbx + 8], ecx; mov qword ptr [rax + rdi*8], rsi; mov rax, rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000477dcc: mov dword ptr [rbx + 8], ecx; mov qword ptr [rax], r8; sub rsp, -0x80; pop rbp; ret; 
0x0000000000409eb1: mov dword ptr [rbx + 8], ecx; mov qword ptr [rax], rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000478cc2: mov dword ptr [rbx + 8], ecx; mov qword ptr [rax], rdx; add rsp, 0xa8; pop rbp; ret; 
0x00000000004753c5: mov dword ptr [rbx + 8], ecx; mov qword ptr [rax], rsi; add rsp, 0x38; pop rbp; ret; 
0x000000000047459d: mov dword ptr [rbx + 8], ecx; mov qword ptr [rbx], rax; lea rax, [rip + 0xe976]; add rsp, 0x20; pop rbp; ret; 
0x0000000000428cec: mov dword ptr [rbx + 8], ecx; mov qword ptr [rdi], rsi; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000042b524: mov dword ptr [rbx + 8], ecx; mov qword ptr [rdx + 0x20], rax; mov qword ptr [rdx + 0x18], 0; add rsp, 0x18; pop rbp; ret; 
0x000000000047b1a3: mov dword ptr [rbx + 8], ecx; mov qword ptr [rdx], rax; add rsp, 0x1d0; pop rbp; ret; 
0x000000000047970c: mov dword ptr [rbx + 8], ecx; mov qword ptr [rdx], rax; add rsp, 0x90; pop rbp; ret; 
0x00000000004729be: mov dword ptr [rbx + 8], ecx; mov qword ptr [rip + 0xac200], rax; pop rbp; ret; 
0x00000000004751d0: mov dword ptr [rbx + 8], ecx; mov qword ptr [rip + 0xad3d6], rax; add rsp, 0x18; pop rbp; nop; ret; 
0x0000000000474f56: mov dword ptr [rbx + 8], ecx; mov qword ptr [rip + 0xad8b0], rax; pop rbp; ret; 
0x0000000000470112: mov dword ptr [rbx + 8], ecx; mov qword ptr [rip + 0xb24ac], rax; add rsp, 0x48; pop rbp; ret; 
0x0000000000462713: mov dword ptr [rbx + 8], ecx; mov qword ptr [rip + 0xbfeb3], rax; add rsp, 0x10; pop rbp; ret; 
0x0000000000458ee3: mov dword ptr [rbx + 8], ecx; mov qword ptr [rip + 0xc9733], rax; pop rbp; ret; 
0x0000000000441550: mov dword ptr [rbx + 8], ecx; mov qword ptr [rip + 0xe1116], rbx; call 0x2dba0; add rsp, 0x10; pop rbp; ret; 
0x000000000042dc2c: mov dword ptr [rbx + 8], ecx; mov qword ptr [rip + 0xf4cfa], rax; add rsp, 0x40; pop rbp; ret; 
0x00000000004758b4: mov dword ptr [rbx + 8], ecx; mov qword ptr [rsi], rax; add rsp, 0x60; pop rbp; nop; ret; 
0x00000000004755f1: mov dword ptr [rbx + 8], ecx; mov qword ptr [rsi], rax; add rsp, 0x60; pop rbp; ret; 
0x000000000047718d: mov dword ptr [rbx + 8], ecx; mov qword ptr [rsi], rax; add rsp, 0xd8; pop rbp; ret; 
0x000000000040df78: mov dword ptr [rbx + 8], ecx; movups xmmword ptr [rax], xmm15; add rsp, 0x60; pop rbp; ret; 
0x0000000000443887: mov dword ptr [rbx + 8], edx; mov qword ptr [rax + 8], rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000409e11: mov dword ptr [rbx + 8], edx; mov qword ptr [rax], rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000434e4a: mov dword ptr [rbx + 8], edx; mov qword ptr [rcx + 0x140], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000040cd3c: mov dword ptr [rbx + 8], edx; mov qword ptr [rcx], r10; mov rax, r10; add rsp, 0x50; pop rbp; ret; 
0x000000000046221d: mov dword ptr [rbx + 8], edx; movups xmmword ptr [rsi], xmm15; mov ecx, 1; add rsp, 0x38; pop rbp; ret; 
0x00000000004472b6: mov dword ptr [rbx + rcx + 0x470], edx; add rsp, 0x38; pop rbp; ret; 
0x0000000000440622: mov dword ptr [rbx + rcx*8], edx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000470958: mov dword ptr [rbx + rdx*8 + 8], ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000470954: mov dword ptr [rbx + rdx*8], eax; mov qword ptr [rbx + rdx*8 + 8], r9; add rsp, 0x10; pop rbp; ret; 
0x0000000000403401: mov dword ptr [rbx], 0xffffffff; ret; 
0x000000000042dd56: mov dword ptr [rbx], eax; lea rax, [rip + 0x123d81]; mov qword ptr [rip + 0xf4bca], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000041decb: mov dword ptr [rbx], eax; lea rax, [rip + 0x803fc]; mov qword ptr [rcx + 0x98], rax; add rsp, 0x18; pop rbp; ret; 
0x00000000004745a1: mov dword ptr [rbx], eax; lea rax, [rip + 0xe976]; add rsp, 0x20; pop rbp; ret; 
0x0000000000461fcf: mov dword ptr [rbx], eax; mov qword ptr [rip + 0xc0874], 0; pop rbp; ret; 
0x00000000004729b4: mov dword ptr [rbx], eax; mov rcx, qword ptr [rip + 0xac20b]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xac200], rax; pop rbp; ret; 
0x0000000000474f4c: mov dword ptr [rbx], eax; mov rcx, qword ptr [rip + 0xad8bb]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xad8b0], rax; pop rbp; ret; 
0x0000000000458ed9: mov dword ptr [rbx], eax; mov rcx, qword ptr [rip + 0xc973e]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xc9733], rax; pop rbp; ret; 
0x00000000004491c6: mov dword ptr [rbx], ebx; mov rcx, qword ptr [rax + 0x18]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + 0x18], rbx; pop rbp; ret; 
0x0000000000442851: mov dword ptr [rbx], ecx; lea rcx, [rip + 0x544b0]; mov qword ptr [rdx + rax], rcx; add rsp, 0x58; pop rbp; ret; 
0x0000000000406c16: mov dword ptr [rbx], ecx; lea rcx, [rip + 0x91242]; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000406970: mov dword ptr [rbx], ecx; lea rcx, [rip + 0x9216b]; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000406ba6: mov dword ptr [rbx], ecx; lea rcx, [rip + 0x93028]; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000461031: mov dword ptr [rbx], ecx; mov qword ptr [rax + 0x10], 0; mov qword ptr [rax + 0x18], 0; add rsp, 0x10; pop rbp; ret; 
0x0000000000415870: mov dword ptr [rbx], ecx; mov qword ptr [rax + 0x18], rbx; ret; 
0x0000000000430629: mov dword ptr [rbx], ecx; mov qword ptr [rax + 0x28], 0; pop rbp; ret; 
0x000000000043c56e: mov dword ptr [rbx], ecx; mov qword ptr [rax], rcx; add rsp, 0x210; pop rbp; ret; 
0x0000000000472f56: mov dword ptr [rbx], ecx; mov rax, qword ptr [rip + 0xaf879]; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xaf86e], rcx; pop rbp; ret; 
0x0000000000431513: mov dword ptr [rbx], edi; add byte ptr [rax], al; mov eax, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000403471: mov dword ptr [rbx], edi; ret; 
0x0000000000464046: mov dword ptr [rbx], esi; mov qword ptr [rdx + 0x40], 0; add rsp, 0x28; pop rbp; ret; 
0x000000000043c9ef: mov dword ptr [rcx + 0x10], 0; add rsp, 0x18; pop rbp; ret; 
0x00000000004037f5: mov dword ptr [rcx + 0x120], esi; add rsp, 0x18; pop rbp; ret; 
0x0000000000434e4e: mov dword ptr [rcx + 0x140], eax; add rsp, 0x40; pop rbp; ret; 
0x00000000004425dc: mov dword ptr [rcx + 0x148], 0; add rsp, 0x20; pop rbp; ret; 
0x00000000004225b3: mov dword ptr [rcx + 0x18], 0; add rsp, 8; pop rbp; nop; ret; 
0x00000000004517b9: mov dword ptr [rcx + 0x18], edx; add rsp, 0x60; pop rbp; ret; 
0x0000000000467aa2: mov dword ptr [rcx + 0x20], eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004305f4: mov dword ptr [rcx + 0x28], eax; mov rbx, qword ptr [rsp + 0x18]; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000042fb7f: mov dword ptr [rcx + 0x28], ebx; call 0x2f800; mov rdx, qword ptr [rsp + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000047398f: mov dword ptr [rcx + 0x2c], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000044368a: mov dword ptr [rcx + 0x30], 0; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x00000000004156c3: mov dword ptr [rcx + 0x38], esi; mov byte ptr [rcx + 0x40], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000044333d: mov dword ptr [rcx + 0x40], 0; add rsp, 0x20; pop rbp; ret; 
0x000000000041e1b9: mov dword ptr [rcx + 0x70], ebx; add rsp, 0x60; pop rbp; ret; 
0x000000000041ded5: mov dword ptr [rcx + 0x98], eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000406e39: mov dword ptr [rcx + 0xa0], eax; add rsp, 0x40; pop rbp; ret; 
0x000000000042cb6c: mov dword ptr [rcx + 0xa0], edx; nop; mov qword ptr [rax], rcx; ret; 
0x00000000004440ba: mov dword ptr [rcx + 0xa8], eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000435916: mov dword ptr [rcx + 0xc0], eax; add rsp, 0x38; pop rbp; ret; 
0x00000000004220d5: mov dword ptr [rcx + 8], eax; pop rbp; ret; 
0x000000000043be88: mov dword ptr [rcx + 8], ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000042ae3d: mov dword ptr [rcx + rax*8], 0; add rsp, 0x190; pop rbp; ret; 
0x0000000000447185: mov dword ptr [rcx + rdx + 0x470], ebx; add rsp, 0x30; pop rbp; ret; 
0x0000000000430a2f: mov dword ptr [rcx], 0; add rsp, 0xa0; pop rbp; ret; 
0x00000000004033f6: mov dword ptr [rcx], 0x72d73948; ret 0xf8c5; 
0x000000000044fbeb: mov dword ptr [rcx], eax; add rsp, 0x18; pop rbp; ret; 
0x00000000004049ce: mov dword ptr [rcx], eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000404723: mov dword ptr [rcx], eax; add rsp, 0x30; pop rbp; ret; 
0x000000000043be85: mov dword ptr [rcx], eax; mov qword ptr [rcx + 8], rbx; add rsp, 0x10; pop rbp; ret; 
0x000000000047367a: mov dword ptr [rcx], eax; xor eax, eax; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000040cd40: mov dword ptr [rcx], edx; mov rax, r10; add rsp, 0x50; pop rbp; ret; 
0x000000000045dbcb: mov dword ptr [rdi + rbx - 2], eax; ret; 
0x000000000045dbd2: mov dword ptr [rdi + rbx - 4], eax; ret; 
0x000000000045dde4: mov dword ptr [rdi + rbx - 4], ecx; ret; 
0x000000000045dbdf: mov dword ptr [rdi + rbx - 8], eax; ret; 
0x000000000045ddfc: mov dword ptr [rdi + rbx - 8], ecx; ret; 
0x000000000042016d: mov dword ptr [rdi + rdx + 0x30], esi; mov qword ptr [rdi + rdx + 0x38], rax; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x40; pop rbp; ret; 
0x0000000000420172: mov dword ptr [rdi + rdx + 0x38], eax; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x40; pop rbp; ret; 
0x000000000045ddd6: mov dword ptr [rdi], eax; mov byte ptr [rdi + 2], cl; ret; 
0x000000000045dbd0: mov dword ptr [rdi], eax; mov dword ptr [rdi + rbx - 4], eax; ret; 
0x000000000045dde2: mov dword ptr [rdi], eax; mov dword ptr [rdi + rbx - 4], ecx; ret; 
0x000000000045dbdc: mov dword ptr [rdi], eax; mov qword ptr [rdi + rbx - 8], rax; ret; 
0x000000000045ddf9: mov dword ptr [rdi], eax; mov qword ptr [rdi + rbx - 8], rcx; ret; 
0x000000000045dbc8: mov dword ptr [rdi], eax; mov word ptr [rdi + rbx - 2], ax; ret; 
0x000000000045dbd8: mov dword ptr [rdi], eax; ret; 
0x0000000000428cf0: mov dword ptr [rdi], esi; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x00000000004290f0: mov dword ptr [rdx + 0x10], 0; add rsp, 0x40; pop rbp; ret; 
0x000000000042b52c: mov dword ptr [rdx + 0x18], 0; add rsp, 0x18; pop rbp; ret; 
0x00000000004448fd: mov dword ptr [rdx + 0x18], ecx; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x0000000000406744: mov dword ptr [rdx + 0x1f68], 0; add rsp, 0x88; pop rbp; ret; 
0x00000000004674fc: mov dword ptr [rdx + 0x20], eax; add rsp, 0x38; pop rbp; ret; 
0x000000000046779c: mov dword ptr [rdx + 0x20], eax; add rsp, 0x40; pop rbp; ret; 
0x000000000042b528: mov dword ptr [rdx + 0x20], eax; mov qword ptr [rdx + 0x18], 0; add rsp, 0x18; pop rbp; ret; 
0x0000000000467ef3: mov dword ptr [rdx + 0x20], ecx; add rsp, 0x88; pop rbp; ret; 
0x000000000042fc43: mov dword ptr [rdx + 0x28], ecx; call 0x2f800; add rsp, 0x28; pop rbp; ret; 
0x000000000043e11e: mov dword ptr [rdx + 0x38], eax; mov dword ptr [rdx + 4], 1; add rsp, 0x28; pop rbp; ret; 
0x0000000000464049: mov dword ptr [rdx + 0x40], 0; add rsp, 0x28; pop rbp; ret; 
0x00000000004640cf: mov dword ptr [rdx + 0x40], 0; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000479a80: mov dword ptr [rdx + 0x48], eax; mov byte ptr [rdx + 0x50], cl; add rsp, 0x90; pop rbp; ret; 
0x0000000000423c92: mov dword ptr [rdx + 0xdc8], ebx; add rsp, 0x20; pop rbp; ret; 
0x0000000000432aae: mov dword ptr [rdx + 0xe8], ecx; add rsp, 0x28; pop rbp; ret; 
0x000000000043e121: mov dword ptr [rdx + 4], 1; add rsp, 0x28; pop rbp; ret; 
0x00000000004045c6: mov dword ptr [rdx + 8], ebx; add rsp, 8; pop rbp; ret; 
0x0000000000477d4d: mov dword ptr [rdx + 8], ebx; mov byte ptr [rbx + rax - 1], 0x3f; sub rsp, -0x80; pop rbp; ret; 
0x000000000044285b: mov dword ptr [rdx + rax], ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000042005a: mov dword ptr [rdx + rbx + 0x28], ecx; inc qword ptr [rax + 0x140]; add rsp, 0x18; pop rbp; ret; 
0x0000000000413103: mov dword ptr [rdx + rsi*8 + 0x28], edi; add rsp, 0x30; pop rbp; ret; 
0x000000000045edf1: mov dword ptr [rdx], 0x48000010; mov eax, 0x9e; syscall; 
0x0000000000453f34: mov dword ptr [rdx], eax; add rsp, 0x1b8; pop rbp; ret; 
0x000000000047b1a7: mov dword ptr [rdx], eax; add rsp, 0x1d0; pop rbp; ret; 
0x000000000040c6ae: mov dword ptr [rdx], eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000423962: mov dword ptr [rdx], eax; add rsp, 0x38; pop rbp; ret; 
0x0000000000479710: mov dword ptr [rdx], eax; add rsp, 0x90; pop rbp; ret; 
0x00000000004045c3: mov dword ptr [rdx], eax; mov qword ptr [rdx + 8], rbx; add rsp, 8; pop rbp; ret; 
0x0000000000477d4a: mov dword ptr [rdx], eax; mov qword ptr [rdx + 8], rbx; mov byte ptr [rbx + rax - 1], 0x3f; sub rsp, -0x80; pop rbp; ret; 
0x00000000004578d3: mov dword ptr [rdx], ecx; mov eax, 1; add rsp, 0x70; pop rbp; nop; ret; 
0x0000000000424af4: mov dword ptr [rdx], ecx; mov qword ptr [rax + 0x16860], rdx; add rsp, 0x48; pop rbp; ret; 
0x0000000000412e98: mov dword ptr [rdx], ecx; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; pop rbp; ret; 
0x000000000044a093: mov dword ptr [rip + 0x1065d3], ecx; add rsp, 0x130; pop rbp; ret; 
0x000000000044a08d: mov dword ptr [rip + 0x1065d5], ebx; mov dword ptr [rip + 0x1065d3], ecx; add rsp, 0x130; pop rbp; ret; 
0x0000000000418dda: mov dword ptr [rip + 0x10a0d8], eax; pop rbp; ret; 
0x0000000000418046: mov dword ptr [rip + 0x10aeb4], eax; add rsp, 0x20; pop rbp; ret; 
0x00000000004158d0: mov dword ptr [rip + 0x10d602], eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000441f0b: mov dword ptr [rip + 0x10e547], edx; add rsp, 0x28; pop rbp; ret; 
0x000000000042d05c: mov dword ptr [rip + 0x1234ce], eax; add rsp, 0x70; pop rbp; ret; 
0x000000000042207f: mov dword ptr [rip + 0x127a73], ecx; nop; lea rax, [rip + 0x127a63]; xchg qword ptr [rax], rdx; ret; 
0x0000000000402d77: mov dword ptr [rip + 0x14d89f], 0x1f; ret; 
0x0000000000408b53: mov dword ptr [rip + 0x44e80004], edx; adc al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004729c2: mov dword ptr [rip + 0xac200], eax; pop rbp; ret; 
0x00000000004751d4: mov dword ptr [rip + 0xad3d6], eax; add rsp, 0x18; pop rbp; nop; ret; 
0x0000000000474f5a: mov dword ptr [rip + 0xad8b0], eax; pop rbp; ret; 
0x0000000000472f64: mov dword ptr [rip + 0xaf86e], ecx; pop rbp; ret; 
0x0000000000470116: mov dword ptr [rip + 0xb24ac], eax; add rsp, 0x48; pop rbp; ret; 
0x0000000000463527: mov dword ptr [rip + 0xbf18b], ecx; add rsp, 0x30; pop rbp; ret; 
0x0000000000462717: mov dword ptr [rip + 0xbfeb3], eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000461fd2: mov dword ptr [rip + 0xc0874], 0; pop rbp; ret; 
0x0000000000460927: mov dword ptr [rip + 0xc1e5b], ebx; add rsp, 0x18; pop rbp; ret; 
0x0000000000458ee7: mov dword ptr [rip + 0xc9733], eax; pop rbp; ret; 
0x00000000004495c6: mov dword ptr [rip + 0xcfb8c], ebx; ret; 
0x00000000004495a2: mov dword ptr [rip + 0xcfbac], 0x800; ret; 
0x0000000000472d78: mov dword ptr [rip + 0xdd89a], eax; pop rbp; nop; ret; 
0x0000000000441554: mov dword ptr [rip + 0xe1116], ebx; call 0x2dba0; add rsp, 0x10; pop rbp; ret; 
0x000000000043fa1a: mov dword ptr [rip + 0xe39e0], eax; inc dword ptr [rip + 0xe39e2]; call 0x3e3c0; pop rbp; ret; 
0x0000000000434b0f: mov dword ptr [rip + 0xe9cb7], 0; add rsp, 0x38; pop rbp; ret; 
0x000000000042e111: mov dword ptr [rip + 0xeb0b5], ecx; pop rbp; ret; 
0x000000000042e10a: mov dword ptr [rip + 0xeb0bc], eax; nop; mov dword ptr [rip + 0xeb0b5], ecx; pop rbp; ret; 
0x0000000000434c04: mov dword ptr [rip + 0xee806], edx; call 0x34b40; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x000000000042dd60: mov dword ptr [rip + 0xf4bca], eax; add rsp, 0x40; pop rbp; ret; 
0x000000000042dc30: mov dword ptr [rip + 0xf4cfa], eax; add rsp, 0x40; pop rbp; ret; 
0x0000000000458b72: mov dword ptr [rip + 0xf7a58], eax; pop rbp; ret; 
0x000000000040a60a: mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x10; pop rbp; ret; 
0x00000000004171f0: mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x1b8; pop rbp; nop; ret; 
0x0000000000435d70: mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x20; pop rbp; ret; 
0x000000000043c2c5: mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x28; pop rbp; ret; 
0x00000000004508a6: mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x38; pop rbp; ret; 
0x0000000000434f30: mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x40; pop rbp; ret; 
0x000000000040bbbd: mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x58; pop rbp; ret; 
0x0000000000423411: mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x60; pop rbp; ret; 
0x0000000000415ce5: mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 0x88; pop rbp; ret; 
0x00000000004500f0: mov dword ptr [rsi + 0x10], 0xfffffade; add rsp, 8; pop rbp; ret; 
0x0000000000433c7b: mov dword ptr [rsi + 0x10], 0xfffffade; lea rax, [rip + 0x6a797]; call 0x5b0a0; add rsp, 0x10; pop rbp; ret; 
0x00000000004254b2: mov dword ptr [rsi + 0x10], 0xfffffade; mov eax, 1; add rsp, 0x40; pop rbp; ret; 
0x000000000043195c: mov dword ptr [rsi + 0x10], 0xfffffade; mov eax, 1; ret; 
0x00000000004252b6: mov dword ptr [rsi + 0x10], 0xfffffade; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; pop rbp; ret; 
0x000000000043628a: mov dword ptr [rsi + 0x10], 0xfffffade; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x50; pop rbp; ret; 
0x0000000000433dc3: mov dword ptr [rsi + 0x10], 0xfffffade; mov rax, r9; add rsp, 0x58; pop rbp; ret; 
0x000000000043189b: mov dword ptr [rsi + 0x10], 0xfffffade; xor eax, eax; ret; 
0x000000000041bba0: mov dword ptr [rsi + 0x10], eax; add rsp, 0x40; pop rbp; ret; 
0x0000000000443339: mov dword ptr [rsi + 0x48], ecx; mov qword ptr [rcx + 0x40], 0; add rsp, 0x20; pop rbp; ret; 
0x000000000045a2fd: mov dword ptr [rsi + 0x68], ebp; mov r9, qword ptr [r14 + 0x50]; test r9, r9; je 0x5a30e; call 0x5cde0; ret; 
0x000000000040cdd2: mov dword ptr [rsi + 0xc], eax; mov rax, rsi; add rsp, 0x10; pop rbp; ret; 
0x000000000041fda9: mov dword ptr [rsi + rax*8 + 0x20], ebx; inc qword ptr [rsi + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x00000000004758b8: mov dword ptr [rsi], eax; add rsp, 0x60; pop rbp; nop; ret; 
0x00000000004755f5: mov dword ptr [rsi], eax; add rsp, 0x60; pop rbp; ret; 
0x0000000000477191: mov dword ptr [rsi], eax; add rsp, 0xd8; pop rbp; ret; 
0x0000000000440844: mov dword ptr [rsp + 0x108], esi; mov rdx, qword ptr [rsp + 0x108]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000040270a: mov dword ptr [rsp + 0x10], eax; mov dword ptr [rsp + 0x14], ebx; mov dword ptr [rsp + 0x18], ecx; mov dword ptr [rsp + 0x1c], edx; ret; 
0x000000000041e35d: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000045e678: mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000046ef06: mov dword ptr [rsp + 0x10], ebx; nop; and ecx, 0x1f; mov rax, rcx; ret; 
0x000000000040270e: mov dword ptr [rsp + 0x14], ebx; mov dword ptr [rsp + 0x18], ecx; mov dword ptr [rsp + 0x1c], edx; ret; 
0x0000000000405307: mov dword ptr [rsp + 0x18], eax; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000045e647: mov dword ptr [rsp + 0x18], eax; ret; 
0x0000000000458c10: mov dword ptr [rsp + 0x18], ebx; call 0x60240; add rsp, 0x20; pop rbp; ret; 
0x0000000000473a1e: mov dword ptr [rsp + 0x18], ebx; mov rdx, qword ptr [rip + 0xaabf7]; mov rsi, qword ptr [rdx]; mov rax, rcx; call rsi; 
0x00000000004586a1: mov dword ptr [rsp + 0x18], ecx; mov byte ptr [rsp + 7], 1; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x0000000000402712: mov dword ptr [rsp + 0x18], ecx; mov dword ptr [rsp + 0x1c], edx; ret; 
0x000000000045a2b7: mov dword ptr [rsp + 0x18], ecx; mov qword ptr [rsp + 0x20], r12; call 0x5f2e0; add rsp, 0x28; pop rbp; ret; 
0x0000000000402716: mov dword ptr [rsp + 0x1c], edx; ret; 
0x000000000045e8fb: mov dword ptr [rsp + 0x20], eax; add rsp, 0x10; pop rbp; ret; 
0x000000000045960f: mov dword ptr [rsp + 0x20], eax; call 0x30ee0; add rsp, 0x10; pop rbp; ret; 
0x000000000045f280: mov dword ptr [rsp + 0x20], eax; mov qword ptr [rsp + 0x28], rbx; add rsp, 8; pop rbp; ret; 
0x000000000040611f: mov dword ptr [rsp + 0x20], eax; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000042885f: mov dword ptr [rsp + 0x20], eax; mov rdx, rsi; call rdi; 
0x000000000045cd82: mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x000000000045e695: mov dword ptr [rsp + 0x20], eax; ret; 
0x00000000004157d7: mov dword ptr [rsp + 0x20], ebx; mov rcx, qword ptr [rdx]; mov rsi, qword ptr [rax + 0x10]; mov rax, rsi; call rcx; 
0x000000000045a2bc: mov dword ptr [rsp + 0x20], esp; call 0x5f2e0; add rsp, 0x28; pop rbp; ret; 
0x000000000044083f: mov dword ptr [rsp + 0x24], eax; mov qword ptr [rsp + 0x108], rsi; mov rdx, qword ptr [rsp + 0x108]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000046b270: mov dword ptr [rsp + 0x26a], eax; add rsp, 0x1a8; pop rbp; nop; ret; 
0x000000000045eb93: mov dword ptr [rsp + 0x28], 0; mov qword ptr [rsp + 0x30], rax; ret; 
0x000000000045eba2: mov dword ptr [rsp + 0x28], eax; mov qword ptr [rsp + 0x30], 0; ret; 
0x000000000041afbe: mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rdx]; call rax; 
0x000000000045e97b: mov dword ptr [rsp + 0x28], eax; ret; 
0x000000000045f285: mov dword ptr [rsp + 0x28], ebx; add rsp, 8; pop rbp; ret; 
0x0000000000418e45: mov dword ptr [rsp + 0x28], ecx; lea rax, [rsp + 0x20]; call 0x34660; add rsp, 0x30; pop rbp; ret; 
0x00000000004642ee: mov dword ptr [rsp + 0x28], ecx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000454e05: mov dword ptr [rsp + 0x28], ecx; mov rcx, qword ptr [rdx]; mov rax, qword ptr [rip + 0xcd88d]; lea rbx, [rsp + 0x10]; call rcx; 
0x000000000045cd5c: mov dword ptr [rsp + 0x28], edi; mov rdi, rbx; mov rcx, rbx; call rax; 
0x000000000045cd9a: mov dword ptr [rsp + 0x28], edx; mov rdi, rbx; mov rcx, rbx; call rax; 
0x0000000000452dcf: mov dword ptr [rsp + 0x2f0], edx; mov byte ptr [rsp + 0x2f8], sil; mov rcx, qword ptr [rsp + 0x2c8]; xor eax, eax; lea rdx, [rsp + 0x2c8]; call rcx; 
0x000000000045eba7: mov dword ptr [rsp + 0x30], 0; ret; 
0x000000000041afb9: mov dword ptr [rsp + 0x30], eax; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdx]; call rax; 
0x000000000046cf45: mov dword ptr [rsp + 0x30], eax; mov rax, qword ptr [rsp + 0x30]; mov rbx, qword ptr [rsp + 0x38]; add rsp, 0x40; pop rbp; ret; 
0x000000000045eb9c: mov dword ptr [rsp + 0x30], eax; ret; 
0x0000000000464254: mov dword ptr [rsp + 0x30], ebx; mov rcx, qword ptr [rax + 0x18]; mov rax, rbx; nop; call rcx; 
0x000000000045e9aa: mov dword ptr [rsp + 0x38], eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004331e6: mov dword ptr [rsp + 0x38], ecx; mov rax, qword ptr [rsp + 0x28]; call 0x329e0; add rsp, 0x40; pop rbp; ret; 
0x000000000045ebfd: mov dword ptr [rsp + 0x40], eax; add rsp, 0x10; pop rbp; ret; 
0x000000000045f6a8: mov dword ptr [rsp + 0x40], eax; add rsp, 0x18; pop rbp; ret; 
0x00000000004616ee: mov dword ptr [rsp + 0x40], eax; mov byte ptr [rsp + 0xf], 3; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x0000000000461d92: mov dword ptr [rsp + 0x48], ecx; mov byte ptr [rsp + 0x47], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000461dcb: mov dword ptr [rsp + 0x48], ecx; mov byte ptr [rsp + 0x47], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; nop; call rax; 
0x0000000000436853: mov dword ptr [rsp + 0x48], ecx; mov rdx, qword ptr [rsp + 0x68]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x000000000047a277: mov dword ptr [rsp + 0x58], ebx; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x0000000000461d8d: mov dword ptr [rsp + 0x60], eax; mov qword ptr [rsp + 0x48], rcx; mov byte ptr [rsp + 0x47], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000473caf: mov dword ptr [rsp + 0x60], eax; mov qword ptr [rsp + 0x68], rbx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004308de: mov dword ptr [rsp + 0x68], eax; mov rax, qword ptr [rsp + 0x50]; mov rdx, qword ptr [rax + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000472daf: mov dword ptr [rsp + 0x68], eax; mov rcx, qword ptr [rax + 0x20]; mov rcx, qword ptr [rcx + 0x18]; mov rdx, qword ptr [rax + 0x28]; mov rax, rdx; call rcx; 
0x0000000000473cb4: mov dword ptr [rsp + 0x68], ebx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000473e9b: mov dword ptr [rsp + 0x68], ecx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x000000000046472e: mov dword ptr [rsp + 0x68], ecx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x00000000004647cb: mov dword ptr [rsp + 0x68], esi; mov rax, rbx; mov rbx, rcx; mov rcx, rsi; call rdx; 
0x00000000004740b6: mov dword ptr [rsp + 0x78], eax; mov qword ptr [rsp + 0x80], rbx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000047432d: mov dword ptr [rsp + 0x78], eax; mov qword ptr [rsp + 0x80], rcx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000047b45c: mov dword ptr [rsp + 0x78], ecx; mov rcx, qword ptr [r9 + 0x48]; mov rax, rbx; call rcx; 
0x00000000004740bb: mov dword ptr [rsp + 0x80], ebx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000474332: mov dword ptr [rsp + 0x80], ecx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000040272c: mov dword ptr [rsp + 0xc], edx; ret; 
0x0000000000402740: mov dword ptr [rsp + 8], 1; ret; 
0x0000000000402728: mov dword ptr [rsp + 8], eax; mov dword ptr [rsp + 0xc], edx; ret; 
0x0000000000434603: mov dword ptr [rsp + 8], eax; mov rbx, qword ptr [rcx + rax*8]; mov rdx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x000000000045e704: mov dword ptr [rsp + 8], eax; mov rdi, rsp; mov esi, 0; mov eax, 0x23; syscall; 
0x00000000004075c1: mov dword ptr [rsp + 8], eax; ret; 
0x00000000004413f0: mov dword ptr [rsp + 8], ecx; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x000000000043469c: mov dword ptr [rsp + 8], edi; nop; mov rdx, rax; mov rax, rsi; call rcx; 
0x000000000040a0f6: mov dword ptr [rsp + 8], edx; mov rcx, qword ptr [rax]; mov rdx, rax; mov rax, rbx; call rcx; 
0x000000000045ebf3: mov dword ptr [rsp], ebx; call rax; 
0x000000000045ec81: mov dword ptr [rsp], ebx; call rax; mov rsp, qword ptr [rsp]; add rsp, 0x10; pop rbp; ret; 
0x000000000045cf40: mov eax, 0; ret; 
0x000000000045e6ad: mov eax, 0; syscall; 
0x000000000045e6ad: mov eax, 0; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000041e389: mov eax, 0x10000; call rbx; 
0x000000000042d7d2: mov eax, 0x1006; mov dword ptr [rax], 0x1006; add rsp, 0x48; pop rbp; ret; 
0x000000000045e633: mov eax, 0x101; syscall; 
0x000000000041c264: mov eax, 0x1250; add rsp, 0x10; pop rbp; ret; 
0x000000000045e6c9: mov eax, 0x125; syscall; 
0x000000000045e6c9: mov eax, 0x125; syscall; mov dword ptr [rsp + 0x18], eax; ret; 
0x000000000045ee20: mov eax, 0x18; syscall; 
0x000000000045ee20: mov eax, 0x18; syscall; ret; 
0x000000000045e84f: mov eax, 0x1b; syscall; 
0x000000000045e84f: mov eax, 0x1b; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045ecaf: mov eax, 0x1c; syscall; 
0x000000000045ecaf: mov eax, 0x1c; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x00000000004626ae: mov eax, 0x20; call 0x5a020; add rsp, 8; pop rbp; ret; 
0x0000000000443406: mov eax, 0x20c48348; pop rbp; ret; 
0x0000000000454919: mov eax, 0x21; ret; 
0x000000000045e710: mov eax, 0x23; syscall; 
0x000000000045e710: mov eax, 0x23; syscall; add rsp, 0x10; pop rbp; ret; 
0x000000000045e740: mov eax, 0x27; syscall; 
0x000000000045e7a0: mov eax, 0x27; syscall; mov qword ptr [rsp + 8], rax; ret; 
0x000000000045ed4b: mov eax, 0x38; syscall; 
0x0000000000454922: mov eax, 0x3c; ret; 
0x000000000045e610: mov eax, 0x3c; syscall; 
0x0000000000454928: mov eax, 0x3e; ret; 
0x000000000045e78d: mov eax, 0x3e; syscall; 
0x000000000045e78d: mov eax, 0x3e; syscall; ret; 
0x000000000042995a: mov eax, 0x40000200; add byte ptr [rax], al; or byte ptr [rax], al; ret; 
0x00000000004363e5: mov eax, 0x48000000; test edx, edx; je 0x363ff; mov rax, qword ptr [rdx]; call rax; 
0x0000000000412584: mov eax, 0x48fffffb; add esp, 0xa8; pop rbp; ret; 
0x00000000004171fa: mov eax, 0x5d000001; nop; ret; 
0x0000000000453f39: mov eax, 0x5d000001; ret; 
0x000000000041d757: mov eax, 0x64; add rsp, 0x10; pop rbp; ret; 
0x000000000045edab: mov eax, 0x83; syscall; 
0x000000000040aeae: mov eax, 0x84000000; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000040e818: mov eax, 0x89000000; ret 0x8b48; 
0x000000000045edf7: mov eax, 0x9e; syscall; 
0x000000000044140b: mov eax, 0xb; add rsp, 0x18; pop rbp; ret; 
0x000000000045ec2b: mov eax, 0xb; syscall; 
0x000000000045e720: mov eax, 0xba; syscall; 
0x000000000045e720: mov eax, 0xba; syscall; mov dword ptr [rsp + 8], eax; ret; 
0x000000000045ecdc: mov eax, 0xca; syscall; 
0x000000000045ecdc: mov eax, 0xca; syscall; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000045ee4f: mov eax, 0xcc; syscall; 
0x000000000045ee4f: mov eax, 0xcc; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000044430f: mov eax, 0xd; call 0x45740; add rsp, 8; pop rbp; ret; 
0x000000000045e974: mov eax, 0xd; syscall; 
0x000000000045e974: mov eax, 0xd; syscall; mov dword ptr [rsp + 0x28], eax; ret; 
0x000000000045e7ee: mov eax, 0xde; syscall; 
0x000000000045e7ee: mov eax, 0xde; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e812: mov eax, 0xdf; syscall; 
0x000000000045e812: mov eax, 0xdf; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e824: mov eax, 0xe2; syscall; 
0x000000000045e824: mov eax, 0xe2; syscall; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000045e906: mov eax, 0xe4; syscall; 
0x000000000045e5e4: mov eax, 0xe7; syscall; 
0x000000000045e5e4: mov eax, 0xe7; syscall; ret; 
0x000000000046c864: mov eax, 0xe8fffdda; xor edx, ebp; stc; dec dword ptr [rax - 0x77]; ret; 
0x000000000045e933: mov eax, 0xe; syscall; 
0x000000000045e75a: mov eax, 0xea; syscall; 
0x000000000045e75a: mov eax, 0xea; syscall; ret; 
0x000000000045eb41: mov eax, 0xf; syscall; 
0x0000000000456db6: mov eax, 0xfffd; add rsp, 0x10; pop rbp; ret; 
0x000000000046292f: mov eax, 0xfffd; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000462c7f: mov eax, 0xfffd; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000462a21: mov eax, 0xfffd; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x0000000000462c0c: mov eax, 0xfffd; xor ebx, ebx; add rsp, 0x18; pop rbp; ret; 
0x00000000004614e6: mov eax, 0xfffffff5; lock xadd dword ptr [rdx], eax; add rsp, 0x40; pop rbp; ret; 
0x0000000000470feb: mov eax, 0xffffffff; add rsp, 0x108; pop rbp; ret; 
0x000000000041d733: mov eax, 0xffffffff; add rsp, 0x10; pop rbp; ret; 
0x000000000044e80c: mov eax, 0xffffffff; add rsp, 0x20; pop rbp; ret; 
0x000000000044ceb3: mov eax, 0xffffffff; add rsp, 0x30; pop rbp; ret; 
0x0000000000457436: mov eax, 0xffffffff; add rsp, 0x38; pop rbp; ret; 
0x0000000000402cf2: mov eax, 0xffffffff; add rsp, 0x40; pop rbp; ret; 
0x0000000000463985: mov eax, 0xffffffff; add rsp, 0x78; pop rbp; ret; 
0x000000000041dcfe: mov eax, 0xffffffff; lea rcx, [rip + 0x1329d5]; xchg qword ptr [rcx], rax; ret; 
0x0000000000436fe9: mov eax, 0xffffffff; lea rcx, [rip + 0xec433]; lock xadd dword ptr [rcx], eax; add rsp, 0x48; pop rbp; ret; 
0x000000000045e673: mov eax, 0xffffffff; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000045e642: mov eax, 0xffffffff; mov dword ptr [rsp + 0x18], eax; ret; 
0x0000000000471e05: mov eax, 0xffffffff; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000429bdb: mov eax, 0xffffffff; mov rbx, rdx; ret; 
0x0000000000429d26: mov eax, 0xffffffff; mov rbx, rsi; ret; 
0x000000000044cfb3: mov eax, 0xffffffff; xor ebx, ebx; add rsp, 0x30; pop rbp; nop; ret; 
0x000000000044c4f8: mov eax, 0xffffffff; xor ebx, ebx; add rsp, 0xb0; pop rbp; ret; 
0x000000000044d264: mov eax, 0xffffffff; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000046a55c: mov eax, 1; add rsp, 0x100; pop rbp; ret; 
0x0000000000470fdc: mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x00000000004319b4: mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004560b0: mov eax, 1; add rsp, 0x120; pop rbp; ret; 
0x0000000000431517: mov eax, 1; add rsp, 0x18; pop rbp; ret; 
0x000000000042d8fb: mov eax, 1; add rsp, 0x2020; pop rbp; ret; 
0x000000000041d887: mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000040414c: mov eax, 1; add rsp, 0x28; pop rbp; ret; 
0x000000000040a865: mov eax, 1; add rsp, 0x30; pop rbp; ret; 
0x000000000043b951: mov eax, 1; add rsp, 0x38; pop rbp; ret; 
0x00000000004254b9: mov eax, 1; add rsp, 0x40; pop rbp; ret; 
0x000000000044022f: mov eax, 1; add rsp, 0x428; pop rbp; ret; 
0x000000000046ff81: mov eax, 1; add rsp, 0x48; pop rbp; ret; 
0x0000000000454cd1: mov eax, 1; add rsp, 0x58; pop rbp; ret; 
0x0000000000405128: mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x00000000004607cb: mov eax, 1; add rsp, 0x68; pop rbp; ret; 
0x00000000004578d5: mov eax, 1; add rsp, 0x70; pop rbp; nop; ret; 
0x00000000004326b2: mov eax, 1; add rsp, 0x70; pop rbp; ret; 
0x000000000046ac3f: mov eax, 1; add rsp, 0x78; pop rbp; ret; 
0x0000000000421379: mov eax, 1; add rsp, 0xf8; pop rbp; ret; 
0x000000000040628c: mov eax, 1; add rsp, 8; pop rbp; ret; 
0x0000000000430f32: mov eax, 1; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x000000000045856e: mov eax, 1; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x000000000044cfd5: mov eax, 1; call 0x4c4c0; add rsp, 0x30; pop rbp; ret; 
0x0000000000452dff: mov eax, 1; lea rdx, [rsp + 0x2c8]; call rcx; 
0x000000000044d4ca: mov eax, 1; lock xadd dword ptr [rdx + 0x22a0], eax; add rsp, 0x48; pop rbp; ret; 
0x0000000000471d93: mov eax, 1; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x00000000004326bd: mov eax, 1; mov rbx, qword ptr [rsp + 0x88]; add rsp, 0x70; pop rbp; ret; 
0x0000000000402b00: mov eax, 1; ret; 
0x000000000045e68e: mov eax, 1; syscall; 
0x000000000045e68e: mov eax, 1; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x0000000000405a59: mov eax, 1; xor ebx, ebx; add rsp, 0x68; pop rbp; ret; 
0x0000000000453980: mov eax, 1; xor ebx, ebx; ret; 
0x0000000000456e4f: mov eax, 2; add rsp, 0x10; pop rbp; ret; 
0x0000000000430e52: mov eax, 2; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x000000000045860e: mov eax, 2; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x0000000000456eb4: mov eax, 3; add rsp, 0x10; pop rbp; ret; 
0x000000000045e664: mov eax, 3; syscall; 
0x0000000000456ef6: mov eax, 4; add rsp, 0x10; pop rbp; ret; 
0x000000000047a0ce: mov eax, 5; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000047a06e: mov eax, 6; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000047a12e: mov eax, 8; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000045eb7d: mov eax, 9; syscall; 
0x0000000000422f9d: mov eax, dword ptr [rax + 0x10148]; mov qword ptr [rax + rcx*8], rbx; add rsp, 0x38; pop rbp; ret; 
0x0000000000451c9f: mov eax, dword ptr [rax + 0x10]; add rsp, 0x10; pop rbp; ret; 
0x0000000000470473: mov eax, dword ptr [rax + 0x10]; and eax, 0x1f; nop; pop rbp; ret; 
0x0000000000422e21: mov eax, dword ptr [rax + 0x18]; ret; 
0x0000000000454f8b: mov eax, dword ptr [rax + 0x30]; call 0x1220; add rsp, 0x10; pop rbp; ret; 
0x000000000043b632: mov eax, dword ptr [rax + 0x30]; dec dword ptr [rax + 0x108]; add rsp, 0x60; pop rbp; ret; 
0x0000000000444418: mov eax, dword ptr [rax + 0x30]; xor ecx, ecx; xchg dword ptr [rax + 0x33c], ecx; add rsp, 0x20; pop rbp; ret; 
0x0000000000460426: mov eax, dword ptr [rax + 0x40]; add rsp, 0x10; pop rbp; ret; 
0x000000000046f00c: mov eax, dword ptr [rax + 0x40]; add rsp, 0x18; pop rbp; ret; 
0x000000000046bf7c: mov eax, dword ptr [rax + 0x40]; add rsp, 0x28; pop rbp; ret; 
0x000000000040115c: mov eax, dword ptr [rax + 0x40]; add rsp, 8; pop rbp; ret; 
0x000000000040106f: mov eax, dword ptr [rax + 0x40]; ret; 
0x000000000041d468: mov eax, dword ptr [rax + 0x98]; ret; 
0x000000000043baeb: mov eax, dword ptr [rax + 0xd0]; inc dword ptr [rax + 0x14]; add rsp, 0x20; pop rbp; ret; 
0x000000000044c2df: mov eax, dword ptr [rax + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000458d81: mov eax, dword ptr [rax + 8]; ret; 
0x000000000042978e: mov eax, dword ptr [rax + rbx*8]; shr rax, cl; and eax, 1; add rsp, 0x30; pop rbp; ret; 
0x000000000042b70c: mov eax, dword ptr [rax + rdx]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004045c0: mov eax, dword ptr [rax]; mov qword ptr [rdx], rax; mov qword ptr [rdx + 8], rbx; add rsp, 8; pop rbp; ret; 
0x0000000000403ffd: mov eax, dword ptr [rax]; mov rbx, qword ptr [rbx]; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x00000000004605bd: mov eax, dword ptr [rax]; nop; call 0x60260; add rsp, 8; pop rbp; ret; 
0x00000000004604dd: mov eax, dword ptr [rax]; nop; call 0x603a0; add rsp, 8; pop rbp; ret; 
0x00000000004702fd: mov eax, dword ptr [rax]; nop; call 0x6bfe0; add rsp, 8; pop rbp; ret; 
0x0000000000472b3d: mov eax, dword ptr [rax]; nop; call 0x72060; add rsp, 8; pop rbp; ret; 
0x0000000000458c86: mov eax, dword ptr [rax]; ret; 
0x0000000000401811: mov eax, dword ptr [rbp - 0x76b80000]; ret; 
0x000000000046ef47: mov eax, dword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x000000000046f806: mov eax, dword ptr [rbx]; add rsp, 0x20; pop rbp; ret; 
0x0000000000405304: mov eax, dword ptr [rbx]; mov qword ptr [rsp + 0x18], rax; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000040611c: mov eax, dword ptr [rbx]; mov qword ptr [rsp + 0x20], rax; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000046fb87: mov eax, dword ptr [rbx]; mov rbx, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x00000000004305fd: mov eax, dword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000043b27b: mov eax, dword ptr [rcx + 0x30]; dec dword ptr [rax + 0x108]; add rsp, 0x28; pop rbp; ret; 
0x0000000000460555: mov eax, dword ptr [rcx + 0x40]; add rsp, 0x10; pop rbp; ret; 
0x0000000000457ed3: mov eax, dword ptr [rcx + 0xd0]; call 0x2c680; add rsp, 8; pop rbp; ret; 
0x00000000004155f3: mov eax, dword ptr [rcx + 8]; call 0x25560; add rsp, 8; pop rbp; ret; 
0x0000000000430de2: mov eax, dword ptr [rcx + 8]; mov rbx, qword ptr [rcx + 0x10]; ret; 
0x0000000000413ef1: mov eax, dword ptr [rcx]; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000042b69e: mov eax, dword ptr [rcx]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000046ee5c: mov eax, dword ptr [rcx]; mov rbx, qword ptr [rcx + 8]; add rsp, 0x30; pop rbp; ret; 
0x000000000044ca2e: mov eax, dword ptr [rdi + r9 + 0xc]; xor ebx, ebx; add rsp, 0xb0; pop rbp; ret; 
0x000000000044ca2f: mov eax, dword ptr [rdi + rcx + 0xc]; xor ebx, ebx; add rsp, 0xb0; pop rbp; ret; 
0x000000000042885b: mov eax, dword ptr [rdx + 0x10]; mov qword ptr [rsp + 0x20], r8; mov rdx, rsi; call rdi; 
0x000000000041726f: mov eax, dword ptr [rdx + 8]; call 0x17960; add rsp, 8; pop rbp; ret; 
0x000000000043b8cf: mov eax, dword ptr [rdx + 8]; call 0x2aa40; add rsp, 8; pop rbp; ret; 
0x00000000004339eb: mov eax, dword ptr [rdx + 8]; cmp byte ptr [rax], 0; je 0x339f8; call 0x3cb80; pop rbp; ret; 
0x000000000046178a: mov eax, dword ptr [rdx + 8]; mov ecx, 1; xchg dword ptr [rax], ecx; ret; 
0x000000000042a66f: mov eax, dword ptr [rdx + 8]; mov rbx, qword ptr [rdx + 0x10]; call 0x25600; add rsp, 0x10; pop rbp; ret; 
0x00000000004159f8: mov eax, dword ptr [rdx + 8]; nop dword ptr [rax + rax]; call 0x1e4c0; add rsp, 8; pop rbp; ret; 
0x0000000000415a58: mov eax, dword ptr [rdx + 8]; nop dword ptr [rax + rax]; call 0x20640; add rsp, 8; pop rbp; ret; 
0x00000000004617d8: mov eax, dword ptr [rdx + 8]; nop dword ptr [rax + rax]; call 0x61520; add rsp, 8; pop rbp; ret; 
0x0000000000473f38: mov eax, dword ptr [rdx + 8]; nop dword ptr [rax + rax]; call 0x73500; add rsp, 8; pop rbp; ret; 
0x0000000000474478: mov eax, dword ptr [rdx + 8]; nop dword ptr [rax + rax]; call 0x73560; add rsp, 8; pop rbp; ret; 
0x000000000042855b: mov eax, dword ptr [rdx + rax + 8]; mov rax, rcx; mov rcx, r8; lea rdx, [rsp + 0x80]; call rdi; 
0x00000000004224b7: mov eax, dword ptr [rdx + rax*8 + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x0000000000423c8a: mov eax, dword ptr [rdx + rax*8 + 0xdc8]; mov qword ptr [rdx + 0xdc8], rbx; add rsp, 0x20; pop rbp; ret; 
0x00000000004424c0: mov eax, dword ptr [rdx + rcx]; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000044a1ae: mov eax, dword ptr [rdx + rsi]; mov rbx, qword ptr [rdx + rsi + 8]; add rsp, 0x60; pop rbp; ret; 
0x0000000000406f6c: mov eax, dword ptr [rdx]; call rax; 
0x00000000004414f5: mov eax, dword ptr [rdx]; call rax; add rsp, 0x20; pop rbp; ret; 
0x000000000046198d: mov eax, dword ptr [rdx]; call rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000406f80: mov eax, dword ptr [rdx]; call rax; add rsp, 0x30; pop rbp; ret; 
0x0000000000461733: mov eax, dword ptr [rdx]; call rax; add rsp, 0x50; pop rbp; ret; 
0x000000000043385a: mov eax, dword ptr [rdx]; call rax; add rsp, 0x90; pop rbp; ret; 
0x0000000000401039: mov eax, dword ptr [rdx]; mov rbx, qword ptr [rdx + 8]; add rsp, 0x10; pop rbp; ret; 
0x00000000004586bd: mov eax, dword ptr [rdx]; nop; call rax; 
0x0000000000418dce: mov eax, dword ptr [rip + 0x10a0cc]; lea eax, [rax + rcx]; lea eax, [rax + 2]; mov dword ptr [rip + 0x10a0d8], eax; pop rbp; ret; 
0x000000000041803f: mov eax, dword ptr [rip + 0x138f03]; mov qword ptr [rip + 0x10aeb4], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000043382c: mov eax, dword ptr [rip + 0x6aa6e]; lea rdx, [rip + 0x6aa67]; call rax; 
0x0000000000472f59: mov eax, dword ptr [rip + 0xaf879]; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xaf86e], rcx; pop rbp; ret; 
0x000000000046091c: mov eax, dword ptr [rip + 0xc1e66]; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xc1e5b], rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000045ec73: mov eax, dword ptr [rip + 0xc3a87]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x000000000045ebe5: mov eax, dword ptr [rip + 0xc3b0d]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x000000000045eb33: mov eax, dword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000045eaf3: mov eax, dword ptr [rip + 0xc3bdf]; jmp rax; 
0x000000000045e998: mov eax, dword ptr [rip + 0xc3d6a]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x0000000000458285: mov eax, dword ptr [rip + 0xcac65]; call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x0000000000454e0d: mov eax, dword ptr [rip + 0xcd88d]; lea rbx, [rsp + 0x10]; call rcx; 
0x000000000045eed8: mov eax, dword ptr [rip + 0xf1712]; call rax; 
0x000000000045eec0: mov eax, dword ptr [rip + 0xf172a]; cmp rax, 0; je 0x5ef20; call rax; 
0x000000000045e8bf: mov eax, dword ptr [rip + 0xf1d2b]; cmp rax, 0; je 0x5e905; call rax; 
0x0000000000426d31: mov eax, dword ptr [rip + 0xf2471]; add rsp, 0x10; pop rbp; ret; 
0x0000000000458120: mov eax, dword ptr [rip + 0xf833a]; ret; 
0x000000000041bb98: mov eax, dword ptr [rsi + 0x10]; add rax, qword ptr [rdi + 0x70]; mov qword ptr [rsi + 0x10], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000043cfa6: mov eax, dword ptr [rsi + 0x30]; dec dword ptr [rax + 0xf0]; add rsp, 0x3a0; pop rbp; ret; 
0x0000000000437a21: mov eax, dword ptr [rsi + 0x30]; mov byte ptr [rax + 0x114], 1; ret; 
0x000000000042e2e6: mov eax, dword ptr [rsi + 0x30]; mov ecx, dword ptr [rsp]; mov qword ptr [rax + 0x48], rcx; add rsp, 8; pop rbp; ret; 
0x000000000043e11a: mov eax, dword ptr [rsi + 0x30]; mov qword ptr [rdx + 0x38], rax; mov dword ptr [rdx + 4], 1; add rsp, 0x28; pop rbp; ret; 
0x00000000004598e2: mov eax, dword ptr [rsi + 0x30]; nop; dec dword ptr [rax + 0x108]; ret; 
0x0000000000465cf1: mov eax, dword ptr [rsi]; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x000000000045ddd0: mov eax, dword ptr [rsi]; mov cl, byte ptr [rsi + 2]; mov word ptr [rdi], ax; mov byte ptr [rdi + 2], cl; ret; 
0x000000000045ddca: mov eax, dword ptr [rsi]; mov dword ptr [rdi], eax; ret; 
0x000000000045dddc: mov eax, dword ptr [rsi]; mov ecx, dword ptr [rsi + rbx - 4]; mov dword ptr [rdi], eax; mov dword ptr [rdi + rbx - 4], ecx; ret; 
0x000000000045ddea: mov eax, dword ptr [rsi]; mov qword ptr [rdi], rax; ret; 
0x000000000045ddf1: mov eax, dword ptr [rsi]; mov rcx, qword ptr [rsi + rbx - 8]; mov qword ptr [rdi], rax; mov qword ptr [rdi + rbx - 8], rcx; ret; 
0x000000000047c2ca: mov eax, dword ptr [rsp + 0x108]; call rsi; 
0x0000000000434c10: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x00000000004502f2: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x000000000043ed56: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x30; pop rbp; nop; ret; 
0x0000000000425a97: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x38; pop rbp; ret; 
0x0000000000456aef: mov eax, dword ptr [rsp + 0x10]; call 0x56b20; add rsp, 8; pop rbp; ret; 
0x0000000000456b8f: mov eax, dword ptr [rsp + 0x10]; call 0x56bc0; add rsp, 8; pop rbp; ret; 
0x000000000043fc1e: mov eax, dword ptr [rsp + 0x10]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000406d11: mov eax, dword ptr [rsp + 0x10]; mov byte ptr [rax + 0xb4], 0; add rsp, 0x40; pop rbp; ret; 
0x000000000040b69a: mov eax, dword ptr [rsp + 0x10]; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rbp; ret; 
0x0000000000473ae6: mov eax, dword ptr [rsp + 0x10]; mov rbx, qword ptr [rsp + 8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000473a53: mov eax, dword ptr [rsp + 0x10]; mov rbx, qword ptr [rsp + 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000418598: mov eax, dword ptr [rsp + 0x10]; nop dword ptr [rax]; call 0x188a0; add rsp, 0x18; pop rbp; ret; 
0x00000000004026b7: mov eax, dword ptr [rsp + 0x14]; bt eax, 0x1b; setb byte ptr [rip + 0x14e3e5]; add rsp, 0x50; pop rbp; ret; 
0x000000000047ad6b: mov eax, dword ptr [rsp + 0x158]; mov rbx, qword ptr [rsp + 0x160]; call 0x6fca0; mov rcx, qword ptr [rax + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000479d89: mov eax, dword ptr [rsp + 0x178]; call rcx; 
0x0000000000479c89: mov eax, dword ptr [rsp + 0x180]; call rcx; 
0x0000000000479eb2: mov eax, dword ptr [rsp + 0x188]; call rdx; 
0x0000000000422b35: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000409c66: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; pop rbp; ret; 
0x0000000000446e56: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; nop; ret; 
0x0000000000413b09: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004252be: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x38; pop rbp; ret; 
0x000000000041e655: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x50; pop rbp; ret; 
0x00000000004639dc: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x78; pop rbp; ret; 
0x0000000000410816: mov eax, dword ptr [rsp + 0x18]; call 0x10860; add rsp, 0x20; pop rbp; ret; 
0x00000000004371a9: mov eax, dword ptr [rsp + 0x18]; call 0x37420; add rsp, 0x28; pop rbp; ret; 
0x000000000045964e: mov eax, dword ptr [rsp + 0x18]; call 0x3b080; add rsp, 0x10; pop rbp; ret; 
0x000000000040e536: mov eax, dword ptr [rsp + 0x18]; call 0xe580; add rsp, 0x20; pop rbp; ret; 
0x000000000040f256: mov eax, dword ptr [rsp + 0x18]; call 0xf2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000040fb76: mov eax, dword ptr [rsp + 0x18]; call 0xfbc0; add rsp, 0x20; pop rbp; ret; 
0x0000000000428877: mov eax, dword ptr [rsp + 0x18]; call rsi; 
0x0000000000428877: mov eax, dword ptr [rsp + 0x18]; call rsi; add rsp, 0x28; pop rbp; ret; 
0x0000000000439e5b: mov eax, dword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; 
0x0000000000439e5b: mov eax, dword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; add rsp, 0x60; pop rbp; ret; 
0x000000000043b62d: mov eax, dword ptr [rsp + 0x18]; mov rax, qword ptr [rax + 0x30]; dec dword ptr [rax + 0x108]; add rsp, 0x60; pop rbp; ret; 
0x00000000004049c5: mov eax, dword ptr [rsp + 0x18]; mov rcx, qword ptr [rsp + 0x20]; mov dword ptr [rcx], eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000429836: mov eax, dword ptr [rsp + 0x18]; mov rcx, rax; lea rax, [rcx + r8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000425c99: mov eax, dword ptr [rsp + 0x18]; movups xmmword ptr [rax], xmm15; add rsp, 0x20; pop rbp; ret; 
0x0000000000459120: mov eax, dword ptr [rsp + 0x18]; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x0000000000459ecc: mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x20; pop rbp; ret; 
0x0000000000404a85: mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x28; pop rbp; ret; 
0x00000000004504a5: mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x60; pop rbp; ret; 
0x000000000047c2f1: mov eax, dword ptr [rsp + 0x1e0]; mov rbx, qword ptr [rsp + 0x140]; call 0x78a40; add rsp, 0x1d0; pop rbp; ret; 
0x0000000000410eb3: mov eax, dword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x00000000004132f0: mov eax, dword ptr [rsp + 0x20]; add rsp, 0x38; pop rbp; ret; 
0x0000000000420177: mov eax, dword ptr [rsp + 0x20]; add rsp, 0x40; pop rbp; ret; 
0x0000000000436cd9: mov eax, dword ptr [rsp + 0x20]; add rsp, 0x48; pop rbp; ret; 
0x000000000046394c: mov eax, dword ptr [rsp + 0x20]; add rsp, 0x78; pop rbp; ret; 
0x0000000000412dc7: mov eax, dword ptr [rsp + 0x20]; call 0x12980; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; pop rbp; ret; 
0x0000000000473525: mov eax, dword ptr [rsp + 0x20]; call 0x739e0; add rsp, 0x10; pop rbp; ret; 
0x0000000000476507: mov eax, dword ptr [rsp + 0x20]; call 0x75420; add rsp, 0x28; pop rbp; ret; 
0x000000000043e754: mov eax, dword ptr [rsp + 0x20]; inc qword ptr [rax]; add rsp, 0x28; pop rbp; ret; 
0x0000000000439f70: mov eax, dword ptr [rsp + 0x20]; lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000419562: mov eax, dword ptr [rsp + 0x20]; mov byte ptr [rax + 0xb6], 1; add rsp, 0x40; pop rbp; ret; 
0x00000000004110a9: mov eax, dword ptr [rsp + 0x20]; mov qword ptr [rax + 0x30], rbx; mov rax, r8; add rsp, 0x28; pop rbp; ret; 
0x000000000045eb74: mov eax, dword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x24]; mov eax, 9; syscall; 
0x000000000045ecd3: mov eax, dword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; 
0x000000000045ecd3: mov eax, dword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000041d0b5: mov eax, dword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x28; pop rbp; ret; 
0x000000000045a1c6: mov eax, dword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004046aa: mov eax, dword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x28]; add rsp, 0x68; pop rbp; ret; 
0x0000000000474ecb: mov eax, dword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x48; pop rbp; ret; 
0x000000000040d5d6: mov eax, dword ptr [rsp + 0x20]; mov rbx, rdx; add rsp, 0x38; pop rbp; ret; 
0x0000000000404719: mov eax, dword ptr [rsp + 0x20]; mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rcx], rax; add rsp, 0x30; pop rbp; ret; 
0x0000000000432fea: mov eax, dword ptr [rsp + 0x20]; neg rax; call 0x32ee0; add rsp, 0x10; pop rbp; ret; 
0x0000000000426adc: mov eax, dword ptr [rsp + 0x20]; shl rax, 0xd; sub rsp, -0x80; pop rbp; ret; 
0x000000000042da36: mov eax, dword ptr [rsp + 0x24]; test eax, eax; jne 0x2da44; add rsp, 0x60; pop rbp; ret; 
0x00000000004195f5: mov eax, dword ptr [rsp + 0x28]; add rsp, 0x30; pop rbp; ret; 
0x00000000004580ae: mov eax, dword ptr [rsp + 0x28]; add rsp, 0x38; pop rbp; ret; 
0x000000000042a1d2: mov eax, dword ptr [rsp + 0x28]; add rsp, 0x40; pop rbp; ret; 
0x0000000000436292: mov eax, dword ptr [rsp + 0x28]; add rsp, 0x50; pop rbp; ret; 
0x000000000042362a: mov eax, dword ptr [rsp + 0x28]; add rsp, 0xa0; pop rbp; ret; 
0x0000000000445928: mov eax, dword ptr [rsp + 0x28]; call 0x2e340; add rsp, 0x18; pop rbp; ret; 
0x00000000004331eb: mov eax, dword ptr [rsp + 0x28]; call 0x329e0; add rsp, 0x40; pop rbp; ret; 
0x000000000043a826: mov eax, dword ptr [rsp + 0x28]; call 0x3a5e0; add rsp, 0x30; pop rbp; ret; 
0x000000000046018e: mov eax, dword ptr [rsp + 0x28]; call 0x58be0; call 0x59920; add rsp, 0x18; pop rbp; ret; 
0x000000000046426b: mov eax, dword ptr [rsp + 0x28]; call 0x643c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000421a46: mov eax, dword ptr [rsp + 0x28]; call 0xa580; add rsp, 0x38; pop rbp; ret; 
0x000000000042a72e: mov eax, dword ptr [rsp + 0x28]; call 0xa5c0; add rsp, 0x30; pop rbp; ret; 
0x00000000004165b2: mov eax, dword ptr [rsp + 0x28]; mov byte ptr [rax], 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000458886: mov eax, dword ptr [rsp + 0x28]; mov ebx, 1; call 0x385c0; add rsp, 0x30; pop rbp; ret; 
0x000000000044e9a6: mov eax, dword ptr [rsp + 0x28]; mov rbx, qword ptr [rsp + 0x40]; mov rsi, rcx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x000000000040d3a3: mov eax, dword ptr [rsp + 0x28]; mov rbx, rcx; call rsi; 
0x0000000000474106: mov eax, dword ptr [rsp + 0x28]; mov rbx, rdx; mov rcx, rsi; add rsp, 0xa0; pop rbp; ret; 
0x0000000000473d2f: mov eax, dword ptr [rsp + 0x28]; mov rbx, rsi; mov rcx, rdi; add rsp, 0x88; pop rbp; ret; 
0x0000000000442fd9: mov eax, dword ptr [rsp + 0x28]; nop dword ptr [rax]; call 0xa5c0; add rsp, 0x40; pop rbp; ret; 
0x000000000042d77d: mov eax, dword ptr [rsp + 0x28]; test eax, eax; jl 0x2d78b; add rsp, 0x48; pop rbp; ret; 
0x000000000045808f: mov eax, dword ptr [rsp + 0x28]; xor ebx, ebx; add rsp, 0x38; pop rbp; ret; 
0x0000000000449c27: mov eax, dword ptr [rsp + 0x2c]; mov rbx, qword ptr [rsp + 0xc8]; add rsp, 0xd8; pop rbp; ret; 
0x0000000000427c10: mov eax, dword ptr [rsp + 0x30]; add rsp, 0x38; pop rbp; ret; 
0x0000000000420a34: mov eax, dword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x000000000043182a: mov eax, dword ptr [rsp + 0x30]; and eax, 1; add rsp, 0x70; pop rbp; ret; 
0x0000000000422b2b: mov eax, dword ptr [rsp + 0x30]; call 0x229e0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x00000000004332ab: mov eax, dword ptr [rsp + 0x30]; call 0x33020; add rsp, 0x20; pop rbp; ret; 
0x0000000000445d9d: mov eax, dword ptr [rsp + 0x30]; call 0x45740; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x0000000000476daf: mov eax, dword ptr [rsp + 0x30]; call 0x75420; add rsp, 0x20; pop rbp; ret; 
0x000000000044e9bc: mov eax, dword ptr [rsp + 0x30]; call 0xa400; add rsp, 0x48; pop rbp; ret; 
0x0000000000424888: mov eax, dword ptr [rsp + 0x30]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000452ec0: mov eax, dword ptr [rsp + 0x30]; cmp rax, r8; jl 0x52e4e; add rsp, 0x300; pop rbp; ret; 
0x000000000046f530: mov eax, dword ptr [rsp + 0x30]; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x000000000046cf4a: mov eax, dword ptr [rsp + 0x30]; mov rbx, qword ptr [rsp + 0x38]; add rsp, 0x40; pop rbp; ret; 
0x000000000040d57e: mov eax, dword ptr [rsp + 0x30]; mov rbx, rcx; call rsi; 
0x00000000004747ba: mov eax, dword ptr [rsp + 0x30]; mov rbx, rdx; mov rcx, r8; add rsp, 0x50; pop rbp; ret; 
0x000000000041e362: mov eax, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000043a53a: mov eax, dword ptr [rsp + 0x30]; mov rdx, rsi; call rcx; 
0x000000000044ce56: mov eax, dword ptr [rsp + 0x34]; add rsp, 0x68; pop rbp; nop; ret; 
0x000000000044c75d: mov eax, dword ptr [rsp + 0x34]; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0xb0; pop rbp; ret; 
0x000000000041b6ce: mov eax, dword ptr [rsp + 0x38]; add qword ptr [rcx + 0x18], rax; add rsp, 0x78; pop rbp; ret; 
0x000000000045305e: mov eax, dword ptr [rsp + 0x38]; add rsp, 0x1c0; pop rbp; ret; 
0x000000000041920f: mov eax, dword ptr [rsp + 0x38]; add rsp, 0x98; pop rbp; ret; 
0x000000000043a8f6: mov eax, dword ptr [rsp + 0x38]; call 0x3a5e0; add rsp, 0x28; pop rbp; ret; 
0x0000000000463836: mov eax, dword ptr [rsp + 0x38]; mov rbx, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x000000000041a85c: mov eax, dword ptr [rsp + 0x40]; add rsp, 0x328; pop rbp; ret; 
0x0000000000455108: mov eax, dword ptr [rsp + 0x40]; add rsp, 0x48; pop rbp; ret; 
0x000000000042d5a6: mov eax, dword ptr [rsp + 0x40]; add rsp, 0x680; pop rbp; ret; 
0x0000000000442e16: mov eax, dword ptr [rsp + 0x40]; call 0x33fe0; add rsp, 0x58; pop rbp; ret; 
0x0000000000405175: mov eax, dword ptr [rsp + 0x40]; call 0xa5c0; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x00000000004635a0: mov eax, dword ptr [rsp + 0x40]; mov rbx, qword ptr [rsp + 0x48]; call 0x63880; add rsp, 0x30; pop rbp; ret; 
0x0000000000450a0f: mov eax, dword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x28]; add qword ptr [rdx + 0x11e8], rax; add rsp, 0x30; pop rbp; ret; 
0x000000000042c8bf: mov eax, dword ptr [rsp + 0x48]; add rax, 0x1268; call 0x2c600; add rsp, 0x38; pop rbp; ret; 
0x000000000040c130: mov eax, dword ptr [rsp + 0x48]; add rsp, 0x58; pop rbp; ret; 
0x000000000044cd00: mov eax, dword ptr [rsp + 0x48]; call 0x4cb80; mov ecx, dword ptr [rsp + 0x3c]; add rsp, 0x58; pop rbp; ret; 
0x000000000041e0ad: mov eax, dword ptr [rsp + 0x48]; call rbx; 
0x00000000004607b5: mov eax, dword ptr [rsp + 0x48]; call rcx; 
0x0000000000405518: mov eax, dword ptr [rsp + 0x48]; mov rbx, qword ptr [rsp + 0x20]; call 0x5dcc0; add rsp, 0x28; pop rbp; ret; 
0x000000000040e800: mov eax, dword ptr [rsp + 0x48]; mov rbx, rax; call rcx; 
0x000000000044dee5: mov eax, dword ptr [rsp + 0x50]; call 0x39c40; movzx eax, byte ptr [rsp + 0x13]; add rsp, 0x38; pop rbp; ret; 
0x0000000000436894: mov eax, dword ptr [rsp + 0x50]; call rcx; 
0x000000000044f5ca: mov eax, dword ptr [rsp + 0x50]; mov ebx, dword ptr [rsp + 0x4c]; call 0x500a0; add rsp, 0x58; pop rbp; ret; 
0x000000000042d057: mov eax, dword ptr [rsp + 0x50]; mov qword ptr [rip + 0x1234ce], rax; add rsp, 0x70; pop rbp; ret; 
0x00000000004308e3: mov eax, dword ptr [rsp + 0x50]; mov rdx, qword ptr [rax + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000445270: mov eax, dword ptr [rsp + 0x58]; add rsp, 0x68; pop rbp; ret; 
0x000000000047a28e: mov eax, dword ptr [rsp + 0x58]; call 0x76400; add rsp, 0x90; pop rbp; nop; ret; 
0x000000000044b899: mov eax, dword ptr [rsp + 0x58]; lea rcx, [rip + 0xd6dec]; xchg qword ptr [rcx], rax; add rsp, 0x60; pop rbp; ret; 
0x0000000000446bd0: mov eax, dword ptr [rsp + 0x58]; mov rbx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rsp + 0x28]; add rsp, 0x60; pop rbp; ret; 
0x0000000000472a5b: mov eax, dword ptr [rsp + 0x58]; mov rbx, qword ptr [rsp + 0x50]; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x60; pop rbp; ret; 
0x0000000000477986: mov eax, dword ptr [rsp + 0x58]; mov rcx, rdx; call rsi; 
0x000000000041ec5b: mov eax, dword ptr [rsp + 0x60]; add rsp, 0x78; pop rbp; ret; 
0x0000000000461dae: mov eax, dword ptr [rsp + 0x60]; add rsp, 0x88; pop rbp; ret; 
0x000000000044b67f: mov eax, dword ptr [rsp + 0x60]; mov rbx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rsp + 0x48]; add rsp, 0x100; pop rbp; ret; 
0x0000000000461e0c: mov eax, dword ptr [rsp + 0x60]; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x88; pop rbp; ret; 
0x0000000000448458: mov eax, dword ptr [rsp + 0x60]; mov rbx, qword ptr [rsp + 0x58]; call 0x476c0; add rsp, 0x2e8; pop rbp; ret; 
0x00000000004778c6: mov eax, dword ptr [rsp + 0x60]; xor ebx, ebx; xor ecx, ecx; add rsp, 0x40; pop rbp; ret; 
0x0000000000463bdb: mov eax, dword ptr [rsp + 0x68]; add rsp, 0x78; pop rbp; ret; 
0x00000000004749f7: mov eax, dword ptr [rsp + 0x68]; call rcx; 
0x000000000046942f: mov eax, dword ptr [rsp + 0x68]; mov rbx, qword ptr [rsp + 0x58]; mov rcx, qword ptr [rsp + 0x60]; add rsp, 0x70; pop rbp; ret; 
0x000000000045376a: mov eax, dword ptr [rsp + 0x68]; mov rbx, qword ptr [rsp + 0x70]; add rsp, 0x258; pop rbp; ret; 
0x00000000004532e7: mov eax, dword ptr [rsp + 0x68]; xor ebx, ebx; add rsp, 0x258; pop rbp; ret; 
0x000000000041ace6: mov eax, dword ptr [rsp + 0x70]; mov byte ptr [rax + 0x110], 0; add rsp, 0x58; pop rbp; ret; 
0x0000000000472aed: mov eax, dword ptr [rsp + 0x70]; mov rbx, qword ptr [rsp + 0x68]; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x78; pop rbp; ret; 
0x000000000040d8e9: mov eax, dword ptr [rsp + 0x70]; mov rbx, rcx; call rdi; 
0x0000000000424266: mov eax, dword ptr [rsp + 0x78]; add rsp, 0x90; pop rbp; ret; 
0x0000000000470dab: mov eax, dword ptr [rsp + 0x80]; add rsp, 0x128; pop rbp; ret; 
0x000000000043df76: mov eax, dword ptr [rsp + 0x80]; add rsp, 0xa8; pop rbp; ret; 
0x0000000000476b60: mov eax, dword ptr [rsp + 0x80]; call 0x75420; add rsp, 0x70; pop rbp; ret; 
0x0000000000476ba2: mov eax, dword ptr [rsp + 0x80]; call 0x756e0; add rsp, 0x70; pop rbp; ret; 
0x000000000042361d: mov eax, dword ptr [rsp + 0x80]; call 0xa400; mov rax, qword ptr [rsp + 0x28]; add rsp, 0xa0; pop rbp; ret; 
0x0000000000479528: mov eax, dword ptr [rsp + 0x98]; call 0x77e20; add rsp, 0x88; pop rbp; ret; 
0x000000000040173f: mov eax, dword ptr [rsp + 0xa0]; add rsp, 0xa8; pop rbp; ret; 
0x000000000041255e: mov eax, dword ptr [rsp + 0xa0]; call 0x5d9c0; add rsp, 0xa8; pop rbp; ret; 
0x0000000000426ff7: mov eax, dword ptr [rsp + 0xa8]; add rsp, 0x120; pop rbp; ret; 
0x0000000000471c1c: mov eax, dword ptr [rsp + 0xb0]; call rcx; 
0x000000000046532d: mov eax, dword ptr [rsp + 0xf0]; mov rbx, qword ptr [rsp + 0x88]; mov rcx, qword ptr [rsp + 0x98]; add rsp, 0x120; pop rbp; ret; 
0x000000000040681a: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000412e9b: mov eax, dword ptr [rsp + 8]; add rsp, 0x20; pop rbp; ret; 
0x000000000040c64a: mov eax, dword ptr [rsp + 8]; add rsp, 0x38; pop rbp; ret; 
0x0000000000453e40: mov eax, dword ptr [rsp + 8]; add rsp, 0x58; pop rbp; ret; 
0x00000000004067f0: mov eax, dword ptr [rsp + 8]; cmp rcx, rax; jne 0x67ff; add rsp, 0x10; pop rbp; ret; 
0x000000000043235a: mov eax, dword ptr [rsp + 8]; mov byte ptr [rax + 0xb4], 0; add rsp, 0x10; pop rbp; ret; 
0x000000000045872b: mov eax, dword ptr [rsp + 8]; mov byte ptr [rax], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045e601: mov eax, dword ptr [rsp + 8]; mov dword ptr [rax], 0; mov edi, 0; mov eax, 0x3c; syscall; 
0x000000000045006c: mov eax, dword ptr [rsp + 8]; mov ebx, 0xffffffff; lea rcx, [rip + 0xe98fc]; add rsp, 0x10; pop rbp; ret; 
0x00000000004068d3: mov eax, dword ptr [rsp + 8]; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x30; pop rbp; ret; 
0x000000000045ccc0: mov eax, dword ptr [rsp + 8]; pause; sub eax, 1; jne 0x5ccc4; ret; 
0x0000000000422d27: mov eax, dword ptr [rsp + 8]; test rax, rax; setne al; add rsp, 0x20; pop rbp; ret; 
0x000000000045e522: mov eax, dword ptr [rsp]; add rsp, 0x170; popfq; pop rbp; ret; 
0x000000000044f2fb: mov eax, dword ptr [rsp]; add rsp, 8; pop rbp; ret; 
0x00000000004404f4: mov eax, dword ptr [rsp]; mov ecx, ebx; mov rbx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000043590d: mov eax, dword ptr [rsp]; mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rcx + 0xc0], rax; add rsp, 0x38; pop rbp; ret; 
0x000000000042b62c: mov eax, eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004110b2: mov eax, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000044ff59: mov eax, eax; add rsp, 0x38; pop rbp; ret; 
0x000000000042f6e7: mov eax, eax; add rsp, 0x58; pop rbp; ret; 
0x0000000000439844: mov eax, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000041f26d: mov eax, eax; call 0x28c80; add rsp, 0x18; pop rbp; ret; 
0x0000000000452479: mov eax, eax; call rsi; 
0x000000000042f6df: mov eax, eax; mov byte ptr [r8 + 1], 1; mov rax, r8; add rsp, 0x58; pop rbp; ret; 
0x00000000004662c4: mov eax, eax; mov ecx, 0x320; call 0x5d320; add rsp, 0x690; pop rbp; ret; 
0x000000000044d253: mov eax, eax; mov rax, rdx; add rsp, 0x58; pop rbp; ret; 
0x0000000000418a55: mov eax, eax; mov rbx, rcx; ret; 
0x00000000004093fc: mov eax, eax; ret; 
0x0000000000465ddb: mov eax, ebp; mov r10, rdx; call 0x66820; add rsp, 0x58; pop rbp; ret; 
0x000000000040e7c1: mov eax, ebp; mov rbx, rsi; call rcx; 
0x000000000045d481: mov eax, ebp; ret; 
0x0000000000426d13: mov eax, ebx; add rsp, 0x10; pop rbp; ret; 
0x0000000000409f19: mov eax, ebx; add rsp, 0x18; pop rbp; ret; 
0x000000000046f78a: mov eax, ebx; add rsp, 0x20; pop rbp; ret; 
0x0000000000403a90: mov eax, ebx; add rsp, 0x28; pop rbp; ret; 
0x000000000042a24c: mov eax, ebx; add rsp, 0x40; pop rbp; ret; 
0x000000000045042b: mov eax, ebx; add rsp, 0x60; pop rbp; ret; 
0x000000000040116b: mov eax, ebx; add rsp, 8; pop rbp; ret; 
0x0000000000457fc6: mov eax, ebx; call 0x1dfa0; add rsp, 0x18; pop rbp; ret; 
0x00000000004734ac: mov eax, ebx; call 0x739e0; add rsp, 0x10; pop rbp; ret; 
0x000000000043a471: mov eax, ebx; call 0xa5c0; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x000000000040a101: mov eax, ebx; call rcx; 
0x000000000046feca: mov eax, ebx; call rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000434614: mov eax, ebx; call rsi; 
0x0000000000444b69: mov eax, ebx; lea rbx, [rsp + 0x48]; mov rcx, rdi; call rsi; 
0x0000000000427244: mov eax, ebx; lea rdx, [rsp + 0x110]; call rdi; 
0x0000000000460204: mov eax, ebx; lock cmpxchg qword ptr [rdx], rcx; sete al; ret; 
0x000000000041f4fe: mov eax, ebx; mov ebx, 0x1ff; add rsp, 0x40; pop rbp; ret; 
0x0000000000420816: mov eax, ebx; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000044ab90: mov eax, ebx; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000460757: mov eax, ebx; mov rbx, qword ptr [rsp + 0x88]; mov rcx, qword ptr [rsp + 0x90]; call rdx; 
0x00000000004648f9: mov eax, ebx; mov rbx, r8; mov rcx, r9; call rdi; 
0x00000000004645ec: mov eax, ebx; mov rbx, r9; call rsi; 
0x0000000000409fe6: mov eax, ebx; mov rbx, rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000040c46f: mov eax, ebx; mov rbx, rcx; call 0x2a480; add rsp, 0x28; pop rbp; ret; 
0x0000000000403c44: mov eax, ebx; mov rbx, rcx; call 0x3780; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c55: mov eax, ebx; mov rbx, rcx; call 0x3860; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c66: mov eax, ebx; mov rbx, rcx; call 0x3940; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c9f: mov eax, ebx; mov rbx, rcx; call 0x3b00; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cc2: mov eax, ebx; mov rbx, rcx; call 0x5ce80; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cf3: mov eax, ebx; mov rbx, rcx; call 0x5cee0; add rsp, 0x60; pop rbp; ret; 
0x0000000000410f1c: mov eax, ebx; mov rbx, rcx; call 0x5d9c0; add rsp, 0x18; pop rbp; ret; 
0x000000000040413f: mov eax, ebx; mov rbx, rcx; call rsi; 
0x000000000040413f: mov eax, ebx; mov rbx, rcx; call rsi; add rsp, 0x28; pop rbp; ret; 
0x0000000000476315: mov eax, ebx; mov rbx, rcx; mov rcx, rdi; add rsp, 0x28; pop rbp; ret; 
0x00000000004647d0: mov eax, ebx; mov rbx, rcx; mov rcx, rsi; call rdx; 
0x000000000047bcb2: mov eax, ebx; mov rbx, rdi; call rcx; 
0x0000000000464944: mov eax, ebx; mov rbx, rdi; mov rcx, r9; call rsi; 
0x00000000004763a6: mov eax, ebx; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000040f3a1: mov eax, ebx; mov rbx, rdx; call 0xeb00; add rsp, 0x98; pop rbp; ret; 
0x00000000004642f3: mov eax, ebx; mov rbx, rdx; call rsi; 
0x000000000043a33f: mov eax, ebx; mov rbx, rsi; xor ecx, ecx; add rsp, 0x38; pop rbp; ret; 
0x000000000046fe4b: mov eax, ebx; mov rcx, qword ptr [rdx + 0x48]; call rcx; 
0x0000000000470a1f: mov eax, ebx; mov rcx, qword ptr [rdx + 0x98]; call rcx; 
0x000000000046f03b: mov eax, ebx; nop dword ptr [rax]; call 0x58da0; add rsp, 0x18; pop rbp; ret; 
0x000000000046effc: mov eax, ebx; nop; call 0x58c80; add rsp, 0x18; pop rbp; ret; 
0x00000000004657dc: mov eax, ebx; nop; call 0x66b00; add rsp, 0x120; pop rbp; ret; 
0x000000000046425d: mov eax, ebx; nop; call rcx; 
0x0000000000408e26: mov eax, ebx; ret; 
0x0000000000431b8d: mov eax, ebx; xor ebx, ebx; call 0x31a60; add rsp, 0x40; pop rbp; ret; 
0x000000000043a38a: mov eax, ebx; xor ebx, ebx; xor ecx, ecx; add rsp, 0x38; pop rbp; ret; 
0x000000000040102b: mov eax, ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000456119: mov eax, ecx; add rsp, 0x120; pop rbp; ret; 
0x000000000046d2dd: mov eax, ecx; add rsp, 0x128; pop rbp; ret; 
0x0000000000409d67: mov eax, ecx; add rsp, 0x18; pop rbp; ret; 
0x000000000043c8d1: mov eax, ecx; add rsp, 0x20; pop rbp; ret; 
0x0000000000410ebe: mov eax, ecx; add rsp, 0x28; pop rbp; ret; 
0x0000000000429776: mov eax, ecx; add rsp, 0x30; pop rbp; ret; 
0x0000000000425af1: mov eax, ecx; add rsp, 0x38; pop rbp; ret; 
0x000000000042d1ad: mov eax, ecx; add rsp, 0x50; pop rbp; ret; 
0x0000000000433dcb: mov eax, ecx; add rsp, 0x58; pop rbp; ret; 
0x0000000000403da8: mov eax, ecx; add rsp, 0x60; pop rbp; ret; 
0x000000000044756b: mov eax, ecx; add rsp, 0x68; pop rbp; ret; 
0x0000000000469d8b: mov eax, ecx; add rsp, 0x70; pop rbp; ret; 
0x000000000040db11: mov eax, ecx; add rsp, 0x78; pop rbp; ret; 
0x0000000000415bb6: mov eax, ecx; add rsp, 8; pop rbp; ret; 
0x000000000041e247: mov eax, ecx; call 0x1e2a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000422a8c: mov eax, ecx; call 0x226a0; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000403967: mov eax, ecx; call 0x3780; add rsp, 0x10; pop rbp; ret; 
0x00000000004039c7: mov eax, ecx; call 0x3860; add rsp, 0x10; pop rbp; ret; 
0x000000000044c313: mov eax, ecx; call 0x4c120; add rsp, 0x10; pop rbp; nop; ret; 
0x00000000004540a9: mov eax, ecx; call 0x54120; add rsp, 0x20; pop rbp; ret; 
0x000000000046623f: mov eax, ecx; call 0x65060; add rsp, 0x690; pop rbp; ret; 
0x000000000045f21f: mov eax, ecx; call 0x9560; add rsp, 0x10; pop rbp; ret; 
0x00000000004506a0: mov eax, ecx; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x0000000000436860: mov eax, ecx; call rbx; 
0x00000000004608ff: mov eax, ecx; call rdx; 
0x0000000000473a2d: mov eax, ecx; call rsi; 
0x000000000042c96a: mov eax, ecx; lock cmpxchg dword ptr [rsi + 0x18], edx; sete cl; test cl, cl; je 0x2c959; ret; 
0x000000000042b6f1: mov eax, ecx; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000451c9c: mov eax, ecx; mov rax, qword ptr [rax + 0x10]; add rsp, 0x10; pop rbp; ret; 
0x0000000000428ed1: mov eax, ecx; mov rbx, rdi; add rsp, 0x18; pop rbp; ret; 
0x000000000040d28a: mov eax, ecx; mov rbx, rdi; call rsi; 
0x00000000004018cd: mov eax, ecx; mov rbx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000047056c: mov eax, ecx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000434857: mov eax, ecx; mov rbx, rdx; add rsp, 0x20; pop rbp; ret; 
0x00000000004703ac: mov eax, ecx; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x0000000000429bd4: mov eax, ecx; mov rbx, rdx; ret; 
0x000000000045efb1: mov eax, ecx; mov rbx, rsi; pop rbp; ret; 
0x00000000004671a1: mov eax, ecx; mov rcx, r11; add rsp, 0x78; pop rbp; ret; 
0x0000000000428560: mov eax, ecx; mov rcx, r8; lea rdx, [rsp + 0x80]; call rdi; 
0x000000000046d778: mov eax, ecx; mov rcx, rdx; add rsp, 0x70; pop rbp; ret; 
0x000000000041e45b: mov eax, ecx; movups xmm0, xmm1; add rsp, 0x20; pop rbp; ret; 
0x0000000000461b9a: mov eax, ecx; nop dword ptr [rax]; call 0x61bc0; add rsp, 8; pop rbp; ret; 
0x000000000045563d: mov eax, ecx; nop; call 0x4c120; add rsp, 0x40; pop rbp; ret; 
0x0000000000401211: mov eax, ecx; pop rbp; ret; 
0x000000000040193f: mov eax, ecx; ret; 
0x000000000040d318: mov eax, ecx; xor ebx, ebx; call rsi; 
0x000000000042b635: mov eax, edi; add rsp, 0x10; pop rbp; ret; 
0x0000000000451fd5: mov eax, edi; add rsp, 0x178; pop rbp; nop; ret; 
0x000000000044eff5: mov eax, edi; add rsp, 0x18; pop rbp; ret; 
0x000000000044e803: mov eax, edi; add rsp, 0x20; pop rbp; ret; 
0x0000000000415791: mov eax, edi; add rsp, 0x28; pop rbp; ret; 
0x000000000040c88b: mov eax, edi; add rsp, 0x40; pop rbp; ret; 
0x000000000046b5f2: mov eax, edi; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x00000000004333e0: mov eax, edi; call rcx; 
0x0000000000454d6a: mov eax, edi; call rsi; 
0x0000000000454d6a: mov eax, edi; call rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004687be: mov eax, edi; mov rbx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004749e2: mov eax, edi; mov rbx, rsi; add rsp, 0x38; pop rbp; ret; 
0x0000000000429d15: mov eax, edi; mov rbx, rsi; ret; 
0x000000000040456e: mov eax, edx; add byte ptr [rax], al; add byte ptr [rcx + rax + 0x68918b48], al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000423b79: mov eax, edx; add rsp, 0x10; pop rbp; ret; 
0x000000000042772e: mov eax, edx; add rsp, 0x120; pop rbp; ret; 
0x000000000042c1ef: mov eax, edx; add rsp, 0x18; pop rbp; ret; 
0x000000000042d922: mov eax, edx; add rsp, 0x2020; pop rbp; ret; 
0x0000000000411044: mov eax, edx; add rsp, 0x28; pop rbp; ret; 
0x000000000040ca3c: mov eax, edx; add rsp, 0x30; pop rbp; ret; 
0x000000000040cf72: mov eax, edx; add rsp, 0x38; pop rbp; ret; 
0x000000000040cd43: mov eax, edx; add rsp, 0x50; pop rbp; ret; 
0x000000000044d256: mov eax, edx; add rsp, 0x58; pop rbp; ret; 
0x000000000044778f: mov eax, edx; call 0x13f60; add rsp, 0x68; pop rbp; ret; 
0x00000000004231e7: mov eax, edx; call 0x25ce0; add rsp, 0x58; pop rbp; ret; 
0x000000000042bd2f: mov eax, edx; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x0000000000470428: mov eax, edx; call 0x6fde0; add rsp, 0x18; pop rbp; ret; 
0x00000000004771a6: mov eax, edx; call 0x75420; add rsp, 0xd8; pop rbp; ret; 
0x000000000045f1ac: mov eax, edx; call 0x75e0; add rsp, 0x18; pop rbp; ret; 
0x000000000047b3cd: mov eax, edx; call 0x7a8e0; add rsp, 0x1d0; pop rbp; ret; 
0x0000000000403756: mov eax, edx; call 0x8d60; add rsp, 0x18; pop rbp; ret; 
0x0000000000409508: mov eax, edx; call 0x9560; add rsp, 0x40; pop rbp; ret; 
0x000000000043e557: mov eax, edx; call 0xa660; add rsp, 0x50; pop rbp; ret; 
0x000000000040c3b7: mov eax, edx; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004606a2: mov eax, edx; call rcx; 
0x0000000000435592: mov eax, edx; lock cmpxchg dword ptr [rbx + 0x90], ecx; sete al; add rsp, 0x10; pop rbp; ret; 
0x0000000000462bff: mov eax, edx; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x000000000040d3fa: mov eax, edx; mov ebx, 1; add rsp, 0x30; pop rbp; ret; 
0x00000000004629e3: mov eax, edx; mov ebx, 2; add rsp, 0x10; pop rbp; ret; 
0x00000000004629b9: mov eax, edx; mov ebx, 3; add rsp, 0x10; pop rbp; ret; 
0x000000000046ea57: mov eax, edx; mov rbx, r9; mov rcx, r8; add rsp, 0x38; pop rbp; ret; 
0x000000000041d3a1: mov eax, edx; mov rbx, rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004040c3: mov eax, edx; mov rbx, rsi; call 0x4100; add rsp, 0x18; pop rbp; ret; 
0x0000000000404063: mov eax, edx; mov rbx, rsi; call 0x41c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004771cf: mov eax, edx; mov rbx, rsi; call 0x75420; add rsp, 0xd8; pop rbp; ret; 
0x000000000040c33a: mov eax, edx; nop dword ptr [rax]; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x000000000040ab1d: mov eax, edx; nop; ret; 
0x000000000042a448: mov eax, edx; test rcx, rcx; jne 0x2a3e9; add rsp, 0x20; pop rbp; ret; 
0x0000000000414330: mov eax, esi; adc eax, dword ptr [rax]; add byte ptr [rdi + 6], bh; add rsp, 0x20; pop rbp; ret; 
0x000000000040cdd6: mov eax, esi; add rsp, 0x10; pop rbp; ret; 
0x000000000042823c: mov eax, esi; add rsp, 0x18; pop rbp; ret; 
0x0000000000440719: mov eax, esi; add rsp, 0x20; pop rbp; ret; 
0x0000000000410fe5: mov eax, esi; add rsp, 0x28; pop rbp; ret; 
0x000000000041d51e: mov eax, esi; add rsp, 0x30; pop rbp; ret; 
0x000000000046fa0d: mov eax, esi; add rsp, 0x40; pop rbp; ret; 
0x0000000000428bbf: mov eax, esi; add rsp, 0x68; pop rbp; ret; 
0x0000000000466742: mov eax, esi; add rsp, 0x70; pop rbp; ret; 
0x0000000000449797: mov eax, esi; add rsp, 0x78; pop rbp; ret; 
0x00000000004411e6: mov eax, esi; call 0x41340; sub rsp, -0x80; pop rbp; ret; 
0x0000000000401737: mov eax, esi; call 0x5dcc0; mov rax, qword ptr [rsp + 0xa0]; add rsp, 0xa8; pop rbp; ret; 
0x000000000046f242: mov eax, esi; call 0x6f4e0; add rsp, 0x18; pop rbp; ret; 
0x000000000040ddab: mov eax, esi; call 0xde00; add rsp, 0x10; pop rbp; ret; 
0x00000000004157e3: mov eax, esi; call rcx; 
0x0000000000463fbf: mov eax, esi; call rdx; 
0x0000000000408cad: mov eax, esi; lea rdx, [rip + 0x957b2]; call rcx; 
0x000000000041828f: mov eax, esi; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004729eb: mov eax, esi; mov r9, rsi; call 0x36a0; add rsp, 0x38; pop rbp; ret; 
0x000000000045f01d: mov eax, esi; mov rbx, rcx; pop rbp; ret; 
0x000000000041f0f1: mov eax, esi; mov rbx, rdi; add rsp, 0x40; pop rbp; ret; 
0x0000000000410a5d: mov eax, esi; mov rbx, rdi; call rcx; 
0x000000000040f499: mov eax, esi; mov rbx, rdi; nop; call rcx; 
0x000000000040110e: mov eax, esi; mov rbx, rdx; mov rcx, rbx; add rsp, 0x10; pop rbp; ret; 
0x000000000046a67e: mov eax, esi; mov rcx, rdi; call 0x5d320; add rsp, 0x100; pop rbp; ret; 
0x0000000000408e47: mov eax, esi; mul rcx; xor rax, rdx; mul rdi; xor rax, rdx; ret; 
0x000000000041bbfc: mov eax, esi; nop; call 0x22100; add rsp, 0x40; pop rbp; ret; 
0x0000000000429956: mov eax, esi; ret; 
0x0000000000464189: mov eax, esi; xor ebx, ebx; xor ecx, ecx; add rsp, 0x28; pop rbp; ret; 
0x00000000004120e7: mov eax, esi; xor esi, esi; call 0x11f60; add rsp, 0x38; pop rbp; ret; 
0x0000000000402ce9: mov eax, esp; add rsp, 0x40; pop rbp; ret; 
0x0000000000465e4f: mov eax, esp; call 0x66820; add rsp, 0x58; pop rbp; ret; 
0x0000000000465ceb: mov eax, esp; mov r9, r13; call 0x66380; add rsp, 0x58; pop rbp; ret; 
0x000000000040e038: mov eax, esp; mov rbx, rax; call rcx; 
0x000000000040e0b5: mov eax, esp; mov rbx, rdi; call rcx; 
0x000000000044065f: mov eax, r8d; add rsp, 0x10; pop rbp; ret; 
0x0000000000452478: mov eax, r8d; call rsi; 
0x0000000000444705: mov ebp, 0x1870010; add rsp, 0x20; pop rbp; ret; 
0x00000000004749d7: mov ebp, 0x4800040a; add esp, 0x38; pop rbp; ret; 
0x000000000044deeb: mov ebp, 0xb60ffffe; and al, 0x13; add rsp, 0x38; pop rbp; ret; 
0x0000000000402e61: mov ebp, 0xe8d348c9; and rax, 1; lea rax, [rax*2 - 1]; ret; 
0x0000000000402eb9: mov ebp, 0xeed348cf; and rsi, 1; lea rax, [rsi*2 - 1]; ret; 
0x000000000046ca81: mov ebp, 0xf7000000; ret 0x3f; 
0x0000000000451470: mov ebp, dword ptr [rbp]; add rsp, 0x1e0; pop rbp; ret; 
0x000000000046c413: mov ebp, dword ptr [rbp]; add rsp, 0x3b0; pop rbp; ret; 
0x000000000046bef0: mov ebp, dword ptr [rbp]; add rsp, 0xe0; pop rbp; ret; 
0x000000000045b247: mov ebp, dword ptr [rbx + 0x68]; call 0x5f580; call 0x5cde0; ret; 
0x000000000045e5c3: mov ebp, dword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x000000000045a8e3: mov ebp, dword ptr [rsp + 0x68]; add rsp, 0x70; pop rbp; ret; 
0x0000000000458648: mov ebp, esp; call 0x20520; pop rbp; ret; 
0x0000000000458fe8: mov ebp, esp; call 0x2ca00; pop rbp; ret; 
0x0000000000457d08: mov ebp, esp; call 0x360e0; pop rbp; ret; 
0x000000000043cc48: mov ebp, esp; call 0x3cc40; pop rbp; ret; 
0x000000000043cc68: mov ebp, esp; call 0x3cc60; pop rbp; ret; 
0x000000000043cc88: mov ebp, esp; call 0x3cc80; pop rbp; ret; 
0x000000000043cca8: mov ebp, esp; call 0x3cca0; pop rbp; ret; 
0x000000000043ccc8: mov ebp, esp; call 0x3ccc0; pop rbp; ret; 
0x000000000043cce8: mov ebp, esp; call 0x3cce0; pop rbp; ret; 
0x0000000000445f48: mov ebp, esp; call 0x45f60; call 0x460a0; pop rbp; ret; 
0x000000000045f362: mov ebp, esp; call 0x5ee20; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; pop rbp; ret; 
0x0000000000458e08: mov ebp, esp; sub rsp, 0x10; call 0x10ee0; add rsp, 0x10; pop rbp; ret; 
0x0000000000459ca8: mov ebp, esp; sub rsp, 0x10; call 0x54fe0; add rsp, 0x10; pop rbp; ret; 
0x0000000000459ce8: mov ebp, esp; sub rsp, 0x10; call 0x55260; add rsp, 0x10; pop rbp; ret; 
0x0000000000459d28: mov ebp, esp; sub rsp, 0x10; call 0x55520; add rsp, 0x10; pop rbp; ret; 
0x0000000000458dc8: mov ebp, esp; sub rsp, 0x18; call 0x10c60; add rsp, 0x18; pop rbp; ret; 
0x0000000000459f48: mov ebp, esp; sub rsp, 0x18; call 0x42ea0; add rsp, 0x18; pop rbp; ret; 
0x000000000045a208: mov ebp, esp; sub rsp, 0x18; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x0000000000458ce8: mov ebp, esp; sub rsp, 0x18; call 0xdb60; add rsp, 0x18; pop rbp; ret; 
0x0000000000433128: mov ebp, esp; sub rsp, 8; call 0x33020; add rsp, 8; pop rbp; ret; 
0x0000000000458d28: mov ebp, esp; sub rsp, 8; call 0xde00; add rsp, 8; pop rbp; ret; 
0x000000000045b102: mov ebp, esp; ud2; call 0x5cde0; pop rbp; ret; 
0x0000000000413cf3: mov ebx, 0; add byte ptr [rax + 0x1480000], al; ret; 
0x000000000041f77f: mov ebx, 0; add byte ptr [rax + 0x148ffff], al; ret; 
0x00000000004424ab: mov ebx, 0x13; ret; 
0x000000000043ef70: mov ebx, 0x17; call 0x2e4a0; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004068e9: mov ebx, 0x1d; add rsp, 0x30; pop rbp; ret; 
0x0000000000430667: mov ebx, 0x1e; ret; 
0x000000000041f500: mov ebx, 0x1ff; add rsp, 0x40; pop rbp; ret; 
0x00000000004744d9: mov ebx, 0x20; pop rbp; nop; ret; 
0x00000000004730c7: mov ebx, 0x20; ret; 
0x000000000043e5ec: mov ebx, 0x25; call 0x30ee0; add rsp, 0x50; pop rbp; ret; 
0x000000000042c661: mov ebx, 0x450002ea; xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 8; pop rbp; ret; 
0x0000000000411881: mov ebx, 0x48000001; add esp, 0x68; pop rbp; ret; 
0x000000000046a5c1: mov ebx, 0x48000004; add esp, 0x100; pop rbp; ret; 
0x0000000000467b81: mov ebx, 0x48000004; add esp, 0x88; pop rbp; ret; 
0x000000000044f5e1: mov ebx, 0x4800000a; add esp, 0x58; pop rbp; ret; 
0x00000000004653a1: mov ebx, 0x48000018; add esp, 0x120; pop rbp; ret; 
0x00000000004321c1: mov ebx, 0x4800002c; add esp, 0x40; pop rbp; ret; 
0x0000000000415a01: mov ebx, 0x4800008a; add esp, 8; pop rbp; ret; 
0x000000000043a961: mov ebx, 0x4800014b; mov eax, dword ptr [rsp + 0x28]; call 0x3a5e0; add rsp, 0x30; pop rbp; ret; 
0x000000000040a681: mov ebx, 0x48000230; add esp, 0x18; pop rbp; ret; 
0x0000000000404961: mov ebx, 0x4800029a; add esp, 0x58; pop rbp; ret; 
0x00000000004074c1: mov ebx, 0x4800042f; add esp, 0xf8; pop rbp; ret; 
0x0000000000458fa1: mov ebx, 0x48fffd18; add esp, 0x20; pop rbp; ret; 
0x0000000000436b01: mov ebx, 0x48fffd3a; add esp, 8; pop rbp; ret; 
0x0000000000459fa1: mov ebx, 0x48fffe8b; add esp, 0x28; pop rbp; ret; 
0x000000000041e001: mov ebx, 0x48fffec5; add esp, 0x10; pop rbp; ret; 
0x0000000000422661: mov ebx, 0x48ffffa6; add esp, 8; pop rbp; ret; 
0x0000000000422361: mov ebx, 0x48ffffa9; add esp, 0x48; pop rbp; ret; 
0x0000000000470621: mov ebx, 0x48ffffd2; add esp, 0x20; pop rbp; ret; 
0x0000000000454001: mov ebx, 0x48ffffdd; add esp, 0x198; pop rbp; ret; 
0x0000000000473f41: mov ebx, 0x48fffff5; add esp, 8; pop rbp; ret; 
0x0000000000461e61: mov ebx, 0x48fffff6; add esp, 8; pop rbp; ret; 
0x000000000044a421: mov ebx, 0x48fffffc; add esp, 0x50; pop rbp; ret; 
0x00000000004604e1: mov ebx, 0x48fffffe; add esp, 8; pop rbp; ret; 
0x0000000000474f51: mov ebx, 0x49000ad8; mov dword ptr [rbx + 8], ecx; mov qword ptr [rip + 0xad8b0], rax; pop rbp; ret; 
0x0000000000403823: mov ebx, 0x52ef6b; imul rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000403a50: mov ebx, 0x52ef6b; imul rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x00000000004037eb: mov ebx, 0x52ef6b; imul rax, rdx; mov qword ptr [rcx + 0x120], rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000046492b: mov ebx, 0x60c48348; pop rbp; ret; 
0x00000000004730e7: mov ebx, 0xb; ret; 
0x00000000004799a1: mov ebx, 0xe80000a5; mov dh, 0xcc; cld; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000046d2ef: mov ebx, 0xe; add rsp, 0x128; pop rbp; ret; 
0x000000000046fc66: mov ebx, 0xf; add rsp, 0x38; pop rbp; ret; 
0x0000000000450070: mov ebx, 0xffffffff; lea rcx, [rip + 0xe98fc]; add rsp, 0x10; pop rbp; ret; 
0x00000000004629f5: mov ebx, 1; add rsp, 0x10; pop rbp; nop; ret; 
0x000000000040eeac: mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000044ab92: mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x000000000044a6e9: mov ebx, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000044cbf2: mov ebx, 1; add rsp, 0x28; pop rbp; ret; 
0x000000000040d3fc: mov ebx, 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000424802: mov ebx, 1; add rsp, 0x60; pop rbp; ret; 
0x0000000000432b35: mov ebx, 1; call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x000000000045888a: mov ebx, 1; call 0x385c0; add rsp, 0x30; pop rbp; ret; 
0x000000000044a9da: mov ebx, 1; nop; ret; 
0x0000000000453956: mov ebx, 1; ret; 
0x000000000044ccee: mov ebx, 1; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x0000000000431ff5: mov ebx, 1; xor ecx, ecx; add rsp, 0x68; pop rbp; ret; 
0x00000000004629e5: mov ebx, 2; add rsp, 0x10; pop rbp; ret; 
0x0000000000472dfd: mov ebx, 2; call 0x4a580; add rsp, 0x58; pop rbp; ret; 
0x00000000004629bb: mov ebx, 3; add rsp, 0x10; pop rbp; ret; 
0x0000000000459585: mov ebx, 3; call 0x2cc60; add rsp, 0x30; pop rbp; ret; 
0x0000000000432cdd: mov ebx, 3; call 0x331a0; add rsp, 0x28; pop rbp; ret; 
0x0000000000462998: mov ebx, 4; add rsp, 0x10; pop rbp; ret; 
0x000000000046c00d: mov ebx, 4; add rsp, 0x28; pop rbp; ret; 
0x0000000000432c53: mov ebx, 4; call 0x331a0; add rsp, 0x28; pop rbp; ret; 
0x000000000040ab28: mov ebx, 4; ret; 
0x0000000000432bce: mov ebx, 5; call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x00000000004527cf: mov ebx, 5; call 0x331a0; call 0x32980; add rsp, 0x40; pop rbp; ret; 
0x000000000046c04b: mov ebx, 6; add rsp, 0x28; pop rbp; ret; 
0x000000000040ab35: mov ebx, 7; ret; 
0x000000000040ab02: mov ebx, 8; ret; 
0x0000000000476749: mov ebx, dword ptr [rax + 0x18]; call 0x752a0; add rsp, 0x60; pop rbp; ret; 
0x000000000042c5dd: mov ebx, dword ptr [rax + 0x20]; add rbx, qword ptr [rax + 0x38]; add rcx, rbx; sub rdx, rcx; mov qword ptr [rax + 0x48], rdx; ret; 
0x0000000000472e25: mov ebx, dword ptr [rax + 0x28]; mov rax, rcx; ret; 
0x000000000045f156: mov ebx, dword ptr [rax + 8]; mov rax, rcx; pop rbp; ret; 
0x0000000000460604: mov ebx, dword ptr [rax + 8]; mov rax, rcx; ret; 
0x0000000000464068: mov ebx, dword ptr [rax]; mov rcx, qword ptr [rax + 8]; mov rdi, qword ptr [rax + 0x10]; mov rax, rsi; call rdx; 
0x000000000046a540: mov ebx, dword ptr [rbx + 0x30]; call 0x6a420; add rsp, 0x100; pop rbp; ret; 
0x000000000046fb8a: mov ebx, dword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x000000000045a29b: mov ebx, dword ptr [rbx + 8]; jmp rbx; 
0x0000000000404000: mov ebx, dword ptr [rbx]; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000046f787: mov ebx, dword ptr [rbx]; mov rax, rbx; add rsp, 0x20; pop rbp; ret; 
0x0000000000439bde: mov ebx, dword ptr [rcx + 0x10]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x0000000000430de6: mov ebx, dword ptr [rcx + 0x10]; ret; 
0x000000000046ee5f: mov ebx, dword ptr [rcx + 8]; add rsp, 0x30; pop rbp; ret; 
0x000000000046ee4a: mov ebx, dword ptr [rcx + 8]; mov rax, rdx; add rsp, 0x30; pop rbp; ret; 
0x0000000000436e1c: mov ebx, dword ptr [rcx + 8]; nop; call 0x476c0; add rsp, 0x10; pop rbp; ret; 
0x000000000046bae7: mov ebx, dword ptr [rcx + rax + 8]; mov rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000040ab18: mov ebx, dword ptr [rcx + rax + 8]; mov rax, rdx; nop; ret; 
0x0000000000434608: mov ebx, dword ptr [rcx + rax*8]; mov rdx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x0000000000450049: mov ebx, dword ptr [rcx]; add rcx, 0x11d8; add rsp, 0x10; pop rbp; ret; 
0x0000000000454fb2: mov ebx, dword ptr [rcx]; call 0x54fe0; call 0x1220; add rsp, 0x10; pop rbp; ret; 
0x0000000000456137: mov ebx, dword ptr [rdi + 0x30]; mov rcx, qword ptr [rsp + 0x108]; call 0x55e20; add rsp, 0x120; pop rbp; ret; 
0x0000000000403e11: mov ebx, dword ptr [rdi]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000419d73: mov ebx, dword ptr [rdx + 0x10]; call 0x19da0; add rsp, 0x10; pop rbp; ret; 
0x000000000042a673: mov ebx, dword ptr [rdx + 0x10]; call 0x25600; add rsp, 0x10; pop rbp; ret; 
0x000000000043a533: mov ebx, dword ptr [rdx + 0x280]; mov rax, qword ptr [rsp + 0x30]; mov rdx, rsi; call rcx; 
0x00000000004562e2: mov ebx, dword ptr [rdx + 0x38]; mov rcx, qword ptr [rsp + 0x108]; call 0x55e20; add rsp, 0x120; pop rbp; ret; 
0x000000000040103c: mov ebx, dword ptr [rdx + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000460edf: mov ebx, dword ptr [rdx + 8]; mov ecx, 1; mov edi, ecx; add rsp, 0x28; pop rbp; ret; 
0x0000000000401026: mov ebx, dword ptr [rdx + rax + 8]; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000428557: mov ebx, dword ptr [rdx + rax]; mov r8, qword ptr [r10 + r8 + 8]; mov rax, rcx; mov rcx, r8; lea rdx, [rsp + 0x80]; call rdi; 
0x00000000004424c4: mov ebx, dword ptr [rdx + rcx + 8]; ret; 
0x000000000044a1b2: mov ebx, dword ptr [rdx + rsi + 8]; add rsp, 0x60; pop rbp; ret; 
0x000000000041e387: mov ebx, dword ptr [rdx]; mov eax, 0x10000; call rbx; 
0x000000000041e0aa: mov ebx, dword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; call rbx; 
0x000000000043685d: mov ebx, dword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000422de9: mov ebx, dword ptr [rip + 0x100049]; test rbx, rbx; jne 0x22d8e; add rsp, 0x38; pop rbp; ret; 
0x000000000041d049: mov ebx, dword ptr [rsp + 0x10]; add rsp, 0x28; pop rbp; ret; 
0x00000000004068d8: mov ebx, dword ptr [rsp + 0x10]; add rsp, 0x30; pop rbp; ret; 
0x000000000041404b: mov ebx, dword ptr [rsp + 0x10]; call 0x14560; add rsp, 0x20; pop rbp; ret; 
0x000000000047c2f9: mov ebx, dword ptr [rsp + 0x140]; call 0x78a40; add rsp, 0x1d0; pop rbp; ret; 
0x000000000047ad73: mov ebx, dword ptr [rsp + 0x160]; call 0x6fca0; mov rcx, qword ptr [rax + 0xf8]; mov rax, rbx; call rcx; 
0x000000000040a072: mov ebx, dword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x000000000045a1cb: mov ebx, dword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x000000000041db54: mov ebx, dword ptr [rsp + 0x18]; call 0x1db80; add rsp, 0x20; pop rbp; ret; 
0x0000000000410f6b: mov ebx, dword ptr [rsp + 0x18]; call 0x5d9c0; add rsp, 0x20; pop rbp; ret; 
0x00000000004305f8: mov ebx, dword ptr [rsp + 0x18]; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000046383b: mov ebx, dword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x0000000000459115: mov ebx, dword ptr [rsp + 0x20]; add rsp, 0x30; pop rbp; ret; 
0x00000000004591d4: mov ebx, dword ptr [rsp + 0x20]; call 0x2ca60; add rsp, 0x10; pop rbp; ret; 
0x000000000040551d: mov ebx, dword ptr [rsp + 0x20]; call 0x5dcc0; add rsp, 0x28; pop rbp; ret; 
0x0000000000458c62: mov ebx, dword ptr [rsp + 0x20]; call 0x60200; add rsp, 0x30; pop rbp; ret; 
0x000000000043a42e: mov ebx, dword ptr [rsp + 0x20]; movzx ecx, byte ptr [rsp + 0x17]; add rsp, 0x38; pop rbp; ret; 
0x000000000040b6aa: mov ebx, dword ptr [rsp + 0x28]; add rsp, 0x30; pop rbp; ret; 
0x00000000004046af: mov ebx, dword ptr [rsp + 0x28]; add rsp, 0x68; pop rbp; ret; 
0x0000000000401a03: mov ebx, dword ptr [rsp + 0x28]; call 0x1a40; add rsp, 0x10; pop rbp; ret; 
0x0000000000462356: mov ebx, dword ptr [rsp + 0x28]; mov ecx, 1; add rsp, 0x38; pop rbp; ret; 
0x0000000000459aa2: mov ebx, dword ptr [rsp + 0x28]; mov rcx, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x0000000000431a95: mov ebx, dword ptr [rsp + 0x28]; xchg qword ptr [rax + 0x58], rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000458bcb: mov ebx, dword ptr [rsp + 0x28]; xchg qword ptr [rax], rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000474ed0: mov ebx, dword ptr [rsp + 0x30]; add rsp, 0x48; pop rbp; ret; 
0x0000000000460801: mov ebx, dword ptr [rsp + 0x30]; call 0x9f00; mov rcx, qword ptr [rax + 0x18]; mov rax, qword ptr [rsp + 0x48]; call rcx; 
0x00000000004293f4: mov ebx, dword ptr [rsp + 0x30]; mov rcx, qword ptr [rsp + 0x20]; add rsp, 0x58; pop rbp; ret; 
0x000000000046cf4f: mov ebx, dword ptr [rsp + 0x38]; add rsp, 0x40; pop rbp; ret; 
0x000000000040995e: mov ebx, dword ptr [rsp + 0x38]; add rsp, 0xa0; pop rbp; ret; 
0x0000000000413f41: mov ebx, dword ptr [rsp + 0x38]; call 0x4740; add rsp, 0x20; pop rbp; ret; 
0x0000000000460163: mov ebx, dword ptr [rsp + 0x38]; call 0x58be0; add rsp, 0x18; pop rbp; ret; 
0x00000000004779ae: mov ebx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x0000000000460dff: mov ebx, dword ptr [rsp + 0x40]; add rsp, 0x50; pop rbp; ret; 
0x0000000000446bd5: mov ebx, dword ptr [rsp + 0x40]; mov rcx, qword ptr [rsp + 0x28]; add rsp, 0x60; pop rbp; ret; 
0x000000000044b684: mov ebx, dword ptr [rsp + 0x40]; mov rcx, qword ptr [rsp + 0x48]; add rsp, 0x100; pop rbp; ret; 
0x000000000044e9ab: mov ebx, dword ptr [rsp + 0x40]; mov rsi, rcx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x000000000040b69f: mov ebx, dword ptr [rsp + 0x48]; add rsp, 0x30; pop rbp; ret; 
0x0000000000461e11: mov ebx, dword ptr [rsp + 0x48]; add rsp, 0x88; pop rbp; ret; 
0x000000000044c762: mov ebx, dword ptr [rsp + 0x48]; add rsp, 0xb0; pop rbp; ret; 
0x00000000004054a3: mov ebx, dword ptr [rsp + 0x48]; call 0x5dcc0; add rsp, 0x28; pop rbp; ret; 
0x00000000004635a5: mov ebx, dword ptr [rsp + 0x48]; call 0x63880; add rsp, 0x30; pop rbp; ret; 
0x0000000000461da9: mov ebx, dword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x60]; add rsp, 0x88; pop rbp; ret; 
0x000000000044f5ce: mov ebx, dword ptr [rsp + 0x4c]; call 0x500a0; add rsp, 0x58; pop rbp; ret; 
0x0000000000472a60: mov ebx, dword ptr [rsp + 0x50]; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x60; pop rbp; ret; 
0x000000000044845d: mov ebx, dword ptr [rsp + 0x58]; call 0x476c0; add rsp, 0x2e8; pop rbp; ret; 
0x0000000000469434: mov ebx, dword ptr [rsp + 0x58]; mov rcx, qword ptr [rsp + 0x60]; add rsp, 0x70; pop rbp; ret; 
0x000000000041b05b: mov ebx, dword ptr [rsp + 0x60]; mov qword ptr [rbx + 0x18], 0; add rsp, 0x50; pop rbp; ret; 
0x0000000000473cd0: mov ebx, dword ptr [rsp + 0x60]; mov rcx, qword ptr [rsp + 0x68]; add rsp, 0x88; pop rbp; ret; 
0x0000000000472af2: mov ebx, dword ptr [rsp + 0x68]; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x78; pop rbp; ret; 
0x000000000045376f: mov ebx, dword ptr [rsp + 0x70]; add rsp, 0x258; pop rbp; ret; 
0x0000000000454b47: mov ebx, dword ptr [rsp + 0x70]; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x0000000000474359: mov ebx, dword ptr [rsp + 0x78]; add rsp, 0xa0; pop rbp; ret; 
0x00000000004740da: mov ebx, dword ptr [rsp + 0x78]; mov rcx, qword ptr [rsp + 0x80]; add rsp, 0xa0; pop rbp; ret; 
0x00000000004792b0: mov ebx, dword ptr [rsp + 0x80]; call 0x6fca0; mov rcx, rax; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x00000000004326c3: mov ebx, dword ptr [rsp + 0x88]; add rsp, 0x70; pop rbp; ret; 
0x000000000046075a: mov ebx, dword ptr [rsp + 0x88]; mov rcx, qword ptr [rsp + 0x90]; call rdx; 
0x0000000000465335: mov ebx, dword ptr [rsp + 0x88]; mov rcx, qword ptr [rsp + 0x98]; add rsp, 0x120; pop rbp; ret; 
0x0000000000449c2c: mov ebx, dword ptr [rsp + 0xc8]; add rsp, 0xd8; pop rbp; ret; 
0x0000000000471719: mov ebx, dword ptr [rsp + 0xc8]; mov rcx, qword ptr [rsp + 0x80]; call 0x70e00; add rsp, 0x108; pop rbp; ret; 
0x000000000046b96e: mov ebx, dword ptr [rsp + 0xe8]; add rsp, 0x270; pop rbp; ret; 
0x0000000000473aeb: mov ebx, dword ptr [rsp + 8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000473a58: mov ebx, dword ptr [rsp + 8]; add rsp, 0x20; pop rbp; ret; 
0x000000000045cdc1: mov ebx, dword ptr [rsp + 8]; mov qword ptr fs:[0xfffffffffffffff8], rbx; ret; 
0x000000000040e03b: mov ebx, eax; call rcx; 
0x0000000000428874: mov ebx, eax; mov rax, qword ptr [rsp + 0x18]; call rsi; 
0x00000000004648fc: mov ebx, eax; mov rcx, r9; call rdi; 
0x0000000000454d64: mov ebx, eax; mov rdx, rcx; mov rax, rdi; call rsi; 
0x000000000046d058: mov ebx, ebp; call 0x4a580; add rsp, 0x78; pop rbp; ret; 
0x000000000041154e: mov ebx, ebx; mov rcx, r10; mov rdi, rsi; add rsp, 0x10; pop rbp; ret; 
0x000000000042b469: mov ebx, ecx; add rsp, 0x10; pop rbp; ret; 
0x000000000046d499: mov ebx, ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000409fe9: mov ebx, ecx; add rsp, 0x20; pop rbp; ret; 
0x000000000042e32a: mov ebx, ecx; add rsp, 0x38; pop rbp; ret; 
0x0000000000403646: mov ebx, ecx; add rsp, 0x40; pop rbp; ret; 
0x0000000000468a36: mov ebx, ecx; add rsp, 0x88; pop rbp; ret; 
0x000000000040b1c6: mov ebx, ecx; add rsp, 0x90; pop rbp; ret; 
0x000000000040c472: mov ebx, ecx; call 0x2a480; add rsp, 0x28; pop rbp; ret; 
0x0000000000403c47: mov ebx, ecx; call 0x3780; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c58: mov ebx, ecx; call 0x3860; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c69: mov ebx, ecx; call 0x3940; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cb3: mov ebx, ecx; call 0x3a00; add rsp, 0x60; pop rbp; nop; ret; 
0x0000000000403ca2: mov ebx, ecx; call 0x3b00; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cc5: mov ebx, ecx; call 0x5ce80; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cf6: mov ebx, ecx; call 0x5cee0; add rsp, 0x60; pop rbp; ret; 
0x0000000000410f1f: mov ebx, ecx; call 0x5d9c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000467d74: mov ebx, ecx; call 0x68040; add rsp, 0x88; pop rbp; ret; 
0x00000000004783c7: mov ebx, ecx; call 0x77e20; add rsp, 0x10; pop rbp; ret; 
0x00000000004788f1: mov ebx, ecx; call 0x77e20; add rsp, 0x50; pop rbp; ret; 
0x000000000040d8ee: mov ebx, ecx; call rdi; 
0x0000000000404142: mov ebx, ecx; call rsi; 
0x0000000000404142: mov ebx, ecx; call rsi; add rsp, 0x28; pop rbp; ret; 
0x000000000040b8a5: mov ebx, ecx; mov ecx, edx; add rsp, 0x38; pop rbp; ret; 
0x000000000046ea5a: mov ebx, ecx; mov rcx, r8; add rsp, 0x38; pop rbp; ret; 
0x0000000000476318: mov ebx, ecx; mov rcx, rdi; add rsp, 0x28; pop rbp; ret; 
0x0000000000403d07: mov ebx, ecx; mov rcx, rdx; call 0x5ce60; add rsp, 0x60; pop rbp; ret; 
0x0000000000410cb2: mov ebx, ecx; mov rcx, rdx; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x00000000004647d3: mov ebx, ecx; mov rcx, rsi; call rdx; 
0x0000000000403c7a: mov ebx, ecx; nop dword ptr [rax]; call 0x39a0; add rsp, 0x60; pop rbp; ret; 
0x00000000004510fb: mov ebx, ecx; nop dword ptr [rax]; call 0x4c120; add rsp, 0x18; pop rbp; ret; 
0x0000000000403d1b: mov ebx, ecx; nop dword ptr [rax]; call 0x5cea0; add rsp, 0x60; pop rbp; ret; 
0x000000000040c7dd: mov ebx, ecx; nop; call 0x13ec0; add rsp, 0x40; pop rbp; ret; 
0x000000000045f020: mov ebx, ecx; pop rbp; ret; 
0x0000000000418a58: mov ebx, ecx; ret; 
0x000000000046a3cb: mov ebx, ecx; sub rsp, -0x80; pop rbp; ret; 
0x000000000045ef15: mov ebx, edi; add rcx, rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000428ed4: mov ebx, edi; add rsp, 0x18; pop rbp; ret; 
0x000000000041f0f4: mov ebx, edi; add rsp, 0x40; pop rbp; ret; 
0x000000000046b692: mov ebx, edi; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x000000000047a88f: mov ebx, edi; call 0x77e20; add rsp, 0x90; pop rbp; ret; 
0x000000000040e0b8: mov ebx, edi; call rcx; 
0x000000000040d28d: mov ebx, edi; call rsi; 
0x0000000000426fd2: mov ebx, edi; lea rdx, [rsp + 0x110]; call rcx; 
0x00000000004078c1: mov ebx, edi; mov rcx, r8; call 0x4a6a0; add rsp, 0x140; pop rbp; ret; 
0x0000000000464947: mov ebx, edi; mov rcx, r9; call rsi; 
0x000000000040f49c: mov ebx, edi; nop; call rcx; 
0x0000000000418a5e: mov ebx, edi; ret; 
0x00000000004018d0: mov ebx, edx; add rsp, 0x10; pop rbp; ret; 
0x000000000046d513: mov ebx, edx; add rsp, 0x18; pop rbp; ret; 
0x000000000043485a: mov ebx, edx; add rsp, 0x20; pop rbp; ret; 
0x0000000000411423: mov ebx, edx; add rsp, 0x28; pop rbp; ret; 
0x000000000040d1a1: mov ebx, edx; add rsp, 0x30; pop rbp; ret; 
0x000000000040d5db: mov ebx, edx; add rsp, 0x38; pop rbp; ret; 
0x000000000046978b: mov ebx, edx; add rsp, 0x70; pop rbp; ret; 
0x000000000044930c: mov ebx, edx; call 0x48160; add rsp, 0x10; pop rbp; ret; 
0x000000000044e7f3: mov ebx, edx; call 0x4e860; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x000000000040f3a4: mov ebx, edx; call 0xeb00; add rsp, 0x98; pop rbp; ret; 
0x00000000004642f6: mov ebx, edx; call rsi; 
0x0000000000449793: mov ebx, edx; mov ecx, eax; mov eax, esi; add rsp, 0x78; pop rbp; ret; 
0x0000000000460aaa: mov ebx, edx; mov ecx, eax; mov rax, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004036ec: mov ebx, edx; mov rcx, 0; ret; 
0x00000000004747bf: mov ebx, edx; mov rcx, r8; add rsp, 0x50; pop rbp; ret; 
0x0000000000412049: mov ebx, edx; mov rcx, r8; xor edi, edi; add rsp, 0x10; pop rbp; ret; 
0x00000000004113ee: mov ebx, edx; mov rcx, rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000401111: mov ebx, edx; mov rcx, rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000432f83: mov ebx, edx; mov rcx, rbx; call 0x329e0; sub rsp, -0x80; pop rbp; ret; 
0x0000000000463f93: mov ebx, edx; mov rcx, rsi; add rsp, 0x28; pop rbp; ret; 
0x00000000004724ca: mov ebx, edx; mov rcx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004728fc: mov ebx, edx; mov rcx, rsi; add rsp, 0x40; pop rbp; ret; 
0x00000000004747cd: mov ebx, edx; mov rcx, rsi; add rsp, 0x50; pop rbp; ret; 
0x000000000047410b: mov ebx, edx; mov rcx, rsi; add rsp, 0xa0; pop rbp; ret; 
0x000000000040e699: mov ebx, edx; nop dword ptr [rax + rax]; call 0xeb00; add rsp, 0xa8; pop rbp; ret; 
0x0000000000476cdc: mov ebx, edx; nop; call 0x75420; add rsp, 0x20; pop rbp; ret; 
0x00000000004012a6: mov ebx, edx; pop rbp; ret; 
0x0000000000429bd7: mov ebx, edx; ret; 
0x000000000041d3a4: mov ebx, esi; add rsp, 0x10; pop rbp; ret; 
0x000000000041cf4d: mov ebx, esi; add rsp, 0x28; pop rbp; ret; 
0x00000000004687c1: mov ebx, esi; add rsp, 0x30; pop rbp; ret; 
0x00000000004749e5: mov ebx, esi; add rsp, 0x38; pop rbp; ret; 
0x00000000004040c6: mov ebx, esi; call 0x4100; add rsp, 0x18; pop rbp; ret; 
0x0000000000404066: mov ebx, esi; call 0x41c0; add rsp, 0x18; pop rbp; ret; 
0x000000000044e4df: mov ebx, esi; call 0x4e540; add rsp, 0x78; pop rbp; ret; 
0x00000000004771d2: mov ebx, esi; call 0x75420; add rsp, 0xd8; pop rbp; ret; 
0x000000000040e7c4: mov ebx, esi; call rcx; 
0x00000000004465bd: mov ebx, esi; mov ecx, 1; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000473d34: mov ebx, esi; mov rcx, rdi; add rsp, 0x88; pop rbp; ret; 
0x00000000004186e0: mov ebx, esi; mov rcx, rdi; call 0x18800; add rsp, 0x50; pop rbp; ret; 
0x000000000047953d: mov ebx, esi; nop; call 0x77e20; add rsp, 0x88; pop rbp; ret; 
0x000000000045efb4: mov ebx, esi; pop rbp; ret; 
0x0000000000429d18: mov ebx, esi; ret; 
0x000000000043915f: mov ebx, esi; xor ecx, ecx; add rsp, 0x100; pop rbp; ret; 
0x000000000043a342: mov ebx, esi; xor ecx, ecx; add rsp, 0x38; pop rbp; ret; 
0x000000000045e99f: mov ebx, esp; and rsp, 0xfffffffffffffff0; call rax; 
0x000000000045e9d8: mov ebx, esp; and rsp, 0xfffffffffffffff0; call rax; mov rsp, rbx; pop rbp; ret; 
0x000000000045ebec: mov ebx, esp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x000000000045a8db: mov ebx, esp; mov r12, qword ptr [rsp + 0x60]; mov r13, qword ptr [rsp + 0x68]; add rsp, 0x70; pop rbp; ret; 
0x000000000045af49: mov ecx, 0; call rax; 
0x00000000004036ef: mov ecx, 0; ret; 
0x0000000000402720: mov ecx, 0; xgetbv; mov dword ptr [rsp + 8], eax; mov dword ptr [rsp + 0xc], edx; ret; 
0x000000000040370e: mov ecx, 0x10; call 0x5ce60; add rsp, 0x18; pop rbp; ret; 
0x000000000045098e: mov ecx, 0x11e8; add rsp, 0x10; pop rbp; ret; 
0x0000000000434415: mov ecx, 0x1c; call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x000000000045ff4e: mov ecx, 0x21; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045f6db: mov ecx, 0x2a; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x00000000004662c6: mov ecx, 0x320; call 0x5d320; add rsp, 0x690; pop rbp; ret; 
0x000000000047450e: mov ecx, 0x33; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000044acb5: mov ecx, 0x33; call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x0000000000432ce3: mov ecx, 0x48000004; add esp, 0x28; pop rbp; ret; 
0x000000000044a623: mov ecx, 0x48fffffa; add esp, 0x70; pop rbp; ret; 
0x000000000045fd2e: mov ecx, 0x4ac; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x0000000000478701: mov ecx, 0x67; mov rdi, -1; call 0x76de0; add rsp, 0x28; pop rbp; ret; 
0x000000000045ff0e: mov ecx, 0x800; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000041a4cf: mov ecx, 0x84000000; ror byte ptr [rdi], cl; xchg eax, esp; ret 0x2eb; 
0x0000000000436cd5: mov ecx, 0x8b480000; and al, 0x20; add rsp, 0x48; pop rbp; ret; 
0x000000000041ec57: mov ecx, 0x8b48fffe; and al, 0x60; add rsp, 0x78; pop rbp; ret; 
0x000000000045fc6e: mov ecx, 0xa8; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000041ec86: mov ecx, 0xc031fffe; add rsp, 0x78; pop rbp; ret; 
0x000000000043bcfd: mov ecx, 0xd0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x5488; 
0x0000000000458e99: mov ecx, 0xdeaddead; lodsd eax, dword ptr [rsi]; fisubr word ptr [rbp - 0x37c6b722]; setne cl; mov eax, ecx; ret; 
0x000000000046d082: mov ecx, 0xe; call 0x4a3c0; add rsp, 0x78; pop rbp; ret; 
0x000000000042ed27: mov ecx, 0xf0; add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x000000000045f06c: mov ecx, 0xf; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x0000000000446351: mov ecx, 0xffffffff; lock xadd dword ptr [rdi], ecx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000044630a: mov ecx, 0xffffffff; lock xadd dword ptr [rdi], ecx; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000457d38: mov ecx, 0xffffffff; nop; call 0x37480; add rsp, 0x18; pop rbp; ret; 
0x0000000000439092: mov ecx, 1; add rsp, 0x100; pop rbp; nop; ret; 
0x0000000000439054: mov ecx, 1; add rsp, 0x100; pop rbp; ret; 
0x00000000004685a4: mov ecx, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004686bc: mov ecx, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000462224: mov ecx, 1; add rsp, 0x38; pop rbp; ret; 
0x000000000044703e: mov ecx, 1; call 0x24840; add rsp, 0x28; pop rbp; ret; 
0x0000000000469e34: mov ecx, 1; call 0x4a320; add rsp, 0x70; pop rbp; ret; 
0x00000000004059c8: mov ecx, 1; call 0x59e0; add rsp, 0x18; pop rbp; ret; 
0x00000000004615af: mov ecx, 1; call 0x59f40; add rsp, 0x18; pop rbp; ret; 
0x0000000000466bef: mov ecx, 1; call 0x68820; add rsp, 0x50; pop rbp; ret; 
0x00000000004465bf: mov ecx, 1; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004090c7: mov ecx, 1; lock xadd qword ptr [rax + 0x500], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090b3: mov ecx, 1; lock xadd qword ptr [rax + 0x508], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090a3: mov ecx, 1; lock xadd qword ptr [rax], rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000460ee2: mov ecx, 1; mov edi, ecx; add rsp, 0x28; pop rbp; ret; 
0x000000000046178d: mov ecx, 1; xchg dword ptr [rax], ecx; ret; 
0x000000000045852f: mov ecx, 2; call 0x35640; add rsp, 0x18; pop rbp; ret; 
0x0000000000435c8f: mov ecx, 2; call 0x35640; add rsp, 0x20; pop rbp; ret; 
0x0000000000403801: mov ecx, 4; call 0x5ce60; add rsp, 0x18; pop rbp; ret; 
0x00000000004759ce: mov ecx, 5; call 0x756e0; add rsp, 0x18; pop rbp; ret; 
0x00000000004038e2: mov ecx, 8; call 0x5ce60; add rsp, 0x18; pop rbp; ret; 
0x000000000040e489: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + 0x10], rbx; add rsp, 0x30; pop rbp; ret; 
0x0000000000470424: mov ecx, dword ptr [rax + 0x10]; mov rax, rdx; call 0x6fde0; add rsp, 0x18; pop rbp; ret; 
0x000000000045fcf9: mov ecx, dword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x000000000041b33e: mov ecx, dword ptr [rax + 0x18]; lea rax, [rdx + rcx]; add rsp, 0x20; pop rbp; ret; 
0x00000000004491c9: mov ecx, dword ptr [rax + 0x18]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + 0x18], rbx; pop rbp; ret; 
0x000000000041586c: mov ecx, dword ptr [rax + 0x18]; mov qword ptr [rbx], rcx; mov qword ptr [rax + 0x18], rbx; ret; 
0x00000000004607b1: mov ecx, dword ptr [rax + 0x18]; mov rax, qword ptr [rsp + 0x48]; call rcx; 
0x000000000042fcec: mov ecx, dword ptr [rax + 0x18]; mov rax, rbx; call rcx; 
0x0000000000464259: mov ecx, dword ptr [rax + 0x18]; mov rax, rbx; nop; call rcx; 
0x0000000000472e21: mov ecx, dword ptr [rax + 0x20]; mov rbx, qword ptr [rax + 0x28]; mov rax, rcx; ret; 
0x0000000000472db4: mov ecx, dword ptr [rax + 0x20]; mov rcx, qword ptr [rcx + 0x18]; mov rdx, qword ptr [rax + 0x28]; mov rax, rdx; call rcx; 
0x0000000000429e76: mov ecx, dword ptr [rax + 0x28]; lea rax, [rax + rcx*8]; lea rax, [rax + 0x30]; add rsp, 0x10; pop rbp; ret; 
0x000000000046fec6: mov ecx, dword ptr [rax + 0x38]; mov rax, rbx; call rcx; 
0x000000000046fec6: mov ecx, dword ptr [rax + 0x38]; mov rax, rbx; call rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000410f81: mov ecx, dword ptr [rax + 0x48]; test byte ptr [rcx], al; mov rcx, qword ptr [rcx + rbx]; not rcx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047bcae: mov ecx, dword ptr [rax + 0x50]; mov rax, rbx; mov rbx, rdi; call rcx; 
0x000000000046fe54: mov ecx, dword ptr [rax + 0x98]; mov rax, rbx; call rcx; 
0x000000000046fc28: mov ecx, dword ptr [rax + 0xf8]; mov rax, rbx; call rcx; 
0x000000000040197a: mov ecx, dword ptr [rax + 8]; cmp dword ptr [rbx + 8], ecx; sete al; ret; 
0x000000000045f807: mov ecx, dword ptr [rax + 8]; cmp qword ptr [rbx + 8], rcx; sete al; ret; 
0x000000000040df74: mov ecx, dword ptr [rax + 8]; mov qword ptr [r11 + 8], rcx; movups xmmword ptr [rax], xmm15; add rsp, 0x60; pop rbp; ret; 
0x0000000000403752: mov ecx, dword ptr [rax + 8]; mov rax, rdx; call 0x8d60; add rsp, 0x18; pop rbp; ret; 
0x000000000046406b: mov ecx, dword ptr [rax + 8]; mov rdi, qword ptr [rax + 0x10]; mov rax, rsi; call rdx; 
0x000000000044f1eb: mov ecx, dword ptr [rax + rax*8]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + r8*8], rsi; add rsp, 0x18; pop rbp; ret; 
0x0000000000459ec4: mov ecx, dword ptr [rax + rax]; call 0xa5c0; mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x20; pop rbp; ret; 
0x00000000004157ff: mov ecx, dword ptr [rax]; add qword ptr [rax + 0x30], rcx; mov rax, rbx; add rsp, 0x28; pop rbp; ret; 
0x0000000000403ec0: mov ecx, dword ptr [rax]; cmp dword ptr [rbx], ecx; sete al; ret; 
0x0000000000402a41: mov ecx, dword ptr [rax]; cmp qword ptr [rbx], rcx; sete al; ret; 
0x0000000000460493: mov ecx, dword ptr [rax]; cmp qword ptr [rcx + 0x18], 0; setne al; pop rbp; ret; 
0x0000000000477dc9: mov ecx, dword ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax], r8; sub rsp, -0x80; pop rbp; ret; 
0x0000000000409eae: mov ecx, dword ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax], rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000478cbf: mov ecx, dword ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax], rdx; add rsp, 0xa8; pop rbp; ret; 
0x00000000004753c2: mov ecx, dword ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax], rsi; add rsp, 0x38; pop rbp; ret; 
0x000000000045f153: mov ecx, dword ptr [rax]; mov rbx, qword ptr [rax + 8]; mov rax, rcx; pop rbp; ret; 
0x0000000000460601: mov ecx, dword ptr [rax]; mov rbx, qword ptr [rax + 8]; mov rax, rcx; ret; 
0x00000000004413f5: mov ecx, dword ptr [rax]; mov rdx, rax; call rcx; 
0x000000000040a0fb: mov ecx, dword ptr [rax]; mov rdx, rax; mov rax, rbx; call rcx; 
0x000000000046d50f: mov ecx, dword ptr [rbx + 0x10]; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000045f73b: mov ecx, dword ptr [rbx + 0x18]; cmp qword ptr [rax + 0x18], rcx; sete al; ret; 
0x0000000000410812: mov ecx, dword ptr [rbx + 0x20]; mov rax, qword ptr [rsp + 0x18]; call 0x10860; add rsp, 0x20; pop rbp; ret; 
0x000000000040e532: mov ecx, dword ptr [rbx + 0x20]; mov rax, qword ptr [rsp + 0x18]; call 0xe580; add rsp, 0x20; pop rbp; ret; 
0x000000000040f252: mov ecx, dword ptr [rbx + 0x20]; mov rax, qword ptr [rsp + 0x18]; call 0xf2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000040fb72: mov ecx, dword ptr [rbx + 0x20]; mov rax, qword ptr [rsp + 0x18]; call 0xfbc0; add rsp, 0x20; pop rbp; ret; 
0x000000000045b4f1: mov ecx, dword ptr [rbx]; add byte ptr [rax], al; jmp rax; 
0x0000000000479d85: mov ecx, dword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x178]; call rcx; 
0x0000000000479c85: mov ecx, dword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x180]; call rcx; 
0x00000000004749f3: mov ecx, dword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x68]; call rcx; 
0x0000000000472db8: mov ecx, dword ptr [rcx + 0x18]; mov rdx, qword ptr [rax + 0x28]; mov rax, rdx; call rcx; 
0x00000000004208f1: mov ecx, dword ptr [rcx + 0x30]; dec dword ptr [rcx + 0x108]; mov rax, -1; add rsp, 0x40; pop rbp; ret; 
0x000000000047b461: mov ecx, dword ptr [rcx + 0x48]; mov rax, rbx; call rcx; 
0x00000000004598cc: mov ecx, dword ptr [rcx + 0xd0]; movsxd rax, dword ptr [rcx]; ret; 
0x0000000000471c15: mov ecx, dword ptr [rcx + 0xf8]; mov rax, qword ptr [rsp + 0xb0]; call rcx; 
0x0000000000477c3e: mov ecx, dword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000478152: mov ecx, dword ptr [rcx + 0xf8]; mov rax, rdx; call rcx; 
0x00000000004440b5: mov ecx, dword ptr [rcx + 8]; nop; mov qword ptr [rcx + 0xa8], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000044ec86: mov ecx, dword ptr [rcx + 8]; xchg qword ptr [rax + 0x1208], rcx; add rsp, 0x58; pop rbp; ret; 
0x0000000000410f87: mov ecx, dword ptr [rcx + rbx]; not rcx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000040db0e: mov ecx, dword ptr [rcx]; mov rax, rcx; add rsp, 0x78; pop rbp; ret; 
0x000000000040530c: mov ecx, dword ptr [rdi]; mov rdx, rdi; call rcx; 
0x0000000000454911: mov ecx, dword ptr [rdx + 0x10]; cmp rax, rcx; jne 0x5491f; mov eax, 0x21; ret; 
0x000000000046fe4e: mov ecx, dword ptr [rdx + 0x48]; call rcx; 
0x0000000000470a22: mov ecx, dword ptr [rdx + 0x98]; call rcx; 
0x000000000047c95c: mov ecx, dword ptr [rdx + 0x98]; mov rax, rdi; call rcx; 
0x000000000046ffc9: mov ecx, dword ptr [rdx + 0xa0]; mov rax, rbx; call rcx; 
0x000000000047afae: mov ecx, dword ptr [rdx + 0xf8]; mov rax, rbx; call rcx; 
0x00000000004155ef: mov ecx, dword ptr [rdx + 8]; mov rax, qword ptr [rcx + 8]; call 0x25560; add rsp, 8; pop rbp; ret; 
0x000000000045f018: mov ecx, dword ptr [rdx + rcx + 8]; mov rax, rsi; mov rbx, rcx; pop rbp; ret; 
0x000000000045efad: mov ecx, dword ptr [rdx + rcx]; mov rax, rcx; mov rbx, rsi; pop rbp; ret; 
0x000000000044cf4d: mov ecx, dword ptr [rdx]; call 0x4c4c0; add rsp, 0x30; pop rbp; ret; 
0x000000000041e36e: mov ecx, dword ptr [rdx]; call rcx; 
0x000000000040e0af: mov ecx, dword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, r12; mov rbx, rdi; call rcx; 
0x0000000000410a57: mov ecx, dword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, rsi; mov rbx, rdi; call rcx; 
0x000000000040f493: mov ecx, dword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, rsi; mov rbx, rdi; nop; call rcx; 
0x000000000040ec4b: mov ecx, dword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x30]; mov rbx, rsi; call rcx; 
0x000000000040ef34: mov ecx, dword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x50]; mov rbx, rsi; call rcx; 
0x0000000000410089: mov ecx, dword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x78]; mov rbx, rsi; call rcx; 
0x00000000004103fe: mov ecx, dword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x80]; mov rbx, rsi; call rcx; 
0x000000000040e7bb: mov ecx, dword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; mov rax, r13; mov rbx, rsi; call rcx; 
0x000000000047b1a0: mov ecx, dword ptr [rdx]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rdx], rax; add rsp, 0x1d0; pop rbp; ret; 
0x0000000000479709: mov ecx, dword ptr [rdx]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rdx], rax; add rsp, 0x90; pop rbp; ret; 
0x000000000042b69b: mov ecx, dword ptr [rdx]; mov rax, qword ptr [rcx]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000454e0a: mov ecx, dword ptr [rdx]; mov rax, qword ptr [rip + 0xcd88d]; lea rbx, [rsp + 0x10]; call rcx; 
0x000000000044e9a3: mov ecx, dword ptr [rdx]; mov rax, qword ptr [rsp + 0x28]; mov rbx, qword ptr [rsp + 0x40]; mov rsi, rcx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x000000000040e7fd: mov ecx, dword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; mov rbx, rax; call rcx; 
0x0000000000436891: mov ecx, dword ptr [rdx]; mov rax, qword ptr [rsp + 0x50]; call rcx; 
0x000000000040e035: mov ecx, dword ptr [rdx]; mov rax, r12; mov rbx, rax; call rcx; 
0x00000000004333dd: mov ecx, dword ptr [rdx]; mov rax, rdi; call rcx; 
0x00000000004157dc: mov ecx, dword ptr [rdx]; mov rsi, qword ptr [rax + 0x10]; mov rax, rsi; call rcx; 
0x000000000040a92e: mov ecx, dword ptr [rdx]; test ecx, ecx; setne al; add rsp, 0x30; pop rbp; ret; 
0x0000000000415bf7: mov ecx, dword ptr [rip + 0x13b34b]; cmp rax, rcx; setbe al; add rsp, 8; pop rbp; ret; 
0x000000000041883c: mov ecx, dword ptr [rip + 0x13b4b6]; inc ecx; xchg dword ptr [rax + 0x48], ecx; ret; 
0x0000000000439f69: mov ecx, dword ptr [rip + 0x64481]; mov rax, qword ptr [rsp + 0x20]; lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000439e54: mov ecx, dword ptr [rip + 0x64596]; mov rax, qword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; 
0x0000000000408ca6: mov ecx, dword ptr [rip + 0x957bc]; mov rax, rsi; lea rdx, [rip + 0x957b2]; call rcx; 
0x00000000004729b7: mov ecx, dword ptr [rip + 0xac20b]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xac200], rax; pop rbp; ret; 
0x0000000000474f4f: mov ecx, dword ptr [rip + 0xad8bb]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xad8b0], rax; pop rbp; ret; 
0x000000000045eb1e: mov ecx, dword ptr [rip + 0xc3b7c]; lea r8, [rip + 0xf2095]; lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000045eae5: mov ecx, dword ptr [rip + 0xc3bb5]; lea r9, [rip - 0xf2]; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x0000000000458edc: mov ecx, dword ptr [rip + 0xc973e]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xc9733], rax; pop rbp; ret; 
0x000000000042dc25: mov ecx, dword ptr [rip + 0xf4d05]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xf4cfa], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000041f853: mov ecx, dword ptr [rip + 0xf9947]; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000454997: mov ecx, dword ptr [rip + 0xfba87]; bt ecx, 1; setae al; add rsp, 0x10; pop rbp; ret; 
0x000000000046069e: mov ecx, dword ptr [rsi + 0x20]; mov rax, rdx; call rcx; 
0x00000000004598c2: mov ecx, dword ptr [rsi + 0x30]; inc dword ptr [rcx + 0x108]; mov rcx, qword ptr [rcx + 0xd0]; movsxd rax, dword ptr [rcx]; ret; 
0x0000000000457ecf: mov ecx, dword ptr [rsi + 0x30]; mov rax, qword ptr [rcx + 0xd0]; call 0x2c680; add rsp, 8; pop rbp; ret; 
0x000000000040e02d: mov ecx, dword ptr [rsi + 0x30]; mov rdx, qword ptr [rcx + 0x18]; mov rcx, qword ptr [rdx]; mov rax, r12; mov rbx, rax; call rcx; 
0x000000000045a301: mov ecx, dword ptr [rsi + 0x50]; test r9, r9; je 0x5a30e; call 0x5cde0; ret; 
0x0000000000477611: mov ecx, dword ptr [rsi + 0x6e80001]; stc; dec dword ptr [rax - 0x77]; ret; 
0x000000000045ddde: mov ecx, dword ptr [rsi + rbx - 4]; mov dword ptr [rdi], eax; mov dword ptr [rdi + rbx - 4], ecx; ret; 
0x000000000045ddf4: mov ecx, dword ptr [rsi + rbx - 8]; mov qword ptr [rdi], rax; mov qword ptr [rdi + rbx - 8], rcx; ret; 
0x00000000004030ed: mov ecx, dword ptr [rsi + rbx - 8]; mov rdx, qword ptr [rdi + rbx - 8]; cmp rcx, rdx; sete al; ret; 
0x00000000004755ee: mov ecx, dword ptr [rsi]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rsi], rax; add rsp, 0x60; pop rbp; ret; 
0x000000000047718a: mov ecx, dword ptr [rsi]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rsi], rax; add rsp, 0xd8; pop rbp; ret; 
0x000000000043a530: mov ecx, dword ptr [rsi]; mov rbx, qword ptr [rdx + 0x280]; mov rax, qword ptr [rsp + 0x30]; mov rdx, rsi; call rcx; 
0x000000000044ec83: mov ecx, dword ptr [rsi]; mov rcx, qword ptr [rcx + 8]; xchg qword ptr [rax + 0x1208], rcx; add rsp, 0x58; pop rbp; ret; 
0x000000000045613b: mov ecx, dword ptr [rsp + 0x108]; call 0x55e20; add rsp, 0x120; pop rbp; ret; 
0x0000000000446073: mov ecx, dword ptr [rsp + 0x10]; mov byte ptr [rcx + 0x116], 1; add rsp, 0x30; pop rbp; ret; 
0x00000000004425d7: mov ecx, dword ptr [rsp + 0x10]; mov qword ptr [rcx + 0x148], 0; add rsp, 0x20; pop rbp; ret; 
0x00000000004220d0: mov ecx, dword ptr [rsp + 0x10]; mov qword ptr [rcx + 8], rax; pop rbp; ret; 
0x000000000044fbe6: mov ecx, dword ptr [rsp + 0x10]; mov qword ptr [rcx], rax; add rsp, 0x18; pop rbp; ret; 
0x000000000043b276: mov ecx, dword ptr [rsp + 0x10]; mov rax, qword ptr [rcx + 0x30]; dec dword ptr [rax + 0x108]; add rsp, 0x28; pop rbp; ret; 
0x00000000004414ed: mov ecx, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; 
0x000000000043c9e6: mov ecx, dword ptr [rsp + 0x10]; movups xmmword ptr [rcx], xmm15; mov qword ptr [rcx + 0x10], 0; add rsp, 0x18; pop rbp; ret; 
0x0000000000436655: mov ecx, dword ptr [rsp + 0x10]; xchg dword ptr [rcx + 0x11c], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000046fa81: mov ecx, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x000000000043c566: mov ecx, dword ptr [rsp + 0x1e0]; mov qword ptr [r11], rcx; mov qword ptr [rax], rcx; add rsp, 0x210; pop rbp; ret; 
0x00000000004293f9: mov ecx, dword ptr [rsp + 0x20]; add rsp, 0x58; pop rbp; ret; 
0x0000000000429d73: mov ecx, dword ptr [rsp + 0x20]; call 0x29580; add rsp, 0x30; pop rbp; ret; 
0x000000000044e9b3: mov ecx, dword ptr [rsp + 0x20]; call rsi; 
0x000000000047398b: mov ecx, dword ptr [rsp + 0x20]; mov dword ptr [rcx + 0x2c], 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004049ca: mov ecx, dword ptr [rsp + 0x20]; mov dword ptr [rcx], eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000457423: mov ecx, dword ptr [rsp + 0x20]; movzx eax, word ptr [rcx + 4]; and eax, 0x7fff; add rsp, 0x38; pop rbp; ret; 
0x000000000045eb79: mov ecx, dword ptr [rsp + 0x24]; mov eax, 9; syscall; 
0x0000000000479fa2: mov ecx, dword ptr [rsp + 0x258]; mov edi, dword ptr [rsp + 0x2c]; call rdx; 
0x000000000044ac78: mov ecx, dword ptr [rsp + 0x28]; add rax, rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000446bda: mov ecx, dword ptr [rsp + 0x28]; add rsp, 0x60; pop rbp; ret; 
0x000000000045b400: mov ecx, dword ptr [rsp + 0x28]; cmp rcx, 0x10; ja 0x5b413; lea rax, [rip + 0x1ef]; jmp rax; 
0x000000000045ecd8: mov ecx, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; 
0x000000000045ecd8: mov ecx, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000040471e: mov ecx, dword ptr [rsp + 0x28]; mov qword ptr [rcx], rax; add rsp, 0x30; pop rbp; ret; 
0x000000000046ee57: mov ecx, dword ptr [rsp + 0x28]; mov rax, qword ptr [rcx]; mov rbx, qword ptr [rcx + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000452df8: mov ecx, dword ptr [rsp + 0x2c8]; mov eax, 1; lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000452ddf: mov ecx, dword ptr [rsp + 0x2c8]; xor eax, eax; lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000459aa7: mov ecx, dword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x0000000000452904: mov ecx, dword ptr [rsp + 0x30]; call 0x52940; add rsp, 0x40; pop rbp; ret; 
0x0000000000472236: mov ecx, dword ptr [rsp + 0x30]; cmp rcx, 2; sete al; add rsp, 0x20; pop rbp; ret; 
0x0000000000479d80: mov ecx, dword ptr [rsp + 0x30]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x178]; call rcx; 
0x0000000000472a65: mov ecx, dword ptr [rsp + 0x38]; add rsp, 0x60; pop rbp; ret; 
0x0000000000472af7: mov ecx, dword ptr [rsp + 0x38]; add rsp, 0x78; pop rbp; ret; 
0x0000000000479c80: mov ecx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x180]; call rcx; 
0x000000000044cd09: mov ecx, dword ptr [rsp + 0x3c]; add rsp, 0x58; pop rbp; ret; 
0x000000000045ebe0: mov ecx, dword ptr [rsp + 0x3c]; mov rax, qword ptr [rip + 0xc3b0d]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x0000000000432ac6: mov ecx, dword ptr [rsp + 0x40]; call 0x4f320; add rsp, 0x28; pop rbp; ret; 
0x000000000044b689: mov ecx, dword ptr [rsp + 0x48]; add rsp, 0x100; pop rbp; ret; 
0x00000000004445df: mov ecx, dword ptr [rsp + 0x48]; mov qword ptr [rax + 0x80], rcx; add rsp, 0x68; pop rbp; ret; 
0x0000000000404c35: mov ecx, dword ptr [rsp + 0x48]; mov qword ptr [rax + 8], rcx; add rsp, 0x30; pop rbp; ret; 
0x0000000000435911: mov ecx, dword ptr [rsp + 0x48]; mov qword ptr [rcx + 0xc0], rax; add rsp, 0x38; pop rbp; ret; 
0x000000000043605d: mov ecx, dword ptr [rsp + 0x48]; test rax, rax; jne 0x3606c; add rsp, 0x58; pop rbp; ret; 
0x0000000000413515: mov ecx, dword ptr [rsp + 0x50]; call 0x1d260; add rsp, 0x58; pop rbp; ret; 
0x000000000041029f: mov ecx, dword ptr [rsp + 0x50]; lea rax, [rcx + rdx]; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x0000000000471c10: mov ecx, dword ptr [rsp + 0x50]; mov rcx, qword ptr [rcx + 0xf8]; mov rax, qword ptr [rsp + 0xb0]; call rcx; 
0x0000000000462540: mov ecx, dword ptr [rsp + 0x58]; call 0x62040; add rsp, 0x38; pop rbp; ret; 
0x0000000000447492: mov ecx, dword ptr [rsp + 0x58]; lea rbx, [rax + rcx]; add rsp, 0x68; pop rbp; nop; ret; 
0x000000000042e24f: mov ecx, dword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x30]; call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x0000000000469439: mov ecx, dword ptr [rsp + 0x60]; add rsp, 0x70; pop rbp; ret; 
0x00000000004749ee: mov ecx, dword ptr [rsp + 0x60]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x68]; call rcx; 
0x0000000000473cd5: mov ecx, dword ptr [rsp + 0x68]; add rsp, 0x88; pop rbp; ret; 
0x0000000000463bc8: mov ecx, dword ptr [rsp + 0x68]; lea rax, [rax + rcx]; lea rax, [rax + 1]; add rsp, 0x78; pop rbp; ret; 
0x000000000041e09e: mov ecx, dword ptr [rsp + 0x70]; mov rdx, qword ptr [rcx + 0x80]; mov rbx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; call rbx; 
0x000000000042bef5: mov ecx, dword ptr [rsp + 0x70]; xchg qword ptr [rax], rcx; add rsp, 0x58; pop rbp; ret; 
0x00000000004740df: mov ecx, dword ptr [rsp + 0x80]; add rsp, 0xa0; pop rbp; ret; 
0x0000000000471721: mov ecx, dword ptr [rsp + 0x80]; call 0x70e00; add rsp, 0x108; pop rbp; ret; 
0x0000000000460762: mov ecx, dword ptr [rsp + 0x90]; call rdx; 
0x0000000000453b3a: mov ecx, dword ptr [rsp + 0x90]; xor edi, edi; call 0x52940; add rsp, 0x60; pop rbp; ret; 
0x000000000046533d: mov ecx, dword ptr [rsp + 0x98]; add rsp, 0x120; pop rbp; ret; 
0x000000000042e798: mov ecx, dword ptr [rsp + 0xb8]; xchg byte ptr [rcx], al; add rsp, 0xc0; pop rbp; ret; 
0x0000000000432960: mov ecx, dword ptr [rsp + 8]; dec dword ptr [rcx + 0x108]; add rsp, 0x10; pop rbp; ret; 
0x000000000043be80: mov ecx, dword ptr [rsp + 8]; mov qword ptr [rcx], rax; mov qword ptr [rcx + 8], rbx; add rsp, 0x10; pop rbp; ret; 
0x000000000045e51d: mov ecx, dword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x170; popfq; pop rbp; ret; 
0x0000000000463739: mov ecx, dword ptr [rsp + rcx*4 + 0x40]; bt ecx, edx; jb 0x63724; add rsp, 0x60; pop rbp; ret; 
0x000000000042e2e9: mov ecx, dword ptr [rsp]; mov qword ptr [rax + 0x48], rcx; add rsp, 8; pop rbp; ret; 
0x00000000004113f1: mov ecx, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000046ea5d: mov ecx, eax; add rsp, 0x38; pop rbp; ret; 
0x00000000004747c2: mov ecx, eax; add rsp, 0x50; pop rbp; ret; 
0x0000000000449c4b: mov ecx, eax; add rsp, 0xd8; pop rbp; ret; 
0x000000000042d1a5: mov ecx, eax; call 0x36c0; mov rax, rcx; add rsp, 0x50; pop rbp; ret; 
0x00000000004078c4: mov ecx, eax; call 0x4a6a0; add rsp, 0x140; pop rbp; ret; 
0x000000000042983b: mov ecx, eax; lea rax, [rcx + r8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004777be: mov ecx, eax; lea rax, [rip + 0xa7419]; call 0x61820; add rsp, 0x18; pop rbp; ret; 
0x0000000000428563: mov ecx, eax; lea rdx, [rsp + 0x80]; call rdi; 
0x0000000000449c25: mov ecx, eax; mov eax, dword ptr [rsp + 0x2c]; mov rbx, qword ptr [rsp + 0xc8]; add rsp, 0xd8; pop rbp; ret; 
0x0000000000449795: mov ecx, eax; mov eax, esi; add rsp, 0x78; pop rbp; ret; 
0x000000000047306d: mov ecx, eax; mov rax, -1; add rsp, 0x10; pop rbp; ret; 
0x0000000000464268: mov ecx, eax; mov rax, qword ptr [rsp + 0x28]; call 0x643c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000409d64: mov ecx, eax; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000043c8ce: mov ecx, eax; mov rax, rcx; add rsp, 0x20; pop rbp; ret; 
0x0000000000429773: mov ecx, eax; mov rax, rcx; add rsp, 0x30; pop rbp; ret; 
0x0000000000470569: mov ecx, eax; mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004703a9: mov ecx, eax; mov rax, rcx; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x0000000000440498: mov ecx, eax; mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000460aac: mov ecx, eax; mov rax, rsi; add rsp, 0x30; pop rbp; ret; 
0x000000000046f23f: mov ecx, eax; mov rax, rsi; call 0x6f4e0; add rsp, 0x18; pop rbp; ret; 
0x000000000047b5f1: mov ecx, eax; mov rcx, qword ptr [r9 + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000477c3b: mov ecx, eax; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x000000000047814c: mov ecx, eax; mov rdx, rbx; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rdx; call rcx; 
0x000000000044a7fa: mov ecx, eax; mov rsi, rdi; mov rdi, rbx; add rsp, 0x18; pop rbp; ret; 
0x00000000004525b8: mov ecx, eax; movzx eax, byte ptr [rsp + 0x38]; nop; call rcx; 
0x00000000004013b5: mov ecx, eax; neg rcx; cmp rcx, rbx; jb 0x13c1; pop rbp; ret; 
0x000000000041204c: mov ecx, eax; xor edi, edi; add rsp, 0x10; pop rbp; ret; 
0x0000000000465cee: mov ecx, ebp; call 0x66380; add rsp, 0x58; pop rbp; ret; 
0x0000000000439047: mov ecx, ebx; add rsp, 0x100; pop rbp; ret; 
0x0000000000401114: mov ecx, ebx; add rsp, 0x10; pop rbp; ret; 
0x0000000000429275: mov ecx, ebx; add rsp, 0x58; pop rbp; ret; 
0x00000000004466bf: mov ecx, ebx; add rsp, 0x60; pop rbp; ret; 
0x00000000004671a4: mov ecx, ebx; add rsp, 0x78; pop rbp; ret; 
0x00000000004042c2: mov ecx, ebx; call 0x2e140; add rsp, 0x18; pop rbp; ret; 
0x0000000000432f86: mov ecx, ebx; call 0x329e0; sub rsp, -0x80; pop rbp; ret; 
0x0000000000437daf: mov ecx, ebx; call 0x37a40; add rsp, 0x18; pop rbp; ret; 
0x00000000004518fe: mov ecx, ebx; call 0x51500; add rsp, 0x68; pop rbp; ret; 
0x000000000045cd64: mov ecx, ebx; call rax; 
0x0000000000428871: mov ecx, ebx; mov rbx, rax; mov rax, qword ptr [rsp + 0x18]; call rsi; 
0x000000000042b466: mov ecx, ebx; mov rbx, rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004404f7: mov ecx, ebx; mov rbx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000046f543: mov ecx, ebx; mov rbx, rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000041ba5a: mov ecx, ebx; nop dword ptr [rax]; call 0x1ba80; add rsp, 0x30; pop rbp; ret; 
0x000000000045dd68: mov ecx, ebx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044d04a: mov ecx, ebx; xor edi, edi; add rsp, 0x10; pop rbp; ret; 
0x00000000004648ff: mov ecx, ecx; call rdi; 
0x000000000046494a: mov ecx, ecx; call rsi; 
0x000000000047631b: mov ecx, edi; add rsp, 0x28; pop rbp; ret; 
0x0000000000473d37: mov ecx, edi; add rsp, 0x88; pop rbp; ret; 
0x00000000004186e3: mov ecx, edi; call 0x18800; add rsp, 0x50; pop rbp; ret; 
0x00000000004606cc: mov ecx, edi; call 0x41c0; add rsp, 0x68; pop rbp; ret; 
0x000000000046a681: mov ecx, edi; call 0x5d320; add rsp, 0x100; pop rbp; ret; 
0x000000000047b5e9: mov ecx, edi; call 0x6fca0; mov r9, rax; mov rcx, qword ptr [r9 + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000477c33: mov ecx, edi; call 0x6fca0; mov rcx, rax; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x000000000047afa3: mov ecx, edi; call 0x6fca0; mov rdx, rax; mov rcx, qword ptr [rdx + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000444b71: mov ecx, edi; call rsi; 
0x0000000000412067: mov ecx, edx; add rsp, 0x10; pop rbp; ret; 
0x000000000046eb57: mov ecx, edx; add rsp, 0x18; pop rbp; ret; 
0x000000000040b8a7: mov ecx, edx; add rsp, 0x38; pop rbp; ret; 
0x000000000046d77b: mov ecx, edx; add rsp, 0x70; pop rbp; ret; 
0x000000000046909a: mov ecx, edx; add rsp, 0x88; pop rbp; ret; 
0x000000000044ff52: mov ecx, edx; call 0x50380; mov eax, eax; add rsp, 0x38; pop rbp; ret; 
0x0000000000451394: mov ecx, edx; call 0x51500; add rsp, 0x1e0; pop rbp; ret; 
0x0000000000403d0a: mov ecx, edx; call 0x5ce60; add rsp, 0x60; pop rbp; ret; 
0x0000000000410cb5: mov ecx, edx; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x000000000047798b: mov ecx, edx; call rsi; 
0x0000000000458f99: mov ecx, edx; mov edi, 3; call 0x2a860; add rsp, 0x20; pop rbp; ret; 
0x0000000000411f1f: mov ecx, edx; mov rdi, r10; call 0x12140; add rsp, 0x48; pop rbp; ret; 
0x00000000004646ab: mov ecx, edx; mov rdi, r9; call 0x64500; add rsp, 0x78; pop rbp; ret; 
0x0000000000411551: mov ecx, edx; mov rdi, rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004294f8: mov ecx, edx; shl rsi, cl; or qword ptr [rax + rbx*8], rsi; add rsp, 0x10; pop rbp; ret; 
0x0000000000413724: mov ecx, edx; shr rbx, cl; mov qword ptr [rax + 0x40], rbx; add rsp, 0x48; pop rbp; ret; 
0x00000000004686ac: mov ecx, esi; add rsp, 0x20; pop rbp; ret; 
0x0000000000463f96: mov ecx, esi; add rsp, 0x28; pop rbp; ret; 
0x00000000004724cd: mov ecx, esi; add rsp, 0x30; pop rbp; ret; 
0x00000000004728ff: mov ecx, esi; add rsp, 0x40; pop rbp; ret; 
0x00000000004747d0: mov ecx, esi; add rsp, 0x50; pop rbp; ret; 
0x000000000047410e: mov ecx, esi; add rsp, 0xa0; pop rbp; ret; 
0x00000000004729ee: mov ecx, esi; call 0x36a0; add rsp, 0x38; pop rbp; ret; 
0x0000000000439f95: mov ecx, esi; call 0x402a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000410eab: mov ecx, esi; call 0x5dcc0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x00000000004647d6: mov ecx, esi; call rdx; 
0x000000000041d453: mov ecx, esi; mov rdx, qword ptr [rbx + 0x98]; cmp rcx, rdx; cmovb rcx, rdx; mov rax, rcx; ret; 
0x000000000045e60b: mov edi, 0; mov eax, 0x3c; syscall; 
0x000000000045edf0: mov edi, 0x1002; mov rax, 0x9e; syscall; 
0x000000000040c13d: mov edi, 0x48001442; add esp, 0x58; pop rbp; ret; 
0x0000000000403a4d: mov edi, 0x6bbb8f63; out dx, eax; push rdx; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8348; 
0x00000000004037e8: mov edi, 0x6bbb8f63; out dx, eax; push rdx; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000045ed8f: mov edi, 0x6f; mov eax, 0x3c; syscall; 
0x00000000004245a4: mov edi, 0x81480012; ret; 
0x0000000000460ff9: mov edi, 0x8949ffff; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x73], cl; push rcx; or byte ptr [rax - 0x77], cl; ret; 
0x000000000045e620: mov edi, 0xffffff9c; mov rsi, qword ptr [rsp + 8]; mov edx, dword ptr [rsp + 0x10]; mov r10d, dword ptr [rsp + 0x14]; mov eax, 0x101; syscall; 
0x0000000000478707: mov edi, 0xffffffff; call 0x76de0; add rsp, 0x28; pop rbp; ret; 
0x000000000044d0e0: mov edi, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000460f5d: mov edi, 1; add rsp, 0x28; pop rbp; ret; 
0x000000000047cfac: mov edi, 1; call 0x63680; add rsp, 0x110; pop rbp; ret; 
0x000000000045ef29: mov edi, 1; lea rsi, [rsp]; mov rax, 0xe4; syscall; 
0x000000000045eece: mov edi, 1; lea rsi, [rsp]; mov rax, qword ptr [rip + 0xf1712]; call rax; 
0x0000000000458f9b: mov edi, 3; call 0x2a860; add rsp, 0x20; pop rbp; ret; 
0x0000000000452740: mov edi, 5; add rsp, 0x20; pop rbp; ret; 
0x000000000046406f: mov edi, dword ptr [rax + 0x10]; mov rax, rsi; call rdx; 
0x000000000040e0b1: mov edi, dword ptr [rbx + 0xc]; mov rax, r12; mov rbx, rdi; call rcx; 
0x000000000040d286: mov edi, dword ptr [rbx + 0xc]; mov rax, rcx; mov rbx, rdi; call rsi; 
0x0000000000410a59: mov edi, dword ptr [rbx + 0xc]; mov rax, rsi; mov rbx, rdi; call rcx; 
0x000000000040f495: mov edi, dword ptr [rbx + 0xc]; mov rax, rsi; mov rbx, rdi; nop; call rcx; 
0x00000000004414aa: mov edi, dword ptr [rbx + 8]; mov rax, rsi; mov rbx, rdi; call rcx; 
0x000000000047797f: mov edi, dword ptr [rcx + 0x10]; mov rsi, rax; mov rax, qword ptr [rsp + 0x58]; mov rcx, rdx; call rsi; 
0x000000000045cd55: mov edi, dword ptr [rdi + 8]; sub rdi, rdx; mov qword ptr [rsp + 0x28], rdi; mov rdi, rbx; mov rcx, rbx; call rax; 
0x000000000045b166: mov edi, dword ptr [rdi]; call rdi; 
0x000000000045b1a5: mov edi, dword ptr [rdi]; pop rbp; jmp rdi; 
0x000000000040d8e6: mov edi, dword ptr [rdx]; mov rax, qword ptr [rsp + 0x70]; mov rbx, rcx; call rdi; 
0x0000000000454d5d: mov edi, dword ptr [rip + 0xcd945]; mov rbx, rax; mov rdx, rcx; mov rax, rdi; call rsi; 
0x0000000000428858: mov edi, dword ptr [rsi]; mov r8, qword ptr [rdx + 0x10]; mov qword ptr [rsp + 0x20], r8; mov rdx, rsi; call rdi; 
0x000000000041578c: mov edi, dword ptr [rsp + 0x18]; mov rax, rdi; add rsp, 0x28; pop rbp; ret; 
0x000000000045d2c9: mov edi, dword ptr [rsp + 0x20]; add rsp, 0x98; pop rbp; ret; 
0x00000000004130fe: mov edi, dword ptr [rsp + 0x20]; mov qword ptr [rdx + rsi*8 + 0x28], rdi; add rsp, 0x30; pop rbp; ret; 
0x000000000045e5be: mov edi, dword ptr [rsp + 0x20]; mov rbp, qword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x000000000042e1a5: mov edi, dword ptr [rsp + 0x28]; call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x0000000000479fa9: mov edi, dword ptr [rsp + 0x2c]; call rdx; 
0x000000000042e254: mov edi, dword ptr [rsp + 0x30]; call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x000000000040c886: mov edi, dword ptr [rsp + 0x30]; mov rax, rdi; add rsp, 0x40; pop rbp; ret; 
0x00000000004052ff: mov edi, dword ptr [rsp + 0x60]; mov rax, qword ptr [rbx]; mov qword ptr [rsp + 0x18], rax; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x00000000004692d6: mov edi, dword ptr [rsp + 0x98]; mov byte ptr [rbx + rax - 1], dil; add rsp, 0x70; pop rbp; ret; 
0x000000000045e820: mov edi, dword ptr [rsp + 8]; mov eax, 0xe2; syscall; 
0x000000000045e820: mov edi, dword ptr [rsp + 8]; mov eax, 0xe2; syscall; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000045e5e0: mov edi, dword ptr [rsp + 8]; mov eax, 0xe7; syscall; 
0x000000000045e5e0: mov edi, dword ptr [rsp + 8]; mov eax, 0xe7; syscall; ret; 
0x000000000045e660: mov edi, dword ptr [rsp + 8]; mov eax, 3; syscall; 
0x000000000045e800: mov edi, dword ptr [rsp + 8]; mov esi, dword ptr [rsp + 0xc]; mov rdx, qword ptr [rsp + 0x10]; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x000000000045eca1: mov edi, dword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov rax, 0x1c; syscall; 
0x000000000045eda1: mov edi, dword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; mov rax, 0x83; syscall; 
0x000000000045e787: mov edi, eax; mov esi, dword ptr [rsp + 8]; mov eax, 0x3e; syscall; 
0x000000000045e787: mov edi, eax; mov esi, dword ptr [rsp + 8]; mov eax, 0x3e; syscall; ret; 
0x000000000044a800: mov edi, ebx; add rsp, 0x18; pop rbp; ret; 
0x00000000004397b4: mov edi, ebx; mov esi, 1; xor ebx, ebx; add rsp, 0x60; pop rbp; ret; 
0x000000000046579d: mov edi, ebx; mov esi, edx; call 0x65c80; add rsp, 0x120; pop rbp; ret; 
0x000000000045cd61: mov edi, ebx; mov rcx, rbx; call rax; 
0x0000000000450ba5: mov edi, ebx; mov rsi, rbx; call 0x4f520; add rsp, 0x40; pop rbp; ret; 
0x00000000004036ca: mov edi, ebx; syscall; 
0x00000000004395c7: mov edi, ebx; xor eax, eax; xor ebx, ebx; add rsp, 0x60; pop rbp; ret; 
0x0000000000460ee7: mov edi, ecx; add rsp, 0x28; pop rbp; ret; 
0x000000000044a363: mov edi, ecx; call 0x4a0e0; add rsp, 0x40; pop rbp; ret; 
0x000000000044a4f6: mov edi, ecx; call 0x4a0e0; add rsp, 0x60; pop rbp; ret; 
0x000000000044a620: mov edi, ecx; call 0x4a0e0; add rsp, 0x70; pop rbp; ret; 
0x0000000000407484: mov edi, ecx; call 0x4a0e0; add rsp, 0xf8; pop rbp; ret; 
0x00000000004646ae: mov edi, ecx; call 0x64500; add rsp, 0x78; pop rbp; ret; 
0x000000000044479e: mov edi, ecx; call 0x6480; add rsp, 0x30; pop rbp; ret; 
0x0000000000411ebb: mov edi, ecx; nop dword ptr [rax]; call 0x12140; add rsp, 0x48; pop rbp; ret; 
0x000000000044a41b: mov edi, ecx; nop dword ptr [rax]; call 0x4a0e0; add rsp, 0x50; pop rbp; ret; 
0x0000000000411f22: mov edi, edx; call 0x12140; add rsp, 0x48; pop rbp; ret; 
0x000000000047a2ed: mov edi, edx; mov esi, 0x70; call 0x79120; add rsp, 0x90; pop rbp; ret; 
0x000000000044e4dc: mov edi, edx; mov rbx, rsi; call 0x4e540; add rsp, 0x78; pop rbp; ret; 
0x0000000000411554: mov edi, esi; add rsp, 0x10; pop rbp; ret; 
0x00000000004657c1: mov edi, esi; mov esi, edx; call 0x65860; add rsp, 0x120; pop rbp; ret; 
0x000000000045e754: mov edi, esp; mov edx, dword ptr [rsp + 8]; mov eax, 0xea; syscall; 
0x000000000045e754: mov edi, esp; mov edx, dword ptr [rsp + 8]; mov eax, 0xea; syscall; ret; 
0x000000000045e709: mov edi, esp; mov esi, 0; mov eax, 0x23; syscall; 
0x000000000046579c: mov edi, r11d; mov esi, edx; call 0x65c80; add rsp, 0x120; pop rbp; ret; 
0x000000000045e753: mov edi, r12d; mov edx, dword ptr [rsp + 8]; mov eax, 0xea; syscall; 
0x000000000045e753: mov edi, r12d; mov edx, dword ptr [rsp + 8]; mov eax, 0xea; syscall; ret; 
0x00000000004291dd: mov edx, 0; add byte ptr [rax + 0x1480000], al; ret 0x8949; 
0x0000000000411349: mov edx, 0; add byte ptr [rax + 0x1480000], al; ret 0xc148; 
0x000000000041ea54: mov edx, 0; add byte ptr [rax + 0x14dffff], al; ret 0x894c; 
0x0000000000413fe8: mov edx, 0; cmovne rax, rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000045af42: mov edx, 0; mov rcx, 0; call rax; 
0x000000000040db08: mov edx, 0x37301e2; mov rcx, qword ptr [rcx]; mov rax, rcx; add rsp, 0x78; pop rbp; ret; 
0x000000000046f7f4: mov edx, 0x37307e2; mov rbx, qword ptr [rbx]; mov rax, rbx; add rsp, 0x20; pop rbp; ret; 
0x0000000000431222: mov edx, 0x450002d3; xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x30; pop rbp; ret; 
0x000000000042e3eb: mov edx, 0x6731be2; add rsp, 0x40; pop rbp; ret; 
0x0000000000408f9b: mov edx, 0x78bd642f; sbb eax, 0x3148a076; ret 0x8948; 
0x000000000046f59e: mov edx, 0x87309e1; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x000000000044135c: mov edx, 0x894821e9; ret; 
0x000000000046f52c: mov edx, 0x8b4807e9; and al, 0x30; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x000000000043fd81: mov edx, 0x90903fea; xchg qword ptr [rcx + 0x1228], rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000474ac4: mov edx, 0x920f0ae0; ret 0xa948; 
0x00000000004026bc: mov edx, 0x920f1be0; add eax, 0x14e3e5; add rsp, 0x50; pop rbp; ret; 
0x0000000000402584: mov edx, 0x920f1be0; ret 0x1588; 
0x0000000000467e06: mov edx, 0x930f00e2; ret; 
0x00000000004149a2: mov edx, 0x9f00013; or bh, byte ptr [rax + 1]; add rsp, 8; pop rbp; ret; 
0x0000000000445d7d: mov edx, 0xb7308e7; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000045499a: mov edx, 0xba0f000f; loope 0x549a2; setae al; add rsp, 0x10; pop rbp; ret; 
0x0000000000403a4c: mov edx, 0xbb8f63bf; imul ebp, edi, 0x52; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8348; 
0x00000000004037e7: mov edx, 0xbb8f63bf; imul ebp, edi, 0x52; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000441374: mov edx, 0xc7320e2; lea rax, [rbx + 0x80]; call 0xa660; add rsp, 8; pop rbp; ret; 
0x00000000004793a2: mov edx, 0xe80000ab; mov ch, 0xd2; cld; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000045e721: mov edx, 0xf000000; add eax, 0x8244489; ret; 
0x0000000000444e1a: mov edx, 0xfa830cf2; add cl, byte ptr [rdi]; xchg eax, esp; ret 0x14eb; 
0x000000000044437e: mov edx, 0xfa830cf2; add cl, byte ptr [rdi]; xchg eax, esp; ret 0x6eb; 
0x0000000000460753: mov edx, dword ptr [rax + 0x18]; mov rax, rbx; mov rbx, qword ptr [rsp + 0x88]; mov rcx, qword ptr [rsp + 0x90]; call rdx; 
0x00000000004308e8: mov edx, dword ptr [rax + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000463fb3: mov edx, dword ptr [rax + 0x18]; mov rsi, qword ptr [rax + 0x20]; mov rdx, qword ptr [rdx + 0x18]; mov rax, rsi; call rdx; 
0x00000000004608fb: mov edx, dword ptr [rax + 0x28]; mov rax, rcx; call rdx; 
0x0000000000472dbc: mov edx, dword ptr [rax + 0x28]; mov rax, rdx; call rcx; 
0x0000000000410a53: mov edx, dword ptr [rax + 0x48]; mov rcx, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, rsi; mov rbx, rdi; call rcx; 
0x000000000040ec47: mov edx, dword ptr [rax + 0x48]; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x30]; mov rbx, rsi; call rcx; 
0x000000000040ef30: mov edx, dword ptr [rax + 0x48]; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x50]; mov rbx, rsi; call rcx; 
0x0000000000410085: mov edx, dword ptr [rax + 0x48]; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x78]; mov rbx, rsi; call rcx; 
0x00000000004103fa: mov edx, dword ptr [rax + 0x48]; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x80]; mov rbx, rsi; call rcx; 
0x000000000040e7b7: mov edx, dword ptr [rax + 0x48]; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; mov rax, r13; mov rbx, rsi; call rcx; 
0x000000000040d280: mov edx, dword ptr [rax + 0x48]; mov rsi, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, rcx; mov rbx, rdi; call rsi; 
0x000000000040d311: mov edx, dword ptr [rax + 0x48]; mov rsi, qword ptr [rdx]; mov rax, rcx; xor ebx, ebx; call rsi; 
0x000000000041e367: mov edx, dword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000443883: mov edx, dword ptr [rax + 8]; mov qword ptr [r11 + 8], rdx; mov qword ptr [rax + 8], rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000454a93: mov edx, dword ptr [rax + rcx*8]; test rdx, rdx; jne 0x54a49; add rsp, 0x60; pop rbp; ret; 
0x000000000046a16e: mov edx, dword ptr [rax]; lea rax, [rdx + rcx]; lea rax, [rax - 0x30]; add rsp, 0xc8; pop rbp; ret; 
0x0000000000409e0e: mov edx, dword ptr [rax]; mov qword ptr [r11 + 8], rdx; mov qword ptr [rax], rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000042cb68: mov edx, dword ptr [rax]; nop; mov qword ptr [rcx + 0xa0], rdx; nop; mov qword ptr [rax], rcx; ret; 
0x0000000000447ecc: mov edx, dword ptr [rbx + 0x10]; add rcx, rdx; mov qword ptr [rax + 0x68], rcx; ret; 
0x000000000041d456: mov edx, dword ptr [rbx + 0x98]; cmp rcx, rdx; cmovb rcx, rdx; mov rax, rcx; ret; 
0x00000000004363e3: mov edx, dword ptr [rbx + 0xb8]; test rdx, rdx; je 0x363ff; mov rax, qword ptr [rdx]; call rax; 
0x000000000046d50b: mov edx, dword ptr [rbx + 8]; mov rcx, qword ptr [rbx + 0x10]; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000434e43: mov edx, dword ptr [rcx + 0x140]; mov qword ptr [r11 + 8], rdx; mov qword ptr [rcx + 0x140], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000040e7f9: mov edx, dword ptr [rcx + 0x18]; mov rcx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; mov rbx, rax; call rcx; 
0x000000000040e031: mov edx, dword ptr [rcx + 0x18]; mov rcx, qword ptr [rdx]; mov rax, r12; mov rbx, rax; call rcx; 
0x000000000044c429: mov edx, dword ptr [rcx + 0x68]; add rax, rdx; mov rbx, rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000451b4e: mov edx, dword ptr [rcx + 0x80]; cmp rdx, rax; jne 0x51b5f; add rsp, 0x30; pop rbp; ret; 
0x000000000041e0a3: mov edx, dword ptr [rcx + 0x80]; mov rbx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; call rbx; 
0x000000000041e380: mov edx, dword ptr [rcx + 0x88]; mov rbx, qword ptr [rdx]; mov eax, 0x10000; call rbx; 
0x000000000041e1db: mov edx, dword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000040ab14: mov edx, dword ptr [rcx + rax]; mov rbx, qword ptr [rcx + rax + 8]; mov rax, rdx; nop; ret; 
0x00000000004414f2: mov edx, dword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004414f2: mov edx, dword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; add rsp, 0x20; pop rbp; ret; 
0x000000000046f540: mov edx, dword ptr [rcx]; mov rcx, rbx; mov rbx, rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000040d8e2: mov edx, dword ptr [rdi + 0x18]; mov rdi, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x70]; mov rbx, rcx; call rdi; 
0x00000000004030f2: mov edx, dword ptr [rdi + rbx - 8]; cmp rcx, rdx; sete al; ret; 
0x0000000000479eae: mov edx, dword ptr [rdx + 0x18]; mov rax, qword ptr [rsp + 0x188]; call rdx; 
0x0000000000463fbb: mov edx, dword ptr [rdx + 0x18]; mov rax, rsi; call rdx; 
0x0000000000477fd8: mov edx, dword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x00000000004018c9: mov edx, dword ptr [rdx + 8]; mov rax, rcx; mov rbx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000046ee46: mov edx, dword ptr [rdx + 8]; mov rbx, qword ptr [rcx + 8]; mov rax, rdx; add rsp, 0x30; pop rbp; ret; 
0x0000000000444d0c: mov edx, dword ptr [rdx]; bt edx, eax; jae 0x44d1d; add rsp, 0x58; pop rbp; ret; 
0x000000000040d5d3: mov edx, dword ptr [rdx]; mov rax, qword ptr [rsp + 0x20]; mov rbx, rdx; add rsp, 0x38; pop rbp; ret; 
0x000000000040d3f7: mov edx, dword ptr [rdx]; mov rax, rdx; mov ebx, 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000418093: mov edx, dword ptr [rip + 0x10a587]; test rdx, rdx; je 0x180a3; mov rax, qword ptr [rdx]; call rax; 
0x0000000000473a23: mov edx, dword ptr [rip + 0xaabf7]; mov rsi, qword ptr [rdx]; mov rax, rcx; call rsi; 
0x0000000000473877: mov edx, dword ptr [rip + 0xab04b]; mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000473753: mov edx, dword ptr [rip + 0xab16f]; mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000044f329: mov edx, dword ptr [rip + 0xd3369]; test rdx, rdx; je 0x4f33f; mov rsi, qword ptr [rdx]; call rsi; 
0x0000000000441f05: mov edx, dword ptr [rip + 0xd7249]; mov dword ptr [rip + 0x10e547], edx; add rsp, 0x28; pop rbp; ret; 
0x0000000000444b9e: mov edx, dword ptr [rip + 0xddae4]; test rdx, rdx; je 0x44bd4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x0000000000437f0e: mov edx, dword ptr [rip + 0xeb5d4]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000436ab6: mov edx, dword ptr [rip + 0xeca2c]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000433778: mov edx, dword ptr [rip + 0xeee5a]; nop; test rdx, rdx; je 0x3391f; mov rax, qword ptr [rdx]; call rax; 
0x000000000040d39c: mov edx, dword ptr [rsi + 0x18]; mov rsi, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x28]; mov rbx, rcx; call rsi; 
0x000000000040d577: mov edx, dword ptr [rsi + 0x18]; mov rsi, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x30]; mov rbx, rcx; call rsi; 
0x000000000040e0ab: mov edx, dword ptr [rsi + 0x48]; mov rcx, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, r12; mov rbx, rdi; call rcx; 
0x000000000044084c: mov edx, dword ptr [rsp + 0x108]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000045e809: mov edx, dword ptr [rsp + 0x10]; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x000000000045e62a: mov edx, dword ptr [rsp + 0x10]; mov r10d, dword ptr [rsp + 0x14]; mov eax, 0x101; syscall; 
0x0000000000406f67: mov edx, dword ptr [rsp + 0x10]; mov rax, qword ptr [rdx]; call rax; 
0x000000000045e62f: mov edx, dword ptr [rsp + 0x14]; mov eax, 0x101; syscall; 
0x000000000045e6a9: mov edx, dword ptr [rsp + 0x18]; mov eax, 0; syscall; 
0x000000000045e6a9: mov edx, dword ptr [rsp + 0x18]; mov eax, 0; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e84b: mov edx, dword ptr [rsp + 0x18]; mov eax, 0x1b; syscall; 
0x000000000045e84b: mov edx, dword ptr [rsp + 0x18]; mov eax, 0x1b; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045ee4b: mov edx, dword ptr [rsp + 0x18]; mov eax, 0xcc; syscall; 
0x000000000045ee4b: mov edx, dword ptr [rsp + 0x18]; mov eax, 0xcc; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e7ea: mov edx, dword ptr [rsp + 0x18]; mov eax, 0xde; syscall; 
0x000000000045e7ea: mov edx, dword ptr [rsp + 0x18]; mov eax, 0xde; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e80e: mov edx, dword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x000000000045e80e: mov edx, dword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e7cb: mov edx, dword ptr [rsp + 0x18]; mov eax, 0xea; syscall; 
0x000000000045e7cb: mov edx, dword ptr [rsp + 0x18]; mov eax, 0xea; syscall; ret; 
0x000000000045e68a: mov edx, dword ptr [rsp + 0x18]; mov eax, 1; syscall; 
0x000000000045e68a: mov edx, dword ptr [rsp + 0x18]; mov eax, 1; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000040c6a9: mov edx, dword ptr [rsp + 0x18]; mov qword ptr [rdx], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000045e96b: mov edx, dword ptr [rsp + 0x18]; mov r10, qword ptr [rsp + 0x20]; mov eax, 0xd; syscall; 
0x000000000045e92a: mov edx, dword ptr [rsp + 0x18]; mov r10d, dword ptr [rsp + 0x20]; mov eax, 0xe; syscall; 
0x000000000045ecce: mov edx, dword ptr [rsp + 0x18]; mov r8, qword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; 
0x000000000045ecaa: mov edx, dword ptr [rsp + 0x18]; mov rax, 0x1c; syscall; 
0x000000000045ecaa: mov edx, dword ptr [rsp + 0x18]; mov rax, 0x1c; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x00000000004586b8: mov edx, dword ptr [rsp + 0x18]; mov rax, qword ptr [rdx]; nop; call rax; 
0x000000000042fb88: mov edx, dword ptr [rsp + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000453f2c: mov edx, dword ptr [rsp + 0x1b0]; mov qword ptr [rdx], rax; add rsp, 0x1b8; pop rbp; ret; 
0x000000000045eb6f: mov edx, dword ptr [rsp + 0x1c]; mov r8d, dword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x24]; mov eax, 9; syscall; 
0x000000000041e6d0: mov edx, dword ptr [rsp + 0x20]; add qword ptr [rdx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000045e970: mov edx, dword ptr [rsp + 0x20]; mov eax, 0xd; syscall; 
0x000000000045e970: mov edx, dword ptr [rsp + 0x20]; mov eax, 0xd; syscall; mov dword ptr [rsp + 0x28], eax; ret; 
0x000000000045e92f: mov edx, dword ptr [rsp + 0x20]; mov eax, 0xe; syscall; 
0x0000000000450a14: mov edx, dword ptr [rsp + 0x28]; add qword ptr [rdx + 0x11e8], rax; add rsp, 0x30; pop rbp; ret; 
0x0000000000406f7b: mov edx, dword ptr [rsp + 0x28]; mov rax, qword ptr [rdx]; call rax; 
0x000000000045e9d3: mov edx, dword ptr [rsp + 0x28]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x00000000004135a6: mov edx, dword ptr [rsp + 0x28]; xchg dword ptr [rdx + 0x4a8], ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000429e18: mov edx, dword ptr [rsp + 0x30]; mov qword ptr [rax + 0x28], rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000042395d: mov edx, dword ptr [rsp + 0x30]; mov qword ptr [rdx], rax; add rsp, 0x38; pop rbp; ret; 
0x000000000042ab94: mov edx, dword ptr [rsp + 0x30]; mov rax, qword ptr [rdx]; call rax; 
0x000000000045e993: mov edx, dword ptr [rsp + 0x30]; mov rax, qword ptr [rip + 0xc3d6a]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x000000000043460c: mov edx, dword ptr [rsp + 0x30]; mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x0000000000450ab4: mov edx, dword ptr [rsp + 0x38]; mov byte ptr [rdx + 0x11e0], 0; add rsp, 0x40; pop rbp; ret; 
0x000000000043139e: mov edx, dword ptr [rsp + 0x38]; mov byte ptr [rdx], al; add rsp, 0x40; pop rbp; ret; 
0x0000000000461714: mov edx, dword ptr [rsp + 0x40]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000479ea9: mov edx, dword ptr [rsp + 0x40]; mov rdx, qword ptr [rdx + 0x18]; mov rax, qword ptr [rsp + 0x188]; call rdx; 
0x000000000047844b: mov edx, dword ptr [rsp + 0x48]; mov byte ptr [r10 + 0x4c], dl; add rsp, 0x38; pop rbp; ret; 
0x0000000000475e51: mov edx, dword ptr [rsp + 0x48]; mov byte ptr [rdx + 0xe], cl; add rsp, 0x38; pop rbp; ret; 
0x000000000046172e: mov edx, dword ptr [rsp + 0x48]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000436858: mov edx, dword ptr [rsp + 0x68]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x000000000043688c: mov edx, dword ptr [rsp + 0x68]; mov rcx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x50]; call rcx; 
0x0000000000461d9c: mov edx, dword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000461dd5: mov edx, dword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; nop; call rax; 
0x0000000000433852: mov edx, dword ptr [rsp + 0x88]; mov rax, qword ptr [rdx]; call rax; 
0x000000000040673c: mov edx, dword ptr [rsp + 0x98]; mov qword ptr [rdx + 0x1f68], 0; add rsp, 0x88; pop rbp; ret; 
0x00000000004740c8: mov edx, dword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000428756: mov edx, dword ptr [rsp + 0xa8]; add qword ptr [rdx + 0x10128], rax; add rsp, 0x98; pop rbp; ret; 
0x000000000045e756: mov edx, dword ptr [rsp + 8]; mov eax, 0xea; syscall; 
0x000000000045e756: mov edx, dword ptr [rsp + 8]; mov eax, 0xea; syscall; ret; 
0x0000000000440495: mov edx, dword ptr [rsp]; mov ecx, eax; mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x00000000004413f8: mov edx, eax; call rcx; 
0x0000000000413ee9: mov edx, eax; lock xadd qword ptr [rcx], rdx; call 0x14080; add rsp, 0x10; pop rbp; ret; 
0x000000000040a0fe: mov edx, eax; mov rax, rbx; call rcx; 
0x0000000000460201: mov edx, eax; mov rax, rbx; lock cmpxchg qword ptr [rdx], rcx; sete al; ret; 
0x00000000004763a3: mov edx, eax; mov rax, rbx; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000046fe48: mov edx, eax; mov rax, rbx; mov rcx, qword ptr [rdx + 0x48]; call rcx; 
0x0000000000470a1c: mov edx, eax; mov rax, rbx; mov rcx, qword ptr [rdx + 0x98]; call rcx; 
0x0000000000473666: mov edx, eax; mov rax, rcx; mov rbx, rdx; add rsp, 0x10; pop rbp; ret; 
0x00000000004346a2: mov edx, eax; mov rax, rsi; call rcx; 
0x000000000046ffc6: mov edx, eax; mov rcx, qword ptr [rdx + 0xa0]; mov rax, rbx; call rcx; 
0x000000000047afab: mov edx, eax; mov rcx, qword ptr [rdx + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000430600: mov edx, ebx; call rax; 
0x00000000004580a6: mov edx, ebx; lock xadd qword ptr [rcx], rdx; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x38; pop rbp; ret; 
0x000000000047814f: mov edx, ebx; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rdx; call rcx; 
0x0000000000469092: mov edx, ecx; mov byte ptr [rbx + rax - 1], r8b; mov rcx, rdx; add rsp, 0x88; pop rbp; ret; 
0x000000000047cbfb: mov edx, ecx; mov qword ptr [rax + 8], rbx; mov byte ptr [rbx + rdx - 1], 0xa; add rsp, 0x60; pop rbp; ret; 
0x0000000000454d67: mov edx, ecx; mov rax, rdi; call rsi; 
0x0000000000454d67: mov edx, ecx; mov rax, rdi; call rsi; add rsp, 0x10; pop rbp; ret; 
0x000000000040cf6f: mov edx, ecx; mov rax, rdx; add rsp, 0x38; pop rbp; ret; 
0x000000000041d39e: mov edx, ecx; mov rax, rdx; mov rbx, rsi; add rsp, 0x10; pop rbp; ret; 
0x0000000000402ae0: mov edx, ecx; shr rcx, 0x20; lea rax, [rcx + rdx]; and eax, 0x7f; ret; 
0x000000000040530f: mov edx, edi; call rcx; 
0x000000000045b163: mov edx, edi; mov rdi, qword ptr [rdi]; call rdi; 
0x000000000045b1a2: mov edx, edi; mov rdi, qword ptr [rdi]; pop rbp; jmp rdi; 
0x00000000004036c4: mov edx, edi; mov rsi, rcx; mov rdi, rbx; syscall; 
0x0000000000465dde: mov edx, edx; call 0x66820; add rsp, 0x58; pop rbp; ret; 
0x0000000000447564: mov edx, edx; lea rbx, [rcx + rdx]; mov rax, rcx; add rsp, 0x68; pop rbp; ret; 
0x000000000046d055: mov edx, edx; mov r11, r13; call 0x4a580; add rsp, 0x78; pop rbp; ret; 
0x0000000000465d9a: mov edx, edx; nop dword ptr [rax]; call 0x66380; add rsp, 0x58; pop rbp; ret; 
0x000000000043a53f: mov edx, esi; call rcx; 
0x0000000000428864: mov edx, esi; call rdi; 
0x00000000004036c1: mov edx, esi; mov rdx, rdi; mov rsi, rcx; mov rdi, rbx; syscall; 
0x000000000046f7c9: mov es, word ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x0000000000466452: mov es, word ptr [rbx]; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x000000000045e70b: mov esi, 0; mov eax, 0x23; syscall; 
0x000000000043cd33: mov esi, 0x110; add byte ptr [rbp + 9], dh; add rsp, 0x3a0; pop rbp; ret; 
0x000000000045c9de: mov esi, 0x48ffffd8; add esp, 0x8000000; pop rbp; ret; 
0x000000000045c2de: mov esi, 0x48ffffdf; add esp, 0x80000; pop rbp; ret; 
0x000000000047a2ef: mov esi, 0x70; call 0x79120; add rsp, 0x90; pop rbp; ret; 
0x0000000000431953: mov esi, 0xb1; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; mov eax, 1; ret; 
0x0000000000431892: mov esi, 0xb1; add byte ptr [rax + rcx + 0x49], dh; mov dword ptr [rsi + 0x10], 0xfffffade; xor eax, eax; ret; 
0x00000000004553be: mov esi, 0xeb000c4b; jl 0x5540d; add esp, 0x48; pop rbp; ret; 
0x0000000000413f88: mov esi, 0xffffffff; xor r8d, r8d; call 0x45e0; add rsp, 0x20; pop rbp; ret; 
0x000000000046a59b: mov esi, 1; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x00000000004397b6: mov esi, 1; xor ebx, ebx; add rsp, 0x60; pop rbp; ret; 
0x000000000040480b: mov esi, dword ptr [0xfffffff8]; add rsp, 0x10; pop rbp; ret; 
0x000000000042a60c: mov esi, dword ptr [0xfffffff8]; add rsp, 0x170; pop rbp; ret; 
0x00000000004386eb: mov esi, dword ptr [0xfffffff8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000448a11: mov esi, dword ptr [0xfffffff8]; add rsp, 0x1a0; pop rbp; ret; 
0x0000000000414417: mov esi, dword ptr [0xfffffff8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000431033: mov esi, dword ptr [0xfffffff8]; add rsp, 0x28; pop rbp; nop; ret; 
0x0000000000404791: mov esi, dword ptr [0xfffffff8]; add rsp, 0x28; pop rbp; ret; 
0x00000000004044b7: mov esi, dword ptr [0xfffffff8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004053b9: mov esi, dword ptr [0xfffffff8]; add rsp, 0x38; pop rbp; ret; 
0x00000000004061d1: mov esi, dword ptr [0xfffffff8]; add rsp, 0x40; pop rbp; ret; 
0x0000000000435c0f: mov esi, dword ptr [0xfffffff8]; add rsp, 0x50; pop rbp; ret; 
0x0000000000444f37: mov esi, dword ptr [0xfffffff8]; add rsp, 0x58; pop rbp; ret; 
0x00000000004446a1: mov esi, dword ptr [0xfffffff8]; add rsp, 0x68; pop rbp; ret; 
0x00000000004151fb: mov esi, dword ptr [0xfffffff8]; add rsp, 0xc8; pop rbp; ret; 
0x000000000042c66b: mov esi, dword ptr [0xfffffff8]; add rsp, 8; pop rbp; ret; 
0x000000000045f307: mov esi, dword ptr [0xfffffff8]; call 0x10d40; add rsp, 0x28; pop rbp; ret; 
0x000000000045f3b3: mov esi, dword ptr [0xfffffff8]; call 0x34300; add rsp, 8; pop rbp; ret; 
0x000000000045f3f3: mov esi, dword ptr [0xfffffff8]; call 0x34340; add rsp, 8; pop rbp; ret; 
0x000000000043afba: mov esi, dword ptr [0xfffffff8]; call 0x3a000; add rsp, 0x30; pop rbp; ret; 
0x000000000045f4f3: mov esi, dword ptr [0xfffffff8]; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x000000000045f69c: mov esi, dword ptr [0xfffffff8]; call 0x4f320; mov dword ptr [rsp + 0x40], eax; add rsp, 0x18; pop rbp; ret; 
0x000000000045f2b3: mov esi, dword ptr [0xfffffff8]; call 0x6c40; add rsp, 8; pop rbp; ret; 
0x0000000000441c64: mov esi, dword ptr [0xfffffff8]; cmp byte ptr [rsp], 0; je 0x41c77; add rsp, 0x38; pop rbp; ret; 
0x000000000042e72b: mov esi, dword ptr [0xfffffff8]; cmp dword ptr [rsp + 0x18], 0; je 0x2e742; add rsp, 0xc0; pop rbp; ret; 
0x00000000004376ab: mov esi, dword ptr [0xfffffff8]; lea rax, [rip + 0x119127]; call 0x42600; add rsp, 0x30; pop rbp; ret; 
0x000000000042d7cb: mov esi, dword ptr [0xfffffff8]; mov eax, 0x1006; mov dword ptr [rax], 0x1006; add rsp, 0x48; pop rbp; ret; 
0x0000000000445d57: mov esi, dword ptr [0xfffffff8]; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000421372: mov esi, dword ptr [0xfffffff8]; mov eax, 1; add rsp, 0xf8; pop rbp; ret; 
0x0000000000430f2b: mov esi, dword ptr [0xfffffff8]; mov eax, 1; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x0000000000430e4b: mov esi, dword ptr [0xfffffff8]; mov eax, 2; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x000000000045f65c: mov esi, dword ptr [0xfffffff8]; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x000000000044f357: mov esi, dword ptr [0xfffffff8]; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x000000000045049e: mov esi, dword ptr [0xfffffff8]; mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x60; pop rbp; ret; 
0x00000000004635d9: mov esi, dword ptr [0xfffffff8]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004639d4: mov esi, dword ptr [0xfffffff8]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; pop rbp; ret; 
0x0000000000463944: mov esi, dword ptr [0xfffffff8]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x78; pop rbp; ret; 
0x00000000004046a2: mov esi, dword ptr [0xfffffff8]; mov rax, qword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x28]; add rsp, 0x68; pop rbp; ret; 
0x000000000040c642: mov esi, dword ptr [0xfffffff8]; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; pop rbp; ret; 
0x0000000000453e38: mov esi, dword ptr [0xfffffff8]; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; pop rbp; ret; 
0x00000000004068cb: mov esi, dword ptr [0xfffffff8]; mov rax, qword ptr [rsp + 8]; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x30; pop rbp; ret; 
0x000000000044f2f3: mov esi, dword ptr [0xfffffff8]; mov rax, qword ptr [rsp]; add rsp, 8; pop rbp; ret; 
0x0000000000470614: mov esi, dword ptr [0xfffffff8]; nop dword ptr [rax + rax]; call 0x6d8e0; add rsp, 0x20; pop rbp; ret; 
0x000000000045f537: mov esi, dword ptr [0xfffffff8]; nop; call 0x41520; add rsp, 0x10; pop rbp; ret; 
0x00000000004705b8: mov esi, dword ptr [0xfffffff8]; nop; call 0x6ba00; add rsp, 0x10; pop rbp; ret; 
0x000000000045f36f: mov esi, dword ptr [0xfffffff8]; pop rbp; ret; 
0x0000000000431490: mov esi, dword ptr [0xfffffff8]; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x000000000041412d: mov esi, dword ptr [0xfffffff8]; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x00000000004211be: mov esi, dword ptr [0xfffffff8]; xor eax, eax; add rsp, 0xf8; pop rbp; ret; 
0x00000000004157df: mov esi, dword ptr [rax + 0x10]; mov rax, rsi; call rcx; 
0x0000000000464338: mov esi, dword ptr [rax + 0x20]; lea rcx, [rdx - 1]; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000463fb7: mov esi, dword ptr [rax + 0x20]; mov rdx, qword ptr [rdx + 0x18]; mov rax, rsi; call rdx; 
0x00000000004645e2: mov esi, dword ptr [rax + 0x20]; sub r9, rcx; dec r9; mov rax, rbx; mov rbx, r9; call rsi; 
0x00000000004642e6: mov esi, dword ptr [rax + 0x28]; lea rcx, [rdx - 1]; mov qword ptr [rsp + 0x28], rcx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000464726: mov esi, dword ptr [rax + 0x28]; lea rcx, [rdx - 1]; mov qword ptr [rsp + 0x68], rcx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x000000000040ec4d: mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x30]; mov rbx, rsi; call rcx; 
0x000000000040ef36: mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x50]; mov rbx, rsi; call rcx; 
0x000000000041008b: mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x78]; mov rbx, rsi; call rcx; 
0x0000000000410400: mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x80]; mov rbx, rsi; call rcx; 
0x000000000040e7bd: mov esi, dword ptr [rbx + 0xc]; mov rax, r13; mov rbx, rsi; call rcx; 
0x00000000004414a7: mov esi, dword ptr [rbx]; mov rdi, qword ptr [rbx + 8]; mov rax, rsi; mov rbx, rdi; call rcx; 
0x0000000000454d5a: mov esi, dword ptr [rcx]; mov rdi, qword ptr [rip + 0xcd945]; mov rbx, rax; mov rdx, rcx; mov rax, rdi; call rsi; 
0x0000000000428854: mov esi, dword ptr [rdx + 8]; mov rdi, qword ptr [rsi]; mov r8, qword ptr [rdx + 0x10]; mov qword ptr [rsp + 0x20], r8; mov rdx, rsi; call rdi; 
0x000000000045f014: mov esi, dword ptr [rdx + rcx]; mov rcx, qword ptr [rdx + rcx + 8]; mov rax, rsi; mov rbx, rcx; pop rbp; ret; 
0x000000000044f335: mov esi, dword ptr [rdx]; call rsi; 
0x000000000044f335: mov esi, dword ptr [rdx]; call rsi; add rsp, 0x20; pop rbp; ret; 
0x000000000040d284: mov esi, dword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, rcx; mov rbx, rdi; call rsi; 
0x000000000040d3a0: mov esi, dword ptr [rdx]; mov rax, qword ptr [rsp + 0x28]; mov rbx, rcx; call rsi; 
0x000000000040d57b: mov esi, dword ptr [rdx]; mov rax, qword ptr [rsp + 0x30]; mov rbx, rcx; call rsi; 
0x0000000000434611: mov esi, dword ptr [rdx]; mov rax, rbx; call rsi; 
0x0000000000444b66: mov esi, dword ptr [rdx]; mov rax, rbx; lea rbx, [rsp + 0x48]; mov rcx, rdi; call rsi; 
0x000000000040413c: mov esi, dword ptr [rdx]; mov rax, rbx; mov rbx, rcx; call rsi; 
0x0000000000473a2a: mov esi, dword ptr [rdx]; mov rax, rcx; call rsi; 
0x000000000040d315: mov esi, dword ptr [rdx]; mov rax, rcx; xor ebx, ebx; call rsi; 
0x000000000042886e: mov esi, dword ptr [rdx]; mov rcx, rbx; mov rbx, rax; mov rax, qword ptr [rsp + 0x18]; call rsi; 
0x000000000047c2c3: mov esi, dword ptr [rsi + 0xf8]; mov rax, qword ptr [rsp + 0x108]; call rsi; 
0x000000000045e6a5: mov esi, dword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov eax, 0; syscall; 
0x000000000045e686: mov esi, dword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov eax, 1; syscall; 
0x000000000045eca6: mov esi, dword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov rax, 0x1c; syscall; 
0x000000000045eca6: mov esi, dword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov rax, 0x1c; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045eda6: mov esi, dword ptr [rsp + 0x10]; mov rax, 0x83; syscall; 
0x000000000045ec26: mov esi, dword ptr [rsp + 0x10]; mov rax, 0xb; syscall; 
0x000000000042c038: mov esi, dword ptr [rsp + 0x10]; mov rax, rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000045e846: mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0x1b; syscall; 
0x000000000045ee46: mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xcc; syscall; 
0x000000000045e7e5: mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xde; syscall; 
0x000000000045e7c6: mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xea; syscall; 
0x000000000045e5b9: mov esi, dword ptr [rsp + 0x18]; mov r15, qword ptr [rsp + 0x20]; mov rbp, qword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x0000000000453ff5: mov esi, dword ptr [rsp + 0x1c8]; nop dword ptr [rax]; call 0x51dc0; add rsp, 0x198; pop rbp; ret; 
0x000000000045d2c4: mov esi, dword ptr [rsp + 0x28]; mov r15, qword ptr [rsp + 0x20]; add rsp, 0x98; pop rbp; ret; 
0x00000000004130f9: mov esi, dword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov qword ptr [rdx + rsi*8 + 0x28], rdi; add rsp, 0x30; pop rbp; ret; 
0x000000000045cda7: mov esi, dword ptr [rsp + 0x28]; mov rsp, rsi; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x000000000044d24e: mov esi, dword ptr [rsp + 0x30]; mov r8d, eax; mov rax, rdx; add rsp, 0x58; pop rbp; ret; 
0x00000000004760db: mov esi, dword ptr [rsp + 0x48]; mov byte ptr [rsi + 0xe], dl; add rsp, 0x38; pop rbp; ret; 
0x000000000045246f: mov esi, dword ptr [rsp + 0x50]; lea rdx, [rsp + 0x50]; mov eax, r8d; call rsi; 
0x0000000000475cc2: mov esi, dword ptr [rsp + 0x60]; mov byte ptr [rsi + 0xe], dl; add rsp, 0x50; pop rbp; ret; 
0x000000000047c2be: mov esi, dword ptr [rsp + 0x78]; mov rsi, qword ptr [rsi + 0xf8]; mov rax, qword ptr [rsp + 0x108]; call rsi; 
0x000000000045e804: mov esi, dword ptr [rsp + 0xc]; mov rdx, qword ptr [rsp + 0x10]; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x0000000000476f84: mov esi, dword ptr [rsp + 0xe8]; mov byte ptr [rsi + 0xe], dl; add rsp, 0xd8; pop rbp; ret; 
0x000000000045e6c5: mov esi, dword ptr [rsp + 8]; mov eax, 0x125; syscall; 
0x000000000045e6c5: mov esi, dword ptr [rsp + 8]; mov eax, 0x125; syscall; mov dword ptr [rsp + 0x18], eax; ret; 
0x000000000045e789: mov esi, dword ptr [rsp + 8]; mov eax, 0x3e; syscall; 
0x000000000045e789: mov esi, dword ptr [rsp + 8]; mov eax, 0x3e; syscall; ret; 
0x000000000045e626: mov esi, dword ptr [rsp + 8]; mov edx, dword ptr [rsp + 0x10]; mov r10d, dword ptr [rsp + 0x14]; mov eax, 0x101; syscall; 
0x000000000045e751: mov esi, eax; mov edi, r12d; mov edx, dword ptr [rsp + 8]; mov eax, 0xea; syscall; 
0x000000000045e751: mov esi, eax; mov edi, r12d; mov edx, dword ptr [rsp + 8]; mov eax, 0xea; syscall; ret; 
0x00000000004540a6: mov esi, eax; mov r8d, r9d; call 0x54120; add rsp, 0x20; pop rbp; ret; 
0x0000000000477983: mov esi, eax; mov rax, qword ptr [rsp + 0x58]; mov rcx, rdx; call rsi; 
0x00000000004411e3: mov esi, eax; mov rax, rsi; call 0x41340; sub rsp, -0x80; pop rbp; ret; 
0x0000000000450ba8: mov esi, ebx; call 0x4f520; add rsp, 0x40; pop rbp; ret; 
0x0000000000468a31: mov esi, ebx; xor eax, eax; mov rbx, rcx; add rsp, 0x88; pop rbp; ret; 
0x00000000004115ca: mov esi, ecx; add rsp, 0x10; pop rbp; ret; 
0x000000000045ed85: mov esi, ecx; call 0x5ce00; call r12; mov edi, 0x6f; mov eax, 0x3c; syscall; 
0x00000000004526e5: mov esi, ecx; mov r8, rdi; add rsp, 0x20; pop rbp; ret; 
0x000000000044d261: mov esi, ecx; mov r8d, 0xffffffff; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000044e9b0: mov esi, ecx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x00000000004036c7: mov esi, ecx; mov rdi, rbx; syscall; 
0x0000000000463529: mov esi, ecx; or eax, dword ptr [rax]; add rsp, 0x30; pop rbp; ret; 
0x0000000000450e40: mov esi, edi; call 0x4f520; add rsp, 0x28; pop rbp; ret; 
0x000000000041d180: mov esi, edi; call 0x4f520; add rsp, 0x30; pop rbp; ret; 
0x0000000000450dd0: mov esi, edi; call 0x4f520; add rsp, 0x40; pop rbp; ret; 
0x0000000000419cea: mov esi, edi; call 0x4f520; add rsp, 0x50; pop rbp; ret; 
0x0000000000450d04: mov esi, edi; call 0x4f520; add rsp, 0x58; pop rbp; ret; 
0x000000000047cda9: mov esi, edi; call 0x77a00; add rsp, 0x58; pop rbp; ret; 
0x000000000045eded: mov esi, edi; mov rdi, 0x1002; mov rax, 0x9e; syscall; 
0x000000000044a7fd: mov esi, edi; mov rdi, rbx; add rsp, 0x18; pop rbp; ret; 
0x0000000000419d39: mov esi, edi; nop dword ptr [rax + rax]; call 0x4f520; add rsp, 0x50; pop rbp; ret; 
0x000000000045107d: mov esi, edi; nop; call 0x4f520; add rsp, 0x30; pop rbp; ret; 
0x000000000045a32a: mov esi, edi; ret; 
0x00000000004657c3: mov esi, edx; call 0x65860; add rsp, 0x120; pop rbp; ret; 
0x000000000046579f: mov esi, edx; call 0x65c80; add rsp, 0x120; pop rbp; ret; 
0x0000000000465e4c: mov esi, edx; mov r8, r12; call 0x66820; add rsp, 0x58; pop rbp; ret; 
0x000000000041f0ee: mov esi, edx; mov rax, rsi; mov rbx, rdi; add rsp, 0x40; pop rbp; ret; 
0x000000000045b15c: mov esi, edx; mov rsp, qword ptr [rdx + 0x38]; mov rdx, rdi; mov rdi, qword ptr [rdi]; call rdi; 
0x0000000000465619: mov esi, edx; nop dword ptr [rax + rax]; call 0x65860; add rsp, 0x120; pop rbp; ret; 
0x000000000046539a: mov esi, edx; nop dword ptr [rax]; call 0x66c60; add rsp, 0x120; pop rbp; ret; 
0x00000000004540a5: mov esi, r8d; mov r8d, r9d; call 0x54120; add rsp, 0x20; pop rbp; ret; 
0x0000000000403548: mov esp, 0x39ce74d2; fidiv dword ptr [rbx - 0x36]; mov qword ptr [r8], rdx; ret; 
0x0000000000408ca8: mov esp, 0x48000957; mov eax, esi; lea rdx, [rip + 0x957b2]; call rcx; 
0x0000000000458280: mov esp, 0x48000f83; mov eax, dword ptr [rip + 0xcac65]; call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x0000000000403516: mov esp, 0x490875d2; mov dword ptr [rax], 0xffffffff; ret; 
0x000000000040356a: mov esp, 0x49ac74d2; mov dword ptr [rax], edx; ret; 
0x000000000040637e: mov esp, 0x8024; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000042e10c: mov esp, 0x90000eb0; mov dword ptr [rip + 0xeb0b5], ecx; pop rbp; ret; 
0x0000000000438f0c: mov esp, 0x9824; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040af0a: mov esp, 0xb824; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000047980e: mov esp, 0xb824; add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx - 0x77]; ret 0x8b48; 
0x00000000004068e5: mov esp, 0xbb00092b; sbb eax, 0x48000000; add esp, 0x30; pop rbp; ret; 
0x00000000004115d4: mov esp, 0xbb0f48d1; ror dword ptr [rax - 0x73], 1; xor al, 0xd0; add rsp, 0x10; pop rbp; ret; 
0x0000000000402e1f: mov esp, 0xc03148d8; mov cl, byte ptr [rsi + rbx]; cmp cl, byte ptr [rdi + rbx]; seta al; lea rax, [rax*2 - 1]; ret; 
0x00000000004172c0: mov esp, 0xc7480010; ret; 
0x000000000045b020: mov esp, 0xe8000035; mov bh, 0x1d; add byte ptr [rax], al; ret; 
0x00000000004035c8: mov esp, 0xf72948d2; add rdx, rdi; mov qword ptr [r8], rdx; vzeroupper; ret; 
0x00000000004357af: mov esp, 0xff000000; ret 0x9788; 
0x000000000045b243: mov esp, dword ptr [rbx + 0x38]; mov rbp, qword ptr [rbx + 0x68]; call 0x5f580; call 0x5cde0; ret; 
0x000000000045b15f: mov esp, dword ptr [rdx + 0x38]; mov rdx, rdi; mov rdi, qword ptr [rdi]; call rdi; 
0x000000000045a8de: mov esp, dword ptr [rsp + 0x60]; mov r13, qword ptr [rsp + 0x68]; add rsp, 0x70; pop rbp; ret; 
0x000000000045ec87: mov esp, dword ptr [rsp]; add rsp, 0x10; pop rbp; ret; 
0x000000000045ebf9: mov esp, dword ptr [rsp]; mov qword ptr [rsp + 0x40], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000045e748: mov esp, eax; mov eax, 0xba; syscall; 
0x000000000045e9a8: mov esp, ebx; mov dword ptr [rsp + 0x38], eax; add rsp, 0x10; pop rbp; ret; 
0x000000000045e9e1: mov esp, ebx; pop rbp; ret; 
0x000000000045cd80: mov esp, esi; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x000000000046fd4e: mov fs, word ptr [rsp + rax]; add rsp, 0x20; pop rbp; ret; 
0x0000000000442439: mov gs, word ptr [rdi + rdi*8 - 1]; jmp qword ptr [rsi - 0x70]; 
0x000000000045b23a: mov qword ptr [0xfffffffffffffff8], rbx; mov rsp, qword ptr [rbx + 0x38]; mov rbp, qword ptr [rbx + 0x68]; call 0x5f580; call 0x5cde0; ret; 
0x000000000045cdc6: mov qword ptr [0xfffffffffffffff8], rbx; ret; 
0x000000000045a321: mov qword ptr [0xfffffffffffffff8], rdi; mov r14, rdi; ret; 
0x000000000045cd77: mov qword ptr [0xfffffffffffffff8], rdi; mov rsp, rsi; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x000000000045b153: mov qword ptr [0xfffffffffffffff8], rdx; mov r14, rdx; mov rsp, qword ptr [rdx + 0x38]; mov rdx, rdi; mov rdi, qword ptr [rdi]; call rdi; 
0x0000000000443334: mov qword ptr [r11 + 0x10], rax; mov qword ptr [rsi + 0x48], rcx; mov qword ptr [rcx + 0x40], 0; add rsp, 0x20; pop rbp; ret; 
0x000000000047094f: mov qword ptr [r11 + 0x18], rax; mov qword ptr [rbx + rdx*8], r8; mov qword ptr [rbx + rdx*8 + 8], r9; add rsp, 0x10; pop rbp; ret; 
0x00000000004156be: mov qword ptr [r11 + 8], rax; mov qword ptr [rcx + 0x38], rsi; mov byte ptr [rcx + 0x40], 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000472f5f: mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xaf86e], rcx; pop rbp; ret; 
0x0000000000460922: mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xc1e5b], rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000042acb7: mov qword ptr [r11 + 8], rbx; mov qword ptr [rax + rdx*8], rcx; add rsp, 0x30; pop rbp; ret; 
0x000000000042fc3e: mov qword ptr [r11 + 8], rbx; mov qword ptr [rdx + 0x28], rcx; call 0x2f800; add rsp, 0x28; pop rbp; ret; 
0x000000000040e48c: mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + 0x10], rbx; add rsp, 0x30; pop rbp; ret; 
0x00000000004491cc: mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + 0x18], rbx; pop rbp; ret; 
0x000000000044f1ee: mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + r8*8], rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000044efec: mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + rdi*8], rsi; mov rax, rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000477dcb: mov qword ptr [r11 + 8], rcx; mov qword ptr [rax], r8; sub rsp, -0x80; pop rbp; ret; 
0x0000000000409eb0: mov qword ptr [r11 + 8], rcx; mov qword ptr [rax], rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000478cc1: mov qword ptr [r11 + 8], rcx; mov qword ptr [rax], rdx; add rsp, 0xa8; pop rbp; ret; 
0x00000000004753c4: mov qword ptr [r11 + 8], rcx; mov qword ptr [rax], rsi; add rsp, 0x38; pop rbp; ret; 
0x000000000047459c: mov qword ptr [r11 + 8], rcx; mov qword ptr [rbx], rax; lea rax, [rip + 0xe976]; add rsp, 0x20; pop rbp; ret; 
0x0000000000428ceb: mov qword ptr [r11 + 8], rcx; mov qword ptr [rdi], rsi; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000042b523: mov qword ptr [r11 + 8], rcx; mov qword ptr [rdx + 0x20], rax; mov qword ptr [rdx + 0x18], 0; add rsp, 0x18; pop rbp; ret; 
0x000000000047b1a2: mov qword ptr [r11 + 8], rcx; mov qword ptr [rdx], rax; add rsp, 0x1d0; pop rbp; ret; 
0x000000000047970b: mov qword ptr [r11 + 8], rcx; mov qword ptr [rdx], rax; add rsp, 0x90; pop rbp; ret; 
0x00000000004729bd: mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xac200], rax; pop rbp; ret; 
0x00000000004751cf: mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xad3d6], rax; add rsp, 0x18; pop rbp; nop; ret; 
0x0000000000474f55: mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xad8b0], rax; pop rbp; ret; 
0x0000000000470111: mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xb24ac], rax; add rsp, 0x48; pop rbp; ret; 
0x0000000000462712: mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xbfeb3], rax; add rsp, 0x10; pop rbp; ret; 
0x0000000000458ee2: mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xc9733], rax; pop rbp; ret; 
0x000000000044154f: mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xe1116], rbx; call 0x2dba0; add rsp, 0x10; pop rbp; ret; 
0x000000000042dc2b: mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xf4cfa], rax; add rsp, 0x40; pop rbp; ret; 
0x00000000004758b3: mov qword ptr [r11 + 8], rcx; mov qword ptr [rsi], rax; add rsp, 0x60; pop rbp; nop; ret; 
0x00000000004755f0: mov qword ptr [r11 + 8], rcx; mov qword ptr [rsi], rax; add rsp, 0x60; pop rbp; ret; 
0x000000000047718c: mov qword ptr [r11 + 8], rcx; mov qword ptr [rsi], rax; add rsp, 0xd8; pop rbp; ret; 
0x000000000040df77: mov qword ptr [r11 + 8], rcx; movups xmmword ptr [rax], xmm15; add rsp, 0x60; pop rbp; ret; 
0x0000000000443886: mov qword ptr [r11 + 8], rdx; mov qword ptr [rax + 8], rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000409e10: mov qword ptr [r11 + 8], rdx; mov qword ptr [rax], rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000434e49: mov qword ptr [r11 + 8], rdx; mov qword ptr [rcx + 0x140], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000040cd3b: mov qword ptr [r11 + 8], rdx; mov qword ptr [rcx], r10; mov rax, r10; add rsp, 0x50; pop rbp; ret; 
0x000000000046221c: mov qword ptr [r11 + 8], rdx; movups xmmword ptr [rsi], xmm15; mov ecx, 1; add rsp, 0x38; pop rbp; ret; 
0x0000000000403400: mov qword ptr [r11], -1; ret; 
0x000000000042dd55: mov qword ptr [r11], rax; lea rax, [rip + 0x123d81]; mov qword ptr [rip + 0xf4bca], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000041deca: mov qword ptr [r11], rax; lea rax, [rip + 0x803fc]; mov qword ptr [rcx + 0x98], rax; add rsp, 0x18; pop rbp; ret; 
0x0000000000461fce: mov qword ptr [r11], rax; mov qword ptr [rip + 0xc0874], 0; pop rbp; ret; 
0x00000000004729b3: mov qword ptr [r11], rax; mov rcx, qword ptr [rip + 0xac20b]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xac200], rax; pop rbp; ret; 
0x0000000000474f4b: mov qword ptr [r11], rax; mov rcx, qword ptr [rip + 0xad8bb]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xad8b0], rax; pop rbp; ret; 
0x0000000000458ed8: mov qword ptr [r11], rax; mov rcx, qword ptr [rip + 0xc973e]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xc9733], rax; pop rbp; ret; 
0x00000000004491c5: mov qword ptr [r11], rbx; mov rcx, qword ptr [rax + 0x18]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + 0x18], rbx; pop rbp; ret; 
0x0000000000442850: mov qword ptr [r11], rcx; lea rcx, [rip + 0x544b0]; mov qword ptr [rdx + rax], rcx; add rsp, 0x58; pop rbp; ret; 
0x0000000000406c15: mov qword ptr [r11], rcx; lea rcx, [rip + 0x91242]; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x000000000040696f: mov qword ptr [r11], rcx; lea rcx, [rip + 0x9216b]; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000406ba5: mov qword ptr [r11], rcx; lea rcx, [rip + 0x93028]; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000461030: mov qword ptr [r11], rcx; mov qword ptr [rax + 0x10], 0; mov qword ptr [rax + 0x18], 0; add rsp, 0x10; pop rbp; ret; 
0x0000000000430628: mov qword ptr [r11], rcx; mov qword ptr [rax + 0x28], 0; pop rbp; ret; 
0x000000000043c56d: mov qword ptr [r11], rcx; mov qword ptr [rax], rcx; add rsp, 0x210; pop rbp; ret; 
0x0000000000472f55: mov qword ptr [r11], rcx; mov rax, qword ptr [rip + 0xaf879]; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xaf86e], rcx; pop rbp; ret; 
0x0000000000403470: mov qword ptr [r11], rdi; ret; 
0x0000000000464045: mov qword ptr [r11], rsi; mov qword ptr [rdx + 0x40], 0; add rsp, 0x28; pop rbp; ret; 
0x000000000040a609: mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x10; pop rbp; ret; 
0x00000000004171ef: mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x1b8; pop rbp; nop; ret; 
0x0000000000435d6f: mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x20; pop rbp; ret; 
0x000000000043c2c4: mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x28; pop rbp; ret; 
0x00000000004508a5: mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x38; pop rbp; ret; 
0x0000000000434f2f: mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x40; pop rbp; ret; 
0x000000000040bbbc: mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x58; pop rbp; ret; 
0x0000000000423410: mov qword ptr [r14 + 0x10], -0x522; add rsp, 0x60; pop rbp; ret; 
0x00000000004500ef: mov qword ptr [r14 + 0x10], -0x522; add rsp, 8; pop rbp; ret; 
0x0000000000433c7a: mov qword ptr [r14 + 0x10], -0x522; lea rax, [rip + 0x6a797]; call 0x5b0a0; add rsp, 0x10; pop rbp; ret; 
0x00000000004254b1: mov qword ptr [r14 + 0x10], -0x522; mov eax, 1; add rsp, 0x40; pop rbp; ret; 
0x000000000043195b: mov qword ptr [r14 + 0x10], -0x522; mov eax, 1; ret; 
0x00000000004252b5: mov qword ptr [r14 + 0x10], -0x522; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; pop rbp; ret; 
0x0000000000436289: mov qword ptr [r14 + 0x10], -0x522; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x50; pop rbp; ret; 
0x0000000000433dc2: mov qword ptr [r14 + 0x10], -0x522; mov rax, r9; add rsp, 0x58; pop rbp; ret; 
0x000000000043189a: mov qword ptr [r14 + 0x10], -0x522; xor eax, eax; ret; 
0x000000000045a2fc: mov qword ptr [r14 + 0x68], rbp; mov r9, qword ptr [r14 + 0x50]; test r9, r9; je 0x5a30e; call 0x5cde0; ret; 
0x000000000040351a: mov qword ptr [r8], -1; ret; 
0x0000000000403528: mov qword ptr [r8], rdi; ret; 
0x0000000000403550: mov qword ptr [r8], rdx; ret; 
0x00000000004035d0: mov qword ptr [r8], rdx; vzeroupper; ret; 
0x0000000000461033: mov qword ptr [rax + 0x10], 0; mov qword ptr [rax + 0x18], 0; add rsp, 0x10; pop rbp; ret; 
0x000000000040e490: mov qword ptr [rax + 0x10], rbx; add rsp, 0x30; pop rbp; ret; 
0x000000000043c8c9: mov qword ptr [rax + 0x10], rcx; mov rcx, rax; mov rax, rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000040cf6a: mov qword ptr [rax + 0x10], rdx; mov rdx, rcx; mov rax, rdx; add rsp, 0x38; pop rbp; ret; 
0x000000000042c645: mov qword ptr [rax + 0x1268], rcx; add rsp, 8; pop rbp; ret; 
0x0000000000424af6: mov qword ptr [rax + 0x16860], rdx; add rsp, 0x48; pop rbp; ret; 
0x000000000046103b: mov qword ptr [rax + 0x18], 0; add rsp, 0x10; pop rbp; ret; 
0x00000000004097fc: mov qword ptr [rax + 0x18], r11; xor eax, eax; xor ebx, ebx; add rsp, 0xa0; pop rbp; ret; 
0x00000000004491d0: mov qword ptr [rax + 0x18], rbx; pop rbp; ret; 
0x0000000000415872: mov qword ptr [rax + 0x18], rbx; ret; 
0x00000000004684cb: mov qword ptr [rax + 0x18], rcx; lea rcx, [rbx + 1]; mov qword ptr [rax + 0x20], rcx; add rsp, 0x18; pop rbp; ret; 
0x00000000004445da: mov qword ptr [rax + 0x18], rcx; mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rax + 0x80], rcx; add rsp, 0x68; pop rbp; ret; 
0x0000000000419de4: mov qword ptr [rax + 0x190], 0; add rsp, 0x58; pop rbp; ret; 
0x0000000000458147: mov qword ptr [rax + 0x190], 0; ret; 
0x0000000000468357: mov qword ptr [rax + 0x20], rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000404c30: mov qword ptr [rax + 0x20], rcx; mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rax + 8], rcx; add rsp, 0x30; pop rbp; ret; 
0x000000000043062b: mov qword ptr [rax + 0x28], 0; pop rbp; ret; 
0x00000000004572d7: mov qword ptr [rax + 0x28], rcx; mov byte ptr [rax], 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000429e1c: mov qword ptr [rax + 0x28], rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004110ad: mov qword ptr [rax + 0x30], rbx; mov rax, r8; add rsp, 0x28; pop rbp; ret; 
0x0000000000415867: mov qword ptr [rax + 0x30], rcx; mov rcx, qword ptr [rax + 0x18]; mov qword ptr [rbx], rcx; mov qword ptr [rax + 0x18], rbx; ret; 
0x000000000041103f: mov qword ptr [rax + 0x30], rdx; mov rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000046a1a2: mov qword ptr [rax + 0x30], rdx; xor eax, eax; add rsp, 0xc8; pop rbp; ret; 
0x000000000043e277: mov qword ptr [rax + 0x38], 0; mov dword ptr [rax + 4], 0; add rsp, 0x38; pop rbp; ret; 
0x000000000045b18f: mov qword ptr [rax + 0x38], 0; mov qword ptr [rax + 0x68], 0; pop rbp; ret; 
0x0000000000463f2e: mov qword ptr [rax + 0x40], 0; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000413729: mov qword ptr [rax + 0x40], rbx; add rsp, 0x48; pop rbp; ret; 
0x0000000000410f8d: mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000042e2ec: mov qword ptr [rax + 0x48], rcx; add rsp, 8; pop rbp; ret; 
0x000000000042c5ea: mov qword ptr [rax + 0x48], rdx; ret; 
0x000000000040e2ae: mov qword ptr [rax + 0x58], r10; add rsp, 0x60; pop rbp; ret; 
0x000000000045b197: mov qword ptr [rax + 0x68], 0; pop rbp; ret; 
0x0000000000447ed2: mov qword ptr [rax + 0x68], rcx; ret; 
0x00000000004445e3: mov qword ptr [rax + 0x80], rcx; add rsp, 0x68; pop rbp; ret; 
0x000000000047cbfd: mov qword ptr [rax + 8], rbx; mov byte ptr [rbx + rdx - 1], 0xa; add rsp, 0x60; pop rbp; ret; 
0x0000000000424e82: mov qword ptr [rax + 8], rbx; mov qword ptr [rax], rbx; mov qword ptr [rbx + 0x10], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000040ca37: mov qword ptr [rax + 8], rbx; mov rax, rdx; add rsp, 0x30; pop rbp; ret; 
0x000000000044388a: mov qword ptr [rax + 8], rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000404c39: mov qword ptr [rax + 8], rcx; add rsp, 0x30; pop rbp; ret; 
0x0000000000424d0e: mov qword ptr [rax + 8], rcx; movups xmmword ptr [rbx], xmm15; mov qword ptr [rbx + 0x10], 0; add rsp, 0x28; pop rbp; ret; 
0x000000000042c60e: mov qword ptr [rax + 8], rcx; ret; 
0x00000000004507bb: mov qword ptr [rax + 8], rdx; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000044f1f2: mov qword ptr [rax + r8*8], rsi; add rsp, 0x18; pop rbp; ret; 
0x0000000000429510: mov qword ptr [rax + rbx*8], rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000044003e: mov qword ptr [rax + rcx*8 + 0x198], rbx; xchg dword ptr [rax + 0x194], edx; add rsp, 0x20; pop rbp; ret; 
0x0000000000422fa3: mov qword ptr [rax + rcx*8], rbx; add rsp, 0x38; pop rbp; ret; 
0x000000000044eff0: mov qword ptr [rax + rdi*8], rsi; mov rax, rdi; add rsp, 0x18; pop rbp; ret; 
0x000000000042acbb: mov qword ptr [rax + rdx*8], rcx; add rsp, 0x30; pop rbp; ret; 
0x0000000000431174: mov qword ptr [rax], 0; add rsp, 0x30; pop rbp; ret; 
0x0000000000431304: mov qword ptr [rax], 0; add rsp, 0x40; pop rbp; ret; 
0x0000000000477dcf: mov qword ptr [rax], r8; sub rsp, -0x80; pop rbp; ret; 
0x0000000000424e86: mov qword ptr [rax], rbx; mov qword ptr [rbx + 0x10], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000042c604: mov qword ptr [rax], rcx; add rcx, 0x1000; mov qword ptr [rax + 8], rcx; ret; 
0x0000000000409e14: mov qword ptr [rax], rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000043c570: mov qword ptr [rax], rcx; add rsp, 0x210; pop rbp; ret; 
0x0000000000406979: mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x000000000042cb73: mov qword ptr [rax], rcx; ret; 
0x0000000000409eb4: mov qword ptr [rax], rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000478cc5: mov qword ptr [rax], rdx; add rsp, 0xa8; pop rbp; ret; 
0x0000000000463523: mov qword ptr [rax], rdx; mov qword ptr [rip + 0xbf18b], rcx; add rsp, 0x30; pop rbp; ret; 
0x0000000000409d60: mov qword ptr [rax], rdx; mov rcx, rax; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x00000000004753c8: mov qword ptr [rax], rsi; add rsp, 0x38; pop rbp; ret; 
0x0000000000424d16: mov qword ptr [rbx + 0x10], 0; add rsp, 0x28; pop rbp; ret; 
0x0000000000424e89: mov qword ptr [rbx + 0x10], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000041b05f: mov qword ptr [rbx + 0x18], 0; add rsp, 0x50; pop rbp; ret; 
0x000000000045a28a: mov qword ptr [rbx + 0x18], 0; mov qword ptr [rbx + 0x30], 0; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x000000000045a282: mov qword ptr [rbx + 0x20], 0; mov qword ptr [rbx + 0x18], 0; mov qword ptr [rbx + 0x30], 0; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x000000000045a292: mov qword ptr [rbx + 0x30], 0; mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x00000000004776a6: mov qword ptr [rbx + 0x49], 0; mov rax, rbx; add rsp, 0x18; pop rbp; ret; 
0x00000000004472b5: mov qword ptr [rbx + rcx + 0x470], rdx; add rsp, 0x38; pop rbp; ret; 
0x0000000000440621: mov qword ptr [rbx + rcx*8], rdx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000470957: mov qword ptr [rbx + rdx*8 + 8], r9; add rsp, 0x10; pop rbp; ret; 
0x0000000000470953: mov qword ptr [rbx + rdx*8], r8; mov qword ptr [rbx + rdx*8 + 8], r9; add rsp, 0x10; pop rbp; ret; 
0x00000000004745a0: mov qword ptr [rbx], rax; lea rax, [rip + 0xe976]; add rsp, 0x20; pop rbp; ret; 
0x000000000041586f: mov qword ptr [rbx], rcx; mov qword ptr [rax + 0x18], rbx; ret; 
0x000000000043c9ee: mov qword ptr [rcx + 0x10], 0; add rsp, 0x18; pop rbp; ret; 
0x00000000004037f4: mov qword ptr [rcx + 0x120], rsi; add rsp, 0x18; pop rbp; ret; 
0x0000000000434e4d: mov qword ptr [rcx + 0x140], rax; add rsp, 0x40; pop rbp; ret; 
0x00000000004425db: mov qword ptr [rcx + 0x148], 0; add rsp, 0x20; pop rbp; ret; 
0x00000000004225b2: mov qword ptr [rcx + 0x18], 0; add rsp, 8; pop rbp; nop; ret; 
0x00000000004517b8: mov qword ptr [rcx + 0x18], rdx; add rsp, 0x60; pop rbp; ret; 
0x0000000000467aa1: mov qword ptr [rcx + 0x20], rax; add rsp, 0x10; pop rbp; ret; 
0x00000000004305f3: mov qword ptr [rcx + 0x28], rax; mov rbx, qword ptr [rsp + 0x18]; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000042fb7e: mov qword ptr [rcx + 0x28], rbx; call 0x2f800; mov rdx, qword ptr [rsp + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x00000000004156c2: mov qword ptr [rcx + 0x38], rsi; mov byte ptr [rcx + 0x40], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000044333c: mov qword ptr [rcx + 0x40], 0; add rsp, 0x20; pop rbp; ret; 
0x000000000041e1b8: mov qword ptr [rcx + 0x70], rbx; add rsp, 0x60; pop rbp; ret; 
0x000000000041ded4: mov qword ptr [rcx + 0x98], rax; add rsp, 0x18; pop rbp; ret; 
0x0000000000406e38: mov qword ptr [rcx + 0xa0], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000042cb6b: mov qword ptr [rcx + 0xa0], rdx; nop; mov qword ptr [rax], rcx; ret; 
0x00000000004440b9: mov qword ptr [rcx + 0xa8], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000435915: mov qword ptr [rcx + 0xc0], rax; add rsp, 0x38; pop rbp; ret; 
0x00000000004220d4: mov qword ptr [rcx + 8], rax; pop rbp; ret; 
0x000000000043be87: mov qword ptr [rcx + 8], rbx; add rsp, 0x10; pop rbp; ret; 
0x000000000042ae3c: mov qword ptr [rcx + rax*8], 0; add rsp, 0x190; pop rbp; ret; 
0x0000000000447184: mov qword ptr [rcx + rdx + 0x470], rbx; add rsp, 0x30; pop rbp; ret; 
0x0000000000430a2e: mov qword ptr [rcx], 0; add rsp, 0xa0; pop rbp; ret; 
0x000000000040cd3f: mov qword ptr [rcx], r10; mov rax, r10; add rsp, 0x50; pop rbp; ret; 
0x000000000044fbea: mov qword ptr [rcx], rax; add rsp, 0x18; pop rbp; ret; 
0x0000000000418f16: mov qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000404722: mov qword ptr [rcx], rax; add rsp, 0x30; pop rbp; ret; 
0x000000000043be84: mov qword ptr [rcx], rax; mov qword ptr [rcx + 8], rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000473679: mov qword ptr [rcx], rax; xor eax, eax; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000045dbde: mov qword ptr [rdi + rbx - 8], rax; ret; 
0x000000000045ddfb: mov qword ptr [rdi + rbx - 8], rcx; ret; 
0x000000000042016c: mov qword ptr [rdi + rdx + 0x30], rsi; mov qword ptr [rdi + rdx + 0x38], rax; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x40; pop rbp; ret; 
0x0000000000420171: mov qword ptr [rdi + rdx + 0x38], rax; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x40; pop rbp; ret; 
0x000000000045dbdb: mov qword ptr [rdi], rax; mov qword ptr [rdi + rbx - 8], rax; ret; 
0x000000000045ddf8: mov qword ptr [rdi], rax; mov qword ptr [rdi + rbx - 8], rcx; ret; 
0x000000000045dbd7: mov qword ptr [rdi], rax; ret; 
0x0000000000428cef: mov qword ptr [rdi], rsi; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x00000000004290ef: mov qword ptr [rdx + 0x10], 0; add rsp, 0x40; pop rbp; ret; 
0x000000000042b52b: mov qword ptr [rdx + 0x18], 0; add rsp, 0x18; pop rbp; ret; 
0x00000000004448fc: mov qword ptr [rdx + 0x18], rcx; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x0000000000406743: mov qword ptr [rdx + 0x1f68], 0; add rsp, 0x88; pop rbp; ret; 
0x00000000004674fb: mov qword ptr [rdx + 0x20], r8; add rsp, 0x38; pop rbp; ret; 
0x000000000046779b: mov qword ptr [rdx + 0x20], r8; add rsp, 0x40; pop rbp; ret; 
0x0000000000467ef2: mov qword ptr [rdx + 0x20], r9; add rsp, 0x88; pop rbp; ret; 
0x000000000042b527: mov qword ptr [rdx + 0x20], rax; mov qword ptr [rdx + 0x18], 0; add rsp, 0x18; pop rbp; ret; 
0x000000000042fc42: mov qword ptr [rdx + 0x28], rcx; call 0x2f800; add rsp, 0x28; pop rbp; ret; 
0x000000000043e11d: mov qword ptr [rdx + 0x38], rax; mov dword ptr [rdx + 4], 1; add rsp, 0x28; pop rbp; ret; 
0x0000000000464048: mov qword ptr [rdx + 0x40], 0; add rsp, 0x28; pop rbp; ret; 
0x00000000004640ce: mov qword ptr [rdx + 0x40], 0; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000479a7f: mov qword ptr [rdx + 0x48], rax; mov byte ptr [rdx + 0x50], cl; add rsp, 0x90; pop rbp; ret; 
0x0000000000423c91: mov qword ptr [rdx + 0xdc8], rbx; add rsp, 0x20; pop rbp; ret; 
0x0000000000432aad: mov qword ptr [rdx + 0xe8], rcx; add rsp, 0x28; pop rbp; ret; 
0x00000000004045c5: mov qword ptr [rdx + 8], rbx; add rsp, 8; pop rbp; ret; 
0x0000000000477d4c: mov qword ptr [rdx + 8], rbx; mov byte ptr [rbx + rax - 1], 0x3f; sub rsp, -0x80; pop rbp; ret; 
0x000000000044285a: mov qword ptr [rdx + rax], rcx; add rsp, 0x58; pop rbp; ret; 
0x0000000000420059: mov qword ptr [rdx + rbx + 0x28], rcx; inc qword ptr [rax + 0x140]; add rsp, 0x18; pop rbp; ret; 
0x0000000000413102: mov qword ptr [rdx + rsi*8 + 0x28], rdi; add rsp, 0x30; pop rbp; ret; 
0x0000000000453f33: mov qword ptr [rdx], rax; add rsp, 0x1b8; pop rbp; ret; 
0x000000000047b1a6: mov qword ptr [rdx], rax; add rsp, 0x1d0; pop rbp; ret; 
0x000000000040c6ad: mov qword ptr [rdx], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000423961: mov qword ptr [rdx], rax; add rsp, 0x38; pop rbp; ret; 
0x000000000047970f: mov qword ptr [rdx], rax; add rsp, 0x90; pop rbp; ret; 
0x00000000004045c2: mov qword ptr [rdx], rax; mov qword ptr [rdx + 8], rbx; add rsp, 8; pop rbp; ret; 
0x0000000000477d49: mov qword ptr [rdx], rax; mov qword ptr [rdx + 8], rbx; mov byte ptr [rbx + rax - 1], 0x3f; sub rsp, -0x80; pop rbp; ret; 
0x00000000004578d2: mov qword ptr [rdx], rcx; mov eax, 1; add rsp, 0x70; pop rbp; nop; ret; 
0x0000000000424af3: mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x16860], rdx; add rsp, 0x48; pop rbp; ret; 
0x0000000000412e97: mov qword ptr [rdx], rcx; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000418045: mov qword ptr [rip + 0x10aeb4], rax; add rsp, 0x20; pop rbp; ret; 
0x00000000004158cf: mov qword ptr [rip + 0x10d602], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000042d05b: mov qword ptr [rip + 0x1234ce], rax; add rsp, 0x70; pop rbp; ret; 
0x000000000042207e: mov qword ptr [rip + 0x127a73], rcx; nop; lea rax, [rip + 0x127a63]; xchg qword ptr [rax], rdx; ret; 
0x0000000000402d76: mov qword ptr [rip + 0x14d89f], 0x1f; ret; 
0x00000000004729c1: mov qword ptr [rip + 0xac200], rax; pop rbp; ret; 
0x00000000004751d3: mov qword ptr [rip + 0xad3d6], rax; add rsp, 0x18; pop rbp; nop; ret; 
0x0000000000474f59: mov qword ptr [rip + 0xad8b0], rax; pop rbp; ret; 
0x0000000000472f63: mov qword ptr [rip + 0xaf86e], rcx; pop rbp; ret; 
0x0000000000470115: mov qword ptr [rip + 0xb24ac], rax; add rsp, 0x48; pop rbp; ret; 
0x0000000000463526: mov qword ptr [rip + 0xbf18b], rcx; add rsp, 0x30; pop rbp; ret; 
0x0000000000462716: mov qword ptr [rip + 0xbfeb3], rax; add rsp, 0x10; pop rbp; ret; 
0x0000000000461fd1: mov qword ptr [rip + 0xc0874], 0; pop rbp; ret; 
0x0000000000460926: mov qword ptr [rip + 0xc1e5b], rbx; add rsp, 0x18; pop rbp; ret; 
0x0000000000458ee6: mov qword ptr [rip + 0xc9733], rax; pop rbp; ret; 
0x0000000000472d77: mov qword ptr [rip + 0xdd89a], rax; pop rbp; nop; ret; 
0x0000000000441553: mov qword ptr [rip + 0xe1116], rbx; call 0x2dba0; add rsp, 0x10; pop rbp; ret; 
0x000000000043fa19: mov qword ptr [rip + 0xe39e0], rax; inc dword ptr [rip + 0xe39e2]; call 0x3e3c0; pop rbp; ret; 
0x0000000000434b0e: mov qword ptr [rip + 0xe9cb7], 0; add rsp, 0x38; pop rbp; ret; 
0x0000000000434c03: mov qword ptr [rip + 0xee806], rdx; call 0x34b40; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x000000000042dd5f: mov qword ptr [rip + 0xf4bca], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000042dc2f: mov qword ptr [rip + 0xf4cfa], rax; add rsp, 0x40; pop rbp; ret; 
0x0000000000458b71: mov qword ptr [rip + 0xf7a58], rax; pop rbp; ret; 
0x0000000000415ce4: mov qword ptr [rsi + 0x10], -0x522; add rsp, 0x88; pop rbp; ret; 
0x000000000041bb9f: mov qword ptr [rsi + 0x10], rax; add rsp, 0x40; pop rbp; ret; 
0x0000000000443338: mov qword ptr [rsi + 0x48], rcx; mov qword ptr [rcx + 0x40], 0; add rsp, 0x20; pop rbp; ret; 
0x000000000041fda8: mov qword ptr [rsi + rax*8 + 0x20], rbx; inc qword ptr [rsi + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x00000000004758b7: mov qword ptr [rsi], rax; add rsp, 0x60; pop rbp; nop; ret; 
0x00000000004755f4: mov qword ptr [rsi], rax; add rsp, 0x60; pop rbp; ret; 
0x0000000000477190: mov qword ptr [rsi], rax; add rsp, 0xd8; pop rbp; ret; 
0x0000000000440843: mov qword ptr [rsp + 0x108], rsi; mov rdx, qword ptr [rsp + 0x108]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000041e35c: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000046ef05: mov qword ptr [rsp + 0x10], rbx; nop; and ecx, 0x1f; mov rax, rcx; ret; 
0x0000000000405306: mov qword ptr [rsp + 0x18], rax; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x0000000000458c0f: mov qword ptr [rsp + 0x18], rbx; call 0x60240; add rsp, 0x20; pop rbp; ret; 
0x0000000000473a1d: mov qword ptr [rsp + 0x18], rbx; mov rdx, qword ptr [rip + 0xaabf7]; mov rsi, qword ptr [rdx]; mov rax, rcx; call rsi; 
0x00000000004586a0: mov qword ptr [rsp + 0x18], rcx; mov byte ptr [rsp + 7], 1; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x000000000045a2b6: mov qword ptr [rsp + 0x18], rcx; mov qword ptr [rsp + 0x20], r12; call 0x5f2e0; add rsp, 0x28; pop rbp; ret; 
0x000000000045a2bb: mov qword ptr [rsp + 0x20], r12; call 0x5f2e0; add rsp, 0x28; pop rbp; ret; 
0x000000000042885e: mov qword ptr [rsp + 0x20], r8; mov rdx, rsi; call rdi; 
0x000000000045e8fa: mov qword ptr [rsp + 0x20], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000045960e: mov qword ptr [rsp + 0x20], rax; call 0x30ee0; add rsp, 0x10; pop rbp; ret; 
0x000000000045f27f: mov qword ptr [rsp + 0x20], rax; mov qword ptr [rsp + 0x28], rbx; add rsp, 8; pop rbp; ret; 
0x000000000040611e: mov qword ptr [rsp + 0x20], rax; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x00000000004157d6: mov qword ptr [rsp + 0x20], rbx; mov rcx, qword ptr [rdx]; mov rsi, qword ptr [rax + 0x10]; mov rax, rsi; call rcx; 
0x000000000045eb92: mov qword ptr [rsp + 0x28], 0; mov qword ptr [rsp + 0x30], rax; ret; 
0x000000000045eba1: mov qword ptr [rsp + 0x28], rax; mov qword ptr [rsp + 0x30], 0; ret; 
0x000000000041afbd: mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdx]; call rax; 
0x000000000045f284: mov qword ptr [rsp + 0x28], rbx; add rsp, 8; pop rbp; ret; 
0x0000000000418e44: mov qword ptr [rsp + 0x28], rcx; lea rax, [rsp + 0x20]; call 0x34660; add rsp, 0x30; pop rbp; ret; 
0x00000000004642ed: mov qword ptr [rsp + 0x28], rcx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000454e04: mov qword ptr [rsp + 0x28], rcx; mov rcx, qword ptr [rdx]; mov rax, qword ptr [rip + 0xcd88d]; lea rbx, [rsp + 0x10]; call rcx; 
0x000000000045cd5b: mov qword ptr [rsp + 0x28], rdi; mov rdi, rbx; mov rcx, rbx; call rax; 
0x000000000045cd99: mov qword ptr [rsp + 0x28], rdx; mov rdi, rbx; mov rcx, rbx; call rax; 
0x0000000000452dce: mov qword ptr [rsp + 0x2f0], rdx; mov byte ptr [rsp + 0x2f8], sil; mov rcx, qword ptr [rsp + 0x2c8]; xor eax, eax; lea rdx, [rsp + 0x2c8]; call rcx; 
0x000000000045eba6: mov qword ptr [rsp + 0x30], 0; ret; 
0x000000000041afb8: mov qword ptr [rsp + 0x30], r8; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdx]; call rax; 
0x000000000046cf44: mov qword ptr [rsp + 0x30], rax; mov rax, qword ptr [rsp + 0x30]; mov rbx, qword ptr [rsp + 0x38]; add rsp, 0x40; pop rbp; ret; 
0x000000000045eb9b: mov qword ptr [rsp + 0x30], rax; ret; 
0x0000000000464253: mov qword ptr [rsp + 0x30], rbx; mov rcx, qword ptr [rax + 0x18]; mov rax, rbx; nop; call rcx; 
0x00000000004331e5: mov qword ptr [rsp + 0x38], rcx; mov rax, qword ptr [rsp + 0x28]; call 0x329e0; add rsp, 0x40; pop rbp; ret; 
0x000000000045ebfc: mov qword ptr [rsp + 0x40], rax; add rsp, 0x10; pop rbp; ret; 
0x00000000004616ed: mov qword ptr [rsp + 0x40], rax; mov byte ptr [rsp + 0xf], 3; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x0000000000461d91: mov qword ptr [rsp + 0x48], rcx; mov byte ptr [rsp + 0x47], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000461dca: mov qword ptr [rsp + 0x48], rcx; mov byte ptr [rsp + 0x47], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; nop; call rax; 
0x0000000000436852: mov qword ptr [rsp + 0x48], rcx; mov rdx, qword ptr [rsp + 0x68]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x000000000047a276: mov qword ptr [rsp + 0x58], rbx; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x0000000000461d8c: mov qword ptr [rsp + 0x60], rax; mov qword ptr [rsp + 0x48], rcx; mov byte ptr [rsp + 0x47], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000473cae: mov qword ptr [rsp + 0x60], rax; mov qword ptr [rsp + 0x68], rbx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004308dd: mov qword ptr [rsp + 0x68], rax; mov rax, qword ptr [rsp + 0x50]; mov rdx, qword ptr [rax + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000472dae: mov qword ptr [rsp + 0x68], rax; mov rcx, qword ptr [rax + 0x20]; mov rcx, qword ptr [rcx + 0x18]; mov rdx, qword ptr [rax + 0x28]; mov rax, rdx; call rcx; 
0x0000000000473cb3: mov qword ptr [rsp + 0x68], rbx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000473e9a: mov qword ptr [rsp + 0x68], rcx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x000000000046472d: mov qword ptr [rsp + 0x68], rcx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x00000000004647ca: mov qword ptr [rsp + 0x68], rsi; mov rax, rbx; mov rbx, rcx; mov rcx, rsi; call rdx; 
0x000000000047b45b: mov qword ptr [rsp + 0x78], r9; mov rcx, qword ptr [r9 + 0x48]; mov rax, rbx; call rcx; 
0x00000000004740b5: mov qword ptr [rsp + 0x78], rax; mov qword ptr [rsp + 0x80], rbx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000047432c: mov qword ptr [rsp + 0x78], rax; mov qword ptr [rsp + 0x80], rcx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004740ba: mov qword ptr [rsp + 0x80], rbx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000474331: mov qword ptr [rsp + 0x80], rcx; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000434602: mov qword ptr [rsp + 8], rax; mov rbx, qword ptr [rcx + rax*8]; mov rdx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x000000000045e703: mov qword ptr [rsp + 8], rax; mov rdi, rsp; mov esi, 0; mov eax, 0x23; syscall; 
0x00000000004075c0: mov qword ptr [rsp + 8], rax; ret; 
0x00000000004413ef: mov qword ptr [rsp + 8], rcx; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x000000000043469b: mov qword ptr [rsp + 8], rdi; nop; mov rdx, rax; mov rax, rsi; call rcx; 
0x000000000040a0f5: mov qword ptr [rsp + 8], rdx; mov rcx, qword ptr [rax]; mov rdx, rax; mov rax, rbx; call rcx; 
0x000000000045ebf2: mov qword ptr [rsp], rbx; call rax; 
0x000000000045ec80: mov qword ptr [rsp], rbx; call rax; mov rsp, qword ptr [rsp]; add rsp, 0x10; pop rbp; ret; 
0x0000000000432aac: mov qword ptr cs:[rdx + 0xe8], rcx; add rsp, 0x28; pop rbp; ret; 
0x000000000045b239: mov qword ptr fs:[0xfffffffffffffff8], rbx; mov rsp, qword ptr [rbx + 0x38]; mov rbp, qword ptr [rbx + 0x68]; call 0x5f580; call 0x5cde0; ret; 
0x000000000045cdc5: mov qword ptr fs:[0xfffffffffffffff8], rbx; ret; 
0x000000000045a320: mov qword ptr fs:[0xfffffffffffffff8], rdi; mov r14, rdi; ret; 
0x000000000045cd76: mov qword ptr fs:[0xfffffffffffffff8], rdi; mov rsp, rsi; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x000000000045b152: mov qword ptr fs:[0xfffffffffffffff8], rdx; mov r14, rdx; mov rsp, qword ptr [rdx + 0x38]; mov rdx, rdi; mov rdi, qword ptr [rdi]; call rdi; 
0x000000000045e80d: mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x000000000045e80d: mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045eccd: mov r10, qword ptr [rsp + 0x18]; mov r8, qword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; 
0x000000000045e96f: mov r10, qword ptr [rsp + 0x20]; mov eax, 0xd; syscall; 
0x000000000045e96f: mov r10, qword ptr [rsp + 0x20]; mov eax, 0xd; syscall; mov dword ptr [rsp + 0x28], eax; ret; 
0x000000000047844a: mov r10, qword ptr [rsp + 0x48]; mov byte ptr [r10 + 0x4c], dl; add rsp, 0x38; pop rbp; ret; 
0x0000000000465ddd: mov r10, rdx; call 0x66820; add rsp, 0x58; pop rbp; ret; 
0x000000000046d054: mov r10, rdx; mov r11, r13; call 0x4a580; add rsp, 0x78; pop rbp; ret; 
0x0000000000465d99: mov r10, rdx; nop dword ptr [rax]; call 0x66380; add rsp, 0x58; pop rbp; ret; 
0x00000000004036c0: mov r10, rsi; mov rdx, rdi; mov rsi, rcx; mov rdi, rbx; syscall; 
0x000000000045e62e: mov r10d, dword ptr [rsp + 0x14]; mov eax, 0x101; syscall; 
0x000000000045eb6e: mov r10d, dword ptr [rsp + 0x1c]; mov r8d, dword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x24]; mov eax, 9; syscall; 
0x000000000045e92e: mov r10d, dword ptr [rsp + 0x20]; mov eax, 0xe; syscall; 
0x000000000045a8da: mov r11, r12; mov r12, qword ptr [rsp + 0x60]; mov r13, qword ptr [rsp + 0x68]; add rsp, 0x70; pop rbp; ret; 
0x000000000046d057: mov r11, r13; call 0x4a580; add rsp, 0x78; pop rbp; ret; 
0x0000000000472dfc: mov r11d, 2; call 0x4a580; add rsp, 0x58; pop rbp; ret; 
0x000000000045a8dd: mov r12, qword ptr [rsp + 0x60]; mov r13, qword ptr [rsp + 0x68]; add rsp, 0x70; pop rbp; ret; 
0x000000000045e747: mov r12d, eax; mov eax, 0xba; syscall; 
0x000000000045a8e2: mov r13, qword ptr [rsp + 0x68]; add rsp, 0x70; pop rbp; ret; 
0x000000000040480a: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x10; pop rbp; ret; 
0x000000000042a60b: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x170; pop rbp; ret; 
0x00000000004386ea: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000448a10: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x1a0; pop rbp; ret; 
0x0000000000414416: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000431032: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x28; pop rbp; nop; ret; 
0x0000000000404790: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x28; pop rbp; ret; 
0x00000000004044b6: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004053b8: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x38; pop rbp; ret; 
0x00000000004061d0: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x40; pop rbp; ret; 
0x0000000000435c0e: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x50; pop rbp; ret; 
0x0000000000444f36: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x58; pop rbp; ret; 
0x00000000004446a0: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0x68; pop rbp; ret; 
0x00000000004151fa: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 0xc8; pop rbp; ret; 
0x000000000042c66a: mov r14, qword ptr [0xfffffffffffffff8]; add rsp, 8; pop rbp; ret; 
0x000000000045f306: mov r14, qword ptr [0xfffffffffffffff8]; call 0x10d40; add rsp, 0x28; pop rbp; ret; 
0x000000000045f3b2: mov r14, qword ptr [0xfffffffffffffff8]; call 0x34300; add rsp, 8; pop rbp; ret; 
0x000000000045f3f2: mov r14, qword ptr [0xfffffffffffffff8]; call 0x34340; add rsp, 8; pop rbp; ret; 
0x000000000043afb9: mov r14, qword ptr [0xfffffffffffffff8]; call 0x3a000; add rsp, 0x30; pop rbp; ret; 
0x000000000045f4f2: mov r14, qword ptr [0xfffffffffffffff8]; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x000000000045f69b: mov r14, qword ptr [0xfffffffffffffff8]; call 0x4f320; mov dword ptr [rsp + 0x40], eax; add rsp, 0x18; pop rbp; ret; 
0x000000000045f2b2: mov r14, qword ptr [0xfffffffffffffff8]; call 0x6c40; add rsp, 8; pop rbp; ret; 
0x0000000000441c63: mov r14, qword ptr [0xfffffffffffffff8]; cmp byte ptr [rsp], 0; je 0x41c77; add rsp, 0x38; pop rbp; ret; 
0x000000000042e72a: mov r14, qword ptr [0xfffffffffffffff8]; cmp dword ptr [rsp + 0x18], 0; je 0x2e742; add rsp, 0xc0; pop rbp; ret; 
0x00000000004376aa: mov r14, qword ptr [0xfffffffffffffff8]; lea rax, [rip + 0x119127]; call 0x42600; add rsp, 0x30; pop rbp; ret; 
0x000000000042d7ca: mov r14, qword ptr [0xfffffffffffffff8]; mov eax, 0x1006; mov dword ptr [rax], 0x1006; add rsp, 0x48; pop rbp; ret; 
0x0000000000445d56: mov r14, qword ptr [0xfffffffffffffff8]; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000421371: mov r14, qword ptr [0xfffffffffffffff8]; mov eax, 1; add rsp, 0xf8; pop rbp; ret; 
0x0000000000430f2a: mov r14, qword ptr [0xfffffffffffffff8]; mov eax, 1; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x0000000000430e4a: mov r14, qword ptr [0xfffffffffffffff8]; mov eax, 2; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x000000000045f65b: mov r14, qword ptr [0xfffffffffffffff8]; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x000000000044f356: mov r14, qword ptr [0xfffffffffffffff8]; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x000000000045049d: mov r14, qword ptr [0xfffffffffffffff8]; mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x60; pop rbp; ret; 
0x00000000004635d8: mov r14, qword ptr [0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004639d3: mov r14, qword ptr [0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; pop rbp; ret; 
0x0000000000463943: mov r14, qword ptr [0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x78; pop rbp; ret; 
0x00000000004046a1: mov r14, qword ptr [0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x28]; add rsp, 0x68; pop rbp; ret; 
0x000000000040c641: mov r14, qword ptr [0xfffffffffffffff8]; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; pop rbp; ret; 
0x0000000000453e37: mov r14, qword ptr [0xfffffffffffffff8]; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; pop rbp; ret; 
0x00000000004068ca: mov r14, qword ptr [0xfffffffffffffff8]; mov rax, qword ptr [rsp + 8]; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x30; pop rbp; ret; 
0x000000000044f2f2: mov r14, qword ptr [0xfffffffffffffff8]; mov rax, qword ptr [rsp]; add rsp, 8; pop rbp; ret; 
0x0000000000470613: mov r14, qword ptr [0xfffffffffffffff8]; nop dword ptr [rax + rax]; call 0x6d8e0; add rsp, 0x20; pop rbp; ret; 
0x000000000045f536: mov r14, qword ptr [0xfffffffffffffff8]; nop; call 0x41520; add rsp, 0x10; pop rbp; ret; 
0x00000000004705b7: mov r14, qword ptr [0xfffffffffffffff8]; nop; call 0x6ba00; add rsp, 0x10; pop rbp; ret; 
0x000000000045f36e: mov r14, qword ptr [0xfffffffffffffff8]; pop rbp; ret; 
0x000000000043148f: mov r14, qword ptr [0xfffffffffffffff8]; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x000000000041412c: mov r14, qword ptr [0xfffffffffffffff8]; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x00000000004211bd: mov r14, qword ptr [0xfffffffffffffff8]; xor eax, eax; add rsp, 0xf8; pop rbp; ret; 
0x000000000045e5b8: mov r14, qword ptr [rsp + 0x18]; mov r15, qword ptr [rsp + 0x20]; mov rbp, qword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x000000000045d2c3: mov r14, qword ptr [rsp + 0x28]; mov r15, qword ptr [rsp + 0x20]; add rsp, 0x98; pop rbp; ret; 
0x0000000000404809: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x10; pop rbp; ret; 
0x000000000042a60a: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x170; pop rbp; ret; 
0x00000000004386e9: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000448a0f: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x1a0; pop rbp; ret; 
0x0000000000414415: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000431031: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; nop; ret; 
0x000000000040478f: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; ret; 
0x00000000004044b5: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004053b7: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x38; pop rbp; ret; 
0x00000000004061cf: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x40; pop rbp; ret; 
0x0000000000435c0d: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x50; pop rbp; ret; 
0x0000000000444f35: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x58; pop rbp; ret; 
0x000000000044469f: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x68; pop rbp; ret; 
0x00000000004151f9: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0xc8; pop rbp; ret; 
0x000000000042c669: mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 8; pop rbp; ret; 
0x000000000045f305: mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x10d40; add rsp, 0x28; pop rbp; ret; 
0x000000000045f3b1: mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x34300; add rsp, 8; pop rbp; ret; 
0x000000000045f3f1: mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x34340; add rsp, 8; pop rbp; ret; 
0x000000000043afb8: mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x3a000; add rsp, 0x30; pop rbp; ret; 
0x000000000045f4f1: mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x000000000045f69a: mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x4f320; mov dword ptr [rsp + 0x40], eax; add rsp, 0x18; pop rbp; ret; 
0x000000000045f2b1: mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x6c40; add rsp, 8; pop rbp; ret; 
0x0000000000441c62: mov r14, qword ptr fs:[0xfffffffffffffff8]; cmp byte ptr [rsp], 0; je 0x41c77; add rsp, 0x38; pop rbp; ret; 
0x000000000042e729: mov r14, qword ptr fs:[0xfffffffffffffff8]; cmp dword ptr [rsp + 0x18], 0; je 0x2e742; add rsp, 0xc0; pop rbp; ret; 
0x00000000004376a9: mov r14, qword ptr fs:[0xfffffffffffffff8]; lea rax, [rip + 0x119127]; call 0x42600; add rsp, 0x30; pop rbp; ret; 
0x000000000042d7c9: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, 0x1006; mov dword ptr [rax], 0x1006; add rsp, 0x48; pop rbp; ret; 
0x0000000000445d55: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000421370: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, 1; add rsp, 0xf8; pop rbp; ret; 
0x0000000000430f29: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, 1; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x0000000000430e49: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, 2; call 0x31100; add rsp, 0x20; pop rbp; ret; 
0x000000000045f65a: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x000000000044f355: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x000000000045049c: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x60; pop rbp; ret; 
0x00000000004635d7: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004639d2: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; pop rbp; ret; 
0x0000000000463942: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x78; pop rbp; ret; 
0x00000000004046a0: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x28]; add rsp, 0x68; pop rbp; ret; 
0x000000000040c640: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; pop rbp; ret; 
0x0000000000453e36: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; pop rbp; ret; 
0x00000000004068c9: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 8]; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x30; pop rbp; ret; 
0x000000000044f2f1: mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp]; add rsp, 8; pop rbp; ret; 
0x0000000000470612: mov r14, qword ptr fs:[0xfffffffffffffff8]; nop dword ptr [rax + rax]; call 0x6d8e0; add rsp, 0x20; pop rbp; ret; 
0x000000000045f535: mov r14, qword ptr fs:[0xfffffffffffffff8]; nop; call 0x41520; add rsp, 0x10; pop rbp; ret; 
0x00000000004705b6: mov r14, qword ptr fs:[0xfffffffffffffff8]; nop; call 0x6ba00; add rsp, 0x10; pop rbp; ret; 
0x000000000045f36d: mov r14, qword ptr fs:[0xfffffffffffffff8]; pop rbp; ret; 
0x000000000043148e: mov r14, qword ptr fs:[0xfffffffffffffff8]; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x000000000041412b: mov r14, qword ptr fs:[0xfffffffffffffff8]; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x00000000004211bc: mov r14, qword ptr fs:[0xfffffffffffffff8]; xor eax, eax; add rsp, 0xf8; pop rbp; ret; 
0x000000000045ed84: mov r14, r9; call 0x5ce00; call r12; mov edi, 0x6f; mov eax, 0x3c; syscall; 
0x000000000045a329: mov r14, rdi; ret; 
0x000000000045b15b: mov r14, rdx; mov rsp, qword ptr [rdx + 0x38]; mov rdx, rdi; mov rdi, qword ptr [rdi]; call rdi; 
0x000000000045d2c8: mov r15, qword ptr [rsp + 0x20]; add rsp, 0x98; pop rbp; ret; 
0x000000000045e5bd: mov r15, qword ptr [rsp + 0x20]; mov rbp, qword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x000000000042855a: mov r8, qword ptr [r10 + r8 + 8]; mov rax, rcx; mov rcx, r8; lea rdx, [rsp + 0x80]; call rdi; 
0x000000000042885a: mov r8, qword ptr [rdx + 0x10]; mov qword ptr [rsp + 0x20], r8; mov rdx, rsi; call rdi; 
0x0000000000429835: mov r8, qword ptr [rsp + 0x18]; mov rcx, rax; lea rax, [rcx + r8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004110a8: mov r8, qword ptr [rsp + 0x20]; mov qword ptr [rax + 0x30], rbx; mov rax, r8; add rsp, 0x28; pop rbp; ret; 
0x000000000045ecd2: mov r8, qword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; 
0x000000000045ecd2: mov r8, qword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; mov dword ptr [rsp + 0x30], eax; ret; 
0x0000000000452ebf: mov r8, qword ptr [rsp + 0x30]; cmp rax, r8; jl 0x52e4e; add rsp, 0x300; pop rbp; ret; 
0x0000000000428859: mov r8, qword ptr ds:[rdx + 0x10]; mov qword ptr [rsp + 0x20], r8; mov rdx, rsi; call rdi; 
0x00000000004657db: mov r8, r11; nop; call 0x66b00; add rsp, 0x120; pop rbp; ret; 
0x0000000000465e4e: mov r8, r12; call 0x66820; add rsp, 0x58; pop rbp; ret; 
0x0000000000465cea: mov r8, r12; mov r9, r13; call 0x66380; add rsp, 0x58; pop rbp; ret; 
0x0000000000465dda: mov r8, r13; mov r10, rdx; call 0x66820; add rsp, 0x58; pop rbp; ret; 
0x000000000042f6de: mov r8, rax; mov byte ptr [r8 + 1], 1; mov rax, r8; add rsp, 0x58; pop rbp; ret; 
0x00000000004526e7: mov r8, rdi; add rsp, 0x20; pop rbp; ret; 
0x00000000004729ea: mov r8, rsi; mov r9, rsi; call 0x36a0; add rsp, 0x38; pop rbp; ret; 
0x00000000004120e6: mov r8, rsi; xor esi, esi; call 0x11f60; add rsp, 0x38; pop rbp; ret; 
0x000000000045e12a: mov r8b, 0xf3; movq qword ptr [rbx - 0x40], mm1; movdqu xmmword ptr [rbx - 0x30], xmm10; movdqu xmmword ptr [rbx - 0x20], xmm11; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e206: mov r8b, 0xf3; movq qword ptr [rcx - 0x40], mm1; movdqu xmmword ptr [rcx - 0x30], xmm10; movdqu xmmword ptr [rcx - 0x20], xmm11; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000044d263: mov r8d, 0xffffffff; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000044cfd4: mov r8d, 1; call 0x4c4c0; add rsp, 0x30; pop rbp; ret; 
0x000000000047a0cd: mov r8d, 5; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000047a06d: mov r8d, 6; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000047a12d: mov r8d, 8; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000045eb73: mov r8d, dword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x24]; mov eax, 9; syscall; 
0x000000000044d252: mov r8d, eax; mov rax, rdx; add rsp, 0x58; pop rbp; ret; 
0x00000000004540a8: mov r8d, r9d; call 0x54120; add rsp, 0x20; pop rbp; ret; 
0x000000000045a300: mov r9, qword ptr [r14 + 0x50]; test r9, r9; je 0x5a30e; call 0x5cde0; ret; 
0x0000000000465ced: mov r9, r13; call 0x66380; add rsp, 0x58; pop rbp; ret; 
0x0000000000449c4a: mov r9, r8; add rsp, 0xd8; pop rbp; ret; 
0x000000000042d1a4: mov r9, r8; call 0x36c0; mov rax, rcx; add rsp, 0x50; pop rbp; ret; 
0x0000000000449c24: mov r9, r8; mov eax, dword ptr [rsp + 0x2c]; mov rbx, qword ptr [rsp + 0xc8]; add rsp, 0xd8; pop rbp; ret; 
0x000000000047b5f0: mov r9, rax; mov rcx, qword ptr [r9 + 0xf8]; mov rax, rbx; call rcx; 
0x00000000004729ed: mov r9, rsi; call 0x36a0; add rsp, 0x38; pop rbp; ret; 
0x000000000046d081: mov r9d, 0xe; call 0x4a3c0; add rsp, 0x78; pop rbp; ret; 
0x0000000000466bee: mov r9d, 1; call 0x68820; add rsp, 0x50; pop rbp; ret; 
0x000000000045eb78: mov r9d, dword ptr [rsp + 0x24]; mov eax, 9; syscall; 
0x000000000045ecd7: mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; 
0x000000000045ecd7: mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000045ebdf: mov r9d, dword ptr [rsp + 0x3c]; mov rax, qword ptr [rip + 0xc3b0d]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x0000000000470fea: mov rax, -1; add rsp, 0x108; pop rbp; ret; 
0x000000000047306f: mov rax, -1; add rsp, 0x10; pop rbp; ret; 
0x000000000044e80b: mov rax, -1; add rsp, 0x20; pop rbp; ret; 
0x00000000004635b4: mov rax, -1; add rsp, 0x30; pop rbp; ret; 
0x0000000000402cf1: mov rax, -1; add rsp, 0x40; pop rbp; ret; 
0x0000000000463984: mov rax, -1; add rsp, 0x78; pop rbp; ret; 
0x000000000041dcfd: mov rax, -1; lea rcx, [rip + 0x1329d5]; xchg qword ptr [rcx], rax; ret; 
0x0000000000471e04: mov rax, -1; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000429bda: mov rax, -1; mov rbx, rdx; ret; 
0x0000000000429d25: mov rax, -1; mov rbx, rsi; ret; 
0x000000000045ecae: mov rax, 0x1c; syscall; 
0x000000000045ecae: mov rax, 0x1c; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045edaa: mov rax, 0x83; syscall; 
0x000000000045edf6: mov rax, 0x9e; syscall; 
0x000000000045ec2a: mov rax, 0xb; syscall; 
0x000000000045e905: mov rax, 0xe4; syscall; 
0x000000000045eb40: mov rax, 0xf; syscall; 
0x0000000000403145: mov rax, 1; ret; 
0x000000000043cfa5: mov rax, qword ptr [r14 + 0x30]; dec dword ptr [rax + 0xf0]; add rsp, 0x3a0; pop rbp; ret; 
0x0000000000437a20: mov rax, qword ptr [r14 + 0x30]; mov byte ptr [rax + 0x114], 1; ret; 
0x000000000042e2e5: mov rax, qword ptr [r14 + 0x30]; mov ecx, dword ptr [rsp]; mov qword ptr [rax + 0x48], rcx; add rsp, 8; pop rbp; ret; 
0x000000000043e119: mov rax, qword ptr [r14 + 0x30]; mov qword ptr [rdx + 0x38], rax; mov dword ptr [rdx + 4], 1; add rsp, 0x28; pop rbp; ret; 
0x00000000004598e1: mov rax, qword ptr [r14 + 0x30]; nop; dec dword ptr [rax + 0x108]; ret; 
0x0000000000422f9c: mov rax, qword ptr [rax + 0x10148]; mov qword ptr [rax + rcx*8], rbx; add rsp, 0x38; pop rbp; ret; 
0x0000000000451c9e: mov rax, qword ptr [rax + 0x10]; add rsp, 0x10; pop rbp; ret; 
0x0000000000470472: mov rax, qword ptr [rax + 0x10]; and eax, 0x1f; nop; pop rbp; ret; 
0x0000000000422e20: mov rax, qword ptr [rax + 0x18]; ret; 
0x0000000000454f8a: mov rax, qword ptr [rax + 0x30]; call 0x1220; add rsp, 0x10; pop rbp; ret; 
0x000000000043b631: mov rax, qword ptr [rax + 0x30]; dec dword ptr [rax + 0x108]; add rsp, 0x60; pop rbp; ret; 
0x0000000000444417: mov rax, qword ptr [rax + 0x30]; xor ecx, ecx; xchg dword ptr [rax + 0x33c], ecx; add rsp, 0x20; pop rbp; ret; 
0x0000000000460425: mov rax, qword ptr [rax + 0x40]; add rsp, 0x10; pop rbp; ret; 
0x000000000046f00b: mov rax, qword ptr [rax + 0x40]; add rsp, 0x18; pop rbp; ret; 
0x000000000046bf7b: mov rax, qword ptr [rax + 0x40]; add rsp, 0x28; pop rbp; ret; 
0x000000000040115b: mov rax, qword ptr [rax + 0x40]; add rsp, 8; pop rbp; ret; 
0x000000000040106e: mov rax, qword ptr [rax + 0x40]; ret; 
0x000000000041d467: mov rax, qword ptr [rax + 0x98]; ret; 
0x000000000043baea: mov rax, qword ptr [rax + 0xd0]; inc dword ptr [rax + 0x14]; add rsp, 0x20; pop rbp; ret; 
0x000000000044c2de: mov rax, qword ptr [rax + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000458d80: mov rax, qword ptr [rax + 8]; ret; 
0x000000000042978d: mov rax, qword ptr [rax + rbx*8]; shr rax, cl; and eax, 1; add rsp, 0x30; pop rbp; ret; 
0x000000000042b70b: mov rax, qword ptr [rax + rdx]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004045bf: mov rax, qword ptr [rax]; mov qword ptr [rdx], rax; mov qword ptr [rdx + 8], rbx; add rsp, 8; pop rbp; ret; 
0x0000000000403ffc: mov rax, qword ptr [rax]; mov rbx, qword ptr [rbx]; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x00000000004605bc: mov rax, qword ptr [rax]; nop; call 0x60260; add rsp, 8; pop rbp; ret; 
0x00000000004604dc: mov rax, qword ptr [rax]; nop; call 0x603a0; add rsp, 8; pop rbp; ret; 
0x00000000004702fc: mov rax, qword ptr [rax]; nop; call 0x6bfe0; add rsp, 8; pop rbp; ret; 
0x0000000000472b3c: mov rax, qword ptr [rax]; nop; call 0x72060; add rsp, 8; pop rbp; ret; 
0x0000000000458c85: mov rax, qword ptr [rax]; ret; 
0x000000000046ef46: mov rax, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x000000000046f805: mov rax, qword ptr [rbx]; add rsp, 0x20; pop rbp; ret; 
0x0000000000405303: mov rax, qword ptr [rbx]; mov qword ptr [rsp + 0x18], rax; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000040611b: mov rax, qword ptr [rbx]; mov qword ptr [rsp + 0x20], rax; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000046fb86: mov rax, qword ptr [rbx]; mov rbx, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x00000000004305fc: mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000043b27a: mov rax, qword ptr [rcx + 0x30]; dec dword ptr [rax + 0x108]; add rsp, 0x28; pop rbp; ret; 
0x0000000000460554: mov rax, qword ptr [rcx + 0x40]; add rsp, 0x10; pop rbp; ret; 
0x0000000000457ed2: mov rax, qword ptr [rcx + 0xd0]; call 0x2c680; add rsp, 8; pop rbp; ret; 
0x00000000004155f2: mov rax, qword ptr [rcx + 8]; call 0x25560; add rsp, 8; pop rbp; ret; 
0x0000000000430de1: mov rax, qword ptr [rcx + 8]; mov rbx, qword ptr [rcx + 0x10]; ret; 
0x000000000042b69d: mov rax, qword ptr [rcx]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000046ee5b: mov rax, qword ptr [rcx]; mov rbx, qword ptr [rcx + 8]; add rsp, 0x30; pop rbp; ret; 
0x000000000041726e: mov rax, qword ptr [rdx + 8]; call 0x17960; add rsp, 8; pop rbp; ret; 
0x000000000043b8ce: mov rax, qword ptr [rdx + 8]; call 0x2aa40; add rsp, 8; pop rbp; ret; 
0x00000000004339ea: mov rax, qword ptr [rdx + 8]; cmp byte ptr [rax], 0; je 0x339f8; call 0x3cb80; pop rbp; ret; 
0x0000000000461789: mov rax, qword ptr [rdx + 8]; mov ecx, 1; xchg dword ptr [rax], ecx; ret; 
0x000000000042a66e: mov rax, qword ptr [rdx + 8]; mov rbx, qword ptr [rdx + 0x10]; call 0x25600; add rsp, 0x10; pop rbp; ret; 
0x00000000004159f7: mov rax, qword ptr [rdx + 8]; nop dword ptr [rax + rax]; call 0x1e4c0; add rsp, 8; pop rbp; ret; 
0x0000000000415a57: mov rax, qword ptr [rdx + 8]; nop dword ptr [rax + rax]; call 0x20640; add rsp, 8; pop rbp; ret; 
0x00000000004617d7: mov rax, qword ptr [rdx + 8]; nop dword ptr [rax + rax]; call 0x61520; add rsp, 8; pop rbp; ret; 
0x0000000000473f37: mov rax, qword ptr [rdx + 8]; nop dword ptr [rax + rax]; call 0x73500; add rsp, 8; pop rbp; ret; 
0x0000000000474477: mov rax, qword ptr [rdx + 8]; nop dword ptr [rax + rax]; call 0x73560; add rsp, 8; pop rbp; ret; 
0x00000000004224b6: mov rax, qword ptr [rdx + rax*8 + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x0000000000423c89: mov rax, qword ptr [rdx + rax*8 + 0xdc8]; mov qword ptr [rdx + 0xdc8], rbx; add rsp, 0x20; pop rbp; ret; 
0x00000000004424bf: mov rax, qword ptr [rdx + rcx]; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000044a1ad: mov rax, qword ptr [rdx + rsi]; mov rbx, qword ptr [rdx + rsi + 8]; add rsp, 0x60; pop rbp; ret; 
0x0000000000406f6b: mov rax, qword ptr [rdx]; call rax; 
0x00000000004414f4: mov rax, qword ptr [rdx]; call rax; add rsp, 0x20; pop rbp; ret; 
0x000000000046198c: mov rax, qword ptr [rdx]; call rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000406f7f: mov rax, qword ptr [rdx]; call rax; add rsp, 0x30; pop rbp; ret; 
0x0000000000461732: mov rax, qword ptr [rdx]; call rax; add rsp, 0x50; pop rbp; ret; 
0x0000000000433859: mov rax, qword ptr [rdx]; call rax; add rsp, 0x90; pop rbp; ret; 
0x0000000000401038: mov rax, qword ptr [rdx]; mov rbx, qword ptr [rdx + 8]; add rsp, 0x10; pop rbp; ret; 
0x00000000004586bc: mov rax, qword ptr [rdx]; nop; call rax; 
0x0000000000418dcd: mov rax, qword ptr [rip + 0x10a0cc]; lea eax, [rax + rcx]; lea eax, [rax + 2]; mov dword ptr [rip + 0x10a0d8], eax; pop rbp; ret; 
0x000000000041803e: mov rax, qword ptr [rip + 0x138f03]; mov qword ptr [rip + 0x10aeb4], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000043382b: mov rax, qword ptr [rip + 0x6aa6e]; lea rdx, [rip + 0x6aa67]; call rax; 
0x0000000000472f58: mov rax, qword ptr [rip + 0xaf879]; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xaf86e], rcx; pop rbp; ret; 
0x000000000046091b: mov rax, qword ptr [rip + 0xc1e66]; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xc1e5b], rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000045ec72: mov rax, qword ptr [rip + 0xc3a87]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x000000000045ebe4: mov rax, qword ptr [rip + 0xc3b0d]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x000000000045eb32: mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000045eaf2: mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x000000000045e997: mov rax, qword ptr [rip + 0xc3d6a]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x0000000000458284: mov rax, qword ptr [rip + 0xcac65]; call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x0000000000454e0c: mov rax, qword ptr [rip + 0xcd88d]; lea rbx, [rsp + 0x10]; call rcx; 
0x000000000045eed7: mov rax, qword ptr [rip + 0xf1712]; call rax; 
0x000000000045eebf: mov rax, qword ptr [rip + 0xf172a]; cmp rax, 0; je 0x5ef20; call rax; 
0x000000000045e8be: mov rax, qword ptr [rip + 0xf1d2b]; cmp rax, 0; je 0x5e905; call rax; 
0x0000000000426d30: mov rax, qword ptr [rip + 0xf2471]; add rsp, 0x10; pop rbp; ret; 
0x000000000041bb97: mov rax, qword ptr [rsi + 0x10]; add rax, qword ptr [rdi + 0x70]; mov qword ptr [rsi + 0x10], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000045dde9: mov rax, qword ptr [rsi]; mov qword ptr [rdi], rax; ret; 
0x000000000045ddf0: mov rax, qword ptr [rsi]; mov rcx, qword ptr [rsi + rbx - 8]; mov qword ptr [rdi], rax; mov qword ptr [rdi + rbx - 8], rcx; ret; 
0x000000000047c2c9: mov rax, qword ptr [rsp + 0x108]; call rsi; 
0x0000000000434c0f: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x00000000004502f1: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x000000000043ed55: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x30; pop rbp; nop; ret; 
0x0000000000425a96: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; pop rbp; ret; 
0x0000000000456aee: mov rax, qword ptr [rsp + 0x10]; call 0x56b20; add rsp, 8; pop rbp; ret; 
0x0000000000456b8e: mov rax, qword ptr [rsp + 0x10]; call 0x56bc0; add rsp, 8; pop rbp; ret; 
0x000000000043fc1d: mov rax, qword ptr [rsp + 0x10]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000406d10: mov rax, qword ptr [rsp + 0x10]; mov byte ptr [rax + 0xb4], 0; add rsp, 0x40; pop rbp; ret; 
0x000000000040b699: mov rax, qword ptr [rsp + 0x10]; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rbp; ret; 
0x0000000000473ae5: mov rax, qword ptr [rsp + 0x10]; mov rbx, qword ptr [rsp + 8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000473a52: mov rax, qword ptr [rsp + 0x10]; mov rbx, qword ptr [rsp + 8]; add rsp, 0x20; pop rbp; ret; 
0x0000000000418597: mov rax, qword ptr [rsp + 0x10]; nop dword ptr [rax]; call 0x188a0; add rsp, 0x18; pop rbp; ret; 
0x000000000047ad6a: mov rax, qword ptr [rsp + 0x158]; mov rbx, qword ptr [rsp + 0x160]; call 0x6fca0; mov rcx, qword ptr [rax + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000479d88: mov rax, qword ptr [rsp + 0x178]; call rcx; 
0x0000000000479c88: mov rax, qword ptr [rsp + 0x180]; call rcx; 
0x0000000000479eb1: mov rax, qword ptr [rsp + 0x188]; call rdx; 
0x0000000000422b34: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000409c65: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; pop rbp; ret; 
0x0000000000446e55: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; nop; ret; 
0x0000000000413b08: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004252bd: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; pop rbp; ret; 
0x000000000041e654: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x50; pop rbp; ret; 
0x00000000004639db: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; pop rbp; ret; 
0x0000000000410815: mov rax, qword ptr [rsp + 0x18]; call 0x10860; add rsp, 0x20; pop rbp; ret; 
0x00000000004371a8: mov rax, qword ptr [rsp + 0x18]; call 0x37420; add rsp, 0x28; pop rbp; ret; 
0x000000000045964d: mov rax, qword ptr [rsp + 0x18]; call 0x3b080; add rsp, 0x10; pop rbp; ret; 
0x000000000040e535: mov rax, qword ptr [rsp + 0x18]; call 0xe580; add rsp, 0x20; pop rbp; ret; 
0x000000000040f255: mov rax, qword ptr [rsp + 0x18]; call 0xf2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000040fb75: mov rax, qword ptr [rsp + 0x18]; call 0xfbc0; add rsp, 0x20; pop rbp; ret; 
0x0000000000428876: mov rax, qword ptr [rsp + 0x18]; call rsi; 
0x0000000000428876: mov rax, qword ptr [rsp + 0x18]; call rsi; add rsp, 0x28; pop rbp; ret; 
0x0000000000439e5a: mov rax, qword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; 
0x0000000000439e5a: mov rax, qword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; add rsp, 0x60; pop rbp; ret; 
0x000000000043b62c: mov rax, qword ptr [rsp + 0x18]; mov rax, qword ptr [rax + 0x30]; dec dword ptr [rax + 0x108]; add rsp, 0x60; pop rbp; ret; 
0x0000000000425c98: mov rax, qword ptr [rsp + 0x18]; movups xmmword ptr [rax], xmm15; add rsp, 0x20; pop rbp; ret; 
0x000000000045911f: mov rax, qword ptr [rsp + 0x18]; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000047c2f0: mov rax, qword ptr [rsp + 0x1e0]; mov rbx, qword ptr [rsp + 0x140]; call 0x78a40; add rsp, 0x1d0; pop rbp; ret; 
0x0000000000410eb2: mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x00000000004132ef: mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; pop rbp; ret; 
0x0000000000420176: mov rax, qword ptr [rsp + 0x20]; add rsp, 0x40; pop rbp; ret; 
0x0000000000436cd8: mov rax, qword ptr [rsp + 0x20]; add rsp, 0x48; pop rbp; ret; 
0x000000000046394b: mov rax, qword ptr [rsp + 0x20]; add rsp, 0x78; pop rbp; ret; 
0x0000000000412dc6: mov rax, qword ptr [rsp + 0x20]; call 0x12980; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; pop rbp; ret; 
0x0000000000473524: mov rax, qword ptr [rsp + 0x20]; call 0x739e0; add rsp, 0x10; pop rbp; ret; 
0x0000000000476506: mov rax, qword ptr [rsp + 0x20]; call 0x75420; add rsp, 0x28; pop rbp; ret; 
0x000000000043e753: mov rax, qword ptr [rsp + 0x20]; inc qword ptr [rax]; add rsp, 0x28; pop rbp; ret; 
0x0000000000439f6f: mov rax, qword ptr [rsp + 0x20]; lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000419561: mov rax, qword ptr [rsp + 0x20]; mov byte ptr [rax + 0xb6], 1; add rsp, 0x40; pop rbp; ret; 
0x000000000041d0b4: mov rax, qword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x28; pop rbp; ret; 
0x000000000045a1c5: mov rax, qword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004046a9: mov rax, qword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x28]; add rsp, 0x68; pop rbp; ret; 
0x0000000000474eca: mov rax, qword ptr [rsp + 0x20]; mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x48; pop rbp; ret; 
0x000000000040d5d5: mov rax, qword ptr [rsp + 0x20]; mov rbx, rdx; add rsp, 0x38; pop rbp; ret; 
0x0000000000404718: mov rax, qword ptr [rsp + 0x20]; mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rcx], rax; add rsp, 0x30; pop rbp; ret; 
0x0000000000432fe9: mov rax, qword ptr [rsp + 0x20]; neg rax; call 0x32ee0; add rsp, 0x10; pop rbp; ret; 
0x0000000000426adb: mov rax, qword ptr [rsp + 0x20]; shl rax, 0xd; sub rsp, -0x80; pop rbp; ret; 
0x00000000004195f4: mov rax, qword ptr [rsp + 0x28]; add rsp, 0x30; pop rbp; ret; 
0x00000000004580ad: mov rax, qword ptr [rsp + 0x28]; add rsp, 0x38; pop rbp; ret; 
0x000000000042a1d1: mov rax, qword ptr [rsp + 0x28]; add rsp, 0x40; pop rbp; ret; 
0x0000000000436291: mov rax, qword ptr [rsp + 0x28]; add rsp, 0x50; pop rbp; ret; 
0x0000000000423629: mov rax, qword ptr [rsp + 0x28]; add rsp, 0xa0; pop rbp; ret; 
0x00000000004331ea: mov rax, qword ptr [rsp + 0x28]; call 0x329e0; add rsp, 0x40; pop rbp; ret; 
0x000000000043a825: mov rax, qword ptr [rsp + 0x28]; call 0x3a5e0; add rsp, 0x30; pop rbp; ret; 
0x000000000046018d: mov rax, qword ptr [rsp + 0x28]; call 0x58be0; call 0x59920; add rsp, 0x18; pop rbp; ret; 
0x000000000046426a: mov rax, qword ptr [rsp + 0x28]; call 0x643c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000421a45: mov rax, qword ptr [rsp + 0x28]; call 0xa580; add rsp, 0x38; pop rbp; ret; 
0x000000000042a72d: mov rax, qword ptr [rsp + 0x28]; call 0xa5c0; add rsp, 0x30; pop rbp; ret; 
0x00000000004165b1: mov rax, qword ptr [rsp + 0x28]; mov byte ptr [rax], 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000458885: mov rax, qword ptr [rsp + 0x28]; mov ebx, 1; call 0x385c0; add rsp, 0x30; pop rbp; ret; 
0x000000000044e9a5: mov rax, qword ptr [rsp + 0x28]; mov rbx, qword ptr [rsp + 0x40]; mov rsi, rcx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x000000000040d3a2: mov rax, qword ptr [rsp + 0x28]; mov rbx, rcx; call rsi; 
0x0000000000474105: mov rax, qword ptr [rsp + 0x28]; mov rbx, rdx; mov rcx, rsi; add rsp, 0xa0; pop rbp; ret; 
0x0000000000473d2e: mov rax, qword ptr [rsp + 0x28]; mov rbx, rsi; mov rcx, rdi; add rsp, 0x88; pop rbp; ret; 
0x0000000000442fd8: mov rax, qword ptr [rsp + 0x28]; nop dword ptr [rax]; call 0xa5c0; add rsp, 0x40; pop rbp; ret; 
0x000000000045808e: mov rax, qword ptr [rsp + 0x28]; xor ebx, ebx; add rsp, 0x38; pop rbp; ret; 
0x0000000000427c0f: mov rax, qword ptr [rsp + 0x30]; add rsp, 0x38; pop rbp; ret; 
0x0000000000420a33: mov rax, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x0000000000422b2a: mov rax, qword ptr [rsp + 0x30]; call 0x229e0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x00000000004332aa: mov rax, qword ptr [rsp + 0x30]; call 0x33020; add rsp, 0x20; pop rbp; ret; 
0x0000000000476dae: mov rax, qword ptr [rsp + 0x30]; call 0x75420; add rsp, 0x20; pop rbp; ret; 
0x000000000044e9bb: mov rax, qword ptr [rsp + 0x30]; call 0xa400; add rsp, 0x48; pop rbp; ret; 
0x0000000000424887: mov rax, qword ptr [rsp + 0x30]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x000000000046f52f: mov rax, qword ptr [rsp + 0x30]; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x000000000046cf49: mov rax, qword ptr [rsp + 0x30]; mov rbx, qword ptr [rsp + 0x38]; add rsp, 0x40; pop rbp; ret; 
0x000000000040d57d: mov rax, qword ptr [rsp + 0x30]; mov rbx, rcx; call rsi; 
0x00000000004747b9: mov rax, qword ptr [rsp + 0x30]; mov rbx, rdx; mov rcx, r8; add rsp, 0x50; pop rbp; ret; 
0x000000000041e361: mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000043a539: mov rax, qword ptr [rsp + 0x30]; mov rdx, rsi; call rcx; 
0x000000000041b6cd: mov rax, qword ptr [rsp + 0x38]; add qword ptr [rcx + 0x18], rax; add rsp, 0x78; pop rbp; ret; 
0x000000000045305d: mov rax, qword ptr [rsp + 0x38]; add rsp, 0x1c0; pop rbp; ret; 
0x000000000041920e: mov rax, qword ptr [rsp + 0x38]; add rsp, 0x98; pop rbp; ret; 
0x000000000043a8f5: mov rax, qword ptr [rsp + 0x38]; call 0x3a5e0; add rsp, 0x28; pop rbp; ret; 
0x0000000000463835: mov rax, qword ptr [rsp + 0x38]; mov rbx, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x000000000041a85b: mov rax, qword ptr [rsp + 0x40]; add rsp, 0x328; pop rbp; ret; 
0x0000000000455107: mov rax, qword ptr [rsp + 0x40]; add rsp, 0x48; pop rbp; ret; 
0x000000000042d5a5: mov rax, qword ptr [rsp + 0x40]; add rsp, 0x680; pop rbp; ret; 
0x0000000000442e15: mov rax, qword ptr [rsp + 0x40]; call 0x33fe0; add rsp, 0x58; pop rbp; ret; 
0x0000000000405174: mov rax, qword ptr [rsp + 0x40]; call 0xa5c0; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x000000000046359f: mov rax, qword ptr [rsp + 0x40]; mov rbx, qword ptr [rsp + 0x48]; call 0x63880; add rsp, 0x30; pop rbp; ret; 
0x0000000000450a0e: mov rax, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x28]; add qword ptr [rdx + 0x11e8], rax; add rsp, 0x30; pop rbp; ret; 
0x000000000042c8be: mov rax, qword ptr [rsp + 0x48]; add rax, 0x1268; call 0x2c600; add rsp, 0x38; pop rbp; ret; 
0x000000000040c12f: mov rax, qword ptr [rsp + 0x48]; add rsp, 0x58; pop rbp; ret; 
0x000000000044ccff: mov rax, qword ptr [rsp + 0x48]; call 0x4cb80; mov ecx, dword ptr [rsp + 0x3c]; add rsp, 0x58; pop rbp; ret; 
0x000000000041e0ac: mov rax, qword ptr [rsp + 0x48]; call rbx; 
0x00000000004607b4: mov rax, qword ptr [rsp + 0x48]; call rcx; 
0x0000000000405517: mov rax, qword ptr [rsp + 0x48]; mov rbx, qword ptr [rsp + 0x20]; call 0x5dcc0; add rsp, 0x28; pop rbp; ret; 
0x000000000040e7ff: mov rax, qword ptr [rsp + 0x48]; mov rbx, rax; call rcx; 
0x000000000044dee4: mov rax, qword ptr [rsp + 0x50]; call 0x39c40; movzx eax, byte ptr [rsp + 0x13]; add rsp, 0x38; pop rbp; ret; 
0x0000000000436893: mov rax, qword ptr [rsp + 0x50]; call rcx; 
0x000000000044f5c9: mov rax, qword ptr [rsp + 0x50]; mov ebx, dword ptr [rsp + 0x4c]; call 0x500a0; add rsp, 0x58; pop rbp; ret; 
0x000000000042d056: mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rip + 0x1234ce], rax; add rsp, 0x70; pop rbp; ret; 
0x00000000004308e2: mov rax, qword ptr [rsp + 0x50]; mov rdx, qword ptr [rax + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000044526f: mov rax, qword ptr [rsp + 0x58]; add rsp, 0x68; pop rbp; ret; 
0x000000000047a28d: mov rax, qword ptr [rsp + 0x58]; call 0x76400; add rsp, 0x90; pop rbp; nop; ret; 
0x000000000044b898: mov rax, qword ptr [rsp + 0x58]; lea rcx, [rip + 0xd6dec]; xchg qword ptr [rcx], rax; add rsp, 0x60; pop rbp; ret; 
0x0000000000446bcf: mov rax, qword ptr [rsp + 0x58]; mov rbx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rsp + 0x28]; add rsp, 0x60; pop rbp; ret; 
0x0000000000472a5a: mov rax, qword ptr [rsp + 0x58]; mov rbx, qword ptr [rsp + 0x50]; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x60; pop rbp; ret; 
0x0000000000477985: mov rax, qword ptr [rsp + 0x58]; mov rcx, rdx; call rsi; 
0x000000000041ec5a: mov rax, qword ptr [rsp + 0x60]; add rsp, 0x78; pop rbp; ret; 
0x0000000000461dad: mov rax, qword ptr [rsp + 0x60]; add rsp, 0x88; pop rbp; ret; 
0x000000000044b67e: mov rax, qword ptr [rsp + 0x60]; mov rbx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rsp + 0x48]; add rsp, 0x100; pop rbp; ret; 
0x0000000000461e0b: mov rax, qword ptr [rsp + 0x60]; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x88; pop rbp; ret; 
0x0000000000448457: mov rax, qword ptr [rsp + 0x60]; mov rbx, qword ptr [rsp + 0x58]; call 0x476c0; add rsp, 0x2e8; pop rbp; ret; 
0x00000000004778c5: mov rax, qword ptr [rsp + 0x60]; xor ebx, ebx; xor ecx, ecx; add rsp, 0x40; pop rbp; ret; 
0x0000000000463bda: mov rax, qword ptr [rsp + 0x68]; add rsp, 0x78; pop rbp; ret; 
0x00000000004749f6: mov rax, qword ptr [rsp + 0x68]; call rcx; 
0x000000000046942e: mov rax, qword ptr [rsp + 0x68]; mov rbx, qword ptr [rsp + 0x58]; mov rcx, qword ptr [rsp + 0x60]; add rsp, 0x70; pop rbp; ret; 
0x0000000000453769: mov rax, qword ptr [rsp + 0x68]; mov rbx, qword ptr [rsp + 0x70]; add rsp, 0x258; pop rbp; ret; 
0x00000000004532e6: mov rax, qword ptr [rsp + 0x68]; xor ebx, ebx; add rsp, 0x258; pop rbp; ret; 
0x000000000041ace5: mov rax, qword ptr [rsp + 0x70]; mov byte ptr [rax + 0x110], 0; add rsp, 0x58; pop rbp; ret; 
0x0000000000472aec: mov rax, qword ptr [rsp + 0x70]; mov rbx, qword ptr [rsp + 0x68]; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x78; pop rbp; ret; 
0x000000000040d8e8: mov rax, qword ptr [rsp + 0x70]; mov rbx, rcx; call rdi; 
0x0000000000424265: mov rax, qword ptr [rsp + 0x78]; add rsp, 0x90; pop rbp; ret; 
0x0000000000470daa: mov rax, qword ptr [rsp + 0x80]; add rsp, 0x128; pop rbp; ret; 
0x000000000043df75: mov rax, qword ptr [rsp + 0x80]; add rsp, 0xa8; pop rbp; ret; 
0x0000000000476b5f: mov rax, qword ptr [rsp + 0x80]; call 0x75420; add rsp, 0x70; pop rbp; ret; 
0x0000000000476ba1: mov rax, qword ptr [rsp + 0x80]; call 0x756e0; add rsp, 0x70; pop rbp; ret; 
0x000000000042361c: mov rax, qword ptr [rsp + 0x80]; call 0xa400; mov rax, qword ptr [rsp + 0x28]; add rsp, 0xa0; pop rbp; ret; 
0x0000000000479527: mov rax, qword ptr [rsp + 0x98]; call 0x77e20; add rsp, 0x88; pop rbp; ret; 
0x000000000040173e: mov rax, qword ptr [rsp + 0xa0]; add rsp, 0xa8; pop rbp; ret; 
0x000000000041255d: mov rax, qword ptr [rsp + 0xa0]; call 0x5d9c0; add rsp, 0xa8; pop rbp; ret; 
0x0000000000426ff6: mov rax, qword ptr [rsp + 0xa8]; add rsp, 0x120; pop rbp; ret; 
0x0000000000471c1b: mov rax, qword ptr [rsp + 0xb0]; call rcx; 
0x000000000046532c: mov rax, qword ptr [rsp + 0xf0]; mov rbx, qword ptr [rsp + 0x88]; mov rcx, qword ptr [rsp + 0x98]; add rsp, 0x120; pop rbp; ret; 
0x0000000000406819: mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000412e9a: mov rax, qword ptr [rsp + 8]; add rsp, 0x20; pop rbp; ret; 
0x000000000040c649: mov rax, qword ptr [rsp + 8]; add rsp, 0x38; pop rbp; ret; 
0x0000000000453e3f: mov rax, qword ptr [rsp + 8]; add rsp, 0x58; pop rbp; ret; 
0x00000000004067ef: mov rax, qword ptr [rsp + 8]; cmp rcx, rax; jne 0x67ff; add rsp, 0x10; pop rbp; ret; 
0x0000000000432359: mov rax, qword ptr [rsp + 8]; mov byte ptr [rax + 0xb4], 0; add rsp, 0x10; pop rbp; ret; 
0x000000000045872a: mov rax, qword ptr [rsp + 8]; mov byte ptr [rax], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045e600: mov rax, qword ptr [rsp + 8]; mov dword ptr [rax], 0; mov edi, 0; mov eax, 0x3c; syscall; 
0x000000000045006b: mov rax, qword ptr [rsp + 8]; mov ebx, 0xffffffff; lea rcx, [rip + 0xe98fc]; add rsp, 0x10; pop rbp; ret; 
0x00000000004068d2: mov rax, qword ptr [rsp + 8]; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x30; pop rbp; ret; 
0x0000000000422d26: mov rax, qword ptr [rsp + 8]; test rax, rax; setne al; add rsp, 0x20; pop rbp; ret; 
0x000000000045e521: mov rax, qword ptr [rsp]; add rsp, 0x170; popfq; pop rbp; ret; 
0x000000000044f2fa: mov rax, qword ptr [rsp]; add rsp, 8; pop rbp; ret; 
0x00000000004404f3: mov rax, qword ptr [rsp]; mov ecx, ebx; mov rbx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000043590c: mov rax, qword ptr [rsp]; mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rcx + 0xc0], rax; add rsp, 0x38; pop rbp; ret; 
0x000000000040cd42: mov rax, r10; add rsp, 0x50; pop rbp; ret; 
0x000000000042a24b: mov rax, r11; add rsp, 0x40; pop rbp; ret; 
0x0000000000427243: mov rax, r11; lea rdx, [rsp + 0x110]; call rdi; 
0x0000000000402ce8: mov rax, r12; add rsp, 0x40; pop rbp; ret; 
0x000000000040e037: mov rax, r12; mov rbx, rax; call rcx; 
0x000000000040e0b4: mov rax, r12; mov rbx, rdi; call rcx; 
0x000000000040e7c0: mov rax, r13; mov rbx, rsi; call rcx; 
0x000000000042b62b: mov rax, r8; add rsp, 0x10; pop rbp; ret; 
0x00000000004110b1: mov rax, r8; add rsp, 0x28; pop rbp; ret; 
0x000000000042f6e6: mov rax, r8; add rsp, 0x58; pop rbp; ret; 
0x0000000000439843: mov rax, r8; add rsp, 0x60; pop rbp; ret; 
0x000000000041f26c: mov rax, r8; call 0x28c80; add rsp, 0x18; pop rbp; ret; 
0x00000000004662c3: mov rax, r8; mov ecx, 0x320; call 0x5d320; add rsp, 0x690; pop rbp; ret; 
0x0000000000418a54: mov rax, r8; mov rbx, rcx; ret; 
0x00000000004093fb: mov rax, r8; ret; 
0x0000000000439a62: mov rax, r9; add rsp, 0x10; pop rbp; ret; 
0x0000000000433dca: mov rax, r9; add rsp, 0x58; pop rbp; ret; 
0x000000000042b6f0: mov rax, r9; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000429bd3: mov rax, r9; mov rbx, rdx; ret; 
0x000000000045d480: mov rax, rbp; ret; 
0x0000000000426d12: mov rax, rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000409f18: mov rax, rbx; add rsp, 0x18; pop rbp; ret; 
0x000000000046f789: mov rax, rbx; add rsp, 0x20; pop rbp; ret; 
0x0000000000403a8f: mov rax, rbx; add rsp, 0x28; pop rbp; ret; 
0x000000000040116a: mov rax, rbx; add rsp, 8; pop rbp; ret; 
0x0000000000457fc5: mov rax, rbx; call 0x1dfa0; add rsp, 0x18; pop rbp; ret; 
0x00000000004734ab: mov rax, rbx; call 0x739e0; add rsp, 0x10; pop rbp; ret; 
0x000000000043a470: mov rax, rbx; call 0xa5c0; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x000000000040a100: mov rax, rbx; call rcx; 
0x000000000046fec9: mov rax, rbx; call rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000434613: mov rax, rbx; call rsi; 
0x0000000000444b68: mov rax, rbx; lea rbx, [rsp + 0x48]; mov rcx, rdi; call rsi; 
0x0000000000460203: mov rax, rbx; lock cmpxchg qword ptr [rdx], rcx; sete al; ret; 
0x000000000041f4fd: mov rax, rbx; mov ebx, 0x1ff; add rsp, 0x40; pop rbp; ret; 
0x0000000000420815: mov rax, rbx; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000044ab8f: mov rax, rbx; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000460756: mov rax, rbx; mov rbx, qword ptr [rsp + 0x88]; mov rcx, qword ptr [rsp + 0x90]; call rdx; 
0x00000000004648f8: mov rax, rbx; mov rbx, r8; mov rcx, r9; call rdi; 
0x00000000004645eb: mov rax, rbx; mov rbx, r9; call rsi; 
0x0000000000409fe5: mov rax, rbx; mov rbx, rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000040c46e: mov rax, rbx; mov rbx, rcx; call 0x2a480; add rsp, 0x28; pop rbp; ret; 
0x0000000000403c43: mov rax, rbx; mov rbx, rcx; call 0x3780; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c54: mov rax, rbx; mov rbx, rcx; call 0x3860; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c65: mov rax, rbx; mov rbx, rcx; call 0x3940; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c9e: mov rax, rbx; mov rbx, rcx; call 0x3b00; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cc1: mov rax, rbx; mov rbx, rcx; call 0x5ce80; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cf2: mov rax, rbx; mov rbx, rcx; call 0x5cee0; add rsp, 0x60; pop rbp; ret; 
0x0000000000410f1b: mov rax, rbx; mov rbx, rcx; call 0x5d9c0; add rsp, 0x18; pop rbp; ret; 
0x000000000040413e: mov rax, rbx; mov rbx, rcx; call rsi; 
0x000000000040413e: mov rax, rbx; mov rbx, rcx; call rsi; add rsp, 0x28; pop rbp; ret; 
0x0000000000476314: mov rax, rbx; mov rbx, rcx; mov rcx, rdi; add rsp, 0x28; pop rbp; ret; 
0x00000000004647cf: mov rax, rbx; mov rbx, rcx; mov rcx, rsi; call rdx; 
0x000000000047bcb1: mov rax, rbx; mov rbx, rdi; call rcx; 
0x0000000000464943: mov rax, rbx; mov rbx, rdi; mov rcx, r9; call rsi; 
0x00000000004763a5: mov rax, rbx; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000040f3a0: mov rax, rbx; mov rbx, rdx; call 0xeb00; add rsp, 0x98; pop rbp; ret; 
0x00000000004642f2: mov rax, rbx; mov rbx, rdx; call rsi; 
0x000000000043a33e: mov rax, rbx; mov rbx, rsi; xor ecx, ecx; add rsp, 0x38; pop rbp; ret; 
0x000000000046fe4a: mov rax, rbx; mov rcx, qword ptr [rdx + 0x48]; call rcx; 
0x0000000000470a1e: mov rax, rbx; mov rcx, qword ptr [rdx + 0x98]; call rcx; 
0x000000000046f03a: mov rax, rbx; nop dword ptr [rax]; call 0x58da0; add rsp, 0x18; pop rbp; ret; 
0x000000000046effb: mov rax, rbx; nop; call 0x58c80; add rsp, 0x18; pop rbp; ret; 
0x000000000046425c: mov rax, rbx; nop; call rcx; 
0x0000000000408e25: mov rax, rbx; ret; 
0x0000000000431b8c: mov rax, rbx; xor ebx, ebx; call 0x31a60; add rsp, 0x40; pop rbp; ret; 
0x000000000043a389: mov rax, rbx; xor ebx, ebx; xor ecx, ecx; add rsp, 0x38; pop rbp; ret; 
0x000000000040102a: mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000046d2dc: mov rax, rcx; add rsp, 0x128; pop rbp; ret; 
0x0000000000409d66: mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000043c8d0: mov rax, rcx; add rsp, 0x20; pop rbp; ret; 
0x0000000000410ebd: mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000429775: mov rax, rcx; add rsp, 0x30; pop rbp; ret; 
0x0000000000425af0: mov rax, rcx; add rsp, 0x38; pop rbp; ret; 
0x000000000042d1ac: mov rax, rcx; add rsp, 0x50; pop rbp; ret; 
0x0000000000403da7: mov rax, rcx; add rsp, 0x60; pop rbp; ret; 
0x000000000044756a: mov rax, rcx; add rsp, 0x68; pop rbp; ret; 
0x0000000000469d8a: mov rax, rcx; add rsp, 0x70; pop rbp; ret; 
0x000000000040db10: mov rax, rcx; add rsp, 0x78; pop rbp; ret; 
0x00000000004603c9: mov rax, rcx; add rsp, 8; pop rbp; ret; 
0x000000000041e246: mov rax, rcx; call 0x1e2a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000422a8b: mov rax, rcx; call 0x226a0; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000403966: mov rax, rcx; call 0x3780; add rsp, 0x10; pop rbp; ret; 
0x00000000004039c6: mov rax, rcx; call 0x3860; add rsp, 0x10; pop rbp; ret; 
0x000000000044c312: mov rax, rcx; call 0x4c120; add rsp, 0x10; pop rbp; nop; ret; 
0x000000000046623e: mov rax, rcx; call 0x65060; add rsp, 0x690; pop rbp; ret; 
0x000000000045f21e: mov rax, rcx; call 0x9560; add rsp, 0x10; pop rbp; ret; 
0x000000000045069f: mov rax, rcx; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x000000000043685f: mov rax, rcx; call rbx; 
0x00000000004608fe: mov rax, rcx; call rdx; 
0x0000000000473a2c: mov rax, rcx; call rsi; 
0x0000000000451c9b: mov rax, rcx; mov rax, qword ptr [rax + 0x10]; add rsp, 0x10; pop rbp; ret; 
0x0000000000428ed0: mov rax, rcx; mov rbx, rdi; add rsp, 0x18; pop rbp; ret; 
0x000000000040d289: mov rax, rcx; mov rbx, rdi; call rsi; 
0x00000000004018cc: mov rax, rcx; mov rbx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000047056b: mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000434856: mov rax, rcx; mov rbx, rdx; add rsp, 0x20; pop rbp; ret; 
0x00000000004703ab: mov rax, rcx; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000045efb0: mov rax, rcx; mov rbx, rsi; pop rbp; ret; 
0x00000000004671a0: mov rax, rcx; mov rcx, r11; add rsp, 0x78; pop rbp; ret; 
0x000000000042855f: mov rax, rcx; mov rcx, r8; lea rdx, [rsp + 0x80]; call rdi; 
0x000000000046d777: mov rax, rcx; mov rcx, rdx; add rsp, 0x70; pop rbp; ret; 
0x000000000041e45a: mov rax, rcx; movups xmm0, xmm1; add rsp, 0x20; pop rbp; ret; 
0x0000000000461b99: mov rax, rcx; nop dword ptr [rax]; call 0x61bc0; add rsp, 8; pop rbp; ret; 
0x000000000045563c: mov rax, rcx; nop; call 0x4c120; add rsp, 0x40; pop rbp; ret; 
0x000000000045f159: mov rax, rcx; pop rbp; ret; 
0x000000000040193e: mov rax, rcx; ret; 
0x000000000040d317: mov rax, rcx; xor ebx, ebx; call rsi; 
0x000000000042b634: mov rax, rdi; add rsp, 0x10; pop rbp; ret; 
0x0000000000451fd4: mov rax, rdi; add rsp, 0x178; pop rbp; nop; ret; 
0x000000000044eff4: mov rax, rdi; add rsp, 0x18; pop rbp; ret; 
0x000000000044e802: mov rax, rdi; add rsp, 0x20; pop rbp; ret; 
0x0000000000415790: mov rax, rdi; add rsp, 0x28; pop rbp; ret; 
0x000000000040c88a: mov rax, rdi; add rsp, 0x40; pop rbp; ret; 
0x000000000046b5f1: mov rax, rdi; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x00000000004333df: mov rax, rdi; call rcx; 
0x0000000000454d69: mov rax, rdi; call rsi; 
0x0000000000454d69: mov rax, rdi; call rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004687bd: mov rax, rdi; mov rbx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004749e1: mov rax, rdi; mov rbx, rsi; add rsp, 0x38; pop rbp; ret; 
0x0000000000429d14: mov rax, rdi; mov rbx, rsi; ret; 
0x00000000004373a5: mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000042772d: mov rax, rdx; add rsp, 0x120; pop rbp; ret; 
0x000000000042c1ee: mov rax, rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000411043: mov rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000040ca3b: mov rax, rdx; add rsp, 0x30; pop rbp; ret; 
0x000000000040cf71: mov rax, rdx; add rsp, 0x38; pop rbp; ret; 
0x000000000044d255: mov rax, rdx; add rsp, 0x58; pop rbp; ret; 
0x000000000044778e: mov rax, rdx; call 0x13f60; add rsp, 0x68; pop rbp; ret; 
0x00000000004231e6: mov rax, rdx; call 0x25ce0; add rsp, 0x58; pop rbp; ret; 
0x000000000042bd2e: mov rax, rdx; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x0000000000470427: mov rax, rdx; call 0x6fde0; add rsp, 0x18; pop rbp; ret; 
0x00000000004771a5: mov rax, rdx; call 0x75420; add rsp, 0xd8; pop rbp; ret; 
0x000000000045f1ab: mov rax, rdx; call 0x75e0; add rsp, 0x18; pop rbp; ret; 
0x000000000047b3cc: mov rax, rdx; call 0x7a8e0; add rsp, 0x1d0; pop rbp; ret; 
0x0000000000403755: mov rax, rdx; call 0x8d60; add rsp, 0x18; pop rbp; ret; 
0x0000000000409507: mov rax, rdx; call 0x9560; add rsp, 0x40; pop rbp; ret; 
0x000000000043e556: mov rax, rdx; call 0xa660; add rsp, 0x50; pop rbp; ret; 
0x000000000040c3b6: mov rax, rdx; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004606a1: mov rax, rdx; call rcx; 
0x000000000040d3f9: mov rax, rdx; mov ebx, 1; add rsp, 0x30; pop rbp; ret; 
0x000000000046ea56: mov rax, rdx; mov rbx, r9; mov rcx, r8; add rsp, 0x38; pop rbp; ret; 
0x000000000041d3a0: mov rax, rdx; mov rbx, rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004040c2: mov rax, rdx; mov rbx, rsi; call 0x4100; add rsp, 0x18; pop rbp; ret; 
0x0000000000404062: mov rax, rdx; mov rbx, rsi; call 0x41c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004771ce: mov rax, rdx; mov rbx, rsi; call 0x75420; add rsp, 0xd8; pop rbp; ret; 
0x000000000040c339: mov rax, rdx; nop dword ptr [rax]; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x000000000040ab1c: mov rax, rdx; nop; ret; 
0x000000000042a447: mov rax, rdx; test rcx, rcx; jne 0x2a3e9; add rsp, 0x20; pop rbp; ret; 
0x000000000040cdd5: mov rax, rsi; add rsp, 0x10; pop rbp; ret; 
0x000000000042823b: mov rax, rsi; add rsp, 0x18; pop rbp; ret; 
0x0000000000440718: mov rax, rsi; add rsp, 0x20; pop rbp; ret; 
0x0000000000410fe4: mov rax, rsi; add rsp, 0x28; pop rbp; ret; 
0x000000000041d51d: mov rax, rsi; add rsp, 0x30; pop rbp; ret; 
0x000000000046fa0c: mov rax, rsi; add rsp, 0x40; pop rbp; ret; 
0x0000000000428bbe: mov rax, rsi; add rsp, 0x68; pop rbp; ret; 
0x0000000000466741: mov rax, rsi; add rsp, 0x70; pop rbp; ret; 
0x00000000004411e5: mov rax, rsi; call 0x41340; sub rsp, -0x80; pop rbp; ret; 
0x0000000000401736: mov rax, rsi; call 0x5dcc0; mov rax, qword ptr [rsp + 0xa0]; add rsp, 0xa8; pop rbp; ret; 
0x000000000046f241: mov rax, rsi; call 0x6f4e0; add rsp, 0x18; pop rbp; ret; 
0x000000000040ddaa: mov rax, rsi; call 0xde00; add rsp, 0x10; pop rbp; ret; 
0x00000000004157e2: mov rax, rsi; call rcx; 
0x0000000000463fbe: mov rax, rsi; call rdx; 
0x0000000000408cac: mov rax, rsi; lea rdx, [rip + 0x957b2]; call rcx; 
0x000000000041828e: mov rax, rsi; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045f01c: mov rax, rsi; mov rbx, rcx; pop rbp; ret; 
0x000000000041f0f0: mov rax, rsi; mov rbx, rdi; add rsp, 0x40; pop rbp; ret; 
0x0000000000410a5c: mov rax, rsi; mov rbx, rdi; call rcx; 
0x000000000040f498: mov rax, rsi; mov rbx, rdi; nop; call rcx; 
0x000000000040110d: mov rax, rsi; mov rbx, rdx; mov rcx, rbx; add rsp, 0x10; pop rbp; ret; 
0x000000000046a67d: mov rax, rsi; mov rcx, rdi; call 0x5d320; add rsp, 0x100; pop rbp; ret; 
0x0000000000408e46: mov rax, rsi; mul rcx; xor rax, rdx; mul rdi; xor rax, rdx; ret; 
0x000000000041bbfb: mov rax, rsi; nop; call 0x22100; add rsp, 0x40; pop rbp; ret; 
0x0000000000429955: mov rax, rsi; ret; 
0x0000000000464188: mov rax, rsi; xor ebx, ebx; xor ecx, ecx; add rsp, 0x28; pop rbp; ret; 
0x000000000045146f: mov rbp, qword ptr [rbp]; add rsp, 0x1e0; pop rbp; ret; 
0x000000000046c412: mov rbp, qword ptr [rbp]; add rsp, 0x3b0; pop rbp; ret; 
0x000000000046beef: mov rbp, qword ptr [rbp]; add rsp, 0xe0; pop rbp; ret; 
0x000000000045b246: mov rbp, qword ptr [rbx + 0x68]; call 0x5f580; call 0x5cde0; ret; 
0x000000000045e5c2: mov rbp, qword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x0000000000458647: mov rbp, rsp; call 0x20520; pop rbp; ret; 
0x0000000000458fe7: mov rbp, rsp; call 0x2ca00; pop rbp; ret; 
0x0000000000457d07: mov rbp, rsp; call 0x360e0; pop rbp; ret; 
0x000000000043cc47: mov rbp, rsp; call 0x3cc40; pop rbp; ret; 
0x000000000043cc67: mov rbp, rsp; call 0x3cc60; pop rbp; ret; 
0x000000000043cc87: mov rbp, rsp; call 0x3cc80; pop rbp; ret; 
0x000000000043cca7: mov rbp, rsp; call 0x3cca0; pop rbp; ret; 
0x000000000043ccc7: mov rbp, rsp; call 0x3ccc0; pop rbp; ret; 
0x000000000043cce7: mov rbp, rsp; call 0x3cce0; pop rbp; ret; 
0x0000000000445f47: mov rbp, rsp; call 0x45f60; call 0x460a0; pop rbp; ret; 
0x000000000045f361: mov rbp, rsp; call 0x5ee20; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; pop rbp; ret; 
0x0000000000458e07: mov rbp, rsp; sub rsp, 0x10; call 0x10ee0; add rsp, 0x10; pop rbp; ret; 
0x0000000000459ca7: mov rbp, rsp; sub rsp, 0x10; call 0x54fe0; add rsp, 0x10; pop rbp; ret; 
0x0000000000459ce7: mov rbp, rsp; sub rsp, 0x10; call 0x55260; add rsp, 0x10; pop rbp; ret; 
0x0000000000459d27: mov rbp, rsp; sub rsp, 0x10; call 0x55520; add rsp, 0x10; pop rbp; ret; 
0x0000000000458dc7: mov rbp, rsp; sub rsp, 0x18; call 0x10c60; add rsp, 0x18; pop rbp; ret; 
0x0000000000459f47: mov rbp, rsp; sub rsp, 0x18; call 0x42ea0; add rsp, 0x18; pop rbp; ret; 
0x000000000045a207: mov rbp, rsp; sub rsp, 0x18; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x0000000000458ce7: mov rbp, rsp; sub rsp, 0x18; call 0xdb60; add rsp, 0x18; pop rbp; ret; 
0x0000000000433127: mov rbp, rsp; sub rsp, 8; call 0x33020; add rsp, 8; pop rbp; ret; 
0x0000000000458d27: mov rbp, rsp; sub rsp, 8; call 0xde00; add rsp, 8; pop rbp; ret; 
0x000000000045b101: mov rbp, rsp; ud2; call 0x5cde0; pop rbp; ret; 
0x0000000000428556: mov rbx, qword ptr [r10 + r8]; mov r8, qword ptr [r10 + r8 + 8]; mov rax, rcx; mov rcx, r8; lea rdx, [rsp + 0x80]; call rdi; 
0x0000000000476748: mov rbx, qword ptr [rax + 0x18]; call 0x752a0; add rsp, 0x60; pop rbp; ret; 
0x000000000042c5dc: mov rbx, qword ptr [rax + 0x20]; add rbx, qword ptr [rax + 0x38]; add rcx, rbx; sub rdx, rcx; mov qword ptr [rax + 0x48], rdx; ret; 
0x0000000000472e24: mov rbx, qword ptr [rax + 0x28]; mov rax, rcx; ret; 
0x000000000045f155: mov rbx, qword ptr [rax + 8]; mov rax, rcx; pop rbp; ret; 
0x0000000000460603: mov rbx, qword ptr [rax + 8]; mov rax, rcx; ret; 
0x0000000000464067: mov rbx, qword ptr [rax]; mov rcx, qword ptr [rax + 8]; mov rdi, qword ptr [rax + 0x10]; mov rax, rsi; call rdx; 
0x000000000046a53f: mov rbx, qword ptr [rbx + 0x30]; call 0x6a420; add rsp, 0x100; pop rbp; ret; 
0x000000000046fb89: mov rbx, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x000000000045a29a: mov rbx, qword ptr [rbx + 8]; jmp rbx; 
0x0000000000403fff: mov rbx, qword ptr [rbx]; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000046f786: mov rbx, qword ptr [rbx]; mov rax, rbx; add rsp, 0x20; pop rbp; ret; 
0x0000000000439bdd: mov rbx, qword ptr [rcx + 0x10]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x0000000000430de5: mov rbx, qword ptr [rcx + 0x10]; ret; 
0x000000000046ee5e: mov rbx, qword ptr [rcx + 8]; add rsp, 0x30; pop rbp; ret; 
0x000000000046ee49: mov rbx, qword ptr [rcx + 8]; mov rax, rdx; add rsp, 0x30; pop rbp; ret; 
0x0000000000436e1b: mov rbx, qword ptr [rcx + 8]; nop; call 0x476c0; add rsp, 0x10; pop rbp; ret; 
0x000000000046bae6: mov rbx, qword ptr [rcx + rax + 8]; mov rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000040ab17: mov rbx, qword ptr [rcx + rax + 8]; mov rax, rdx; nop; ret; 
0x0000000000434607: mov rbx, qword ptr [rcx + rax*8]; mov rdx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x0000000000456136: mov rbx, qword ptr [rdi + 0x30]; mov rcx, qword ptr [rsp + 0x108]; call 0x55e20; add rsp, 0x120; pop rbp; ret; 
0x0000000000419d72: mov rbx, qword ptr [rdx + 0x10]; call 0x19da0; add rsp, 0x10; pop rbp; ret; 
0x000000000042a672: mov rbx, qword ptr [rdx + 0x10]; call 0x25600; add rsp, 0x10; pop rbp; ret; 
0x000000000043a532: mov rbx, qword ptr [rdx + 0x280]; mov rax, qword ptr [rsp + 0x30]; mov rdx, rsi; call rcx; 
0x00000000004562e1: mov rbx, qword ptr [rdx + 0x38]; mov rcx, qword ptr [rsp + 0x108]; call 0x55e20; add rsp, 0x120; pop rbp; ret; 
0x000000000040103b: mov rbx, qword ptr [rdx + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000460ede: mov rbx, qword ptr [rdx + 8]; mov ecx, 1; mov edi, ecx; add rsp, 0x28; pop rbp; ret; 
0x0000000000401025: mov rbx, qword ptr [rdx + rax + 8]; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004424c3: mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000044a1b1: mov rbx, qword ptr [rdx + rsi + 8]; add rsp, 0x60; pop rbp; ret; 
0x000000000041e386: mov rbx, qword ptr [rdx]; mov eax, 0x10000; call rbx; 
0x000000000041e0a9: mov rbx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; call rbx; 
0x000000000043685c: mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000422de8: mov rbx, qword ptr [rip + 0x100049]; test rbx, rbx; jne 0x22d8e; add rsp, 0x38; pop rbp; ret; 
0x000000000041d048: mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x28; pop rbp; ret; 
0x00000000004068d7: mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x30; pop rbp; ret; 
0x000000000041404a: mov rbx, qword ptr [rsp + 0x10]; call 0x14560; add rsp, 0x20; pop rbp; ret; 
0x000000000047c2f8: mov rbx, qword ptr [rsp + 0x140]; call 0x78a40; add rsp, 0x1d0; pop rbp; ret; 
0x000000000047ad72: mov rbx, qword ptr [rsp + 0x160]; call 0x6fca0; mov rcx, qword ptr [rax + 0xf8]; mov rax, rbx; call rcx; 
0x000000000040a071: mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x000000000045a1ca: mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x000000000041db53: mov rbx, qword ptr [rsp + 0x18]; call 0x1db80; add rsp, 0x20; pop rbp; ret; 
0x0000000000410f6a: mov rbx, qword ptr [rsp + 0x18]; call 0x5d9c0; add rsp, 0x20; pop rbp; ret; 
0x00000000004305f7: mov rbx, qword ptr [rsp + 0x18]; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000046383a: mov rbx, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x0000000000459114: mov rbx, qword ptr [rsp + 0x20]; add rsp, 0x30; pop rbp; ret; 
0x00000000004591d3: mov rbx, qword ptr [rsp + 0x20]; call 0x2ca60; add rsp, 0x10; pop rbp; ret; 
0x000000000040551c: mov rbx, qword ptr [rsp + 0x20]; call 0x5dcc0; add rsp, 0x28; pop rbp; ret; 
0x0000000000458c61: mov rbx, qword ptr [rsp + 0x20]; call 0x60200; add rsp, 0x30; pop rbp; ret; 
0x000000000043a42d: mov rbx, qword ptr [rsp + 0x20]; movzx ecx, byte ptr [rsp + 0x17]; add rsp, 0x38; pop rbp; ret; 
0x000000000040b6a9: mov rbx, qword ptr [rsp + 0x28]; add rsp, 0x30; pop rbp; ret; 
0x00000000004046ae: mov rbx, qword ptr [rsp + 0x28]; add rsp, 0x68; pop rbp; ret; 
0x0000000000401a02: mov rbx, qword ptr [rsp + 0x28]; call 0x1a40; add rsp, 0x10; pop rbp; ret; 
0x0000000000462355: mov rbx, qword ptr [rsp + 0x28]; mov ecx, 1; add rsp, 0x38; pop rbp; ret; 
0x0000000000459aa1: mov rbx, qword ptr [rsp + 0x28]; mov rcx, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x0000000000431a94: mov rbx, qword ptr [rsp + 0x28]; xchg qword ptr [rax + 0x58], rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000458bca: mov rbx, qword ptr [rsp + 0x28]; xchg qword ptr [rax], rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000474ecf: mov rbx, qword ptr [rsp + 0x30]; add rsp, 0x48; pop rbp; ret; 
0x0000000000460800: mov rbx, qword ptr [rsp + 0x30]; call 0x9f00; mov rcx, qword ptr [rax + 0x18]; mov rax, qword ptr [rsp + 0x48]; call rcx; 
0x00000000004293f3: mov rbx, qword ptr [rsp + 0x30]; mov rcx, qword ptr [rsp + 0x20]; add rsp, 0x58; pop rbp; ret; 
0x000000000046cf4e: mov rbx, qword ptr [rsp + 0x38]; add rsp, 0x40; pop rbp; ret; 
0x000000000040995d: mov rbx, qword ptr [rsp + 0x38]; add rsp, 0xa0; pop rbp; ret; 
0x0000000000413f40: mov rbx, qword ptr [rsp + 0x38]; call 0x4740; add rsp, 0x20; pop rbp; ret; 
0x0000000000460162: mov rbx, qword ptr [rsp + 0x38]; call 0x58be0; add rsp, 0x18; pop rbp; ret; 
0x00000000004779ad: mov rbx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x0000000000460dfe: mov rbx, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbp; ret; 
0x0000000000446bd4: mov rbx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rsp + 0x28]; add rsp, 0x60; pop rbp; ret; 
0x000000000044b683: mov rbx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rsp + 0x48]; add rsp, 0x100; pop rbp; ret; 
0x000000000044e9aa: mov rbx, qword ptr [rsp + 0x40]; mov rsi, rcx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x000000000040b69e: mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x30; pop rbp; ret; 
0x0000000000461e10: mov rbx, qword ptr [rsp + 0x48]; add rsp, 0x88; pop rbp; ret; 
0x000000000044c761: mov rbx, qword ptr [rsp + 0x48]; add rsp, 0xb0; pop rbp; ret; 
0x00000000004054a2: mov rbx, qword ptr [rsp + 0x48]; call 0x5dcc0; add rsp, 0x28; pop rbp; ret; 
0x00000000004635a4: mov rbx, qword ptr [rsp + 0x48]; call 0x63880; add rsp, 0x30; pop rbp; ret; 
0x0000000000461da8: mov rbx, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x60]; add rsp, 0x88; pop rbp; ret; 
0x0000000000472a5f: mov rbx, qword ptr [rsp + 0x50]; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x60; pop rbp; ret; 
0x000000000044845c: mov rbx, qword ptr [rsp + 0x58]; call 0x476c0; add rsp, 0x2e8; pop rbp; ret; 
0x0000000000469433: mov rbx, qword ptr [rsp + 0x58]; mov rcx, qword ptr [rsp + 0x60]; add rsp, 0x70; pop rbp; ret; 
0x000000000041b05a: mov rbx, qword ptr [rsp + 0x60]; mov qword ptr [rbx + 0x18], 0; add rsp, 0x50; pop rbp; ret; 
0x0000000000473ccf: mov rbx, qword ptr [rsp + 0x60]; mov rcx, qword ptr [rsp + 0x68]; add rsp, 0x88; pop rbp; ret; 
0x0000000000472af1: mov rbx, qword ptr [rsp + 0x68]; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x78; pop rbp; ret; 
0x000000000045376e: mov rbx, qword ptr [rsp + 0x70]; add rsp, 0x258; pop rbp; ret; 
0x0000000000454b46: mov rbx, qword ptr [rsp + 0x70]; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x0000000000474358: mov rbx, qword ptr [rsp + 0x78]; add rsp, 0xa0; pop rbp; ret; 
0x00000000004740d9: mov rbx, qword ptr [rsp + 0x78]; mov rcx, qword ptr [rsp + 0x80]; add rsp, 0xa0; pop rbp; ret; 
0x00000000004792af: mov rbx, qword ptr [rsp + 0x80]; call 0x6fca0; mov rcx, rax; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x00000000004326c2: mov rbx, qword ptr [rsp + 0x88]; add rsp, 0x70; pop rbp; ret; 
0x0000000000460759: mov rbx, qword ptr [rsp + 0x88]; mov rcx, qword ptr [rsp + 0x90]; call rdx; 
0x0000000000465334: mov rbx, qword ptr [rsp + 0x88]; mov rcx, qword ptr [rsp + 0x98]; add rsp, 0x120; pop rbp; ret; 
0x0000000000449c2b: mov rbx, qword ptr [rsp + 0xc8]; add rsp, 0xd8; pop rbp; ret; 
0x0000000000471718: mov rbx, qword ptr [rsp + 0xc8]; mov rcx, qword ptr [rsp + 0x80]; call 0x70e00; add rsp, 0x108; pop rbp; ret; 
0x000000000046b96d: mov rbx, qword ptr [rsp + 0xe8]; add rsp, 0x270; pop rbp; ret; 
0x0000000000473aea: mov rbx, qword ptr [rsp + 8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000473a57: mov rbx, qword ptr [rsp + 8]; add rsp, 0x20; pop rbp; ret; 
0x000000000045cdc0: mov rbx, qword ptr [rsp + 8]; mov qword ptr fs:[0xfffffffffffffff8], rbx; ret; 
0x000000000041154d: mov rbx, r11; mov rcx, r10; mov rdi, rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004648fb: mov rbx, r8; mov rcx, r9; call rdi; 
0x0000000000467d73: mov rbx, r9; call 0x68040; add rsp, 0x88; pop rbp; ret; 
0x00000000004645ee: mov rbx, r9; call rsi; 
0x000000000046ea59: mov rbx, r9; mov rcx, r8; add rsp, 0x38; pop rbp; ret; 
0x000000000040e03a: mov rbx, rax; call rcx; 
0x0000000000428873: mov rbx, rax; mov rax, qword ptr [rsp + 0x18]; call rsi; 
0x0000000000454d63: mov rbx, rax; mov rdx, rcx; mov rax, rdi; call rsi; 
0x000000000042b468: mov rbx, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000046d498: mov rbx, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000409fe8: mov rbx, rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000042e329: mov rbx, rcx; add rsp, 0x38; pop rbp; ret; 
0x0000000000403645: mov rbx, rcx; add rsp, 0x40; pop rbp; ret; 
0x0000000000468a35: mov rbx, rcx; add rsp, 0x88; pop rbp; ret; 
0x000000000040b1c5: mov rbx, rcx; add rsp, 0x90; pop rbp; ret; 
0x000000000040c471: mov rbx, rcx; call 0x2a480; add rsp, 0x28; pop rbp; ret; 
0x0000000000403c46: mov rbx, rcx; call 0x3780; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c57: mov rbx, rcx; call 0x3860; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c68: mov rbx, rcx; call 0x3940; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cb2: mov rbx, rcx; call 0x3a00; add rsp, 0x60; pop rbp; nop; ret; 
0x0000000000403ca1: mov rbx, rcx; call 0x3b00; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cc4: mov rbx, rcx; call 0x5ce80; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cf5: mov rbx, rcx; call 0x5cee0; add rsp, 0x60; pop rbp; ret; 
0x0000000000410f1e: mov rbx, rcx; call 0x5d9c0; add rsp, 0x18; pop rbp; ret; 
0x000000000040d8ed: mov rbx, rcx; call rdi; 
0x0000000000404141: mov rbx, rcx; call rsi; 
0x0000000000404141: mov rbx, rcx; call rsi; add rsp, 0x28; pop rbp; ret; 
0x000000000040b8a4: mov rbx, rcx; mov ecx, edx; add rsp, 0x38; pop rbp; ret; 
0x0000000000476317: mov rbx, rcx; mov rcx, rdi; add rsp, 0x28; pop rbp; ret; 
0x0000000000403d06: mov rbx, rcx; mov rcx, rdx; call 0x5ce60; add rsp, 0x60; pop rbp; ret; 
0x0000000000410cb1: mov rbx, rcx; mov rcx, rdx; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x00000000004647d2: mov rbx, rcx; mov rcx, rsi; call rdx; 
0x0000000000403c79: mov rbx, rcx; nop dword ptr [rax]; call 0x39a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000403d1a: mov rbx, rcx; nop dword ptr [rax]; call 0x5cea0; add rsp, 0x60; pop rbp; ret; 
0x000000000040c7dc: mov rbx, rcx; nop; call 0x13ec0; add rsp, 0x40; pop rbp; ret; 
0x000000000045f01f: mov rbx, rcx; pop rbp; ret; 
0x0000000000418a57: mov rbx, rcx; ret; 
0x000000000045ef14: mov rbx, rdi; add rcx, rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000428ed3: mov rbx, rdi; add rsp, 0x18; pop rbp; ret; 
0x000000000041f0f3: mov rbx, rdi; add rsp, 0x40; pop rbp; ret; 
0x000000000046b691: mov rbx, rdi; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x000000000040e0b7: mov rbx, rdi; call rcx; 
0x000000000040d28c: mov rbx, rdi; call rsi; 
0x0000000000426fd1: mov rbx, rdi; lea rdx, [rsp + 0x110]; call rcx; 
0x00000000004078c0: mov rbx, rdi; mov rcx, r8; call 0x4a6a0; add rsp, 0x140; pop rbp; ret; 
0x0000000000464946: mov rbx, rdi; mov rcx, r9; call rsi; 
0x000000000040f49b: mov rbx, rdi; nop; call rcx; 
0x0000000000418a5d: mov rbx, rdi; ret; 
0x00000000004018cf: mov rbx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000046d512: mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000434859: mov rbx, rdx; add rsp, 0x20; pop rbp; ret; 
0x0000000000411422: mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000040d1a0: mov rbx, rdx; add rsp, 0x30; pop rbp; ret; 
0x000000000040d5da: mov rbx, rdx; add rsp, 0x38; pop rbp; ret; 
0x000000000046978a: mov rbx, rdx; add rsp, 0x70; pop rbp; ret; 
0x000000000044930b: mov rbx, rdx; call 0x48160; add rsp, 0x10; pop rbp; ret; 
0x000000000044e7f2: mov rbx, rdx; call 0x4e860; xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x000000000040f3a3: mov rbx, rdx; call 0xeb00; add rsp, 0x98; pop rbp; ret; 
0x00000000004642f5: mov rbx, rdx; call rsi; 
0x0000000000449792: mov rbx, rdx; mov ecx, eax; mov eax, esi; add rsp, 0x78; pop rbp; ret; 
0x0000000000460aa9: mov rbx, rdx; mov ecx, eax; mov rax, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004036eb: mov rbx, rdx; mov rcx, 0; ret; 
0x00000000004747be: mov rbx, rdx; mov rcx, r8; add rsp, 0x50; pop rbp; ret; 
0x0000000000412048: mov rbx, rdx; mov rcx, r8; xor edi, edi; add rsp, 0x10; pop rbp; ret; 
0x00000000004113ed: mov rbx, rdx; mov rcx, rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000401110: mov rbx, rdx; mov rcx, rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000432f82: mov rbx, rdx; mov rcx, rbx; call 0x329e0; sub rsp, -0x80; pop rbp; ret; 
0x0000000000463f92: mov rbx, rdx; mov rcx, rsi; add rsp, 0x28; pop rbp; ret; 
0x00000000004724c9: mov rbx, rdx; mov rcx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004728fb: mov rbx, rdx; mov rcx, rsi; add rsp, 0x40; pop rbp; ret; 
0x00000000004747cc: mov rbx, rdx; mov rcx, rsi; add rsp, 0x50; pop rbp; ret; 
0x000000000047410a: mov rbx, rdx; mov rcx, rsi; add rsp, 0xa0; pop rbp; ret; 
0x000000000040e698: mov rbx, rdx; nop dword ptr [rax + rax]; call 0xeb00; add rsp, 0xa8; pop rbp; ret; 
0x0000000000476cdb: mov rbx, rdx; nop; call 0x75420; add rsp, 0x20; pop rbp; ret; 
0x00000000004012a5: mov rbx, rdx; pop rbp; ret; 
0x0000000000429bd6: mov rbx, rdx; ret; 
0x000000000041d3a3: mov rbx, rsi; add rsp, 0x10; pop rbp; ret; 
0x000000000041cf4c: mov rbx, rsi; add rsp, 0x28; pop rbp; ret; 
0x00000000004687c0: mov rbx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004749e4: mov rbx, rsi; add rsp, 0x38; pop rbp; ret; 
0x00000000004040c5: mov rbx, rsi; call 0x4100; add rsp, 0x18; pop rbp; ret; 
0x0000000000404065: mov rbx, rsi; call 0x41c0; add rsp, 0x18; pop rbp; ret; 
0x000000000044e4de: mov rbx, rsi; call 0x4e540; add rsp, 0x78; pop rbp; ret; 
0x00000000004771d1: mov rbx, rsi; call 0x75420; add rsp, 0xd8; pop rbp; ret; 
0x000000000040e7c3: mov rbx, rsi; call rcx; 
0x00000000004465bc: mov rbx, rsi; mov ecx, 1; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000473d33: mov rbx, rsi; mov rcx, rdi; add rsp, 0x88; pop rbp; ret; 
0x00000000004186df: mov rbx, rsi; mov rcx, rdi; call 0x18800; add rsp, 0x50; pop rbp; ret; 
0x000000000045efb3: mov rbx, rsi; pop rbp; ret; 
0x0000000000429d17: mov rbx, rsi; ret; 
0x000000000043a341: mov rbx, rsi; xor ecx, ecx; add rsp, 0x38; pop rbp; ret; 
0x000000000045e99e: mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x000000000045e9d7: mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; mov rsp, rbx; pop rbp; ret; 
0x000000000045ebeb: mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x0000000000457d37: mov rcx, -1; nop; call 0x37480; add rsp, 0x18; pop rbp; ret; 
0x000000000045af48: mov rcx, 0; call rax; 
0x00000000004036ee: mov rcx, 0; ret; 
0x000000000047c95b: mov rcx, qword ptr [r10 + 0x98]; mov rax, rdi; call rcx; 
0x00000000004598c1: mov rcx, qword ptr [r14 + 0x30]; inc dword ptr [rcx + 0x108]; mov rcx, qword ptr [rcx + 0xd0]; movsxd rax, dword ptr [rcx]; ret; 
0x0000000000457ece: mov rcx, qword ptr [r14 + 0x30]; mov rax, qword ptr [rcx + 0xd0]; call 0x2c680; add rsp, 8; pop rbp; ret; 
0x000000000047b460: mov rcx, qword ptr [r9 + 0x48]; mov rax, rbx; call rcx; 
0x000000000047b5f3: mov rcx, qword ptr [r9 + 0xf8]; mov rax, rbx; call rcx; 
0x000000000040e488: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + 0x10], rbx; add rsp, 0x30; pop rbp; ret; 
0x0000000000470423: mov rcx, qword ptr [rax + 0x10]; mov rax, rdx; call 0x6fde0; add rsp, 0x18; pop rbp; ret; 
0x000000000045fcf8: mov rcx, qword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x000000000041b33d: mov rcx, qword ptr [rax + 0x18]; lea rax, [rdx + rcx]; add rsp, 0x20; pop rbp; ret; 
0x00000000004491c8: mov rcx, qword ptr [rax + 0x18]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + 0x18], rbx; pop rbp; ret; 
0x000000000041586b: mov rcx, qword ptr [rax + 0x18]; mov qword ptr [rbx], rcx; mov qword ptr [rax + 0x18], rbx; ret; 
0x00000000004607b0: mov rcx, qword ptr [rax + 0x18]; mov rax, qword ptr [rsp + 0x48]; call rcx; 
0x000000000042fceb: mov rcx, qword ptr [rax + 0x18]; mov rax, rbx; call rcx; 
0x0000000000464258: mov rcx, qword ptr [rax + 0x18]; mov rax, rbx; nop; call rcx; 
0x0000000000472e20: mov rcx, qword ptr [rax + 0x20]; mov rbx, qword ptr [rax + 0x28]; mov rax, rcx; ret; 
0x0000000000472db3: mov rcx, qword ptr [rax + 0x20]; mov rcx, qword ptr [rcx + 0x18]; mov rdx, qword ptr [rax + 0x28]; mov rax, rdx; call rcx; 
0x0000000000429e75: mov rcx, qword ptr [rax + 0x28]; lea rax, [rax + rcx*8]; lea rax, [rax + 0x30]; add rsp, 0x10; pop rbp; ret; 
0x000000000046fec5: mov rcx, qword ptr [rax + 0x38]; mov rax, rbx; call rcx; 
0x000000000046fec5: mov rcx, qword ptr [rax + 0x38]; mov rax, rbx; call rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000410f80: mov rcx, qword ptr [rax + 0x48]; test byte ptr [rcx], al; mov rcx, qword ptr [rcx + rbx]; not rcx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047bcad: mov rcx, qword ptr [rax + 0x50]; mov rax, rbx; mov rbx, rdi; call rcx; 
0x000000000046fe53: mov rcx, qword ptr [rax + 0x98]; mov rax, rbx; call rcx; 
0x000000000046fc27: mov rcx, qword ptr [rax + 0xf8]; mov rax, rbx; call rcx; 
0x000000000045f806: mov rcx, qword ptr [rax + 8]; cmp qword ptr [rbx + 8], rcx; sete al; ret; 
0x000000000040df73: mov rcx, qword ptr [rax + 8]; mov qword ptr [r11 + 8], rcx; movups xmmword ptr [rax], xmm15; add rsp, 0x60; pop rbp; ret; 
0x0000000000403751: mov rcx, qword ptr [rax + 8]; mov rax, rdx; call 0x8d60; add rsp, 0x18; pop rbp; ret; 
0x000000000046406a: mov rcx, qword ptr [rax + 8]; mov rdi, qword ptr [rax + 0x10]; mov rax, rsi; call rdx; 
0x000000000044f1ea: mov rcx, qword ptr [rax + r8*8]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + r8*8], rsi; add rsp, 0x18; pop rbp; ret; 
0x00000000004157fe: mov rcx, qword ptr [rax]; add qword ptr [rax + 0x30], rcx; mov rax, rbx; add rsp, 0x28; pop rbp; ret; 
0x0000000000402a40: mov rcx, qword ptr [rax]; cmp qword ptr [rbx], rcx; sete al; ret; 
0x0000000000460492: mov rcx, qword ptr [rax]; cmp qword ptr [rcx + 0x18], 0; setne al; pop rbp; ret; 
0x0000000000477dc8: mov rcx, qword ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax], r8; sub rsp, -0x80; pop rbp; ret; 
0x0000000000409ead: mov rcx, qword ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax], rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000478cbe: mov rcx, qword ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax], rdx; add rsp, 0xa8; pop rbp; ret; 
0x00000000004753c1: mov rcx, qword ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax], rsi; add rsp, 0x38; pop rbp; ret; 
0x000000000045f152: mov rcx, qword ptr [rax]; mov rbx, qword ptr [rax + 8]; mov rax, rcx; pop rbp; ret; 
0x0000000000460600: mov rcx, qword ptr [rax]; mov rbx, qword ptr [rax + 8]; mov rax, rcx; ret; 
0x00000000004413f4: mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x000000000040a0fa: mov rcx, qword ptr [rax]; mov rdx, rax; mov rax, rbx; call rcx; 
0x000000000046d50e: mov rcx, qword ptr [rbx + 0x10]; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000045f73a: mov rcx, qword ptr [rbx + 0x18]; cmp qword ptr [rax + 0x18], rcx; sete al; ret; 
0x0000000000410811: mov rcx, qword ptr [rbx + 0x20]; mov rax, qword ptr [rsp + 0x18]; call 0x10860; add rsp, 0x20; pop rbp; ret; 
0x000000000040e531: mov rcx, qword ptr [rbx + 0x20]; mov rax, qword ptr [rsp + 0x18]; call 0xe580; add rsp, 0x20; pop rbp; ret; 
0x000000000040f251: mov rcx, qword ptr [rbx + 0x20]; mov rax, qword ptr [rsp + 0x18]; call 0xf2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000040fb71: mov rcx, qword ptr [rbx + 0x20]; mov rax, qword ptr [rsp + 0x18]; call 0xfbc0; add rsp, 0x20; pop rbp; ret; 
0x0000000000479d84: mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x178]; call rcx; 
0x0000000000479c84: mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x180]; call rcx; 
0x00000000004749f2: mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x68]; call rcx; 
0x0000000000472db7: mov rcx, qword ptr [rcx + 0x18]; mov rdx, qword ptr [rax + 0x28]; mov rax, rdx; call rcx; 
0x00000000004208f0: mov rcx, qword ptr [rcx + 0x30]; dec dword ptr [rcx + 0x108]; mov rax, -1; add rsp, 0x40; pop rbp; ret; 
0x00000000004598cb: mov rcx, qword ptr [rcx + 0xd0]; movsxd rax, dword ptr [rcx]; ret; 
0x0000000000471c14: mov rcx, qword ptr [rcx + 0xf8]; mov rax, qword ptr [rsp + 0xb0]; call rcx; 
0x0000000000477c3d: mov rcx, qword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000478151: mov rcx, qword ptr [rcx + 0xf8]; mov rax, rdx; call rcx; 
0x00000000004440b4: mov rcx, qword ptr [rcx + 8]; nop; mov qword ptr [rcx + 0xa8], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000044ec85: mov rcx, qword ptr [rcx + 8]; xchg qword ptr [rax + 0x1208], rcx; add rsp, 0x58; pop rbp; ret; 
0x0000000000410f86: mov rcx, qword ptr [rcx + rbx]; not rcx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000040db0d: mov rcx, qword ptr [rcx]; mov rax, rcx; add rsp, 0x78; pop rbp; ret; 
0x000000000040530b: mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x0000000000454910: mov rcx, qword ptr [rdx + 0x10]; cmp rax, rcx; jne 0x5491f; mov eax, 0x21; ret; 
0x000000000046fe4d: mov rcx, qword ptr [rdx + 0x48]; call rcx; 
0x0000000000470a21: mov rcx, qword ptr [rdx + 0x98]; call rcx; 
0x000000000046ffc8: mov rcx, qword ptr [rdx + 0xa0]; mov rax, rbx; call rcx; 
0x000000000047afad: mov rcx, qword ptr [rdx + 0xf8]; mov rax, rbx; call rcx; 
0x00000000004155ee: mov rcx, qword ptr [rdx + 8]; mov rax, qword ptr [rcx + 8]; call 0x25560; add rsp, 8; pop rbp; ret; 
0x000000000045f017: mov rcx, qword ptr [rdx + rcx + 8]; mov rax, rsi; mov rbx, rcx; pop rbp; ret; 
0x000000000045efac: mov rcx, qword ptr [rdx + rcx]; mov rax, rcx; mov rbx, rsi; pop rbp; ret; 
0x000000000041e36d: mov rcx, qword ptr [rdx]; call rcx; 
0x000000000040e0ae: mov rcx, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, r12; mov rbx, rdi; call rcx; 
0x0000000000410a56: mov rcx, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, rsi; mov rbx, rdi; call rcx; 
0x000000000040f492: mov rcx, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, rsi; mov rbx, rdi; nop; call rcx; 
0x000000000040ec4a: mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x30]; mov rbx, rsi; call rcx; 
0x000000000040ef33: mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x50]; mov rbx, rsi; call rcx; 
0x0000000000410088: mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x78]; mov rbx, rsi; call rcx; 
0x00000000004103fd: mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x80]; mov rbx, rsi; call rcx; 
0x000000000040e7ba: mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; mov rax, r13; mov rbx, rsi; call rcx; 
0x000000000047b19f: mov rcx, qword ptr [rdx]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rdx], rax; add rsp, 0x1d0; pop rbp; ret; 
0x0000000000479708: mov rcx, qword ptr [rdx]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rdx], rax; add rsp, 0x90; pop rbp; ret; 
0x000000000042b69a: mov rcx, qword ptr [rdx]; mov rax, qword ptr [rcx]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000454e09: mov rcx, qword ptr [rdx]; mov rax, qword ptr [rip + 0xcd88d]; lea rbx, [rsp + 0x10]; call rcx; 
0x000000000044e9a2: mov rcx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x28]; mov rbx, qword ptr [rsp + 0x40]; mov rsi, rcx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x000000000040e7fc: mov rcx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; mov rbx, rax; call rcx; 
0x0000000000436890: mov rcx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x50]; call rcx; 
0x000000000040e034: mov rcx, qword ptr [rdx]; mov rax, r12; mov rbx, rax; call rcx; 
0x00000000004333dc: mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x00000000004157db: mov rcx, qword ptr [rdx]; mov rsi, qword ptr [rax + 0x10]; mov rax, rsi; call rcx; 
0x0000000000415bf6: mov rcx, qword ptr [rip + 0x13b34b]; cmp rax, rcx; setbe al; add rsp, 8; pop rbp; ret; 
0x0000000000439f68: mov rcx, qword ptr [rip + 0x64481]; mov rax, qword ptr [rsp + 0x20]; lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000439e53: mov rcx, qword ptr [rip + 0x64596]; mov rax, qword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; 
0x0000000000408ca5: mov rcx, qword ptr [rip + 0x957bc]; mov rax, rsi; lea rdx, [rip + 0x957b2]; call rcx; 
0x00000000004729b6: mov rcx, qword ptr [rip + 0xac20b]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xac200], rax; pop rbp; ret; 
0x0000000000474f4e: mov rcx, qword ptr [rip + 0xad8bb]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xad8b0], rax; pop rbp; ret; 
0x000000000045eb1d: mov rcx, qword ptr [rip + 0xc3b7c]; lea r8, [rip + 0xf2095]; lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000045eae4: mov rcx, qword ptr [rip + 0xc3bb5]; lea r9, [rip - 0xf2]; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x0000000000458edb: mov rcx, qword ptr [rip + 0xc973e]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xc9733], rax; pop rbp; ret; 
0x000000000042dc24: mov rcx, qword ptr [rip + 0xf4d05]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xf4cfa], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000041f852: mov rcx, qword ptr [rip + 0xf9947]; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046069d: mov rcx, qword ptr [rsi + 0x20]; mov rax, rdx; call rcx; 
0x000000000040e02c: mov rcx, qword ptr [rsi + 0x30]; mov rdx, qword ptr [rcx + 0x18]; mov rcx, qword ptr [rdx]; mov rax, r12; mov rbx, rax; call rcx; 
0x000000000045ddf3: mov rcx, qword ptr [rsi + rbx - 8]; mov qword ptr [rdi], rax; mov qword ptr [rdi + rbx - 8], rcx; ret; 
0x00000000004030ec: mov rcx, qword ptr [rsi + rbx - 8]; mov rdx, qword ptr [rdi + rbx - 8]; cmp rcx, rdx; sete al; ret; 
0x00000000004755ed: mov rcx, qword ptr [rsi]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rsi], rax; add rsp, 0x60; pop rbp; ret; 
0x0000000000477189: mov rcx, qword ptr [rsi]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rsi], rax; add rsp, 0xd8; pop rbp; ret; 
0x000000000043a52f: mov rcx, qword ptr [rsi]; mov rbx, qword ptr [rdx + 0x280]; mov rax, qword ptr [rsp + 0x30]; mov rdx, rsi; call rcx; 
0x000000000044ec82: mov rcx, qword ptr [rsi]; mov rcx, qword ptr [rcx + 8]; xchg qword ptr [rax + 0x1208], rcx; add rsp, 0x58; pop rbp; ret; 
0x000000000045613a: mov rcx, qword ptr [rsp + 0x108]; call 0x55e20; add rsp, 0x120; pop rbp; ret; 
0x0000000000446072: mov rcx, qword ptr [rsp + 0x10]; mov byte ptr [rcx + 0x116], 1; add rsp, 0x30; pop rbp; ret; 
0x00000000004425d6: mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rcx + 0x148], 0; add rsp, 0x20; pop rbp; ret; 
0x00000000004220cf: mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rcx + 8], rax; pop rbp; ret; 
0x000000000044fbe5: mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rcx], rax; add rsp, 0x18; pop rbp; ret; 
0x000000000043b275: mov rcx, qword ptr [rsp + 0x10]; mov rax, qword ptr [rcx + 0x30]; dec dword ptr [rax + 0x108]; add rsp, 0x28; pop rbp; ret; 
0x00000000004414ec: mov rcx, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; 
0x000000000043c9e5: mov rcx, qword ptr [rsp + 0x10]; movups xmmword ptr [rcx], xmm15; mov qword ptr [rcx + 0x10], 0; add rsp, 0x18; pop rbp; ret; 
0x0000000000436654: mov rcx, qword ptr [rsp + 0x10]; xchg dword ptr [rcx + 0x11c], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000046fa80: mov rcx, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x000000000043c565: mov rcx, qword ptr [rsp + 0x1e0]; mov qword ptr [r11], rcx; mov qword ptr [rax], rcx; add rsp, 0x210; pop rbp; ret; 
0x00000000004293f8: mov rcx, qword ptr [rsp + 0x20]; add rsp, 0x58; pop rbp; ret; 
0x0000000000429d72: mov rcx, qword ptr [rsp + 0x20]; call 0x29580; add rsp, 0x30; pop rbp; ret; 
0x000000000044e9b2: mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x000000000047398a: mov rcx, qword ptr [rsp + 0x20]; mov dword ptr [rcx + 0x2c], 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004049c9: mov rcx, qword ptr [rsp + 0x20]; mov dword ptr [rcx], eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000457422: mov rcx, qword ptr [rsp + 0x20]; movzx eax, word ptr [rcx + 4]; and eax, 0x7fff; add rsp, 0x38; pop rbp; ret; 
0x0000000000479fa1: mov rcx, qword ptr [rsp + 0x258]; mov edi, dword ptr [rsp + 0x2c]; call rdx; 
0x000000000044ac77: mov rcx, qword ptr [rsp + 0x28]; add rax, rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000446bd9: mov rcx, qword ptr [rsp + 0x28]; add rsp, 0x60; pop rbp; ret; 
0x000000000040471d: mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rcx], rax; add rsp, 0x30; pop rbp; ret; 
0x000000000046ee56: mov rcx, qword ptr [rsp + 0x28]; mov rax, qword ptr [rcx]; mov rbx, qword ptr [rcx + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000452df7: mov rcx, qword ptr [rsp + 0x2c8]; mov eax, 1; lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000452dde: mov rcx, qword ptr [rsp + 0x2c8]; xor eax, eax; lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000459aa6: mov rcx, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x0000000000452903: mov rcx, qword ptr [rsp + 0x30]; call 0x52940; add rsp, 0x40; pop rbp; ret; 
0x0000000000472235: mov rcx, qword ptr [rsp + 0x30]; cmp rcx, 2; sete al; add rsp, 0x20; pop rbp; ret; 
0x0000000000479d7f: mov rcx, qword ptr [rsp + 0x30]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x178]; call rcx; 
0x0000000000472a64: mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x60; pop rbp; ret; 
0x0000000000472af6: mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x78; pop rbp; ret; 
0x0000000000479c7f: mov rcx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x180]; call rcx; 
0x0000000000432ac5: mov rcx, qword ptr [rsp + 0x40]; call 0x4f320; add rsp, 0x28; pop rbp; ret; 
0x000000000044b688: mov rcx, qword ptr [rsp + 0x48]; add rsp, 0x100; pop rbp; ret; 
0x00000000004445de: mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rax + 0x80], rcx; add rsp, 0x68; pop rbp; ret; 
0x0000000000404c34: mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rax + 8], rcx; add rsp, 0x30; pop rbp; ret; 
0x0000000000435910: mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rcx + 0xc0], rax; add rsp, 0x38; pop rbp; ret; 
0x000000000043605c: mov rcx, qword ptr [rsp + 0x48]; test rax, rax; jne 0x3606c; add rsp, 0x58; pop rbp; ret; 
0x0000000000413514: mov rcx, qword ptr [rsp + 0x50]; call 0x1d260; add rsp, 0x58; pop rbp; ret; 
0x000000000041029e: mov rcx, qword ptr [rsp + 0x50]; lea rax, [rcx + rdx]; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x0000000000471c0f: mov rcx, qword ptr [rsp + 0x50]; mov rcx, qword ptr [rcx + 0xf8]; mov rax, qword ptr [rsp + 0xb0]; call rcx; 
0x000000000046253f: mov rcx, qword ptr [rsp + 0x58]; call 0x62040; add rsp, 0x38; pop rbp; ret; 
0x0000000000447491: mov rcx, qword ptr [rsp + 0x58]; lea rbx, [rax + rcx]; add rsp, 0x68; pop rbp; nop; ret; 
0x000000000042e24e: mov rcx, qword ptr [rsp + 0x58]; mov rdi, qword ptr [rsp + 0x30]; call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x0000000000469438: mov rcx, qword ptr [rsp + 0x60]; add rsp, 0x70; pop rbp; ret; 
0x00000000004749ed: mov rcx, qword ptr [rsp + 0x60]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x68]; call rcx; 
0x0000000000473cd4: mov rcx, qword ptr [rsp + 0x68]; add rsp, 0x88; pop rbp; ret; 
0x0000000000463bc7: mov rcx, qword ptr [rsp + 0x68]; lea rax, [rax + rcx]; lea rax, [rax + 1]; add rsp, 0x78; pop rbp; ret; 
0x000000000041e09d: mov rcx, qword ptr [rsp + 0x70]; mov rdx, qword ptr [rcx + 0x80]; mov rbx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; call rbx; 
0x000000000042bef4: mov rcx, qword ptr [rsp + 0x70]; xchg qword ptr [rax], rcx; add rsp, 0x58; pop rbp; ret; 
0x00000000004740de: mov rcx, qword ptr [rsp + 0x80]; add rsp, 0xa0; pop rbp; ret; 
0x0000000000471720: mov rcx, qword ptr [rsp + 0x80]; call 0x70e00; add rsp, 0x108; pop rbp; ret; 
0x0000000000460761: mov rcx, qword ptr [rsp + 0x90]; call rdx; 
0x0000000000453b39: mov rcx, qword ptr [rsp + 0x90]; xor edi, edi; call 0x52940; add rsp, 0x60; pop rbp; ret; 
0x000000000046533c: mov rcx, qword ptr [rsp + 0x98]; add rsp, 0x120; pop rbp; ret; 
0x000000000042e797: mov rcx, qword ptr [rsp + 0xb8]; xchg byte ptr [rcx], al; add rsp, 0xc0; pop rbp; ret; 
0x000000000043295f: mov rcx, qword ptr [rsp + 8]; dec dword ptr [rcx + 0x108]; add rsp, 0x10; pop rbp; ret; 
0x000000000043be7f: mov rcx, qword ptr [rsp + 8]; mov qword ptr [rcx], rax; mov qword ptr [rcx + 8], rbx; add rsp, 0x10; pop rbp; ret; 
0x000000000045e51c: mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x170; popfq; pop rbp; ret; 
0x000000000040e164: mov rcx, qword ptr ds:[rsi + 0x30]; mov rdx, qword ptr [rcx + 0x18]; mov rcx, qword ptr [rdx]; mov rax, r12; mov rbx, rax; call rcx; 
0x00000000004646aa: mov rcx, r10; mov rdi, r9; call 0x64500; add rsp, 0x78; pop rbp; ret; 
0x0000000000411550: mov rcx, r10; mov rdi, rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004671a3: mov rcx, r11; add rsp, 0x78; pop rbp; ret; 
0x000000000046ea5c: mov rcx, r8; add rsp, 0x38; pop rbp; ret; 
0x00000000004747c1: mov rcx, r8; add rsp, 0x50; pop rbp; ret; 
0x00000000004078c3: mov rcx, r8; call 0x4a6a0; add rsp, 0x140; pop rbp; ret; 
0x0000000000428562: mov rcx, r8; lea rdx, [rsp + 0x80]; call rdi; 
0x000000000041204b: mov rcx, r8; xor edi, edi; add rsp, 0x10; pop rbp; ret; 
0x00000000004648fe: mov rcx, r9; call rdi; 
0x0000000000464949: mov rcx, r9; call rsi; 
0x00000000004113f0: mov rcx, rax; add rsp, 0x28; pop rbp; ret; 
0x000000000042983a: mov rcx, rax; lea rax, [rcx + r8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004777bd: mov rcx, rax; lea rax, [rip + 0xa7419]; call 0x61820; add rsp, 0x18; pop rbp; ret; 
0x000000000047306c: mov rcx, rax; mov rax, -1; add rsp, 0x10; pop rbp; ret; 
0x0000000000464267: mov rcx, rax; mov rax, qword ptr [rsp + 0x28]; call 0x643c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000409d63: mov rcx, rax; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000043c8cd: mov rcx, rax; mov rax, rcx; add rsp, 0x20; pop rbp; ret; 
0x0000000000429772: mov rcx, rax; mov rax, rcx; add rsp, 0x30; pop rbp; ret; 
0x0000000000470568: mov rcx, rax; mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004703a8: mov rcx, rax; mov rax, rcx; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000046f23e: mov rcx, rax; mov rax, rsi; call 0x6f4e0; add rsp, 0x18; pop rbp; ret; 
0x0000000000477c3a: mov rcx, rax; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x000000000047814b: mov rcx, rax; mov rdx, rbx; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rdx; call rcx; 
0x000000000044a7f9: mov rcx, rax; mov rsi, rdi; mov rdi, rbx; add rsp, 0x18; pop rbp; ret; 
0x00000000004525b7: mov rcx, rax; movzx eax, byte ptr [rsp + 0x38]; nop; call rcx; 
0x00000000004013b4: mov rcx, rax; neg rcx; cmp rcx, rbx; jb 0x13c1; pop rbp; ret; 
0x000000000044b4b1: mov rcx, rbx; add rsp, 0x100; pop rbp; ret; 
0x0000000000401113: mov rcx, rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000429274: mov rcx, rbx; add rsp, 0x58; pop rbp; ret; 
0x00000000004466be: mov rcx, rbx; add rsp, 0x60; pop rbp; ret; 
0x00000000004042c1: mov rcx, rbx; call 0x2e140; add rsp, 0x18; pop rbp; ret; 
0x0000000000432f85: mov rcx, rbx; call 0x329e0; sub rsp, -0x80; pop rbp; ret; 
0x000000000045cd63: mov rcx, rbx; call rax; 
0x0000000000428870: mov rcx, rbx; mov rbx, rax; mov rax, qword ptr [rsp + 0x18]; call rsi; 
0x000000000042b465: mov rcx, rbx; mov rbx, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000046f542: mov rcx, rbx; mov rbx, rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000041ba59: mov rcx, rbx; nop dword ptr [rax]; call 0x1ba80; add rsp, 0x30; pop rbp; ret; 
0x000000000045dd67: mov rcx, rbx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044d049: mov rcx, rbx; xor edi, edi; add rsp, 0x10; pop rbp; ret; 
0x000000000047631a: mov rcx, rdi; add rsp, 0x28; pop rbp; ret; 
0x0000000000473d36: mov rcx, rdi; add rsp, 0x88; pop rbp; ret; 
0x00000000004186e2: mov rcx, rdi; call 0x18800; add rsp, 0x50; pop rbp; ret; 
0x00000000004606cb: mov rcx, rdi; call 0x41c0; add rsp, 0x68; pop rbp; ret; 
0x000000000046a680: mov rcx, rdi; call 0x5d320; add rsp, 0x100; pop rbp; ret; 
0x000000000047b5e8: mov rcx, rdi; call 0x6fca0; mov r9, rax; mov rcx, qword ptr [r9 + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000477c32: mov rcx, rdi; call 0x6fca0; mov rcx, rax; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x000000000047afa2: mov rcx, rdi; call 0x6fca0; mov rdx, rax; mov rcx, qword ptr [rdx + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000444b70: mov rcx, rdi; call rsi; 
0x0000000000412066: mov rcx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000046eb56: mov rcx, rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000046d77a: mov rcx, rdx; add rsp, 0x70; pop rbp; ret; 
0x0000000000469099: mov rcx, rdx; add rsp, 0x88; pop rbp; ret; 
0x000000000044ff51: mov rcx, rdx; call 0x50380; mov eax, eax; add rsp, 0x38; pop rbp; ret; 
0x0000000000403d09: mov rcx, rdx; call 0x5ce60; add rsp, 0x60; pop rbp; ret; 
0x0000000000410cb4: mov rcx, rdx; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x000000000047798a: mov rcx, rdx; call rsi; 
0x0000000000458f98: mov rcx, rdx; mov edi, 3; call 0x2a860; add rsp, 0x20; pop rbp; ret; 
0x0000000000411f1e: mov rcx, rdx; mov rdi, r10; call 0x12140; add rsp, 0x48; pop rbp; ret; 
0x00000000004294f7: mov rcx, rdx; shl rsi, cl; or qword ptr [rax + rbx*8], rsi; add rsp, 0x10; pop rbp; ret; 
0x0000000000413723: mov rcx, rdx; shr rbx, cl; mov qword ptr [rax + 0x40], rbx; add rsp, 0x48; pop rbp; ret; 
0x0000000000463f95: mov rcx, rsi; add rsp, 0x28; pop rbp; ret; 
0x00000000004724cc: mov rcx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004728fe: mov rcx, rsi; add rsp, 0x40; pop rbp; ret; 
0x00000000004747cf: mov rcx, rsi; add rsp, 0x50; pop rbp; ret; 
0x000000000047410d: mov rcx, rsi; add rsp, 0xa0; pop rbp; ret; 
0x0000000000439f94: mov rcx, rsi; call 0x402a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000410eaa: mov rcx, rsi; call 0x5dcc0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; pop rbp; ret; 
0x00000000004647d5: mov rcx, rsi; call rdx; 
0x000000000041d452: mov rcx, rsi; mov rdx, qword ptr [rbx + 0x98]; cmp rcx, rdx; cmovb rcx, rdx; mov rax, rcx; ret; 
0x0000000000478706: mov rdi, -1; call 0x76de0; add rsp, 0x28; pop rbp; ret; 
0x000000000045edef: mov rdi, 0x1002; mov rax, 0x9e; syscall; 
0x000000000046406e: mov rdi, qword ptr [rax + 0x10]; mov rax, rsi; call rdx; 
0x00000000004414a9: mov rdi, qword ptr [rbx + 8]; mov rax, rsi; mov rbx, rdi; call rcx; 
0x000000000047797e: mov rdi, qword ptr [rcx + 0x10]; mov rsi, rax; mov rax, qword ptr [rsp + 0x58]; mov rcx, rdx; call rsi; 
0x000000000045cd54: mov rdi, qword ptr [rdi + 8]; sub rdi, rdx; mov qword ptr [rsp + 0x28], rdi; mov rdi, rbx; mov rcx, rbx; call rax; 
0x000000000045b165: mov rdi, qword ptr [rdi]; call rdi; 
0x000000000045b1a4: mov rdi, qword ptr [rdi]; pop rbp; jmp rdi; 
0x000000000040d8e5: mov rdi, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x70]; mov rbx, rcx; call rdi; 
0x0000000000454d5c: mov rdi, qword ptr [rip + 0xcd945]; mov rbx, rax; mov rdx, rcx; mov rax, rdi; call rsi; 
0x0000000000428857: mov rdi, qword ptr [rsi]; mov r8, qword ptr [rdx + 0x10]; mov qword ptr [rsp + 0x20], r8; mov rdx, rsi; call rdi; 
0x000000000041578b: mov rdi, qword ptr [rsp + 0x18]; mov rax, rdi; add rsp, 0x28; pop rbp; ret; 
0x00000000004130fd: mov rdi, qword ptr [rsp + 0x20]; mov qword ptr [rdx + rsi*8 + 0x28], rdi; add rsp, 0x30; pop rbp; ret; 
0x000000000042e1a4: mov rdi, qword ptr [rsp + 0x28]; call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x000000000042e253: mov rdi, qword ptr [rsp + 0x30]; call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x000000000040c885: mov rdi, qword ptr [rsp + 0x30]; mov rax, rdi; add rsp, 0x40; pop rbp; ret; 
0x00000000004052fe: mov rdi, qword ptr [rsp + 0x60]; mov rax, qword ptr [rbx]; mov qword ptr [rsp + 0x18], rax; mov rcx, qword ptr [rdi]; mov rdx, rdi; call rcx; 
0x000000000045eca0: mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov rax, 0x1c; syscall; 
0x000000000045eda0: mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; mov rax, 0x83; syscall; 
0x0000000000411f21: mov rdi, r10; call 0x12140; add rsp, 0x48; pop rbp; ret; 
0x000000000047a2ec: mov rdi, r10; mov esi, 0x70; call 0x79120; add rsp, 0x90; pop rbp; ret; 
0x00000000004646ad: mov rdi, r9; call 0x64500; add rsp, 0x78; pop rbp; ret; 
0x000000000044a7ff: mov rdi, rbx; add rsp, 0x18; pop rbp; ret; 
0x00000000004397b3: mov rdi, rbx; mov esi, 1; xor ebx, ebx; add rsp, 0x60; pop rbp; ret; 
0x000000000045cd60: mov rdi, rbx; mov rcx, rbx; call rax; 
0x0000000000450ba4: mov rdi, rbx; mov rsi, rbx; call 0x4f520; add rsp, 0x40; pop rbp; ret; 
0x00000000004036c9: mov rdi, rbx; syscall; 
0x00000000004395c6: mov rdi, rbx; xor eax, eax; xor ebx, ebx; add rsp, 0x60; pop rbp; ret; 
0x000000000044a362: mov rdi, rcx; call 0x4a0e0; add rsp, 0x40; pop rbp; ret; 
0x000000000044a4f5: mov rdi, rcx; call 0x4a0e0; add rsp, 0x60; pop rbp; ret; 
0x000000000044a61f: mov rdi, rcx; call 0x4a0e0; add rsp, 0x70; pop rbp; ret; 
0x0000000000407483: mov rdi, rcx; call 0x4a0e0; add rsp, 0xf8; pop rbp; ret; 
0x000000000044479d: mov rdi, rcx; call 0x6480; add rsp, 0x30; pop rbp; ret; 
0x0000000000411eba: mov rdi, rcx; nop dword ptr [rax]; call 0x12140; add rsp, 0x48; pop rbp; ret; 
0x000000000044a41a: mov rdi, rcx; nop dword ptr [rax]; call 0x4a0e0; add rsp, 0x50; pop rbp; ret; 
0x000000000044e4db: mov rdi, rdx; mov rbx, rsi; call 0x4e540; add rsp, 0x78; pop rbp; ret; 
0x0000000000411553: mov rdi, rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004657c0: mov rdi, rsi; mov esi, edx; call 0x65860; add rsp, 0x120; pop rbp; ret; 
0x000000000045e708: mov rdi, rsp; mov esi, 0; mov eax, 0x23; syscall; 
0x000000000045af41: mov rdx, 0; mov rcx, 0; call rax; 
0x000000000046a16d: mov rdx, qword ptr [r8]; lea rax, [rdx + rcx]; lea rax, [rax - 0x30]; add rsp, 0xc8; pop rbp; ret; 
0x0000000000460752: mov rdx, qword ptr [rax + 0x18]; mov rax, rbx; mov rbx, qword ptr [rsp + 0x88]; mov rcx, qword ptr [rsp + 0x90]; call rdx; 
0x00000000004308e7: mov rdx, qword ptr [rax + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000463fb2: mov rdx, qword ptr [rax + 0x18]; mov rsi, qword ptr [rax + 0x20]; mov rdx, qword ptr [rdx + 0x18]; mov rax, rsi; call rdx; 
0x00000000004608fa: mov rdx, qword ptr [rax + 0x28]; mov rax, rcx; call rdx; 
0x0000000000472dbb: mov rdx, qword ptr [rax + 0x28]; mov rax, rdx; call rcx; 
0x0000000000410a52: mov rdx, qword ptr [rax + 0x48]; mov rcx, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, rsi; mov rbx, rdi; call rcx; 
0x000000000040ec46: mov rdx, qword ptr [rax + 0x48]; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x30]; mov rbx, rsi; call rcx; 
0x000000000040ef2f: mov rdx, qword ptr [rax + 0x48]; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x50]; mov rbx, rsi; call rcx; 
0x0000000000410084: mov rdx, qword ptr [rax + 0x48]; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x78]; mov rbx, rsi; call rcx; 
0x00000000004103f9: mov rdx, qword ptr [rax + 0x48]; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x80]; mov rbx, rsi; call rcx; 
0x000000000040e7b6: mov rdx, qword ptr [rax + 0x48]; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; mov rax, r13; mov rbx, rsi; call rcx; 
0x000000000040d27f: mov rdx, qword ptr [rax + 0x48]; mov rsi, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, rcx; mov rbx, rdi; call rsi; 
0x000000000040d310: mov rdx, qword ptr [rax + 0x48]; mov rsi, qword ptr [rdx]; mov rax, rcx; xor ebx, ebx; call rsi; 
0x000000000041e366: mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000443882: mov rdx, qword ptr [rax + 8]; mov qword ptr [r11 + 8], rdx; mov qword ptr [rax + 8], rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000454a92: mov rdx, qword ptr [rax + rcx*8]; test rdx, rdx; jne 0x54a49; add rsp, 0x60; pop rbp; ret; 
0x0000000000409e0d: mov rdx, qword ptr [rax]; mov qword ptr [r11 + 8], rdx; mov qword ptr [rax], rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000042cb67: mov rdx, qword ptr [rax]; nop; mov qword ptr [rcx + 0xa0], rdx; nop; mov qword ptr [rax], rcx; ret; 
0x0000000000447ecb: mov rdx, qword ptr [rbx + 0x10]; add rcx, rdx; mov qword ptr [rax + 0x68], rcx; ret; 
0x000000000041d455: mov rdx, qword ptr [rbx + 0x98]; cmp rcx, rdx; cmovb rcx, rdx; mov rax, rcx; ret; 
0x00000000004363e2: mov rdx, qword ptr [rbx + 0xb8]; test rdx, rdx; je 0x363ff; mov rax, qword ptr [rdx]; call rax; 
0x000000000046d50a: mov rdx, qword ptr [rbx + 8]; mov rcx, qword ptr [rbx + 0x10]; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000434e42: mov rdx, qword ptr [rcx + 0x140]; mov qword ptr [r11 + 8], rdx; mov qword ptr [rcx + 0x140], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000040e7f8: mov rdx, qword ptr [rcx + 0x18]; mov rcx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; mov rbx, rax; call rcx; 
0x000000000040e030: mov rdx, qword ptr [rcx + 0x18]; mov rcx, qword ptr [rdx]; mov rax, r12; mov rbx, rax; call rcx; 
0x000000000044c428: mov rdx, qword ptr [rcx + 0x68]; add rax, rdx; mov rbx, rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000451b4d: mov rdx, qword ptr [rcx + 0x80]; cmp rdx, rax; jne 0x51b5f; add rsp, 0x30; pop rbp; ret; 
0x000000000041e0a2: mov rdx, qword ptr [rcx + 0x80]; mov rbx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x48]; call rbx; 
0x000000000041e37f: mov rdx, qword ptr [rcx + 0x88]; mov rbx, qword ptr [rdx]; mov eax, 0x10000; call rbx; 
0x000000000041e1da: mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000040ab13: mov rdx, qword ptr [rcx + rax]; mov rbx, qword ptr [rcx + rax + 8]; mov rax, rdx; nop; ret; 
0x00000000004414f1: mov rdx, qword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; 
0x00000000004414f1: mov rdx, qword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; add rsp, 0x20; pop rbp; ret; 
0x000000000046f53f: mov rdx, qword ptr [rcx]; mov rcx, rbx; mov rbx, rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000040d8e1: mov rdx, qword ptr [rdi + 0x18]; mov rdi, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x70]; mov rbx, rcx; call rdi; 
0x00000000004030f1: mov rdx, qword ptr [rdi + rbx - 8]; cmp rcx, rdx; sete al; ret; 
0x0000000000479ead: mov rdx, qword ptr [rdx + 0x18]; mov rax, qword ptr [rsp + 0x188]; call rdx; 
0x0000000000463fba: mov rdx, qword ptr [rdx + 0x18]; mov rax, rsi; call rdx; 
0x0000000000477fd7: mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x00000000004018c8: mov rdx, qword ptr [rdx + 8]; mov rax, rcx; mov rbx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000046ee45: mov rdx, qword ptr [rdx + 8]; mov rbx, qword ptr [rcx + 8]; mov rax, rdx; add rsp, 0x30; pop rbp; ret; 
0x000000000040d5d2: mov rdx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x20]; mov rbx, rdx; add rsp, 0x38; pop rbp; ret; 
0x000000000040d3f6: mov rdx, qword ptr [rdx]; mov rax, rdx; mov ebx, 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000418092: mov rdx, qword ptr [rip + 0x10a587]; test rdx, rdx; je 0x180a3; mov rax, qword ptr [rdx]; call rax; 
0x0000000000473a22: mov rdx, qword ptr [rip + 0xaabf7]; mov rsi, qword ptr [rdx]; mov rax, rcx; call rsi; 
0x0000000000473876: mov rdx, qword ptr [rip + 0xab04b]; mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000473752: mov rdx, qword ptr [rip + 0xab16f]; mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000044f328: mov rdx, qword ptr [rip + 0xd3369]; test rdx, rdx; je 0x4f33f; mov rsi, qword ptr [rdx]; call rsi; 
0x0000000000444b9d: mov rdx, qword ptr [rip + 0xddae4]; test rdx, rdx; je 0x44bd4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x0000000000437f0d: mov rdx, qword ptr [rip + 0xeb5d4]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000436ab5: mov rdx, qword ptr [rip + 0xeca2c]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000433777: mov rdx, qword ptr [rip + 0xeee5a]; nop; test rdx, rdx; je 0x3391f; mov rax, qword ptr [rdx]; call rax; 
0x000000000040d39b: mov rdx, qword ptr [rsi + 0x18]; mov rsi, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x28]; mov rbx, rcx; call rsi; 
0x000000000040d576: mov rdx, qword ptr [rsi + 0x18]; mov rsi, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x30]; mov rbx, rcx; call rsi; 
0x000000000040e0aa: mov rdx, qword ptr [rsi + 0x48]; mov rcx, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, r12; mov rbx, rdi; call rcx; 
0x000000000044084b: mov rdx, qword ptr [rsp + 0x108]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000045e808: mov rdx, qword ptr [rsp + 0x10]; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x0000000000406f66: mov rdx, qword ptr [rsp + 0x10]; mov rax, qword ptr [rdx]; call rax; 
0x000000000045e84a: mov rdx, qword ptr [rsp + 0x18]; mov eax, 0x1b; syscall; 
0x000000000045e84a: mov rdx, qword ptr [rsp + 0x18]; mov eax, 0x1b; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045ee4a: mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xcc; syscall; 
0x000000000045ee4a: mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xcc; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e7e9: mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xde; syscall; 
0x000000000045e7e9: mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xde; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e7ca: mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xea; syscall; 
0x000000000045e7ca: mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xea; syscall; ret; 
0x000000000040c6a8: mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdx], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000045e96a: mov rdx, qword ptr [rsp + 0x18]; mov r10, qword ptr [rsp + 0x20]; mov eax, 0xd; syscall; 
0x000000000045e929: mov rdx, qword ptr [rsp + 0x18]; mov r10d, dword ptr [rsp + 0x20]; mov eax, 0xe; syscall; 
0x00000000004586b7: mov rdx, qword ptr [rsp + 0x18]; mov rax, qword ptr [rdx]; nop; call rax; 
0x000000000042fb87: mov rdx, qword ptr [rsp + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000453f2b: mov rdx, qword ptr [rsp + 0x1b0]; mov qword ptr [rdx], rax; add rsp, 0x1b8; pop rbp; ret; 
0x000000000041e6cf: mov rdx, qword ptr [rsp + 0x20]; add qword ptr [rdx], rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000450a13: mov rdx, qword ptr [rsp + 0x28]; add qword ptr [rdx + 0x11e8], rax; add rsp, 0x30; pop rbp; ret; 
0x0000000000406f7a: mov rdx, qword ptr [rsp + 0x28]; mov rax, qword ptr [rdx]; call rax; 
0x000000000045e9d2: mov rdx, qword ptr [rsp + 0x28]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x00000000004135a5: mov rdx, qword ptr [rsp + 0x28]; xchg dword ptr [rdx + 0x4a8], ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000429e17: mov rdx, qword ptr [rsp + 0x30]; mov qword ptr [rax + 0x28], rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000042395c: mov rdx, qword ptr [rsp + 0x30]; mov qword ptr [rdx], rax; add rsp, 0x38; pop rbp; ret; 
0x000000000042ab93: mov rdx, qword ptr [rsp + 0x30]; mov rax, qword ptr [rdx]; call rax; 
0x000000000045e992: mov rdx, qword ptr [rsp + 0x30]; mov rax, qword ptr [rip + 0xc3d6a]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x000000000043460b: mov rdx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x0000000000450ab3: mov rdx, qword ptr [rsp + 0x38]; mov byte ptr [rdx + 0x11e0], 0; add rsp, 0x40; pop rbp; ret; 
0x000000000043139d: mov rdx, qword ptr [rsp + 0x38]; mov byte ptr [rdx], al; add rsp, 0x40; pop rbp; ret; 
0x0000000000461713: mov rdx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000479ea8: mov rdx, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rdx + 0x18]; mov rax, qword ptr [rsp + 0x188]; call rdx; 
0x0000000000475e50: mov rdx, qword ptr [rsp + 0x48]; mov byte ptr [rdx + 0xe], cl; add rsp, 0x38; pop rbp; ret; 
0x000000000046172d: mov rdx, qword ptr [rsp + 0x48]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000436857: mov rdx, qword ptr [rsp + 0x68]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x000000000043688b: mov rdx, qword ptr [rsp + 0x68]; mov rcx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x50]; call rcx; 
0x0000000000461d9b: mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000461dd4: mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; nop; call rax; 
0x0000000000433851: mov rdx, qword ptr [rsp + 0x88]; mov rax, qword ptr [rdx]; call rax; 
0x000000000040673b: mov rdx, qword ptr [rsp + 0x98]; mov qword ptr [rdx + 0x1f68], 0; add rsp, 0x88; pop rbp; ret; 
0x00000000004740c7: mov rdx, qword ptr [rsp + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000428755: mov rdx, qword ptr [rsp + 0xa8]; add qword ptr [rdx + 0x10128], rax; add rsp, 0x98; pop rbp; ret; 
0x0000000000440494: mov rdx, qword ptr [rsp]; mov ecx, eax; mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000475e4f: mov rdx, qword ptr es:[rsp + 0x48]; mov byte ptr [rdx + 0xe], cl; add rsp, 0x38; pop rbp; ret; 
0x00000000004413f7: mov rdx, rax; call rcx; 
0x0000000000413ee8: mov rdx, rax; lock xadd qword ptr [rcx], rdx; call 0x14080; add rsp, 0x10; pop rbp; ret; 
0x000000000040a0fd: mov rdx, rax; mov rax, rbx; call rcx; 
0x0000000000460200: mov rdx, rax; mov rax, rbx; lock cmpxchg qword ptr [rdx], rcx; sete al; ret; 
0x00000000004763a2: mov rdx, rax; mov rax, rbx; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000046fe47: mov rdx, rax; mov rax, rbx; mov rcx, qword ptr [rdx + 0x48]; call rcx; 
0x0000000000470a1b: mov rdx, rax; mov rax, rbx; mov rcx, qword ptr [rdx + 0x98]; call rcx; 
0x0000000000473665: mov rdx, rax; mov rax, rcx; mov rbx, rdx; add rsp, 0x10; pop rbp; ret; 
0x00000000004346a1: mov rdx, rax; mov rax, rsi; call rcx; 
0x000000000046ffc5: mov rdx, rax; mov rcx, qword ptr [rdx + 0xa0]; mov rax, rbx; call rcx; 
0x000000000047afaa: mov rdx, rax; mov rcx, qword ptr [rdx + 0xf8]; mov rax, rbx; call rcx; 
0x00000000004305ff: mov rdx, rbx; call rax; 
0x00000000004580a5: mov rdx, rbx; lock xadd qword ptr [rcx], rdx; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x38; pop rbp; ret; 
0x000000000047814e: mov rdx, rbx; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rdx; call rcx; 
0x0000000000469091: mov rdx, rcx; mov byte ptr [rbx + rax - 1], r8b; mov rcx, rdx; add rsp, 0x88; pop rbp; ret; 
0x000000000047cbfa: mov rdx, rcx; mov qword ptr [rax + 8], rbx; mov byte ptr [rbx + rdx - 1], 0xa; add rsp, 0x60; pop rbp; ret; 
0x0000000000454d66: mov rdx, rcx; mov rax, rdi; call rsi; 
0x0000000000454d66: mov rdx, rcx; mov rax, rdi; call rsi; add rsp, 0x10; pop rbp; ret; 
0x000000000040cf6e: mov rdx, rcx; mov rax, rdx; add rsp, 0x38; pop rbp; ret; 
0x000000000041d39d: mov rdx, rcx; mov rax, rdx; mov rbx, rsi; add rsp, 0x10; pop rbp; ret; 
0x0000000000402adf: mov rdx, rcx; shr rcx, 0x20; lea rax, [rcx + rdx]; and eax, 0x7f; ret; 
0x000000000040530e: mov rdx, rdi; call rcx; 
0x000000000045b162: mov rdx, rdi; mov rdi, qword ptr [rdi]; call rdi; 
0x000000000045b1a1: mov rdx, rdi; mov rdi, qword ptr [rdi]; pop rbp; jmp rdi; 
0x00000000004036c3: mov rdx, rdi; mov rsi, rcx; mov rdi, rbx; syscall; 
0x000000000043a53e: mov rdx, rsi; call rcx; 
0x0000000000428863: mov rdx, rsi; call rdi; 
0x00000000004157de: mov rsi, qword ptr [rax + 0x10]; mov rax, rsi; call rcx; 
0x0000000000464337: mov rsi, qword ptr [rax + 0x20]; lea rcx, [rdx - 1]; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000463fb6: mov rsi, qword ptr [rax + 0x20]; mov rdx, qword ptr [rdx + 0x18]; mov rax, rsi; call rdx; 
0x00000000004645e1: mov rsi, qword ptr [rax + 0x20]; sub r9, rcx; dec r9; mov rax, rbx; mov rbx, r9; call rsi; 
0x00000000004642e5: mov rsi, qword ptr [rax + 0x28]; lea rcx, [rdx - 1]; mov qword ptr [rsp + 0x28], rcx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000464725: mov rsi, qword ptr [rax + 0x28]; lea rcx, [rdx - 1]; mov qword ptr [rsp + 0x68], rcx; mov rax, rbx; mov rbx, rdx; call rsi; 
0x00000000004414a6: mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rbx + 8]; mov rax, rsi; mov rbx, rdi; call rcx; 
0x0000000000454d59: mov rsi, qword ptr [rcx]; mov rdi, qword ptr [rip + 0xcd945]; mov rbx, rax; mov rdx, rcx; mov rax, rdi; call rsi; 
0x0000000000428853: mov rsi, qword ptr [rdx + 8]; mov rdi, qword ptr [rsi]; mov r8, qword ptr [rdx + 0x10]; mov qword ptr [rsp + 0x20], r8; mov rdx, rsi; call rdi; 
0x000000000045f013: mov rsi, qword ptr [rdx + rcx]; mov rcx, qword ptr [rdx + rcx + 8]; mov rax, rsi; mov rbx, rcx; pop rbp; ret; 
0x000000000044f334: mov rsi, qword ptr [rdx]; call rsi; 
0x000000000044f334: mov rsi, qword ptr [rdx]; call rsi; add rsp, 0x20; pop rbp; ret; 
0x000000000040d283: mov rsi, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, rcx; mov rbx, rdi; call rsi; 
0x000000000040d39f: mov rsi, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x28]; mov rbx, rcx; call rsi; 
0x000000000040d57a: mov rsi, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x30]; mov rbx, rcx; call rsi; 
0x0000000000434610: mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x0000000000444b65: mov rsi, qword ptr [rdx]; mov rax, rbx; lea rbx, [rsp + 0x48]; mov rcx, rdi; call rsi; 
0x000000000040413b: mov rsi, qword ptr [rdx]; mov rax, rbx; mov rbx, rcx; call rsi; 
0x0000000000473a29: mov rsi, qword ptr [rdx]; mov rax, rcx; call rsi; 
0x000000000040d314: mov rsi, qword ptr [rdx]; mov rax, rcx; xor ebx, ebx; call rsi; 
0x000000000042886d: mov rsi, qword ptr [rdx]; mov rcx, rbx; mov rbx, rax; mov rax, qword ptr [rsp + 0x18]; call rsi; 
0x000000000047c2c2: mov rsi, qword ptr [rsi + 0xf8]; mov rax, qword ptr [rsp + 0x108]; call rsi; 
0x000000000045e6a4: mov rsi, qword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov eax, 0; syscall; 
0x000000000045e685: mov rsi, qword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov eax, 1; syscall; 
0x000000000045eca5: mov rsi, qword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov rax, 0x1c; syscall; 
0x000000000045eca5: mov rsi, qword ptr [rsp + 0x10]; mov edx, dword ptr [rsp + 0x18]; mov rax, 0x1c; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045eda5: mov rsi, qword ptr [rsp + 0x10]; mov rax, 0x83; syscall; 
0x000000000045ec25: mov rsi, qword ptr [rsp + 0x10]; mov rax, 0xb; syscall; 
0x000000000042c037: mov rsi, qword ptr [rsp + 0x10]; mov rax, rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000045e845: mov rsi, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0x1b; syscall; 
0x000000000045ee45: mov rsi, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xcc; syscall; 
0x000000000045e7e4: mov rsi, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xde; syscall; 
0x000000000045e7c5: mov rsi, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; mov eax, 0xea; syscall; 
0x0000000000453ff4: mov rsi, qword ptr [rsp + 0x1c8]; nop dword ptr [rax]; call 0x51dc0; add rsp, 0x198; pop rbp; ret; 
0x00000000004130f8: mov rsi, qword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov qword ptr [rdx + rsi*8 + 0x28], rdi; add rsp, 0x30; pop rbp; ret; 
0x000000000045cda6: mov rsi, qword ptr [rsp + 0x28]; mov rsp, rsi; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x000000000044d24d: mov rsi, qword ptr [rsp + 0x30]; mov r8d, eax; mov rax, rdx; add rsp, 0x58; pop rbp; ret; 
0x00000000004760da: mov rsi, qword ptr [rsp + 0x48]; mov byte ptr [rsi + 0xe], dl; add rsp, 0x38; pop rbp; ret; 
0x000000000045246e: mov rsi, qword ptr [rsp + 0x50]; lea rdx, [rsp + 0x50]; mov eax, r8d; call rsi; 
0x0000000000475cc1: mov rsi, qword ptr [rsp + 0x60]; mov byte ptr [rsi + 0xe], dl; add rsp, 0x50; pop rbp; ret; 
0x000000000047c2bd: mov rsi, qword ptr [rsp + 0x78]; mov rsi, qword ptr [rsi + 0xf8]; mov rax, qword ptr [rsp + 0x108]; call rsi; 
0x0000000000476f83: mov rsi, qword ptr [rsp + 0xe8]; mov byte ptr [rsi + 0xe], dl; add rsp, 0xd8; pop rbp; ret; 
0x000000000045e625: mov rsi, qword ptr [rsp + 8]; mov edx, dword ptr [rsp + 0x10]; mov r10d, dword ptr [rsp + 0x14]; mov eax, 0x101; syscall; 
0x0000000000477982: mov rsi, rax; mov rax, qword ptr [rsp + 0x58]; mov rcx, rdx; call rsi; 
0x00000000004411e2: mov rsi, rax; mov rax, rsi; call 0x41340; sub rsp, -0x80; pop rbp; ret; 
0x0000000000450ba7: mov rsi, rbx; call 0x4f520; add rsp, 0x40; pop rbp; ret; 
0x0000000000468a30: mov rsi, rbx; xor eax, eax; mov rbx, rcx; add rsp, 0x88; pop rbp; ret; 
0x00000000004115c9: mov rsi, rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004526e4: mov rsi, rcx; mov r8, rdi; add rsp, 0x20; pop rbp; ret; 
0x000000000044d260: mov rsi, rcx; mov r8d, 0xffffffff; xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000044e9af: mov rsi, rcx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x00000000004036c6: mov rsi, rcx; mov rdi, rbx; syscall; 
0x0000000000450e3f: mov rsi, rdi; call 0x4f520; add rsp, 0x28; pop rbp; ret; 
0x000000000041d17f: mov rsi, rdi; call 0x4f520; add rsp, 0x30; pop rbp; ret; 
0x0000000000450dcf: mov rsi, rdi; call 0x4f520; add rsp, 0x40; pop rbp; ret; 
0x0000000000419ce9: mov rsi, rdi; call 0x4f520; add rsp, 0x50; pop rbp; ret; 
0x0000000000450d03: mov rsi, rdi; call 0x4f520; add rsp, 0x58; pop rbp; ret; 
0x000000000047cda8: mov rsi, rdi; call 0x77a00; add rsp, 0x58; pop rbp; ret; 
0x000000000045edec: mov rsi, rdi; mov rdi, 0x1002; mov rax, 0x9e; syscall; 
0x000000000044a7fc: mov rsi, rdi; mov rdi, rbx; add rsp, 0x18; pop rbp; ret; 
0x0000000000419d38: mov rsi, rdi; nop dword ptr [rax + rax]; call 0x4f520; add rsp, 0x50; pop rbp; ret; 
0x000000000045107c: mov rsi, rdi; nop; call 0x4f520; add rsp, 0x30; pop rbp; ret; 
0x0000000000465e4b: mov rsi, rdx; mov r8, r12; call 0x66820; add rsp, 0x58; pop rbp; ret; 
0x000000000041f0ed: mov rsi, rdx; mov rax, rsi; mov rbx, rdi; add rsp, 0x40; pop rbp; ret; 
0x000000000045b242: mov rsp, qword ptr [rbx + 0x38]; mov rbp, qword ptr [rbx + 0x68]; call 0x5f580; call 0x5cde0; ret; 
0x000000000045b15e: mov rsp, qword ptr [rdx + 0x38]; mov rdx, rdi; mov rdi, qword ptr [rdi]; call rdi; 
0x000000000045ec86: mov rsp, qword ptr [rsp]; add rsp, 0x10; pop rbp; ret; 
0x000000000045ebf8: mov rsp, qword ptr [rsp]; mov qword ptr [rsp + 0x40], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000045e9a7: mov rsp, rbx; mov dword ptr [rsp + 0x38], eax; add rsp, 0x10; pop rbp; ret; 
0x000000000045e9e0: mov rsp, rbx; pop rbp; ret; 
0x000000000045cd7f: mov rsp, rsi; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x000000000047c950: mov word ptr [rax + 0x5eb0003], ds; xor r10d, r10d; xor edi, edi; mov rcx, qword ptr [r10 + 0x98]; mov rax, rdi; call rcx; 
0x000000000046373b: mov word ptr [rax + 0xf], es; movabs dword ptr [0x5d60c48348e272d1], eax; ret; 
0x0000000000460d92: mov word ptr [rax + rax*4], fs; add byte ptr [rax], al; add al, ch; ret; 
0x000000000041a8f9: mov word ptr [rax + rbx], fs; add eax, dword ptr [rax]; add byte ptr [rcx - 9], al; fimul dword ptr [rcx + 0x63]; ret 0x894c; 
0x0000000000471a5b: mov word ptr [rax + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x00000000004606e0: mov word ptr [rax + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x77]; ret; 
0x0000000000452df9: mov word ptr [rax + rcx*8], fs; add al, byte ptr [rax]; add byte ptr [rax + 1], bh; lea rdx, [rsp + 0x2c8]; call rcx; 
0x000000000047c407: mov word ptr [rax + rdi*8], fs; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x0000000000426350: mov word ptr [rax + rdx*4], fs; add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0xc149; 
0x000000000044b133: mov word ptr [rax + rsi*4], fs; add byte ptr [rax], al; add al, ch; ret 0xfc5b; 
0x000000000047bf90: mov word ptr [rax + rsi*4], fs; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000047b202: mov word ptr [rax + rsi*8], fs; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000044beb4: mov word ptr [rax], fs; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x737f; 
0x000000000047b772: mov word ptr [rax], fs; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x000000000047c179: mov word ptr [rax], fs; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000045b250: mov word ptr [rbx], ds; add byte ptr [rax], al; ret; 
0x0000000000418510: mov word ptr [rbx], es; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000045dbca: mov word ptr [rdi + rbx - 2], ax; ret; 
0x000000000045ddd5: mov word ptr [rdi], ax; mov byte ptr [rdi + 2], cl; ret; 
0x000000000045dbc7: mov word ptr [rdi], ax; mov word ptr [rdi + rbx - 2], ax; ret; 
0x000000000046b26f: mov word ptr [rsp + 0x26a], ax; add rsp, 0x1a8; pop rbp; nop; ret; 
0x0000000000418dd1: movabs al, byte ptr [0x2408d08048d0010]; mov dword ptr [rip + 0x10a0d8], eax; pop rbp; ret; 
0x00000000004055cc: movabs al, byte ptr [0x2474894890000000]; adc cl, ch; ret; 
0x00000000004097f8: movabs al, byte ptr [0x311858894cfffffe]; sal byte ptr [rcx], 0xdb; add rsp, 0xa0; pop rbp; ret; 
0x000000000044ad01: movabs al, byte ptr [0x48c13148e7037ed1]; mul ecx; xor rax, rdx; ret; 
0x0000000000412561: movabs al, byte ptr [0x4b456e8000000]; add rsp, 0xa8; pop rbp; ret; 
0x0000000000406e3b: movabs al, byte ptr [0x5d40c48348000000]; ret; 
0x000000000044d4d3: movabs al, byte ptr [0x5d48c48348000022]; ret; 
0x000000000047983a: movabs al, byte ptr [0x8949d88949000000]; ret 0x8b48; 
0x0000000000401742: movabs al, byte ptr [0xa8c48148000000]; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004329ac: movabs al, byte ptr [0xfffd7c0be80011db]; add rsp, 8; pop rbp; ret; 
0x0000000000402709: movabs byte ptr [0x14245c8910244489], al; mov dword ptr [rsp + 0x18], ecx; mov dword ptr [rsp + 0x1c], edx; ret; 
0x000000000042cf1a: movabs byte ptr [0x1824448b48fffdd6], al; add rsp, 0x20; pop rbp; ret; 
0x00000000004502ee: movabs byte ptr [0x481024448b48fffb], al; add esp, 0x20; pop rbp; ret; 
0x0000000000457eda: movabs byte ptr [0x5d08c48348fffd47], al; ret; 
0x00000000004527da: movabs byte ptr [0x5d40c48348fffe01], al; ret; 
0x000000000044022c: movabs dword ptr [0x4800000001b8fffc], eax; add esp, 0x428; pop rbp; ret; 
0x000000000042fce3: movabs dword ptr [0x484074c08548fffd], eax; mov ecx, dword ptr [rax + 0x18]; mov rax, rbx; call rcx; 
0x0000000000444d0f: movabs dword ptr [0x5d58c483480a73c2], eax; ret; 
0x000000000046373e: movabs dword ptr [0x5d60c48348e272d1], eax; ret; 
0x000000000047babb: movabs eax, dword ptr [0x1d0c48148ffffc0]; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000406432: movabs eax, dword ptr [0x58c4834801870014]; pop rbp; ret; 
0x000000000045f4fb: movabs eax, dword ptr [0x5d08c48348fffdc9]; ret; 
0x0000000000408da6: movabs eax, dword ptr [0xdee9ca8948000001]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000041407e: movabs eax, dword ptr [0xec8348e5894855cc]; sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000409014: movabs rax, 0x1d8e4e27c47d1247; mul rcx; xor rax, rdx; nop; nop; ret; 
0x0000000000408fb3: movabs rax, 0x1d8e4e27c47d124b; mul rcx; xor rax, rdx; nop; nop; ret; 
0x0000000000429959: movabs rax, 0x8000040000200; ret; 
0x000000000040f7a0: movabs rbx, 0x10c4834800000001; pop rbp; ret; 
0x000000000040381e: movabs rcx, 0x52ef6bbb8f63bf; imul rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000458e98: movabs rcx, 0xdeaddeaddeaddead; cmp rax, rcx; setne cl; mov eax, ecx; ret; 
0x0000000000403a4b: movabs rdx, 0x52ef6bbb8f63bf; imul rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x00000000004037e6: movabs rdx, 0x52ef6bbb8f63bf; imul rax, rdx; mov qword ptr [rcx + 0x120], rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000045b3da: movd dword ptr [r12 + 0xb0], mm5; movq xmm14, qword ptr [r12 + 0xb8]; ret; 
0x000000000045b3e4: movd dword ptr [r12 + 0xb8], mm6; ret; 
0x000000000045b3db: movd dword ptr [rsp + 0xb0], mm5; movq xmm14, qword ptr [r12 + 0xb8]; ret; 
0x000000000045b3e5: movd dword ptr [rsp + 0xb8], mm6; ret; 
0x000000000045a3ed: movd eax, mm0; ret; 
0x000000000041c8b2: movd eax, mm1; nop; xchg qword ptr [rcx + 0x100], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000045a3ca: movd eax, mm1; ret; 
0x000000000045a43a: movd eax, mm2; ret; 
0x000000000045a4dc: movd eax, mm4; ret; 
0x000000000045a3ec: movd rax, mm0; ret; 
0x000000000041c8b1: movd rax, mm1; nop; xchg qword ptr [rcx + 0x100], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000045a3c9: movd rax, mm1; ret; 
0x000000000045a439: movd rax, mm2; ret; 
0x000000000045a4db: movd rax, mm4; ret; 
0x000000000045de01: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm1, xmmword ptr [rsi + rbx - 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + rbx - 0x10], xmm1; ret; 
0x000000000045de05: movdqu xmm1, xmmword ptr [rsi + rbx - 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + rbx - 0x10], xmm1; ret; 
0x000000000045de25: movdqu xmm3, xmmword ptr [rsi + rbx - 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm1; movdqu xmmword ptr [rdi + rbx - 0x20], xmm2; movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000045e2da: movdqu xmmword ptr [rax + 0x40], xmm9; movdqu xmmword ptr [rax + 0x50], xmm10; movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000045e2e0: movdqu xmmword ptr [rax + 0x50], xmm10; movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000045e2e6: movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000045e2ec: movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000045e13e: movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e138: movdqu xmmword ptr [rbx - 0x20], xmm11; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e132: movdqu xmmword ptr [rbx - 0x30], xmm10; movdqu xmmword ptr [rbx - 0x20], xmm11; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e12c: movdqu xmmword ptr [rbx - 0x40], xmm9; movdqu xmmword ptr [rbx - 0x30], xmm10; movdqu xmmword ptr [rbx - 0x20], xmm11; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e21a: movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000045e214: movdqu xmmword ptr [rcx - 0x20], xmm11; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000045e20e: movdqu xmmword ptr [rcx - 0x30], xmm10; movdqu xmmword ptr [rcx - 0x20], xmm11; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000045e208: movdqu xmmword ptr [rcx - 0x40], xmm9; movdqu xmmword ptr [rcx - 0x30], xmm10; movdqu xmmword ptr [rcx - 0x20], xmm11; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000045dbf6: movdqu xmmword ptr [rdi + 0x10], xmm15; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045de2f: movdqu xmmword ptr [rdi + 0x10], xmm1; movdqu xmmword ptr [rdi + rbx - 0x20], xmm2; movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000045df4f: movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; pxor xmm15, xmm15; ret; 
0x000000000045dbe9: movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045de0f: movdqu xmmword ptr [rdi + rbx - 0x10], xmm1; ret; 
0x000000000045de3a: movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000045de91: movdqu xmmword ptr [rdi + rbx - 0x10], xmm7; ret; 
0x000000000045df48: movdqu xmmword ptr [rdi + rbx - 0x20], xmm14; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; pxor xmm15, xmm15; ret; 
0x000000000045dbfc: movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045de34: movdqu xmmword ptr [rdi + rbx - 0x20], xmm2; movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000045de8b: movdqu xmmword ptr [rdi + rbx - 0x20], xmm6; movdqu xmmword ptr [rdi + rbx - 0x10], xmm7; ret; 
0x000000000045df41: movdqu xmmword ptr [rdi + rbx - 0x30], xmm13; movdqu xmmword ptr [rdi + rbx - 0x20], xmm14; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; pxor xmm15, xmm15; ret; 
0x000000000045dc29: movdqu xmmword ptr [rdi + rbx - 0x30], xmm15; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045de85: movdqu xmmword ptr [rdi + rbx - 0x30], xmm5; movdqu xmmword ptr [rdi + rbx - 0x20], xmm6; movdqu xmmword ptr [rdi + rbx - 0x10], xmm7; ret; 
0x000000000045df3a: movdqu xmmword ptr [rdi + rbx - 0x40], xmm12; movdqu xmmword ptr [rdi + rbx - 0x30], xmm13; movdqu xmmword ptr [rdi + rbx - 0x20], xmm14; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; pxor xmm15, xmm15; ret; 
0x000000000045dc22: movdqu xmmword ptr [rdi + rbx - 0x40], xmm15; movdqu xmmword ptr [rdi + rbx - 0x30], xmm15; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045de7f: movdqu xmmword ptr [rdi + rbx - 0x40], xmm4; movdqu xmmword ptr [rdi + rbx - 0x30], xmm5; movdqu xmmword ptr [rdi + rbx - 0x20], xmm6; movdqu xmmword ptr [rdi + rbx - 0x10], xmm7; ret; 
0x000000000045de2b: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm1; movdqu xmmword ptr [rdi + rbx - 0x20], xmm2; movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000045de0b: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + rbx - 0x10], xmm1; ret; 
0x000000000045dbf1: movdqu xmmword ptr [rdi], xmm15; movdqu xmmword ptr [rdi + 0x10], xmm15; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045dbe4: movdqu xmmword ptr [rdi], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045de02: movq mm0, qword ptr [rsi]; movdqu xmm1, xmmword ptr [rsi + rbx - 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + rbx - 0x10], xmm1; ret; 
0x000000000045de06: movq mm1, qword ptr [rsi + rbx - 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + rbx - 0x10], xmm1; ret; 
0x000000000045de26: movq mm3, qword ptr [rsi + rbx - 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm1; movdqu xmmword ptr [rdi + rbx - 0x20], xmm2; movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000045b2fb: movq qword ptr [r12 + 0x98], xmm10; movq qword ptr [r12 + 0xa0], xmm11; movq qword ptr [r12 + 0xa8], xmm12; movq qword ptr [r12 + 0xb0], xmm13; movq qword ptr [r12 + 0xb8], xmm14; ret; 
0x000000000045b305: movq qword ptr [r12 + 0xa0], xmm11; movq qword ptr [r12 + 0xa8], xmm12; movq qword ptr [r12 + 0xb0], xmm13; movq qword ptr [r12 + 0xb8], xmm14; ret; 
0x000000000045b30f: movq qword ptr [r12 + 0xa8], xmm12; movq qword ptr [r12 + 0xb0], xmm13; movq qword ptr [r12 + 0xb8], xmm14; ret; 
0x000000000045b319: movq qword ptr [r12 + 0xb0], xmm13; movq qword ptr [r12 + 0xb8], xmm14; ret; 
0x000000000045b323: movq qword ptr [r12 + 0xb8], xmm14; ret; 
0x000000000045e2dc: movq qword ptr [rax + 0x40], mm1; movdqu xmmword ptr [rax + 0x50], xmm10; movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000045e2e2: movq qword ptr [rax + 0x50], mm2; movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000045e2e8: movq qword ptr [rax + 0x60], mm3; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000045e2ee: movq qword ptr [rax + 0x70], mm4; ret; 
0x000000000045e140: movq qword ptr [rbx - 0x10], mm4; ret; 
0x000000000045e13a: movq qword ptr [rbx - 0x20], mm3; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e134: movq qword ptr [rbx - 0x30], mm2; movdqu xmmword ptr [rbx - 0x20], xmm11; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e12e: movq qword ptr [rbx - 0x40], mm1; movdqu xmmword ptr [rbx - 0x30], xmm10; movdqu xmmword ptr [rbx - 0x20], xmm11; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e21c: movq qword ptr [rcx - 0x10], mm4; ret; 
0x000000000045e216: movq qword ptr [rcx - 0x20], mm3; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000045e210: movq qword ptr [rcx - 0x30], mm2; movdqu xmmword ptr [rcx - 0x20], xmm11; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000045e20a: movq qword ptr [rcx - 0x40], mm1; movdqu xmmword ptr [rcx - 0x30], xmm10; movdqu xmmword ptr [rcx - 0x20], xmm11; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000045de30: movq qword ptr [rdi + 0x10], mm1; movdqu xmmword ptr [rdi + rbx - 0x20], xmm2; movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000045dbf8: movq qword ptr [rdi + 0x10], mm7; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045de10: movq qword ptr [rdi + rbx - 0x10], mm1; ret; 
0x000000000045de3b: movq qword ptr [rdi + rbx - 0x10], mm3; ret; 
0x000000000045df51: movq qword ptr [rdi + rbx - 0x10], mm7; pxor xmm15, xmm15; ret; 
0x000000000045dbeb: movq qword ptr [rdi + rbx - 0x10], mm7; ret; 
0x000000000045de35: movq qword ptr [rdi + rbx - 0x20], mm2; movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000045df4a: movq qword ptr [rdi + rbx - 0x20], mm6; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; pxor xmm15, xmm15; ret; 
0x000000000045de8c: movq qword ptr [rdi + rbx - 0x20], mm6; movdqu xmmword ptr [rdi + rbx - 0x10], xmm7; ret; 
0x000000000045dbfe: movq qword ptr [rdi + rbx - 0x20], mm7; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045df43: movq qword ptr [rdi + rbx - 0x30], mm5; movdqu xmmword ptr [rdi + rbx - 0x20], xmm14; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; pxor xmm15, xmm15; ret; 
0x000000000045de86: movq qword ptr [rdi + rbx - 0x30], mm5; movdqu xmmword ptr [rdi + rbx - 0x20], xmm6; movdqu xmmword ptr [rdi + rbx - 0x10], xmm7; ret; 
0x000000000045dc2b: movq qword ptr [rdi + rbx - 0x30], mm7; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045df3c: movq qword ptr [rdi + rbx - 0x40], mm4; movdqu xmmword ptr [rdi + rbx - 0x30], xmm13; movdqu xmmword ptr [rdi + rbx - 0x20], xmm14; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; pxor xmm15, xmm15; ret; 
0x000000000045de80: movq qword ptr [rdi + rbx - 0x40], mm4; movdqu xmmword ptr [rdi + rbx - 0x30], xmm5; movdqu xmmword ptr [rdi + rbx - 0x20], xmm6; movdqu xmmword ptr [rdi + rbx - 0x10], xmm7; ret; 
0x000000000045dc24: movq qword ptr [rdi + rbx - 0x40], mm7; movdqu xmmword ptr [rdi + rbx - 0x30], xmm15; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045de2c: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm1; movdqu xmmword ptr [rdi + rbx - 0x20], xmm2; movdqu xmmword ptr [rdi + rbx - 0x10], xmm3; ret; 
0x000000000045de0c: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + rbx - 0x10], xmm1; ret; 
0x000000000045dbf3: movq qword ptr [rdi], mm7; movdqu xmmword ptr [rdi + 0x10], xmm15; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045dbe6: movq qword ptr [rdi], mm7; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045a3eb: movq rax, xmm0; ret; 
0x000000000041c8b0: movq rax, xmm1; nop; xchg qword ptr [rcx + 0x100], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000045a3c8: movq rax, xmm1; ret; 
0x000000000045a438: movq rax, xmm2; ret; 
0x000000000045a4da: movq rax, xmm4; ret; 
0x000000000045a666: movq rax, xmm8; ret; 
0x000000000045b3d9: movq xmm13, qword ptr [r12 + 0xb0]; movq xmm14, qword ptr [r12 + 0xb8]; ret; 
0x000000000045b3e3: movq xmm14, qword ptr [r12 + 0xb8]; ret; 
0x0000000000471662: movsb byte ptr [rdi], byte ptr [rsi]; and al, 0xf0; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0x4d20; 
0x000000000044d6cd: movsb byte ptr [rdi], byte ptr [rsi]; and al, byte ptr [rax]; add byte ptr [rax + 1], bh; add rsp, 0x18; pop rbp; ret; 
0x0000000000434702: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000418096: movsd dword ptr [rdi], dword ptr [rsi]; adc byte ptr [rax], al; test rdx, rdx; je 0x180a3; mov rax, qword ptr [rdx]; call rax; 
0x000000000041fcbb: movsd qword ptr [rax + 0x28], xmm1; mov byte ptr [rax + 0x31], 1; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x000000000041fc9c: movsd qword ptr [rax + 0x28], xmm8; mov byte ptr [rax + 0x30], 1; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x000000000041e356: movsd qword ptr [rsp + 0x18], xmm0; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000041e1d4: movsd qword ptr [rsp + 0x50], xmm0; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000041fca6: movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x0000000000403f44: movsd xmm1, qword ptr [rbx]; ucomisd xmm0, xmm1; sete al; setnp cl; and eax, ecx; ret; 
0x000000000041e1ca: movsd xmm1, qword ptr [rsp + 0x58]; addsd xmm0, xmm1; movsd qword ptr [rsp + 0x50], xmm0; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000403f24: movss xmm1, dword ptr [rbx]; ucomiss xmm0, xmm1; sete al; setnp cl; and eax, ecx; ret; 
0x000000000044dbd4: movsxd rax, dword ptr [rax + 0xf]; xchg eax, esp; ret 0x1f0f; 
0x000000000044dc3b: movsxd rax, dword ptr [rax + 0xf]; xchg eax, esp; ret 0xd284; 
0x00000000004598d3: movsxd rax, dword ptr [rcx]; ret; 
0x000000000044960b: movsxd rax, eax; shl rax, 3; add rsp, 8; pop rbp; ret; 
0x000000000047307d: movsxd rax, eax; xor ebx, ebx; xor ecx, ecx; add rsp, 0x10; pop rbp; ret; 
0x00000000004495fd: movsxd rax, ecx; add rsp, 8; pop rbp; ret; 
0x0000000000403a4e: movsxd rcx, dword ptr [rdi + 0x52ef6bbb]; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8348; 
0x00000000004037e9: movsxd rcx, dword ptr [rdi + 0x52ef6bbb]; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000045b244: movsxd rdi, dword ptr [rax]; mov rbp, qword ptr [rbx + 0x68]; call 0x5f580; call 0x5cde0; ret; 
0x000000000045e142: movsxd rsi, eax; ret; 
0x0000000000406431: movsxd rsp, dword ptr [rcx + 0x1870014]; add rsp, 0x58; pop rbp; ret; 
0x000000000041e45d: movups xmm0, xmm1; add rsp, 0x20; pop rbp; ret; 
0x000000000041fcae: movups xmm0, xmm1; mov eax, 1; ret; 
0x000000000041fca7: movups xmm0, xmmword ptr [rax + 0x18]; xor eax, eax; ret; 
0x000000000045d992: movups xmm0, xmmword ptr [rsi]; add rsi, 0x10; movups xmmword ptr [rdi], xmm0; add rdi, 0x10; ret; 
0x0000000000403f45: movups xmm1, xmmword ptr [rbx]; ucomisd xmm0, xmm1; sete al; setnp cl; and eax, ecx; ret; 
0x0000000000403f25: movups xmm1, xmmword ptr [rbx]; ucomiss xmm0, xmm1; sete al; setnp cl; and eax, ecx; ret; 
0x000000000041e1cb: movups xmm1, xmmword ptr [rsp + 0x58]; addsd xmm0, xmm1; movsd qword ptr [rsp + 0x50], xmm0; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000046734e: movups xmmword ptr [rax + 0x18], xmm15; add rsp, 0x38; pop rbp; ret; 
0x00000000004675e5: movups xmmword ptr [rax + 0x18], xmm15; add rsp, 0x40; pop rbp; ret; 
0x0000000000467d84: movups xmmword ptr [rax + 0x18], xmm15; add rsp, 0x88; pop rbp; ret; 
0x000000000046734f: movups xmmword ptr [rax + 0x18], xmm7; add rsp, 0x38; pop rbp; ret; 
0x00000000004675e6: movups xmmword ptr [rax + 0x18], xmm7; add rsp, 0x40; pop rbp; ret; 
0x0000000000467d85: movups xmmword ptr [rax + 0x18], xmm7; add rsp, 0x88; pop rbp; ret; 
0x000000000041fc9e: movups xmmword ptr [rax + 0x28], xmm0; mov byte ptr [rax + 0x30], 1; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x000000000041fcbc: movups xmmword ptr [rax + 0x28], xmm1; mov byte ptr [rax + 0x31], 1; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x000000000041fc9d: movups xmmword ptr [rax + 0x28], xmm8; mov byte ptr [rax + 0x30], 1; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x0000000000425c9d: movups xmmword ptr [rax], xmm15; add rsp, 0x20; pop rbp; ret; 
0x000000000040df7b: movups xmmword ptr [rax], xmm15; add rsp, 0x60; pop rbp; ret; 
0x0000000000425c9e: movups xmmword ptr [rax], xmm7; add rsp, 0x20; pop rbp; ret; 
0x000000000040df7c: movups xmmword ptr [rax], xmm7; add rsp, 0x60; pop rbp; ret; 
0x0000000000424d12: movups xmmword ptr [rbx], xmm15; mov qword ptr [rbx + 0x10], 0; add rsp, 0x28; pop rbp; ret; 
0x0000000000424d13: movups xmmword ptr [rbx], xmm7; mov qword ptr [rbx + 0x10], 0; add rsp, 0x28; pop rbp; ret; 
0x000000000045098b: movups xmmword ptr [rcx + 0x11e8], xmm15; add rsp, 0x10; pop rbp; ret; 
0x000000000045098c: movups xmmword ptr [rcx + 0x11e8], xmm7; add rsp, 0x10; pop rbp; ret; 
0x0000000000443685: movups xmmword ptr [rcx + 8], xmm15; mov dword ptr [rcx + 0x30], 0; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000443686: movups xmmword ptr [rcx + 8], xmm7; mov dword ptr [rcx + 0x30], 0; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x000000000043c9ea: movups xmmword ptr [rcx], xmm15; mov qword ptr [rcx + 0x10], 0; add rsp, 0x18; pop rbp; ret; 
0x000000000043c9eb: movups xmmword ptr [rcx], xmm7; mov qword ptr [rcx + 0x10], 0; add rsp, 0x18; pop rbp; ret; 
0x000000000045d5fd: movups xmmword ptr [rdi + 0x10], xmm15; movups xmmword ptr [rdi + 0x20], xmm15; movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d5fe: movups xmmword ptr [rdi + 0x10], xmm7; movups xmmword ptr [rdi + 0x20], xmm15; movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d602: movups xmmword ptr [rdi + 0x20], xmm15; movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d603: movups xmmword ptr [rdi + 0x20], xmm7; movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d607: movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d608: movups xmmword ptr [rdi + 0x30], xmm7; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d999: movups xmmword ptr [rdi], xmm0; add rdi, 0x10; ret; 
0x000000000045d5f9: movups xmmword ptr [rdi], xmm15; movups xmmword ptr [rdi + 0x10], xmm15; movups xmmword ptr [rdi + 0x20], xmm15; movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x000000000045d5fa: movups xmmword ptr [rdi], xmm7; movups xmmword ptr [rdi + 0x10], xmm15; movups xmmword ptr [rdi + 0x20], xmm15; movups xmmword ptr [rdi + 0x30], xmm15; lea rdi, [rdi + 0x40]; ret; 
0x00000000004290eb: movups xmmword ptr [rdx], xmm15; mov qword ptr [rdx + 0x10], 0; add rsp, 0x40; pop rbp; ret; 
0x00000000004290ec: movups xmmword ptr [rdx], xmm7; mov qword ptr [rdx + 0x10], 0; add rsp, 0x40; pop rbp; ret; 
0x0000000000462220: movups xmmword ptr [rsi], xmm15; mov ecx, 1; add rsp, 0x38; pop rbp; ret; 
0x0000000000462221: movups xmmword ptr [rsi], xmm7; mov ecx, 1; add rsp, 0x38; pop rbp; ret; 
0x000000000041e357: movups xmmword ptr [rsp + 0x18], xmm0; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000041e1d5: movups xmmword ptr [rsp + 0x50], xmm0; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000473ceb: movups xmmword ptr [rsp + 0x60], xmm15; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000473cec: movups xmmword ptr [rsp + 0x60], xmm7; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x000000000046bbc0: movzx eax, byte ptr [rax + 0x17]; and eax, 0x1f; ret; 
0x000000000044deee: movzx eax, byte ptr [rsp + 0x13]; add rsp, 0x38; pop rbp; ret; 
0x000000000040aa85: movzx eax, byte ptr [rsp + 0x17]; add rsp, 0x28; pop rbp; ret; 
0x00000000004250d1: movzx eax, byte ptr [rsp + 0x17]; xor eax, 1; add rsp, 0x38; pop rbp; ret; 
0x0000000000479cae: movzx eax, byte ptr [rsp + 0x2b]; add rsp, 0x248; pop rbp; ret; 
0x0000000000435dca: movzx eax, byte ptr [rsp + 0x2f]; call 0x35b40; add rsp, 0x30; pop rbp; ret; 
0x00000000004525ba: movzx eax, byte ptr [rsp + 0x38]; nop; call rcx; 
0x00000000004586c2: movzx eax, byte ptr [rsp + 6]; add rsp, 0x20; pop rbp; ret; 
0x0000000000457427: movzx eax, word ptr [rcx + 4]; and eax, 0x7fff; add rsp, 0x38; pop rbp; ret; 
0x0000000000452469: movzx ebx, byte ptr [rax + rdi + 1]; mov rsi, qword ptr [rsp + 0x50]; lea rdx, [rsp + 0x50]; mov eax, r8d; call rsi; 
0x00000000004525b2: movzx ebx, byte ptr [rsp + 0x17]; mov rcx, rax; movzx eax, byte ptr [rsp + 0x38]; nop; call rcx; 
0x0000000000405e6d: movzx ebx, byte ptr [rsp + 0x2f]; add rsp, 0x68; pop rbp; ret; 
0x00000000004424b1: movzx ecx, al; shl rcx, 4; lea rdx, [rip + 0xdd781]; mov rax, qword ptr [rdx + rcx]; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000045fcbb: movzx ecx, byte ptr [rax + 0x11]; cmp byte ptr [rbx + 0x11], cl; sete al; ret; 
0x0000000000401061: movzx ecx, byte ptr [rax + 0x17]; and ecx, 0x1f; cmp rcx, 0x11; jne 0x1073; mov rax, qword ptr [rax + 0x40]; ret; 
0x00000000004600b5: movzx ecx, byte ptr [rax + 0x31]; cmp byte ptr [rbx + 0x31], cl; sete al; nop; ret; 
0x000000000045fc32: movzx ecx, byte ptr [rax + 0xa]; cmp byte ptr [rbx + 0xa], cl; sete al; ret; 
0x000000000045ff8f: movzx ecx, byte ptr [rax + 5]; cmp byte ptr [rbx + 5], cl; sete al; ret; 
0x000000000040eb9c: movzx ecx, byte ptr [rax + 8]; and ecx, 0xfffffff7; mov byte ptr [rax + 8], cl; pop rbp; ret; 
0x0000000000403e80: movzx ecx, byte ptr [rax]; cmp byte ptr [rbx], cl; sete al; ret; 
0x000000000040f1a5: movzx ecx, byte ptr [rbx + 8]; and ecx, 0xfffffffb; mov byte ptr [rbx + 8], cl; add rsp, 0x30; pop rbp; ret; 
0x0000000000410757: movzx ecx, byte ptr [rbx + 8]; and ecx, 0xfffffffb; mov byte ptr [rbx + 8], cl; add rsp, 0x60; pop rbp; ret; 
0x000000000041291f: movzx ecx, byte ptr [rcx + rbx]; cmp cl, 0xa1; jne 0x1292e; add rsp, 0x38; pop rbp; ret; 
0x0000000000431fe8: movzx ecx, byte ptr [rsp + 0x16]; add rsp, 0x68; pop rbp; ret; 
0x000000000043a432: movzx ecx, byte ptr [rsp + 0x17]; add rsp, 0x38; pop rbp; ret; 
0x0000000000460df9: movzx ecx, byte ptr [rsp + 0x1f]; mov rbx, qword ptr [rsp + 0x40]; add rsp, 0x50; pop rbp; ret; 
0x0000000000465e0e: movzx ecx, byte ptr [rsp + 0xb8]; mov byte ptr [rbx + rax - 2], 0x25; mov byte ptr [rbx + rax - 1], r9b; add rsp, 0x58; pop rbp; ret; 
0x000000000044061e: movzx ecx, cl; mov qword ptr [rbx + rcx*8], rdx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000403ea0: movzx ecx, word ptr [rax]; cmp word ptr [rbx], cx; sete al; ret; 
0x00000000004706bc: movzx ecx, word ptr [rbx + 0x18]; cmp word ptr [rax + 0x18], cx; sete al; ret; 
0x0000000000452630: movzx edx, byte ptr [rdx + 0x14]; cmp al, dl; jae 0x5263e; mov eax, 1; ret; 
0x00000000004691be: movzx edx, byte ptr [rsp + 0x74]; mov byte ptr [rbx + rax - 1], dl; add rsp, 0x48; pop rbp; ret; 
0x00000000004397cf: movzx esi, byte ptr [rsp + 0x1f]; add rsp, 0x60; pop rbp; ret; 
0x0000000000474afd: movzx esi, byte ptr [rsp + 0x27]; mov byte ptr [rdx + 0x52], sil; add rsp, 0x28; pop rbp; ret; 
0x0000000000425dd1: movzx esi, byte ptr [rsp + 0x48]; mov byte ptr [rdx + 0x10131], sil; add rsp, 0x20; pop rbp; ret; 
0x0000000000465e0d: movzx r9d, byte ptr [rsp + 0xb8]; mov byte ptr [rbx + rax - 2], 0x25; mov byte ptr [rbx + rax - 1], r9b; add rsp, 0x58; pop rbp; ret; 
0x000000000040f1a4: movzx rcx, byte ptr [rbx + 8]; and ecx, 0xfffffffb; mov byte ptr [rbx + 8], cl; add rsp, 0x30; pop rbp; ret; 
0x00000000004495bf: mul byte ptr [rcx]; cmp edx, ebx; jg 0x495ad; mov dword ptr [rip + 0xcfb8c], ebx; ret; 
0x000000000045a4a0: mul byte ptr [rsi + 0xf]; cmp ah, bl; jmp qword ptr [rsi + 0xf]; 
0x000000000046a49d: mul byte ptr [rsi - 0x70]; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x0000000000408e4a: mul ecx; xor rax, rdx; mul rdi; xor rax, rdx; ret; 
0x0000000000408fbe: mul ecx; xor rax, rdx; nop; nop; ret; 
0x000000000044ad0a: mul ecx; xor rax, rdx; ret; 
0x0000000000408e50: mul edi; xor rax, rdx; ret; 
0x000000000045e701: mul edx; mov qword ptr [rsp + 8], rax; mov rdi, rsp; mov esi, 0; mov eax, 0x23; syscall; 
0x0000000000408e49: mul rcx; xor rax, rdx; mul rdi; xor rax, rdx; ret; 
0x0000000000408fbd: mul rcx; xor rax, rdx; nop; nop; ret; 
0x000000000044ad09: mul rcx; xor rax, rdx; ret; 
0x0000000000408e4f: mul rdi; xor rax, rdx; ret; 
0x000000000040c5be: mulps xmm0, xmm1; cvttsd2si eax, xmm0; inc eax; ret; 
0x000000000040c5bd: mulsd xmm0, xmm1; cvttsd2si eax, xmm0; inc eax; ret; 
0x000000000046bfa6: neg ch; stc; dec dword ptr [rax - 0x77]; ret; 
0x000000000042db82: neg eax; add rsp, 0x30; pop rbp; ret; 
0x0000000000432fef: neg eax; call 0x32ee0; add rsp, 0x10; pop rbp; ret; 
0x000000000041f7c6: neg eax; nop; xchg qword ptr [rdx + 0x38], rax; add rsp, 0x28; pop rbp; ret; 
0x00000000004330cf: neg ebx; mov rcx, rbx; call 0x329e0; sub rsp, -0x80; pop rbp; ret; 
0x000000000041f84b: neg ebx; nop; xchg qword ptr [rax + 0x30], rbx; mov rcx, qword ptr [rip + 0xf9947]; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000044a73e: neg ecx; cmp rbx, rcx; ja 0x4a755; add rsp, 0x20; pop rbp; ret; 
0x00000000004013b8: neg ecx; cmp rcx, rbx; jb 0x13c1; pop rbp; ret; 
0x000000000040129e: neg ecx; cmp rcx, rdx; jb 0x12aa; mov rbx, rdx; pop rbp; ret; 
0x0000000000429649: neg edx; and qword ptr [rax + rsi*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x00000000004122c4: neg edx; and qword ptr [rsi + rax*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000044a9d1: neg esi; cmp cl, 0x2d; cmove rax, rsi; mov ebx, 1; nop; ret; 
0x0000000000432fee: neg rax; call 0x32ee0; add rsp, 0x10; pop rbp; ret; 
0x000000000041f7c5: neg rax; nop; xchg qword ptr [rdx + 0x38], rax; add rsp, 0x28; pop rbp; ret; 
0x00000000004330ce: neg rbx; mov rcx, rbx; call 0x329e0; sub rsp, -0x80; pop rbp; ret; 
0x000000000041f84a: neg rbx; nop; xchg qword ptr [rax + 0x30], rbx; mov rcx, qword ptr [rip + 0xf9947]; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000044a73d: neg rcx; cmp rbx, rcx; ja 0x4a755; add rsp, 0x20; pop rbp; ret; 
0x00000000004013b7: neg rcx; cmp rcx, rbx; jb 0x13c1; pop rbp; ret; 
0x000000000040129d: neg rcx; cmp rcx, rdx; jb 0x12aa; mov rbx, rdx; pop rbp; ret; 
0x0000000000429648: neg rdx; and qword ptr [rax + rsi*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x00000000004122c3: neg rdx; and qword ptr [rsi + rax*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000044a9d0: neg rsi; cmp cl, 0x2d; cmove rax, rsi; mov ebx, 1; nop; ret; 
0x000000000041187b: nop dword ptr [rax + rax]; call 0x11a40; add rsp, 0x68; pop rbp; ret; 
0x00000000004159fb: nop dword ptr [rax + rax]; call 0x1e4c0; add rsp, 8; pop rbp; ret; 
0x0000000000415a5b: nop dword ptr [rax + rax]; call 0x20640; add rsp, 8; pop rbp; ret; 
0x000000000042ad7b: nop dword ptr [rax + rax]; call 0x2ada0; add rsp, 0x20; pop rbp; ret; 
0x000000000042425b: nop dword ptr [rax + rax]; call 0x2c4a0; mov rax, qword ptr [rsp + 0x78]; add rsp, 0x90; pop rbp; ret; 
0x000000000040543b: nop dword ptr [rax + rax]; call 0x34e80; add rsp, 0x18; pop rbp; ret; 
0x000000000043aa5b: nop dword ptr [rax + rax]; call 0x351a0; call 0x3a000; add rsp, 0x50; pop rbp; ret; 
0x000000000043633b: nop dword ptr [rax + rax]; call 0x364c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000459f9b: nop dword ptr [rax + rax]; call 0x42b60; add rsp, 0x28; pop rbp; ret; 
0x000000000042ddfb: nop dword ptr [rax + rax]; call 0x4740; add rsp, 0x40; pop rbp; ret; 
0x0000000000419d3b: nop dword ptr [rax + rax]; call 0x4f520; add rsp, 0x50; pop rbp; ret; 
0x00000000004617db: nop dword ptr [rax + rax]; call 0x61520; add rsp, 8; pop rbp; ret; 
0x000000000046561b: nop dword ptr [rax + rax]; call 0x65860; add rsp, 0x120; pop rbp; ret; 
0x0000000000467b7b: nop dword ptr [rax + rax]; call 0x68040; add rsp, 0x88; pop rbp; ret; 
0x000000000047061b: nop dword ptr [rax + rax]; call 0x6d8e0; add rsp, 0x20; pop rbp; ret; 
0x0000000000473f3b: nop dword ptr [rax + rax]; call 0x73500; add rsp, 8; pop rbp; ret; 
0x000000000047447b: nop dword ptr [rax + rax]; call 0x73560; add rsp, 8; pop rbp; ret; 
0x0000000000436afb: nop dword ptr [rax + rax]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000041a27b: nop dword ptr [rax + rax]; call 0xa5c0; mov eax, 1; add rsp, 0x28; pop rbp; ret; 
0x000000000040e69b: nop dword ptr [rax + rax]; call 0xeb00; add rsp, 0xa8; pop rbp; ret; 
0x0000000000429d1b: nop dword ptr [rax + rax]; cmp rbx, rdx; jbe 0x29d30; mov rax, -1; mov rbx, rsi; ret; 
0x0000000000411ebd: nop dword ptr [rax]; call 0x12140; add rsp, 0x48; pop rbp; ret; 
0x00000000004557bc: nop dword ptr [rax]; call 0x1220; add rsp, 0x18; pop rbp; ret; 
0x000000000041859c: nop dword ptr [rax]; call 0x188a0; add rsp, 0x18; pop rbp; ret; 
0x000000000041ba5c: nop dword ptr [rax]; call 0x1ba80; add rsp, 0x30; pop rbp; ret; 
0x00000000004205fd: nop dword ptr [rax]; call 0x1dfa0; call 0x25b60; add rsp, 0x30; pop rbp; ret; 
0x000000000046173d: nop dword ptr [rax]; call 0x2fb60; add rsp, 0x50; pop rbp; ret; 
0x00000000004525dc: nop dword ptr [rax]; call 0x32980; add rsp, 0x28; pop rbp; ret; 
0x000000000041c13d: nop dword ptr [rax]; call 0x331a0; call 0x32980; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c7c: nop dword ptr [rax]; call 0x39a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000437fdd: nop dword ptr [rax]; call 0x39c40; add rsp, 0x18; pop rbp; ret; 
0x000000000043acbc: nop dword ptr [rax]; call 0x3ffe0; call 0x3a000; add rsp, 0x30; pop rbp; ret; 
0x0000000000459f1c: nop dword ptr [rax]; call 0x42b60; add rsp, 0x28; pop rbp; ret; 
0x000000000044a41d: nop dword ptr [rax]; call 0x4a0e0; add rsp, 0x50; pop rbp; ret; 
0x00000000004510fd: nop dword ptr [rax]; call 0x4c120; add rsp, 0x18; pop rbp; ret; 
0x000000000044f5dd: nop dword ptr [rax]; call 0x500a0; add rsp, 0x58; pop rbp; ret; 
0x000000000043bb1d: nop dword ptr [rax]; call 0x50f40; call 0x50e60; add rsp, 8; pop rbp; ret; 
0x0000000000453ffc: nop dword ptr [rax]; call 0x51dc0; add rsp, 0x198; pop rbp; ret; 
0x000000000046f03d: nop dword ptr [rax]; call 0x58da0; add rsp, 0x18; pop rbp; ret; 
0x0000000000404a7c: nop dword ptr [rax]; call 0x59660; mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x28; pop rbp; ret; 
0x0000000000403d1d: nop dword ptr [rax]; call 0x5cea0; add rsp, 0x60; pop rbp; ret; 
0x000000000046153d: nop dword ptr [rax]; call 0x61560; add rsp, 0x10; pop rbp; ret; 
0x000000000046e27c: nop dword ptr [rax]; call 0x61820; add rsp, 0x600; pop rbp; ret; 
0x0000000000461b9c: nop dword ptr [rax]; call 0x61bc0; add rsp, 8; pop rbp; ret; 
0x0000000000465d9c: nop dword ptr [rax]; call 0x66380; add rsp, 0x58; pop rbp; ret; 
0x000000000046539c: nop dword ptr [rax]; call 0x66c60; add rsp, 0x120; pop rbp; ret; 
0x000000000046a47c: nop dword ptr [rax]; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x000000000046ff1d: nop dword ptr [rax]; call 0x6e920; call 0x6fde0; add rsp, 0x48; pop rbp; ret; 
0x000000000046ffbc: nop dword ptr [rax]; call 0x6fca0; mov rdx, rax; mov rcx, qword ptr [rdx + 0xa0]; mov rax, rbx; call rcx; 
0x00000000004789fc: nop dword ptr [rax]; call 0x76400; add rsp, 0x40; pop rbp; ret; 
0x000000000047a85c: nop dword ptr [rax]; call 0x7a8e0; add rsp, 0x90; pop rbp; ret; 
0x000000000042cadd: nop dword ptr [rax]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x0000000000442fdd: nop dword ptr [rax]; call 0xa5c0; add rsp, 0x40; pop rbp; ret; 
0x000000000041ccdc: nop dword ptr [rax]; call 0xa5c0; add rsp, 0x68; pop rbp; ret; 
0x000000000043997c: nop dword ptr [rax]; call 0xa5c0; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000404e9d: nop dword ptr [rax]; call 0xa5c0; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000043845c: nop dword ptr [rax]; call 0xa660; call 0x37900; add rsp, 0x18; pop rbp; ret; 
0x000000000040c33c: nop dword ptr [rax]; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004413fc: nop dword ptr [rax]; cmp eax, 0xb; je 0x413b7; add rsp, 0x18; pop rbp; ret; 
0x000000000045467c: nop dword ptr [rax]; cmp eax, 2; jge 0x5468b; add rsp, 0x30; pop rbp; ret; 
0x000000000042c99c: nop dword ptr [rax]; cmp esi, ecx; je 0x2c9ac; ret; 
0x00000000004346bd: nop dword ptr [rax]; cmp rcx, rdx; ja 0x34690; add rsp, 0x20; pop rbp; ret; 
0x000000000041d7dc: nop dword ptr [rax]; test bl, bl; je 0x1d7ea; add rsp, 0x20; pop rbp; ret; 
0x000000000044aadd: nop dword ptr [rax]; test rax, rax; jl 0x4aaeb; add rsp, 0x18; pop rbp; ret; 
0x0000000000412cfd: nop dword ptr [rax]; test rcx, rcx; ja 0x12cee; pop rbp; ret; 
0x000000000045999c: nop dword ptr [rax]; test rsi, rsi; jne 0x599ab; mov eax, 1; ret; 
0x00000000004376e3: nop; adc dword ptr [rax], eax; call 0x42600; add rsp, 0x30; pop rbp; ret; 
0x0000000000478ab5: nop; add byte ptr [rax], al; add al, ch; ret 0xffdf; 
0x0000000000401a5b: nop; add byte ptr [rax], al; add byte ptr [rax - 0x76b3f915], dl; ret; 
0x000000000042671e: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000412595: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4908; 
0x000000000047a29a: nop; add byte ptr [rax], al; add byte ptr [rbp - 0x70], bl; ret; 
0x0000000000426352: nop; add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0xc149; 
0x0000000000454654: nop; add byte ptr [rax], al; add byte ptr [rbx - 0x6bf0f906], al; ret 0x9066; 
0x0000000000449acb: nop; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0xc2e9; 
0x0000000000449b92: nop; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0xc984; 
0x0000000000435a71: nop; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000040c234: nop; add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x0000000000419ef6: nop; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret 0x8948; 
0x0000000000439811: nop; add dword ptr [rax], eax; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x8445; 
0x0000000000440157: nop; add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret 0x9066; 
0x0000000000440606: nop; add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000042890f: nop; add rsp, 0x10; pop rbp; ret; 
0x000000000046ef0a: nop; and ecx, 0x1f; mov rax, rcx; ret; 
0x000000000040c7df: nop; call 0x13ec0; add rsp, 0x40; pop rbp; ret; 
0x00000000004164df: nop; call 0x1c8e0; call 0x165e0; add rsp, 0x48; pop rbp; ret; 
0x000000000042265f: nop; call 0x1cd20; add rsp, 8; pop rbp; ret; 
0x0000000000417adf: nop; call 0x1d100; add rsp, 0x68; pop rbp; ret; 
0x000000000041bbff: nop; call 0x22100; add rsp, 0x40; pop rbp; ret; 
0x000000000042611f: nop; call 0x26300; add rsp, 0x70; pop rbp; ret; 
0x000000000040a67f: nop; call 0x2d740; add rsp, 0x18; pop rbp; ret; 
0x000000000040495f: nop; call 0x2e420; add rsp, 0x58; pop rbp; ret; 
0x00000000004339ab: nop; call 0x2fb60; add rsp, 0x90; pop rbp; ret; 
0x000000000041bfdf: nop; call 0x32980; add rsp, 0x60; pop rbp; ret; 
0x00000000004314bf: nop; call 0x32980; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x000000000040881f: nop; call 0x33120; call 0x32980; add rsp, 0x70; pop rbp; ret; 
0x00000000004321bf: nop; call 0x34e80; add rsp, 0x40; pop rbp; ret; 
0x000000000040363f: nop; call 0x36c0; mov rbx, rcx; add rsp, 0x40; pop rbp; ret; 
0x0000000000457d3f: nop; call 0x37480; add rsp, 0x18; pop rbp; ret; 
0x000000000045f53f: nop; call 0x41520; add rsp, 0x10; pop rbp; ret; 
0x0000000000435e1f: nop; call 0x42ea0; add rsp, 0x18; pop rbp; ret; 
0x00000000004160bf: nop; call 0x42ea0; add rsp, 0x88; pop rbp; ret; 
0x0000000000444631: nop; call 0x44760; add rsp, 0x68; pop rbp; ret; 
0x0000000000436e1f: nop; call 0x476c0; add rsp, 0x10; pop rbp; ret; 
0x00000000004074bf: nop; call 0x4a480; add rsp, 0xf8; pop rbp; ret; 
0x000000000045563f: nop; call 0x4c120; add rsp, 0x40; pop rbp; ret; 
0x000000000045107f: nop; call 0x4f520; add rsp, 0x30; pop rbp; ret; 
0x000000000042b0ff: nop; call 0x52be0; add rsp, 0x28; pop rbp; ret; 
0x00000000004414e6: nop; call 0x58ba0; mov rcx, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rcx]; mov rax, qword ptr [rdx]; call rax; 
0x000000000046efff: nop; call 0x58c80; add rsp, 0x18; pop rbp; ret; 
0x00000000004605bf: nop; call 0x60260; add rsp, 8; pop rbp; ret; 
0x00000000004604df: nop; call 0x603a0; add rsp, 8; pop rbp; ret; 
0x00000000004657df: nop; call 0x66b00; add rsp, 0x120; pop rbp; ret; 
0x000000000046a49f: nop; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x00000000004705bf: nop; call 0x6ba00; add rsp, 0x10; pop rbp; ret; 
0x00000000004702ff: nop; call 0x6bfe0; add rsp, 8; pop rbp; ret; 
0x000000000046febf: nop; call 0x6fca0; mov rcx, qword ptr [rax + 0x38]; mov rax, rbx; call rcx; 
0x0000000000472b3f: nop; call 0x72060; add rsp, 8; pop rbp; ret; 
0x0000000000476cdf: nop; call 0x75420; add rsp, 0x20; pop rbp; ret; 
0x000000000047953f: nop; call 0x77e20; add rsp, 0x88; pop rbp; ret; 
0x000000000040a3ce: nop; call 0xa400; add rsp, 8; pop rbp; ret; 
0x000000000040b756: nop; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000040453f: nop; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004506ae: nop; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x000000000043f87f: nop; call 0xa5c0; add rsp, 0xb0; pop rbp; ret; 
0x0000000000405278: nop; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000043855f: nop; call 0xa5c0; call 0x37900; add rsp, 0x18; pop rbp; ret; 
0x000000000042cf18: nop; call 0xa5c0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000425adf: nop; call 0xa5c0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; pop rbp; ret; 
0x000000000041ec54: nop; call 0xa5c0; mov rax, qword ptr [rsp + 0x60]; add rsp, 0x78; pop rbp; ret; 
0x000000000041ec83: nop; call 0xa5c0; xor eax, eax; add rsp, 0x78; pop rbp; ret; 
0x0000000000423edf: nop; call 0xa5c0; xor eax, eax; add rsp, 0x90; pop rbp; ret; 
0x000000000040c39f: nop; call 0xb9c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004586bf: nop; call rax; 
0x00000000004586bf: nop; call rax; movzx eax, byte ptr [rsp + 6]; add rsp, 0x20; pop rbp; ret; 
0x000000000040f49f: nop; call rcx; 
0x000000000046f451: nop; cmp rax, 0x15; jne 0x6f45e; add rsp, 0x28; pop rbp; ret; 
0x000000000046d33f: nop; cmp rcx, 1; jne 0x6d34c; add rsp, 0x28; pop rbp; ret; 
0x000000000040a327: nop; cmp rcx, rax; jne 0xa333; add rsp, 0x20; pop rbp; ret; 
0x00000000004492ff: nop; cmp rcx, rsi; ja 0x4930b; add rsp, 0x10; pop rbp; ret; 
0x00000000004598e5: nop; dec dword ptr [rax + 0x108]; ret; 
0x000000000047185f: nop; jae 0x71870; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x000000000043b9bf: nop; jne 0x3b9ca; xor eax, eax; add rsp, 0x38; pop rbp; ret; 
0x0000000000449449: nop; lea rax, [rip + 0x10804f]; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x000000000041a3e6: nop; lea rax, [rip + 0x108b1a]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000041a15b: nop; lea rax, [rip + 0x108da5]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x0000000000417ed9: nop; lea rax, [rip + 0x10abff]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000418b3d: nop; lea rax, [rip + 0x10aeeb]; lock xadd qword ptr [rax], rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004181e6: nop; lea rax, [rip + 0x10b2c2]; call 0xa5c0; add rsp, 0x30; pop rbp; ret; 
0x0000000000426219: nop; lea rax, [rip + 0x11375f]; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x0000000000421b5b: nop; lea rax, [rip + 0x117e1d]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000434630: nop; lea rax, [rip + 0x11bf40]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x000000000043457b: nop; lea rax, [rip + 0x11bff5]; call 0xa5c0; add rsp, 0x48; pop rbp; ret; 
0x000000000043352a: nop; lea rax, [rip + 0x11d01e]; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x00000000004329a8: nop; lea rax, [rip + 0x11dba0]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x00000000004327de: nop; lea rax, [rip + 0x11dd6a]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000042ca45: nop; lea rax, [rip + 0x123ad3]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000042b226: nop; lea rax, [rip + 0x1252e2]; call 0xa5c0; add rsp, 0x48; pop rbp; ret; 
0x000000000042b0a0: nop; lea rax, [rip + 0x125468]; call 0xa5c0; add rsp, 0x70; pop rbp; ret; 
0x000000000042a9e9: nop; lea rax, [rip + 0x125aff]; call 0xa5c0; add rsp, 0x138; pop rbp; ret; 
0x000000000042a37e: nop; lea rax, [rip + 0x126172]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000412f06: nop; lea rax, [rip + 0x126a72]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x0000000000422085: nop; lea rax, [rip + 0x127a63]; xchg qword ptr [rax], rdx; ret; 
0x00000000004255bd: nop; lea rax, [rip + 0x12adb3]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000041e88a: nop; lea rax, [rip + 0x131cbe]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000041dcf0: nop; lea rax, [rip + 0x1329e8]; xchg qword ptr [rax], rdx; ret; 
0x00000000004597e9: nop; lea rax, [rip + 0x44be7]; call 0x5b0a0; add rsp, 0x30; pop rbp; ret; 
0x00000000004583e7: nop; lea rax, [rip + 0xe1591]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000457f6b: nop; lea rax, [rip + 0xe1a0d]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x000000000044038c: nop; lea rax, [rip + 0xe3064]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000043f53d: nop; lea rax, [rip + 0xe3eb3]; call 0xa5c0; add rsp, 0xb0; pop rbp; ret; 
0x000000000043e399: nop; lea rax, [rip + 0xe5057]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000043cb3e: nop; lea rax, [rip + 0xe693a]; call 0xa5c0; add rsp, 0x50; pop rbp; ret; 
0x000000000043b486: nop; lea rax, [rip + 0xe7f6a]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x000000000043b3c0: nop; lea rax, [rip + 0xe8030]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x0000000000437eca: nop; lea rax, [rip + 0xeb526]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000437455: nop; lea rdx, [rip + 0x119133]; xchg qword ptr [rdx], rcx; add rsp, 8; pop rbp; ret; 
0x000000000041fa2e: nop; mov byte ptr [rax + 8], cl; add rsp, 0x18; pop rbp; ret; 
0x0000000000458981: nop; mov cl, byte ptr [rip + 0xf7f9c]; test cl, cl; setne al; ret; 
0x000000000042e110: nop; mov dword ptr [rip + 0xeb0b5], ecx; pop rbp; ret; 
0x000000000042e109: nop; mov dword ptr [rip + 0xeb0bc], eax; nop; mov dword ptr [rip + 0xeb0b5], ecx; pop rbp; ret; 
0x000000000044d4c9: nop; mov eax, 1; lock xadd dword ptr [rdx + 0x22a0], eax; add rsp, 0x48; pop rbp; ret; 
0x000000000041a4ce: nop; mov ecx, 0x84000000; ror byte ptr [rdi], cl; xchg eax, esp; ret 0x2eb; 
0x000000000042950f: nop; mov qword ptr [rax + rbx*8], rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000042cb72: nop; mov qword ptr [rax], rcx; ret; 
0x0000000000406e37: nop; mov qword ptr [rcx + 0xa0], rax; add rsp, 0x40; pop rbp; ret; 
0x000000000042cb6a: nop; mov qword ptr [rcx + 0xa0], rdx; nop; mov qword ptr [rax], rcx; ret; 
0x00000000004440b8: nop; mov qword ptr [rcx + 0xa8], rax; add rsp, 0x20; pop rbp; ret; 
0x0000000000420058: nop; mov qword ptr [rdx + rbx + 0x28], rcx; inc qword ptr [rax + 0x140]; add rsp, 0x18; pop rbp; ret; 
0x000000000043fa18: nop; mov qword ptr [rip + 0xe39e0], rax; inc dword ptr [rip + 0xe39e2]; call 0x3e3c0; pop rbp; ret; 
0x000000000041dcfc: nop; mov rax, -1; lea rcx, [rip + 0x1329d5]; xchg qword ptr [rcx], rax; ret; 
0x00000000004598e0: nop; mov rax, qword ptr [r14 + 0x30]; nop; dec dword ptr [rax + 0x108]; ret; 
0x000000000043fc1c: nop; mov rax, qword ptr [rsp + 0x10]; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x000000000042a72c: nop; mov rax, qword ptr [rsp + 0x28]; call 0xa5c0; add rsp, 0x30; pop rbp; ret; 
0x000000000044e9ba: nop; mov rax, qword ptr [rsp + 0x30]; call 0xa400; add rsp, 0x48; pop rbp; ret; 
0x0000000000424886: nop; mov rax, qword ptr [rsp + 0x30]; call 0xa5c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000418a53: nop; mov rax, r8; mov rbx, rcx; ret; 
0x000000000045069e: nop; mov rax, rcx; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x0000000000411421: nop; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x00000000004598c0: nop; mov rcx, qword ptr [r14 + 0x30]; inc dword ptr [rcx + 0x108]; mov rcx, qword ptr [rcx + 0xd0]; movsxd rax, dword ptr [rcx]; ret; 
0x00000000004425d5: nop; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rcx + 0x148], 0; add rsp, 0x20; pop rbp; ret; 
0x000000000042bef3: nop; mov rcx, qword ptr [rsp + 0x70]; xchg qword ptr [rax], rcx; add rsp, 0x58; pop rbp; ret; 
0x000000000046eb55: nop; mov rcx, rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004346a0: nop; mov rdx, rax; mov rax, rsi; call rcx; 
0x000000000041fc9b: nop; movsd qword ptr [rax + 0x28], xmm8; mov byte ptr [rax + 0x30], 1; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x000000000042cadc: nop; nop dword ptr [rax]; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x0000000000454653: nop; nop; add byte ptr [rax], al; add byte ptr [rbx - 0x6bf0f906], al; ret 0x9066; 
0x000000000042890e: nop; nop; add rsp, 0x10; pop rbp; ret; 
0x0000000000444630: nop; nop; call 0x44760; add rsp, 0x68; pop rbp; ret; 
0x000000000040b755: nop; nop; call 0xa5c0; add rsp, 0x10; pop rbp; ret; 
0x00000000004506ad: nop; nop; call 0xa5c0; add rsp, 0x60; pop rbp; ret; 
0x000000000041e2c4: nop; nop; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x0000000000458980: nop; nop; mov cl, byte ptr [rip + 0xf7f9c]; test cl, cl; setne al; ret; 
0x0000000000408fc3: nop; nop; ret; 
0x000000000041f64f: nop; nop; xchg qword ptr [rax], rbx; add rsp, 0x28; pop rbp; ret; 
0x000000000041f8ed: nop; nop; xchg qword ptr [rax], rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000043fd84: nop; nop; xchg qword ptr [rcx + 0x1228], rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000418880: nop; nop; xor ecx, ecx; xchg byte ptr [rax], cl; ret; 
0x0000000000470479: nop; pop rbp; ret; 
0x0000000000446ac6: nop; ret 0xd231; 
0x0000000000401d5f: nop; ret; 
0x000000000045ccc5: nop; sub eax, 1; jne 0x5ccc4; ret; 
0x000000000040a1df: nop; test bl, bl; je 0xa1c7; add rsp, 0x30; pop rbp; ret; 
0x000000000043377f: nop; test rdx, rdx; je 0x3391f; mov rax, qword ptr [rdx]; call rax; 
0x000000000041f84d: nop; xchg qword ptr [rax + 0x30], rbx; mov rcx, qword ptr [rip + 0xf9947]; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000041f650: nop; xchg qword ptr [rax], rbx; add rsp, 0x28; pop rbp; ret; 
0x000000000041f8ee: nop; xchg qword ptr [rax], rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000041c8b5: nop; xchg qword ptr [rcx + 0x100], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000043fd85: nop; xchg qword ptr [rcx + 0x1228], rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000041f7c8: nop; xchg qword ptr [rdx + 0x38], rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000406563: nop; xor eax, eax; xchg dword ptr [rdx], eax; add rsp, 0x18; pop rbp; ret; 
0x000000000044fd3c: nop; xor eax, eax; xchg dword ptr [rdx], eax; add rsp, 0x60; pop rbp; ret; 
0x0000000000444b2e: nop; xor ecx, ecx; call 0x3cd00; add rsp, 0x58; pop rbp; ret; 
0x0000000000418881: nop; xor ecx, ecx; xchg byte ptr [rax], cl; ret; 
0x000000000042c0e6: nop; xor ecx, ecx; xchg qword ptr [rax + 0x10], rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000044dacb: nop; xor ecx, ecx; xchg qword ptr [rax + 0x1210], rcx; add rsp, 0x20; pop rbp; ret; 
0x00000000004592a6: nop; xor ecx, ecx; xchg qword ptr [rax + 0x28], rcx; xor eax, eax; ret; 
0x0000000000460806: not byte ptr [rsi - 0x74b70006]; sbb byte ptr [rax - 0x75], cl; and al, 0x48; call rcx; 
0x000000000041ee44: not eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000410f8b: not ecx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000429600: not esi; and qword ptr [rax + rbx*8], rsi; add rsp, 0x10; pop rbp; ret; 
0x000000000043d2ea: not esi; lock and dword ptr [rax], esi; add rsp, 0x10; pop rbp; ret; 
0x000000000041ee43: not rax; add rsp, 0x10; pop rbp; ret; 
0x0000000000410f8a: not rcx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000004295ff: not rsi; and qword ptr [rax + rbx*8], rsi; add rsp, 0x10; pop rbp; ret; 
0x0000000000461fd6: or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004495a6: or al, 0; add byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x000000000046092b: or al, 0; add rsp, 0x18; pop rbp; ret; 
0x0000000000458289: or al, 0; call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x0000000000459ec5: or al, 0; call 0xa5c0; mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x20; pop rbp; ret; 
0x000000000045eaf7: or al, 0; jmp rax; 
0x000000000045eb22: or al, 0; lea r8, [rip + 0xf2095]; lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000045eae9: or al, 0; lea r9, [rip - 0xf2]; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x0000000000454e11: or al, 0; lea rbx, [rsp + 0x10]; call rcx; 
0x0000000000460920: or al, 0; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xc1e5b], rbx; add rsp, 0x18; pop rbp; ret; 
0x0000000000458ee0: or al, 0; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xc9733], rax; pop rbp; ret; 
0x0000000000454d61: or al, 0; mov rbx, rax; mov rdx, rcx; mov rax, rdi; call rsi; 
0x000000000045e99c: or al, 0; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x000000000045ebe9: or al, 0; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x0000000000458eeb: or al, 0; pop rbp; ret; 
0x00000000004495ca: or al, 0; ret; 
0x0000000000461248: or al, 0; sete al; add rsp, 0x18; pop rbp; ret; 
0x0000000000412921: or al, 0x19; cmp cl, 0xa1; jne 0x1292e; add rsp, 0x38; pop rbp; ret; 
0x0000000000410f88: or al, 0x19; not rcx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000402e25: or al, 0x1e; cmp cl, byte ptr [rdi + rbx]; seta al; lea rax, [rax*2 - 1]; ret; 
0x0000000000402e28: or al, 0x1f; seta al; lea rax, [rax*2 - 1]; ret; 
0x000000000042e2ea: or al, 0x24; mov qword ptr [rax + 0x48], rcx; add rsp, 8; pop rbp; ret; 
0x00000000004648f6: or al, 0x31; mov rax, rbx; mov rbx, r8; mov rcx, r9; call rdi; 
0x0000000000406b61: or al, 0x33; jne 0x6b6c; add rsp, 0x48; pop rbp; ret; 
0x000000000042aadb: or al, 0x48; add esp, 0x18; pop rbp; ret; 
0x000000000042d2bc: or al, 0x48; add esp, 0x20; pop rbp; ret; 
0x000000000043bdb0: or al, 0x48; add esp, 0x30; pop rbp; ret; 
0x00000000004232b6: or al, 0x48; add esp, 0x60; pop rbp; ret; 
0x000000000040412e: or al, 0x48; cmp ebx, ecx; sete al; add rsp, 0x28; pop rbp; ret; 
0x0000000000441378: or al, 0x48; lea eax, [rbx + 0x80]; call 0xa660; add rsp, 8; pop rbp; ret; 
0x0000000000422358: or al, 0x48; lea eax, [rip + 0x12eb80]; call 0x1cd20; add rsp, 0x48; pop rbp; ret; 
0x00000000004221c4: or al, 0x48; lea eax, [rip + 0x12ed14]; call 0x1cd20; add rsp, 0x18; pop rbp; ret; 
0x0000000000414950: or al, 0x48; lea eax, [rip + 0x89b20]; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x000000000040ec4f: or al, 0x48; lea eax, [rsp + 0x30]; mov rbx, rsi; call rcx; 
0x000000000040ef38: or al, 0x48; lea eax, [rsp + 0x50]; mov rbx, rsi; call rcx; 
0x000000000041008d: or al, 0x48; lea eax, [rsp + 0x78]; mov rbx, rsi; call rcx; 
0x0000000000410402: or al, 0x48; lea eax, [rsp + 0x80]; mov rbx, rsi; call rcx; 
0x0000000000461788: or al, 0x48; mov eax, dword ptr [rdx + 8]; mov ecx, 1; xchg dword ptr [rax], ecx; ret; 
0x000000000041ace4: or al, 0x48; mov eax, dword ptr [rsp + 0x70]; mov byte ptr [rax + 0x110], 0; add rsp, 0x58; pop rbp; ret; 
0x0000000000471f49: or al, 0x48; mov eax, ebx; mov rbx, rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000046d2db: or al, 0x48; mov eax, ecx; add rsp, 0x128; pop rbp; ret; 
0x000000000040d288: or al, 0x48; mov eax, ecx; mov rbx, rdi; call rsi; 
0x000000000041e459: or al, 0x48; mov eax, ecx; movups xmm0, xmm1; add rsp, 0x20; pop rbp; ret; 
0x000000000040cdd4: or al, 0x48; mov eax, esi; add rsp, 0x10; pop rbp; ret; 
0x0000000000410a5b: or al, 0x48; mov eax, esi; mov rbx, rdi; call rcx; 
0x000000000040f497: or al, 0x48; mov eax, esi; mov rbx, rdi; nop; call rcx; 
0x000000000045fcf7: or al, 0x48; mov ecx, dword ptr [rax + 0x18]; cmp qword ptr [rbx + 0x18], rcx; sete al; ret; 
0x000000000045f805: or al, 0x48; mov ecx, dword ptr [rax + 8]; cmp qword ptr [rbx + 8], rcx; sete al; ret; 
0x000000000045f151: or al, 0x48; mov ecx, dword ptr [rax]; mov rbx, qword ptr [rax + 8]; mov rax, rcx; pop rbp; ret; 
0x000000000045f739: or al, 0x48; mov ecx, dword ptr [rbx + 0x18]; cmp qword ptr [rax + 0x18], rcx; sete al; ret; 
0x0000000000473989: or al, 0x48; mov ecx, dword ptr [rsp + 0x20]; mov dword ptr [rcx + 0x2c], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045e807: or al, 0x48; mov edx, dword ptr [rsp + 0x10]; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x000000000044111d: or al, 0x49; lea eax, [rax + 0x80]; call 0xa660; sub rsp, -0x80; pop rbp; ret; 
0x000000000040e7bf: or al, 0x4c; mov eax, ebp; mov rbx, rsi; call rcx; 
0x000000000040e0b3: or al, 0x4c; mov eax, esp; mov rbx, rdi; call rcx; 
0x0000000000444e1c: or al, 0x83; cli; add cl, byte ptr [rdi]; xchg eax, esp; ret 0x14eb; 
0x0000000000444380: or al, 0x83; cli; add cl, byte ptr [rdi]; xchg eax, esp; ret 0x6eb; 
0x000000000044c75c: or al, 0x8b; and al, 0x34; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0xb0; pop rbp; ret; 
0x000000000041f270: or al, 0x9a; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000045efae: or al, 0xa; mov rax, rcx; mov rbx, rsi; pop rbp; ret; 
0x000000000044f1ec: or al, 0xc0; mov qword ptr [r11 + 8], rcx; mov qword ptr [rax + r8*8], rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000042acbd: or al, 0xd0; add rsp, 0x30; pop rbp; ret; 
0x0000000000429512: or al, 0xd8; add rsp, 0x10; pop rbp; ret; 
0x0000000000439c69: or al, 0xe8; int1; xor eax, 0x5ebffff; call 0x38040; pop rbp; ret; 
0x0000000000402707: or al, 0xf; movabs byte ptr [0x14245c8910244489], al; mov dword ptr [rsp + 0x18], ecx; mov dword ptr [rsp + 0x1c], edx; ret; 
0x0000000000439965: or al, 0xfd; dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x18; pop rbp; ret; 
0x0000000000464941: or al, 1; mov rax, rbx; mov rbx, rdi; mov rcx, r9; call rsi; 
0x000000000044285c: or al, 2; add rsp, 0x58; pop rbp; ret; 
0x0000000000414050: or al, 5; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000041d210: or al, 7; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x00000000004749d8: or al, byte ptr [rax + rax]; add rsp, 0x38; pop rbp; ret; 
0x00000000004618a2: or al, byte ptr [rax]; add al, ch; cmp bh, 0xff; add rsp, 0x18; pop rbp; ret; 
0x00000000004751d8: or al, byte ptr [rax]; add rsp, 0x18; pop rbp; nop; ret; 
0x00000000004777c5: or al, byte ptr [rax]; call 0x61820; add rsp, 0x18; pop rbp; ret; 
0x0000000000472f5d: or al, byte ptr [rax]; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xaf86e], rcx; pop rbp; ret; 
0x00000000004729bb: or al, byte ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xac200], rax; pop rbp; ret; 
0x0000000000474f53: or al, byte ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xad8b0], rax; pop rbp; ret; 
0x0000000000473757: or al, byte ptr [rax]; mov rax, rcx; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000473a27: or al, byte ptr [rax]; mov rsi, qword ptr [rdx]; mov rax, rcx; call rsi; 
0x00000000004729c6: or al, byte ptr [rax]; pop rbp; ret; 
0x000000000040a92f: or al, byte ptr [rbp - 0x3f6af037]; add rsp, 0x30; pop rbp; ret; 
0x000000000042cd96: or al, byte ptr [rcx + 0xf]; xchg eax, esp; ret 0x1f0f; 
0x00000000004733f3: or al, byte ptr [rcx + 0xf]; xchg eax, esp; ret 0x8445; 
0x000000000043ee6b: or al, ch; out dx, eax; ret; 
0x0000000000473598: or al, ch; ret 0xfe7c; 
0x0000000000445703: or al, ch; xchg eax, edi; cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000045e604: or bh, al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], bh; mov eax, 0x3c; syscall; 
0x000000000040cb68: or bh, bh; ret 0x8966; 
0x00000000004463d5: or bh, byte ptr [rax + 1]; add rsp, 0x10; pop rbp; ret; 
0x00000000004578d4: or bh, byte ptr [rax + 1]; add rsp, 0x70; pop rbp; nop; ret; 
0x0000000000421469: or bh, byte ptr [rax + 1]; add rsp, 0xf8; pop rbp; ret; 
0x00000000004149a7: or bh, byte ptr [rax + 1]; add rsp, 8; pop rbp; ret; 
0x0000000000459584: or bh, byte ptr [rbx + 3]; call 0x2cc60; add rsp, 0x30; pop rbp; ret; 
0x000000000045f6da: or bh, byte ptr [rcx + 0x2a]; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x0000000000439b50: or bh, ch; push qword ptr [rcx]; sal byte ptr [rcx], 0xdb; add rsp, 0x28; pop rbp; ret; 
0x000000000040a113: or bl, ch; int 0x48; add esp, 0x18; pop rbp; ret; 
0x00000000004704d3: or bl, ch; or ecx, dword ptr [rax - 0x75]; add al, ch; ret 0xffea; 
0x00000000004226db: or bl, ch; ret 0xcccc; 
0x000000000045f23a: or bl, ch; ret; 
0x00000000004681f2: or bl, ch; xchg eax, ebx; add rsp, 0x20; pop rbp; ret; 
0x000000000045ccc3: or bl, dh; nop; sub eax, 1; jne 0x5ccc4; ret; 
0x000000000044f1f0: or byte ptr [r10 - 0x77], cl; xor al, 0xc0; add rsp, 0x18; pop rbp; ret; 
0x000000000045fc2e: or byte ptr [r13 + 0xb], sil; movzx ecx, byte ptr [rax + 0xa]; cmp byte ptr [rbx + 0xa], cl; sete al; ret; 
0x0000000000447ec7: or byte ptr [r14 + 0xb], sil; mov rdx, qword ptr [rbx + 0x10]; add rcx, rdx; mov qword ptr [rax + 0x68], rcx; ret; 
0x0000000000403f0e: or byte ptr [r15], cl; xchg eax, esp; shr ebx, 2; xor ecx, ecx; mov eax, ecx; ret; 
0x00000000004507b6: or byte ptr [r8 + 1], cl; mov qword ptr [rax + 8], rdx; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x00000000004780a1: or byte ptr [r8 - 0x77], cl; adc byte ptr [rax - 1], cl; ret; 
0x000000000047825f: or byte ptr [r8 - 0x77], cl; add cl, byte ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000477d03: or byte ptr [r8 - 0x77], cl; add cl, byte ptr [rax - 1]; ret; 
0x0000000000478c3b: or byte ptr [r8 - 0x77], cl; add cl, byte ptr [rbx + rcx*4 - 0x7c]; and al, 0xc0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004729bf: or byte ptr [r8 - 0x77], cl; add eax, 0xac200; pop rbp; ret; 
0x00000000004751d1: or byte ptr [r8 - 0x77], cl; add eax, 0xad3d6; add rsp, 0x18; pop rbp; nop; ret; 
0x0000000000474f57: or byte ptr [r8 - 0x77], cl; add eax, 0xad8b0; pop rbp; ret; 
0x0000000000470113: or byte ptr [r8 - 0x77], cl; add eax, 0xb24ac; add rsp, 0x48; pop rbp; ret; 
0x0000000000462714: or byte ptr [r8 - 0x77], cl; add eax, 0xbfeb3; add rsp, 0x10; pop rbp; ret; 
0x0000000000458ee4: or byte ptr [r8 - 0x77], cl; add eax, 0xc9733; pop rbp; ret; 
0x000000000042dc2d: or byte ptr [r8 - 0x77], cl; add eax, 0xf4cfa; add rsp, 0x40; pop rbp; ret; 
0x000000000047459e: or byte ptr [r8 - 0x77], cl; add ecx, dword ptr [rax - 0x73]; add eax, 0xe976; add rsp, 0x20; pop rbp; ret; 
0x00000000004156c0: or byte ptr [r8 - 0x77], cl; jno 0x156fe; mov byte ptr [rcx + 0x40], 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000472f61: or byte ptr [r8 - 0x77], cl; or eax, 0xaf86e; pop rbp; ret; 
0x00000000004040c0: or byte ptr [r8 - 0x77], cl; ror byte ptr [rax - 0x77], 1; call 0x4100; add rsp, 0x18; pop rbp; ret; 
0x0000000000404060: or byte ptr [r8 - 0x77], cl; ror byte ptr [rax - 0x77], 1; call 0x41c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000460924: or byte ptr [r8 - 0x77], cl; sbb eax, 0xc1e5b; add rsp, 0x18; pop rbp; ret; 
0x0000000000441551: or byte ptr [r8 - 0x77], cl; sbb eax, 0xe1116; call 0x2dba0; add rsp, 0x10; pop rbp; ret; 
0x000000000044efee: or byte ptr [r8 - 0x77], cl; xor al, 0xf8; mov rax, rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000461f12: or byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x1f0f; 
0x0000000000477dcd: or byte ptr [r9 + r9*4], cl; sub rsp, -0x80; pop rbp; ret; 
0x000000000045e6c8: or byte ptr [rax + 0x125], bh; syscall; 
0x000000000045e6c8: or byte ptr [rax + 0x125], bh; syscall; mov dword ptr [rsp + 0x18], eax; ret; 
0x00000000004626ad: or byte ptr [rax + 0x20], bh; call 0x5a020; add rsp, 8; pop rbp; ret; 
0x000000000045cd57: or byte ptr [rax + 0x29], cl; xlatb; mov qword ptr [rsp + 0x28], rdi; mov rdi, rbx; mov rcx, rbx; call rax; 
0x0000000000456e4b: or byte ptr [rax + 0x2b80148], 0; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000044a9c2: or byte ptr [rax + 0x39], 0xd6; jbe 0x4a9cd; xor eax, eax; xor ebx, ebx; ret; 
0x0000000000404cf7: or byte ptr [rax + 0x39], cl; adc byte ptr [rdi], cl; xchg eax, esp; ret 0x9066; 
0x000000000045fd62: or byte ptr [rax + 0x39], cl; or esi, dword ptr [rbp + 0xa]; mov ecx, dword ptr [rax + 8]; cmp dword ptr [rbx + 8], ecx; sete al; ret; 
0x000000000045fbe2: or byte ptr [rax + 0x39], cl; or esi, dword ptr [rbp + 0xc]; mov rcx, qword ptr [rax + 8]; cmp qword ptr [rbx + 8], rcx; sete al; ret; 
0x00000000004067f3: or byte ptr [rax + 0x39], cl; sal dword ptr [rbp + 6], 0x48; add esp, 0x10; pop rbp; ret; 
0x00000000004030e2: or byte ptr [rax + 0x39], cl; sal dword ptr [rbx + 0x48], 1; xor eax, eax; ret; 
0x0000000000456eb0: or byte ptr [rax + 0x3b80250], 0; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000045e78c: or byte ptr [rax + 0x3e], bh; syscall; 
0x000000000045e78c: or byte ptr [rax + 0x3e], bh; syscall; ret; 
0x000000000043469f: or byte ptr [rax + 0x48c28948], dl; mov eax, esi; call rcx; 
0x0000000000456ef2: or byte ptr [rax + 0x4b80348], 0; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x00000000004339ed: or byte ptr [rax + 0x5740038], al; call 0x3cb80; pop rbp; ret; 
0x000000000045e823: or byte ptr [rax + 0xe2], bh; syscall; 
0x000000000045e823: or byte ptr [rax + 0xe2], bh; syscall; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000045e5e3: or byte ptr [rax + 0xe7], bh; syscall; 
0x000000000045e5e3: or byte ptr [rax + 0xe7], bh; syscall; ret; 
0x000000000045e759: or byte ptr [rax + 0xea], bh; syscall; 
0x000000000045e759: or byte ptr [rax + 0xea], bh; syscall; ret; 
0x0000000000422f9e: or byte ptr [rax + 1], 1; add byte ptr [rax - 0x77], cl; sbb al, 0xc8; add rsp, 0x38; pop rbp; ret; 
0x00000000004620d8: or byte ptr [rax + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x000000000045856d: or byte ptr [rax + 1], bh; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x0000000000427976: or byte ptr [rax + 1], cl; cmp rdx, rdi; jae 0x27985; add rsp, 0x28; pop rbp; ret; 
0x00000000004507b7: or byte ptr [rax + 1], cl; mov qword ptr [rax + 8], rdx; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000045860d: or byte ptr [rax + 2], bh; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x000000000045e663: or byte ptr [rax + 3], bh; syscall; 
0x0000000000461fd5: or byte ptr [rax + rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000046eea3: or byte ptr [rax - 0x39], cl; adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000403144: or byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000042c25b: or byte ptr [rax - 0x73], cl; add dword ptr [r13 + 0x480674c0], eax; add esp, 0x18; pop rbp; ret; 
0x000000000046a159: or byte ptr [rax - 0x73], cl; push rax; jmp qword ptr [rsi - 0x70]; 
0x000000000045e520: or byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x170; popfq; pop rbp; ret; 
0x0000000000456aed: or byte ptr [rax - 0x75], cl; and al, 0x10; call 0x56b20; add rsp, 8; pop rbp; ret; 
0x0000000000456b8d: or byte ptr [rax - 0x75], cl; and al, 0x10; call 0x56bc0; add rsp, 8; pop rbp; ret; 
0x000000000043e752: or byte ptr [rax - 0x75], cl; and al, 0x20; inc qword ptr [rax]; add rsp, 0x28; pop rbp; ret; 
0x0000000000458729: or byte ptr [rax - 0x75], cl; and al, 8; mov byte ptr [rax], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045e684: or byte ptr [rax - 0x75], cl; je 0x5e6ad; adc byte ptr [rbx - 0x47e7dbac], cl; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000045e6a3: or byte ptr [rax - 0x75], cl; je 0x5e6cc; adc byte ptr [rbx - 0x47e7dbac], cl; add byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000045ec24: or byte ptr [rax - 0x75], cl; je 0x5ec4d; adc byte ptr [rax - 0x39], cl; ror byte ptr [rbx], 0; add byte ptr [rax], al; syscall; 
0x000000000045eca4: or byte ptr [rax - 0x75], cl; je 0x5eccd; adc byte ptr [rbx + 0x48182454], cl; mov eax, 0x1c; syscall; 
0x000000000045ed03: or byte ptr [rax - 0x75], cl; je 0x5ed2c; adc byte ptr [rax - 0x39], cl; ret 0; 
0x000000000047797d: or byte ptr [rax - 0x75], cl; jns 0x77992; mov rsi, rax; mov rax, qword ptr [rsp + 0x58]; mov rcx, rdx; call rsi; 
0x0000000000477a5d: or byte ptr [rax - 0x75], cl; jns 0x77a72; mov rsi, rax; mov rax, qword ptr [rsp + 0x58]; mov rcx, rdx; call rsi; 
0x000000000046406d: or byte ptr [rax - 0x75], cl; js 0x64082; mov rax, rsi; call rdx; 
0x0000000000428856: or byte ptr [rax - 0x75], cl; mov r8, qword ptr ds:[rdx + 0x10]; mov qword ptr [rsp + 0x20], r8; mov rdx, rsi; call rdi; 
0x0000000000471a58: or byte ptr [rax - 0x75], cl; mov word ptr [rax + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000047c404: or byte ptr [rax - 0x75], cl; mov word ptr [rax + rdi*8], fs; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000045efab: or byte ptr [rax - 0x75], cl; or al, 0xa; mov rax, rcx; mov rbx, rsi; pop rbp; ret; 
0x000000000040a0f9: or byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004413f3: or byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xd1ff; 
0x00000000004068d6: or byte ptr [rax - 0x75], cl; pop rsp; and al, 0x10; add rsp, 0x30; pop rbp; ret; 
0x000000000046a648: or byte ptr [rax - 0x75], cl; push rsp; cli; adc byte ptr [rax + 1], cl; retf 0x894c; ret; 
0x0000000000434606: or byte ptr [rax - 0x75], cl; sbb al, 0xc1; mov rdx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x000000000040c230: or byte ptr [rax - 0x75], cl; xchg eax, ecx; nop; add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x0000000000401a56: or byte ptr [rax - 0x77], 0x84; and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x76b3f915], dl; ret; 
0x000000000046f9dd: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x75], cl; je 0x6fa09; and byte ptr [rsi + rax + 0x24548b48], al; sbb byte ptr [rax - 9], cl; ret 0x60; 
0x00000000004780a2: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 1], cl; ret; 
0x00000000004780e8: or byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000477d04: or byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 1]; ret; 
0x0000000000478c3c: or byte ptr [rax - 0x77], cl; add cl, byte ptr [rbx + rcx*4 - 0x7c]; and al, 0xc0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004729c0: or byte ptr [rax - 0x77], cl; add eax, 0xac200; pop rbp; ret; 
0x00000000004751d2: or byte ptr [rax - 0x77], cl; add eax, 0xad3d6; add rsp, 0x18; pop rbp; nop; ret; 
0x0000000000474f58: or byte ptr [rax - 0x77], cl; add eax, 0xad8b0; pop rbp; ret; 
0x0000000000470114: or byte ptr [rax - 0x77], cl; add eax, 0xb24ac; add rsp, 0x48; pop rbp; ret; 
0x0000000000462715: or byte ptr [rax - 0x77], cl; add eax, 0xbfeb3; add rsp, 0x10; pop rbp; ret; 
0x0000000000458ee5: or byte ptr [rax - 0x77], cl; add eax, 0xc9733; pop rbp; ret; 
0x000000000042dc2e: or byte ptr [rax - 0x77], cl; add eax, 0xf4cfa; add rsp, 0x40; pop rbp; ret; 
0x000000000047459f: or byte ptr [rax - 0x77], cl; add ecx, dword ptr [rax - 0x73]; add eax, 0xe976; add rsp, 0x20; pop rbp; ret; 
0x000000000045869f: or byte ptr [rax - 0x77], cl; and al, 0x18; mov byte ptr [rsp + 7], 1; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x000000000045edeb: or byte ptr [rax - 0x77], cl; dec byte ptr [rax - 0x39]; mov dword ptr [rdx], 0x48000010; mov eax, 0x9e; syscall; 
0x00000000004156c1: or byte ptr [rax - 0x77], cl; jno 0x156fe; mov byte ptr [rcx + 0x40], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000042acba: or byte ptr [rax - 0x77], cl; or al, 0xd0; add rsp, 0x30; pop rbp; ret; 
0x0000000000412e96: or byte ptr [rax - 0x77], cl; or cl, byte ptr [rax - 0x75]; and al, 8; add rsp, 0x20; pop rbp; ret; 
0x0000000000472f62: or byte ptr [rax - 0x77], cl; or eax, 0xaf86e; pop rbp; ret; 
0x000000000045e707: or byte ptr [rax - 0x77], cl; out 0xbe, eax; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x23; syscall; 
0x0000000000410e1f: or byte ptr [rax - 0x77], cl; pushfq; ret 0xc0; 
0x000000000040a0fc: or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004413f6: or byte ptr [rax - 0x77], cl; ret 0xd1ff; 
0x00000000004039c2: or byte ptr [rax - 0x77], cl; ret; 
0x0000000000441356: or byte ptr [rax - 0x77], cl; retf 0xf48; mov edx, 0x894821e9; ret; 
0x00000000004040c1: or byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x77], 1; call 0x4100; add rsp, 0x18; pop rbp; ret; 
0x0000000000404061: or byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x77], 1; call 0x41c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000460925: or byte ptr [rax - 0x77], cl; sbb eax, 0xc1e5b; add rsp, 0x18; pop rbp; ret; 
0x0000000000441552: or byte ptr [rax - 0x77], cl; sbb eax, 0xe1116; call 0x2dba0; add rsp, 0x10; pop rbp; ret; 
0x00000000004606ca: or byte ptr [rax - 0x77], cl; stc; call 0x41c0; add rsp, 0x68; pop rbp; ret; 
0x00000000004572d6: or byte ptr [rax - 0x77], cl; sub sil, al; add byte ptr [rcx], al; add rsp, 0x10; pop rbp; ret; 
0x000000000044efef: or byte ptr [rax - 0x77], cl; xor al, 0xf8; mov rax, rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000475d7b: or byte ptr [rax - 0x7b], cl; fisttp dword ptr [rdi]; pushfq; ret 0x2eb; 
0x00000000004370aa: or byte ptr [rax - 0x7d], cl; ret 0x48e0; 
0x00000000004686b7: or byte ptr [rax - 0x7d], cl; ret; 
0x000000000045ed43: or byte ptr [rax - 0x7f], cl; iretd; add byte ptr [rax], al; or byte ptr [rax], al; mov eax, 0x38; syscall; 
0x00000000004483a5: or byte ptr [rax - 0x7f], cl; ret 0x3a0; 
0x000000000042c606: or byte ptr [rax - 0x7f], cl; rol dword ptr [rax], 0x10; add byte ptr [rax], al; mov qword ptr [rax + 8], rcx; ret; 
0x00000000004483a4: or byte ptr [rax - 0x7f], r9b; ret 0x3a0; 
0x0000000000412a9e: or byte ptr [rax - 1], cl; ret; 
0x000000000041f7c4: or byte ptr [rax - 9], cl; fcom dword ptr [rax + 0x38428748]; add rsp, 0x28; pop rbp; ret; 
0x000000000041f849: or byte ptr [rax - 9], cl; fist dword ptr [rax + 0x30588748]; mov rcx, qword ptr [rip + 0xf9947]; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000004394a8: or byte ptr [rax], al; add byte ptr [rax + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x0000000000461f13: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x1f0f; 
0x00000000004038e3: or byte ptr [rax], al; add byte ptr [rax], al; call 0x5ce60; add rsp, 0x18; pop rbp; ret; 
0x000000000047a12f: or byte ptr [rax], al; add byte ptr [rax], al; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000040ab03: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045b47d: or byte ptr [rax], al; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x6b7]; jmp rax; 
0x0000000000414956: or byte ptr [rax], al; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x0000000000407525: or byte ptr [rax], al; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000045b50e: or byte ptr [rax], al; ja 0x5b51b; lea rax, [rip + 0xd27]; jmp rax; 
0x000000000045ed49: or byte ptr [rax], al; mov eax, 0x38; syscall; 
0x0000000000432b33: or byte ptr [rax], al; mov ebx, 1; call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x000000000040ab26: or byte ptr [rax], al; mov ebx, 4; ret; 
0x000000000040ab33: or byte ptr [rax], al; mov ebx, 7; ret; 
0x000000000040ab00: or byte ptr [rax], al; mov ebx, 8; ret; 
0x000000000041ded2: or byte ptr [rax], al; mov qword ptr [rcx + 0x98], rax; add rsp, 0x18; pop rbp; ret; 
0x000000000045c2e7: or byte ptr [rax], al; pop rbp; ret; 
0x0000000000429961: or byte ptr [rax], al; ret; 
0x000000000046de34: or byte ptr [rbp + 0x31], al; fild dword ptr [rbp + 0x31]; shr bl, cl; adc byte ptr [rcx + 1], cl; ret 0x8149; 
0x000000000045fc2f: or byte ptr [rbp + 0xb], dh; movzx ecx, byte ptr [rax + 0xa]; cmp byte ptr [rbx + 0xa], cl; sete al; ret; 
0x000000000046b4ff: or byte ptr [rbp + 0xf], al; mov dh, 0x14; xor dword ptr [rbx + 0xf4107e0], eax; stosd dword ptr [rdi], eax; ret 0x8845; 
0x00000000004093f8: or byte ptr [rbp - 0x25], dh; mov rax, r8; ret; 
0x00000000004093f7: or byte ptr [rbp - 0x25], sil; mov rax, r8; ret; 
0x00000000004680f4: or byte ptr [rbp - 0x6bf0be37], al; ret 0x3eb; 
0x00000000004225bd: or byte ptr [rbp - 0x70], bl; ret; 
0x0000000000478218: or byte ptr [rbp - 0x77], cl; or byte ptr [r8 - 0x77], cl; adc byte ptr [rax - 1], cl; ret; 
0x00000000004284ef: or byte ptr [rbp - 0x77], cl; ret 0xf749; 
0x000000000045e629: or byte ptr [rbx + 0x44102454], cl; mov edx, dword ptr [rsp + 0x14]; mov eax, 0x101; syscall; 
0x000000000045e803: or byte ptr [rbx + 0x480c2474], cl; mov edx, dword ptr [rsp + 0x10]; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x00000000004188b1: or byte ptr [rbx + 0x67501f9], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000445d7f: or byte ptr [rbx + 0xb], dh; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000045006f: or byte ptr [rbx - 1], bh; lea rcx, [rip + 0xe98fc]; add rsp, 0x10; pop rbp; ret; 
0x0000000000408ecc: or byte ptr [rcx + 0x31], cl; fimul dword ptr [rax - 0x77]; ret; 
0x0000000000408e69: or byte ptr [rcx + 0x31], cl; fmul dword ptr [rax - 0x77]; ret; 
0x000000000040639a: or byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x4590; 
0x0000000000460ee1: or byte ptr [rcx + 1], bh; mov edi, ecx; add rsp, 0x28; pop rbp; ret; 
0x000000000046178c: or byte ptr [rcx + 1], bh; xchg dword ptr [rax], ecx; ret; 
0x000000000046178b: or byte ptr [rcx + 1], dil; xchg dword ptr [rax], ecx; ret; 
0x000000000040cd3e: or byte ptr [rcx + rcx*4 + 0x11], cl; mov rax, r10; add rsp, 0x50; pop rbp; ret; 
0x0000000000477dce: or byte ptr [rcx + rcx*4], cl; sub rsp, -0x80; pop rbp; ret; 
0x0000000000411bc2: or byte ptr [rcx - 0x2f], al; loope 0x11bb0; ret; 
0x0000000000457ecd: or byte ptr [rcx - 0x75], cl; xor byte ptr [rax - 0x75], r9b; adc eax, 0xe8000000; movabs byte ptr [0x5d08c48348fffd47], al; ret; 
0x000000000046829f: or byte ptr [rcx - 0x77], cl; adc dword ptr [rax - 0x73], ecx; push rax; test dword ptr [rax - 9], 0x518949da; sbb byte ptr [rax - 0x7d], cl; ret 0x4c08; 
0x0000000000477dca: or byte ptr [rcx - 0x77], cl; or byte ptr [r9 + r9*4], cl; sub rsp, -0x80; pop rbp; ret; 
0x0000000000412c3a: or byte ptr [rcx - 0x7d], cl; ret; 
0x000000000040d2d1: or byte ptr [rcx - 0xa], al; ret 0x7508; 
0x000000000040e00f: or byte ptr [rcx - 0xa], al; ret 0xf08; 
0x0000000000478cd8: or byte ptr [rcx - 1], cl; ret 0x4c90; 
0x000000000047b810: or byte ptr [rcx - 1], cl; ret 0x8b4c; 
0x0000000000476ff5: or byte ptr [rcx - 1], cl; ret 0xf44; 
0x000000000047bfba: or byte ptr [rcx - 1], cl; ret; 
0x0000000000432966: or byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000043b280: or byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x000000000043b637: or byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x000000000045613e: or byte ptr [rcx], al; add byte ptr [rax], al; call 0x55e20; add rsp, 0x120; pop rbp; ret; 
0x000000000047c2cd: or byte ptr [rcx], al; add byte ptr [rax], al; call rsi; 
0x000000000047b457: or byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x78], r9; mov rcx, qword ptr [r9 + 0x48]; mov rax, rbx; call rcx; 
0x00000000004208f6: or byte ptr [rcx], al; add byte ptr [rax], al; mov rax, -1; add rsp, 0x40; pop rbp; ret; 
0x0000000000420a2f: or byte ptr [rcx], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x00000000004598c7: or byte ptr [rcx], al; add byte ptr [rax], al; mov rcx, qword ptr [rcx + 0xd0]; movsxd rax, dword ptr [rcx]; ret; 
0x000000000044084f: or byte ptr [rcx], al; add byte ptr [rax], al; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000440847: or byte ptr [rcx], al; add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x108]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000047111a: or byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; nop; ret; 
0x000000000044b214: or byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004598e8: or byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000040268f: or byte ptr [rcx], al; add byte ptr [rax], al; xor byte ptr [rbx + 6], 0x48; add esp, 0x50; pop rbp; ret; 
0x000000000045f801: or byte ptr [rcx], bh; or esi, dword ptr [rbp + 0xc]; mov rcx, qword ptr [rax + 8]; cmp qword ptr [rbx + 8], rcx; sete al; ret; 
0x0000000000409f24: or byte ptr [rcx], dh; leave; call 0x9100; add rsp, 0x18; pop rbp; ret; 
0x0000000000457814: or byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; jo 0x57879; ret; 
0x00000000004578b1: or byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; jo 0x57916; ret; 
0x00000000004639a3: or byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; js 0x63a08; ret; 
0x000000000042e078: or byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; pop rbp; ret; 
0x000000000040dda8: or byte ptr [rcx], dl; mov rax, rsi; call 0xde00; add rsp, 0x10; pop rbp; ret; 
0x000000000045ce0c: or byte ptr [rdi + 5], dh; call 0x5cde0; cmp rsp, qword ptr [rax]; ja 0x5ce1e; call 0x5cde0; ret; 
0x000000000045b59f: or byte ptr [rdi + 9], dh; lea rax, [rip + 0x1397]; jmp rax; 
0x000000000046221f: or byte ptr [rdi + rcx + 0x11], al; mov ecx, 1; add rsp, 0x38; pop rbp; ret; 
0x00000000004203b1: or byte ptr [rdi], 0x83; sgdt [rax]; add byte ptr [rbp - 0x76b700b6], cl; ret; 
0x000000000041dafa: or byte ptr [rdi], 0x94; ret; 
0x00000000004294c3: or byte ptr [rdi], cl; add dword ptr [rsi + 0x48000000], -0x77; ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x000000000040e4f1: or byte ptr [rdi], cl; mov dh, 0x73; or esi, esi; ret 0x7508; 
0x00000000004295c3: or byte ptr [rdi], cl; or dword ptr [rbx + 0x48000000], 0xffffff89; ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x000000000045659e: or byte ptr [rdi], cl; xchg eax, ebp; ret 0xda38; 
0x0000000000456598: or byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x000000000042d560: or byte ptr [rdi], cl; xchg eax, esp; ret; 
0x0000000000403f0f: or byte ptr [rdi], cl; xchg eax, esp; shr ebx, 2; xor ecx, ecx; mov eax, ecx; ret; 
0x000000000044f1f1: or byte ptr [rdx - 0x77], cl; xor al, 0xc0; add rsp, 0x18; pop rbp; ret; 
0x0000000000413d51: or byte ptr [rdx], bl; xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x000000000044ec8c: or byte ptr [rdx], dl; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x000000000045fc2b: or byte ptr [rsi + 0x39], ah; or byte ptr [r13 + 0xb], sil; movzx ecx, byte ptr [rax + 0xa]; cmp byte ptr [rbx + 0xa], cl; sete al; ret; 
0x000000000045fc2a: or byte ptr [rsi + 0x39], spl; or byte ptr [r13 + 0xb], sil; movzx ecx, byte ptr [rax + 0xa]; cmp byte ptr [rbx + 0xa], cl; sete al; ret; 
0x0000000000447ec8: or byte ptr [rsi + 0xb], dh; mov rdx, qword ptr [rbx + 0x10]; add rcx, rdx; mov qword ptr [rax + 0x68], rcx; ret; 
0x00000000004447ef: or byte ptr [rsi + 8], dh; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000043b3c5: or byte ptr [rsi], 0; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000043e258: or ch, al; ret 0x125; 
0x0000000000423378: or cl, byte ptr [rax + 0x29]; ret 0x8b4c; 
0x000000000040f79c: or cl, byte ptr [rax - 0x73]; movabs rbx, 0x10c4834800000001; pop rbp; ret; 
0x0000000000456da7: or cl, byte ptr [rax - 0x73]; pop rcx; add al, 0x48; add esp, 0x10; pop rbp; ret; 
0x000000000040eea7: or cl, byte ptr [rax - 0x73]; sub byte ptr [rbx + 1], dil; add rsp, 0x10; pop rbp; ret; 
0x0000000000470471: or cl, byte ptr [rax - 0x75]; adc byte ptr [rbx + 0x5d901fe0], al; ret; 
0x000000000042b69c: or cl, byte ptr [rax - 0x75]; add dword ptr [rbx + 1], edi; add rsp, 0x10; pop rbp; ret; 
0x0000000000454e0b: or cl, byte ptr [rax - 0x75]; add eax, 0xcd88d; lea rbx, [rsp + 0x10]; call rcx; 
0x0000000000460424: or cl, byte ptr [rax - 0x75]; add rsp, 0x10; pop rbp; ret; 
0x000000000046bf7a: or cl, byte ptr [rax - 0x75]; add rsp, 0x28; pop rbp; ret; 
0x000000000040115a: or cl, byte ptr [rax - 0x75]; add rsp, 8; pop rbp; ret; 
0x00000000004371a7: or cl, byte ptr [rax - 0x75]; and al, 0x18; call 0x37420; add rsp, 0x28; pop rbp; ret; 
0x0000000000473523: or cl, byte ptr [rax - 0x75]; and al, 0x20; call 0x739e0; add rsp, 0x10; pop rbp; ret; 
0x000000000044e9a4: or cl, byte ptr [rax - 0x75]; and al, 0x28; mov rbx, qword ptr [rsp + 0x40]; mov rsi, rcx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x000000000040e7fe: or cl, byte ptr [rax - 0x75]; and al, 0x48; mov rbx, rax; call rcx; 
0x0000000000436892: or cl, byte ptr [rax - 0x75]; and al, 0x50; call rcx; 
0x0000000000412e99: or cl, byte ptr [rax - 0x75]; and al, 8; add rsp, 0x20; pop rbp; ret; 
0x00000000004157dd: or cl, byte ptr [rax - 0x75]; jo 0x157f2; mov rax, rsi; call rcx; 
0x000000000045f016: or cl, byte ptr [rax - 0x75]; or r9b, byte ptr [rax]; mov rax, rsi; mov rbx, rcx; pop rbp; ret; 
0x00000000004424c2: or cl, byte ptr [rax - 0x75]; pop rsp; or cl, byte ptr [rax]; ret; 
0x0000000000405a15: or cl, byte ptr [rax - 0x75]; xor byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x94; ret 0x8490; 
0x00000000004333de: or cl, byte ptr [rax - 0x77]; clc; call rcx; 
0x0000000000404ced: or cl, byte ptr [rax - 0x7d]; js 0x4d2a; add byte ptr [rdi], cl; xchg eax, esp; ret 0x8eb; 
0x000000000041887b: or cl, byte ptr [rax - 0x7d]; rol byte ptr [rax + rdx*4], 0x90; xor ecx, ecx; xchg byte ptr [rax], cl; ret; 
0x00000000004304bb: or cl, byte ptr [rax - 1]; ret 0x4190; 
0x000000000045f01a: or cl, byte ptr [rax]; mov rax, rsi; mov rbx, rcx; pop rbp; ret; 
0x000000000045efaa: or cl, byte ptr [rax]; mov rcx, qword ptr [rdx + rcx]; mov rax, rcx; mov rbx, rsi; pop rbp; ret; 
0x00000000004424c6: or cl, byte ptr [rax]; ret; 
0x000000000047825c: or cl, byte ptr [rbp - 0x77]; or byte ptr [r8 - 0x77], cl; add cl, byte ptr [rax - 0x77]; ret 0x8b48; 
0x000000000041cd64: or cl, byte ptr [rbx + 0x24548912]; adc al, 0x31; shr bl, 0x19; add rsp, 0x20; pop rbp; ret; 
0x000000000040ec4c: or cl, byte ptr [rbx - 0x72b7f38d]; and al, 0x30; mov rbx, rsi; call rcx; 
0x000000000040ef35: or cl, byte ptr [rbx - 0x72b7f38d]; and al, 0x50; mov rbx, rsi; call rcx; 
0x000000000041008a: or cl, byte ptr [rbx - 0x72b7f38d]; and al, 0x78; mov rbx, rsi; call rcx; 
0x000000000040e036: or cl, byte ptr [rcx + rcx*4 - 0x20]; mov rbx, rax; call rcx; 
0x0000000000410cf2: or cl, byte ptr [rcx]; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000040cbcc: or cl, byte ptr [rdi]; mov bh, 0x57; or bh, bh; ret 0x8966; 
0x0000000000474ac6: or cl, byte ptr [rdi]; xchg eax, edx; ret 0xa948; 
0x000000000045872e: or dh, al; add byte ptr [rcx], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000454975: or dh, byte ptr [rbp + 9]; xor eax, eax; add rsp, 0x10; pop rbp; nop; ret; 
0x000000000044ab84: or dh, byte ptr [rcx]; sal byte ptr [rcx], 0xdb; add rsp, 0x18; pop rbp; ret; 
0x000000000044363d: or dh, byte ptr [rcx]; sal byte ptr [rcx], 0xdb; add rsp, 0x28; pop rbp; ret; 
0x000000000045a184: or dh, byte ptr [rcx]; sal byte ptr [rcx], 0xdb; add rsp, 0x30; pop rbp; ret; 
0x00000000004324c8: or dh, byte ptr [rcx]; sal byte ptr [rcx], 0xdb; add rsp, 0x70; pop rbp; ret; 
0x0000000000447cc6: or dh, byte ptr [rcx]; shr bl, 0x15; sub rsp, -0x80; pop rbp; ret; 
0x00000000004508ef: or dh, byte ptr [rsp + rax + 0x3c]; or esi, dword ptr [rbp + 6]; add rsp, 0x30; pop rbp; ret; 
0x000000000040ec99: or dh, dh; ret 0x7508; 
0x000000000040aaf1: or dword ptr [rax + 0x39], ecx; add eax, 0x113f8f; jg 0xab08; lea rax, [rip + 0x8aec6]; mov ebx, 8; ret; 
0x000000000041ab6e: or dword ptr [rax + 0xf05287a], eax; xchg eax, esp; ret 0x2eb; 
0x00000000004425dd: or dword ptr [rax + 1], 0; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x00000000004294fe: or dword ptr [rax + rbx*8], esi; add rsp, 0x10; pop rbp; ret; 
0x0000000000429547: or dword ptr [rax + rsi*8], edx; add rsp, 0x10; pop rbp; ret; 
0x00000000004686a4: or dword ptr [rax - 0x3f], ecx; call 0xffffffffd00fcee3; mov ecx, esi; add rsp, 0x20; pop rbp; ret; 
0x000000000045b559: or dword ptr [rax - 0x73], ecx; add eax, 0x105f; jmp rax; 
0x000000000045b56b: or dword ptr [rax - 0x73], ecx; add eax, 0x112d; jmp rax; 
0x000000000045b57d: or dword ptr [rax - 0x73], ecx; add eax, 0x11fb; jmp rax; 
0x000000000045b58f: or dword ptr [rax - 0x73], ecx; add eax, 0x12c9; jmp rax; 
0x000000000045b5a1: or dword ptr [rax - 0x73], ecx; add eax, 0x1397; jmp rax; 
0x000000000045b5b3: or dword ptr [rax - 0x73], ecx; add eax, 0x1465; jmp rax; 
0x000000000045b5c5: or dword ptr [rax - 0x73], ecx; add eax, 0x1533; jmp rax; 
0x000000000045b5d7: or dword ptr [rax - 0x73], ecx; add eax, 0x1601; jmp rax; 
0x000000000045b409: or dword ptr [rax - 0x73], ecx; add eax, 0x1ef; jmp rax; 
0x000000000045b418: or dword ptr [rax - 0x73], ecx; add eax, 0x280; jmp rax; 
0x000000000045b427: or dword ptr [rax - 0x73], ecx; add eax, 0x311; jmp rax; 
0x000000000045b439: or dword ptr [rax - 0x73], ecx; add eax, 0x39f; jmp rax; 
0x000000000045b44b: or dword ptr [rax - 0x73], ecx; add eax, 0x44d; jmp rax; 
0x000000000045b45d: or dword ptr [rax - 0x73], ecx; add eax, 0x51b; jmp rax; 
0x000000000045b46f: or dword ptr [rax - 0x73], ecx; add eax, 0x5e9; jmp rax; 
0x000000000045b481: or dword ptr [rax - 0x73], ecx; add eax, 0x6b7; jmp rax; 
0x000000000045b493: or dword ptr [rax - 0x73], ecx; add eax, 0x785; jmp rax; 
0x000000000045b4a5: or dword ptr [rax - 0x73], ecx; add eax, 0x853; jmp rax; 
0x000000000045b4b7: or dword ptr [rax - 0x73], ecx; add eax, 0x921; jmp rax; 
0x000000000045b4c9: or dword ptr [rax - 0x73], ecx; add eax, 0x9ef; jmp rax; 
0x000000000045b4db: or dword ptr [rax - 0x73], ecx; add eax, 0xabd; jmp rax; 
0x000000000045b4ed: or dword ptr [rax - 0x73], ecx; add eax, 0xb8b; jmp rax; 
0x000000000045b4ff: or dword ptr [rax - 0x73], ecx; add eax, 0xc59; jmp rax; 
0x000000000045b511: or dword ptr [rax - 0x73], ecx; add eax, 0xd27; jmp rax; 
0x000000000045b523: or dword ptr [rax - 0x73], ecx; add eax, 0xdf5; jmp rax; 
0x000000000045b535: or dword ptr [rax - 0x73], ecx; add eax, 0xec3; jmp rax; 
0x000000000045b547: or dword ptr [rax - 0x73], ecx; add eax, 0xf91; jmp rax; 
0x0000000000405a3d: or dword ptr [rax - 0x75], ecx; xor byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x94; ret 0xd284; 
0x0000000000461b88: or dword ptr [rax - 0x77], ecx; ret; 
0x000000000044cb24: or dword ptr [rax - 0x77], ecx; retf; add rsp, 0x38; pop rbp; ret; 
0x000000000040d0e3: or dword ptr [rax - 0x77], ecx; ror dword ptr [rax - 0x77], 1; ret; 
0x00000000004598c6: or dword ptr [rax], 0x48000001; mov ecx, dword ptr [rcx + 0xd0]; movsxd rax, dword ptr [rcx]; ret; 
0x0000000000470f3b: or dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000433e6b: or dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x0000000000404cb3: or dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000045eb7e: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000047b806: or dword ptr [rax], eax; add byte ptr [rbx + rcx*4 + 0x48], cl; adc byte ptr [rbx + rcx*4 + 0x50], cl; or byte ptr [rcx - 1], cl; ret 0x8b4c; 
0x00000000004396d4: or dword ptr [rax], eax; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x9eb; 
0x0000000000406ee5: or dword ptr [rax], eax; call 0x5b0a0; add rsp, 0x18; pop rbp; ret; 
0x0000000000408cb4: or dword ptr [rax], eax; call rcx; 
0x00000000004068e7: or dword ptr [rax], eax; mov ebx, 0x1d; add rsp, 0x30; pop rbp; ret; 
0x0000000000406977: or dword ptr [rax], eax; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000408caa: or dword ptr [rax], eax; mov rax, rsi; lea rdx, [rip + 0x957b2]; call rcx; 
0x00000000004074bd: or dword ptr [rax], eax; nop; call 0x4a480; add rsp, 0xf8; pop rbp; ret; 
0x000000000043e750: or dword ptr [rbp + 8], esi; mov rax, qword ptr [rsp + 0x20]; inc qword ptr [rax]; add rsp, 0x28; pop rbp; ret; 
0x00000000004234a3: or dword ptr [rbx + 0x1266163d], ecx; add byte ptr [rcx - 0x77], cl; ret 0x7c89; 
0x0000000000420b4f: or dword ptr [rbx + 0x128f6a15], ecx; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004295c5: or dword ptr [rbx + 0x48000000], 0xffffff89; ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x000000000042ed25: or dword ptr [rbx + 0xf0b9], eax; add byte ptr [rax], al; jne 0x2ed35; add rsp, 0x10; pop rbp; ret; 
0x000000000042eda4: or dword ptr [rbx + 0xf0b9], eax; add byte ptr [rax], al; jne 0x2edb4; add rsp, 0x10; pop rbp; ret; 
0x000000000046f5a0: or dword ptr [rbx + 8], esi; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000432e93: or dword ptr [rbx], eax; add byte ptr [rax], al; call 0x32980; add rsp, 0x10; pop rbp; ret; 
0x0000000000450288: or dword ptr [rcx + 0x40000000], 0xffffff88; mov ah, 0x10; sbb byte ptr [rax + rax], al; add byte ptr [rax - 1], cl; ret 0x8948; 
0x0000000000440b37: or dword ptr [rcx + 0x48000000], 0xffffff83; ret 0x8830; 
0x0000000000456ca5: or dword ptr [rcx], eax; add byte ptr [rax], al; lea rbx, [rcx + 2]; add rsp, 0x10; pop rbp; ret; 
0x0000000000454977: or dword ptr [rcx], esi; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbp - 0x70], bl; ret; 
0x0000000000458281: or dword ptr [rdi], 0; mov rax, qword ptr [rip + 0xcac65]; call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x0000000000458123: or dword ptr [rdi], 0; ret; 
0x0000000000414845: or dword ptr [rdx], ecx; add rsp, 0x18; pop rbp; ret; 
0x00000000004149a6: or dword ptr [rdx], ecx; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x000000000040211b: or dword ptr [rdx], edx; add byte ptr [rax - 0x77], cl; ret 0x448b; 
0x00000000004020c9: or dword ptr [rdx], edx; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047b805: or dword ptr ss:[rax], eax; add byte ptr [rbx + rcx*4 + 0x48], cl; adc byte ptr [rbx + rcx*4 + 0x50], cl; or byte ptr [rcx - 1], cl; ret 0x8b4c; 
0x000000000044a094: or eax, 0x1065d3; add rsp, 0x130; pop rbp; ret; 
0x0000000000444703: or eax, 0x10bd6c; xchg dword ptr [rcx], eax; add rsp, 0x20; pop rbp; ret; 
0x00000000004650e1: or eax, 0x10c48348; pop rbp; ret; 
0x0000000000434721: or eax, 0x11bce9; add rsp, 0x10; pop rbp; ret; 
0x000000000042c205: or eax, 0x126ace; call 0xc5e0; add rsp, 0x18; pop rbp; ret; 
0x0000000000422080: or eax, 0x127a73; nop; lea rax, [rip + 0x127a63]; xchg qword ptr [rax], rdx; ret; 
0x0000000000431a31: or eax, 0x1287880; sete al; add rsp, 8; pop rbp; ret; 
0x0000000000430ddc: or eax, 0x13041c6; mov rax, qword ptr [rcx + 8]; mov rbx, qword ptr [rcx + 0x10]; ret; 
0x000000000041dd06: or eax, 0x1329d5; xchg qword ptr [rcx], rax; ret; 
0x00000000004172e8: or eax, 0x139173; jg 0x172b0; add rsp, 0x10; pop rbp; ret; 
0x0000000000415bf8: or eax, 0x13b34b; cmp rax, rcx; setbe al; add rsp, 8; pop rbp; ret; 
0x000000000041883d: or eax, 0x13b4b6; inc ecx; xchg dword ptr [rax + 0x48], ecx; ret; 
0x000000000040ac8c: or eax, 0x146257; xchg qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000044d1f3: or eax, 0x149128b; rol dword ptr [rbx - 0x6bf00006], 1; ret 0xb60f; 
0x0000000000406430: or eax, 0x14a163; xchg dword ptr [rcx], eax; add rsp, 0x58; pop rbp; ret; 
0x000000000044b8a2: or eax, 0x1874800; add rsp, 0x60; pop rbp; ret; 
0x0000000000411385: or eax, 0x1fff25; add byte ptr [rax - 0x75], cl; xchg eax, esp; ret 0x4000; 
0x0000000000456e17: or eax, 0x40000001; mov byte ptr [rax], bh; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045273b: or eax, 0x42f17; mov edi, 5; add rsp, 0x20; pop rbp; ret; 
0x0000000000418e4f: or eax, 0x480001b8; add esp, 0x30; pop rbp; ret; 
0x000000000045ebe7: or eax, 0x48000c3b; mov ebx, esp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x0000000000401037: or eax, 0x48028b48; mov ebx, dword ptr [rdx + 8]; add rsp, 0x10; pop rbp; ret; 
0x000000000046fb85: or eax, 0x48038b48; mov ebx, dword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000460491: or eax, 0x48088b48; cmp dword ptr [rcx + 0x18], 0; setne al; pop rbp; ret; 
0x00000000004424bd: or eax, 0x48b4800; or cl, byte ptr [rax - 0x75]; pop rsp; or cl, byte ptr [rax]; ret; 
0x0000000000428d9b: or eax, 0x48c88948; add esp, 0x10; pop rbp; ret; 
0x0000000000451c9a: or eax, 0x48c88948; mov eax, dword ptr [rax + 0x10]; add rsp, 0x10; pop rbp; ret; 
0x0000000000428ecf: or eax, 0x48c88948; mov ebx, edi; add rsp, 0x18; pop rbp; ret; 
0x000000000041f4bf: or eax, 0x48f88948; add esp, 0x40; pop rbp; ret; 
0x0000000000422a8f: or eax, 0x48fffffc; mov eax, dword ptr [rsp + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000442855: or eax, 0x544b0; mov qword ptr [rdx + rax], rcx; add rsp, 0x58; pop rbp; ret; 
0x00000000004424a3: or eax, 0x5a058d48; push rax; add eax, 0x13bb00; add byte ptr [rax], al; ret; 
0x0000000000439f6a: or eax, 0x64481; mov rax, qword ptr [rsp + 0x20]; lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000439e55: or eax, 0x64596; mov rax, qword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; 
0x0000000000419833: or eax, 0x80ec8348; pop rbp; ret; 
0x0000000000406c1a: or eax, 0x91242; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000406974: or eax, 0x9216b; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000406baa: or eax, 0x93028; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000408ca7: or eax, 0x957bc; mov rax, rsi; lea rdx, [rip + 0x957b2]; call rcx; 
0x00000000004729b8: or eax, 0xac20b; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xac200], rax; pop rbp; ret; 
0x0000000000474f50: or eax, 0xad8bb; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xad8b0], rax; pop rbp; ret; 
0x0000000000472f65: or eax, 0xaf86e; pop rbp; ret; 
0x0000000000463528: or eax, 0xbf18b; add rsp, 0x30; pop rbp; ret; 
0x0000000000459c70: or eax, 0xbf4df; xchg dword ptr [rcx], eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000445cf3: or eax, 0xc0310874; add rsp, 0x20; pop rbp; ret; 
0x000000000045eb1f: or eax, 0xc3b7c; lea r8, [rip + 0xf2095]; lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000045eae6: or eax, 0xc3bb5; lea r9, [rip - 0xf2]; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x000000000040aafa: or eax, 0xc6058d48; scasb al, byte ptr [rdi]; or byte ptr [rax], al; mov ebx, 8; ret; 
0x0000000000473b1e: or eax, 0xc8894800; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000458edd: or eax, 0xc973e; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xc9733], rax; pop rbp; ret; 
0x000000000044ff4f: or eax, 0xd1894800; call 0x50380; mov eax, eax; add rsp, 0x38; pop rbp; ret; 
0x0000000000444ba2: or eax, 0xd2854800; je 0x44bd4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x000000000044f32d: or eax, 0xd2854800; je 0x4f33f; mov rsi, qword ptr [rdx]; call rsi; 
0x000000000044b89f: or eax, 0xd6dec; xchg qword ptr [rcx], rax; add rsp, 0x60; pop rbp; ret; 
0x0000000000401238: or eax, 0xdb31c031; pop rbp; ret; 
0x0000000000450077: or eax, 0xe98fc; add rsp, 0x10; pop rbp; ret; 
0x000000000042e112: or eax, 0xeb0b5; pop rbp; ret; 
0x0000000000436ff0: or eax, 0xec433; lock xadd dword ptr [rcx], eax; add rsp, 0x48; pop rbp; ret; 
0x000000000045e975: or eax, 0xf000000; add eax, 0x28244489; ret; 
0x000000000042dc26: or eax, 0xf4d05; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xf4cfa], rax; add rsp, 0x40; pop rbp; ret; 
0x0000000000458983: or eax, 0xf7f9c; test cl, cl; setne al; ret; 
0x000000000045827f: or eax, 0xf83bc; mov rax, qword ptr [rip + 0xcac65]; call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x000000000041f854: or eax, 0xf9947; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000454998: or eax, 0xfba87; bt ecx, 1; setae al; add rsp, 0x10; pop rbp; ret; 
0x000000000045eb2d: or eax, 0xfffffa2e; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000045eaed: or eax, 0xffffff0e; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x0000000000478dfc: or eax, dword ptr [rax + rax + 0x40c08348]; call 0x764e0; add rsp, 0xa8; pop rbp; ret; 
0x000000000047861e: or eax, dword ptr [rax + rax + 0x40c08348]; call 0x76d20; add rsp, 0x30; pop rbp; ret; 
0x000000000044140c: or eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x00000000004730e8: or eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000045ec2d: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000046271b: or eax, dword ptr [rax]; add rsp, 0x10; pop rbp; ret; 
0x000000000046352b: or eax, dword ptr [rax]; add rsp, 0x30; pop rbp; ret; 
0x000000000047011a: or eax, dword ptr [rax]; add rsp, 0x48; pop rbp; ret; 
0x000000000047010f: or eax, dword ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xb24ac], rax; add rsp, 0x48; pop rbp; ret; 
0x0000000000462710: or eax, dword ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xbfeb3], rax; add rsp, 0x10; pop rbp; ret; 
0x0000000000459c73: or eax, dword ptr [rax]; xchg dword ptr [rcx], eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004458e3: or eax, dword ptr [rbx + 0x674faf8]; add rsp, 0x18; pop rbp; ret; 
0x000000000046734d: or eax, dword ptr [rdi + rcx + 0x11]; js 0x6736b; add rsp, 0x38; pop rbp; ret; 
0x00000000004675e4: or eax, dword ptr [rdi + rcx + 0x11]; js 0x67602; add rsp, 0x40; pop rbp; ret; 
0x0000000000459c68: or eax, dword ptr [rip + 0xf67ea]; lea rcx, [rip + 0xbf4df]; xchg dword ptr [rcx], eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004035b7: or eax, ebp; clc; ja 0x3605; mov dword ptr [rax], 0xffffffff; ret; 
0x000000000041ee41: or eax, ebx; not rax; add rsp, 0x10; pop rbp; ret; 
0x000000000045cf2f: or eax, ebx; test rax, 0xf; sete byte ptr [rsp + 8]; ret; 
0x000000000045dd5e: or eax, edi; test eax, 7; je 0x5dd6d; mov rcx, rbx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000462996: or eax, edx; mov ebx, 4; add rsp, 0x10; pop rbp; ret; 
0x00000000004686aa: or eax, edx; mov ecx, esi; add rsp, 0x20; pop rbp; ret; 
0x00000000004729b9: or eax, edx; or al, byte ptr [rax]; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xac200], rax; pop rbp; ret; 
0x0000000000462a13: or eax, esi; mov ebx, 1; add rsp, 0x10; pop rbp; nop; ret; 
0x0000000000429aa5: or ebp, eax; jne 0x29aa9; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000439d47: or ebp, ecx; jne 0x39d4d; add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x0000000000412064: or ebx, esi; mov rcx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000046b96a: or ecx, 0x13; mov rbx, qword ptr [rsp + 0xe8]; add rsp, 0x270; pop rbp; ret; 
0x000000000046e9b1: or ecx, 0x180; add rsp, 0x38; pop rbp; ret; 
0x000000000046ecfa: or ecx, 0x88; add rsp, 0x18; pop rbp; ret; 
0x0000000000456e49: or ecx, 0xffffff80; mov byte ptr [rax + 1], cl; mov eax, 2; add rsp, 0x10; pop rbp; ret; 
0x0000000000456ef0: or ecx, 0xffffff80; mov byte ptr [rax + 3], cl; mov eax, 4; add rsp, 0x10; pop rbp; ret; 
0x000000000041fb12: or ecx, 1; nop; mov byte ptr [rax + 8], cl; add rsp, 0x18; pop rbp; ret; 
0x00000000004052f2: or ecx, dword ptr [rax - 0x39]; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000442852: or ecx, dword ptr [rax - 0x73]; or eax, 0x544b0; mov qword ptr [rdx + rax], rcx; add rsp, 0x58; pop rbp; ret; 
0x0000000000406c17: or ecx, dword ptr [rax - 0x73]; or eax, 0x91242; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000406971: or ecx, dword ptr [rax - 0x73]; or eax, 0x9216b; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x0000000000406ba7: or ecx, dword ptr [rax - 0x73]; or eax, 0x93028; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x00000000004704d5: or ecx, dword ptr [rax - 0x75]; add al, ch; ret 0xffea; 
0x0000000000472f57: or ecx, dword ptr [rax - 0x75]; add eax, 0xaf879; mov qword ptr [r11 + 8], rax; mov qword ptr [rip + 0xaf86e], rcx; pop rbp; ret; 
0x000000000040a070: or ecx, dword ptr [rax - 0x75]; pop rsp; and al, 0x18; add rsp, 0x20; pop rbp; ret; 
0x0000000000404669: or ecx, dword ptr [rax - 0x77]; ret; 
0x00000000004749cc: or ecx, dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000470d8e: or ecx, dword ptr [rax - 0x77]; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; ret; 
0x000000000042a01c: or ecx, dword ptr [rbp + 0x31]; ror dword ptr [rax - 0x77], 1; ret 0xb848; 
0x00000000004652c2: or ecx, dword ptr [rbp + 0x39]; ret 0x3d73; 
0x0000000000467de4: or ecx, dword ptr [rbp - 0x7b]; ror byte ptr [rdi], cl; xchg eax, edi; ret; 
0x00000000004646a9: or ecx, dword ptr [rcx + rcx*4 - 0x2f]; mov rdi, r9; call 0x64500; add rsp, 0x78; pop rbp; ret; 
0x0000000000403f27: or ecx, dword ptr [rdi]; ror dword ptr cs:[rdi], 0x94; ror byte ptr [rdi], 0x9b; shl dword ptr [rcx], 0xc8; ret; 
0x000000000046e9ae: or ecx, edx; or rcx, 0x180; add rsp, 0x38; pop rbp; ret; 
0x000000000046ec68: or ecx, edx; or rcx, rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000046ec6b: or ecx, esi; add rsp, 0x18; pop rbp; ret; 
0x000000000045ed45: or edi, 0x80000; mov eax, 0x38; syscall; 
0x00000000004319b3: or edi, dword ptr [rax + 1]; add rsp, 0x10; pop rbp; ret; 
0x0000000000445d81: or edi, dword ptr [rax + 1]; add rsp, 0x20; pop rbp; ret; 
0x0000000000413d44: or edi, dword ptr [rax + 1]; add rsp, 0x30; pop rbp; ret; 
0x00000000004607ca: or edi, dword ptr [rax + 1]; add rsp, 0x68; pop rbp; ret; 
0x0000000000415ada: or edi, dword ptr [rax + 1]; add rsp, 8; pop rbp; ret; 
0x000000000041d732: or edi, dword ptr [rax - 1]; add rsp, 0x10; pop rbp; ret; 
0x000000000044ceb2: or edi, dword ptr [rax - 1]; add rsp, 0x30; pop rbp; ret; 
0x00000000004329b1: or edi, dword ptr [rbp + rdi*8 - 1]; add rsp, 8; pop rbp; ret; 
0x0000000000439c11: or edi, dword ptr [rip - 0x3fce0002]; xor ebx, ebx; add rsp, 0x28; pop rbp; ret; 
0x000000000046719e: or edi, edi; mov rax, rcx; mov rcx, r11; add rsp, 0x78; pop rbp; ret; 
0x0000000000456eae: or edx, 0xffffff80; mov byte ptr [rax + 2], dl; mov eax, 3; add rsp, 0x10; pop rbp; ret; 
0x0000000000462e79: or edx, 0xffffff80; mov byte ptr [rbx + rax - 1], dl; add rsp, 0x48; pop rbp; ret; 
0x0000000000458645: or edx, dword ptr [rbp + 0x48]; mov ebp, esp; call 0x20520; pop rbp; ret; 
0x0000000000458fe5: or edx, dword ptr [rbp + 0x48]; mov ebp, esp; call 0x2ca00; pop rbp; ret; 
0x0000000000457d05: or edx, dword ptr [rbp + 0x48]; mov ebp, esp; call 0x360e0; pop rbp; ret; 
0x000000000043cc45: or edx, dword ptr [rbp + 0x48]; mov ebp, esp; call 0x3cc40; pop rbp; ret; 
0x000000000043cc65: or edx, dword ptr [rbp + 0x48]; mov ebp, esp; call 0x3cc60; pop rbp; ret; 
0x000000000043cc85: or edx, dword ptr [rbp + 0x48]; mov ebp, esp; call 0x3cc80; pop rbp; ret; 
0x000000000043cca5: or edx, dword ptr [rbp + 0x48]; mov ebp, esp; call 0x3cca0; pop rbp; ret; 
0x000000000043ccc5: or edx, dword ptr [rbp + 0x48]; mov ebp, esp; call 0x3ccc0; pop rbp; ret; 
0x000000000043cce5: or edx, dword ptr [rbp + 0x48]; mov ebp, esp; call 0x3cce0; pop rbp; ret; 
0x00000000004629e1: or edx, eax; mov eax, edx; mov ebx, 2; add rsp, 0x10; pop rbp; ret; 
0x00000000004629b7: or edx, ecx; mov eax, edx; mov ebx, 3; add rsp, 0x10; pop rbp; ret; 
0x00000000004629e0: or edx, r8d; mov eax, edx; mov ebx, 2; add rsp, 0x10; pop rbp; ret; 
0x0000000000462eec: or esi, 0xffffff80; mov byte ptr [rbx + rax - 1], sil; add rsp, 0x48; pop rbp; ret; 
0x00000000004472b8: or esi, dword ptr [rax + 4]; add byte ptr [rax], al; add rsp, 0x38; pop rbp; ret; 
0x000000000045fd65: or esi, dword ptr [rbp + 0xa]; mov ecx, dword ptr [rax + 8]; cmp dword ptr [rbx + 8], ecx; sete al; ret; 
0x000000000045f803: or esi, dword ptr [rbp + 0xc]; mov rcx, qword ptr [rax + 8]; cmp qword ptr [rbx + 8], rcx; sete al; ret; 
0x00000000004508f3: or esi, dword ptr [rbp + 6]; add rsp, 0x30; pop rbp; ret; 
0x000000000045eb1a: or esi, dword ptr [rbp - 0x22]; mov rcx, qword ptr [rip + 0xc3b7c]; lea r8, [rip + 0xf2095]; lea r9, [rip - 0x5d2]; mov rax, qword ptr [rip + 0xc3b9f]; jmp rax; 
0x000000000041cfa8: or esi, dword ptr [rcx]; ror byte ptr [rax - 0x77], 0xf3; add rsp, 0x28; pop rbp; ret; 
0x0000000000402c23: or esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; pop rbp; ret; 
0x000000000043c350: or esi, dword ptr [rcx]; ror byte ptr [rax - 0x7f], 0xc4; adc byte ptr [rdx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000045601d: or esi, dword ptr [rcx]; ror byte ptr [rax - 0x7f], 0xc4; and byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000044b20e: or esi, dword ptr [rcx]; ror byte ptr [rax - 0x7f], 0xc4; or byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000041a5c4: or esi, dword ptr [rcx]; ror byte ptr [rax - 0x7f], 0xc4; sub byte ptr [rbx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000044a94a: or esi, dword ptr [rcx]; sal byte ptr [rcx], 0xdb; ret; 
0x0000000000441402: or esi, dword ptr [rdx + rsi*4 + 0x48]; add esp, 0x18; pop rbp; ret; 
0x0000000000429953: or esi, ebx; mov rax, rsi; ret; 
0x0000000000429946: or esi, edx; and ebx, 0x1fffff; shl rbx, 0x2a; or rsi, rbx; mov rax, rsi; ret; 
0x0000000000428239: or esi, edx; mov rax, rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000040e4f5: or esi, esi; ret 0x7508; 
0x0000000000403f47: or esp, dword ptr [rsi + 0xf]; ror dword ptr cs:[rdi], 0x94; ror byte ptr [rdi], 0x9b; shl dword ptr [rcx], 0xc8; ret; 
0x0000000000470f3a: or qword ptr [r8], r8; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004294fd: or qword ptr [rax + rbx*8], rsi; add rsp, 0x10; pop rbp; ret; 
0x0000000000429546: or qword ptr [rax + rsi*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x00000000004704d2: or r11b, bpl; or ecx, dword ptr [rax - 0x75]; add al, ch; ret 0xffea; 
0x000000000045f019: or r9b, byte ptr [rax]; mov rax, rsi; mov rbx, rcx; pop rbp; ret; 
0x000000000041ee40: or rax, rbx; not rax; add rsp, 0x10; pop rbp; ret; 
0x000000000045cf2e: or rax, rbx; test rax, 0xf; sete byte ptr [rsp + 8]; ret; 
0x00000000004686a9: or rax, rdx; mov ecx, esi; add rsp, 0x20; pop rbp; ret; 
0x0000000000412063: or rbx, rsi; mov rcx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000046b969: or rcx, 0x13; mov rbx, qword ptr [rsp + 0xe8]; add rsp, 0x270; pop rbp; ret; 
0x000000000046e9b0: or rcx, 0x180; add rsp, 0x38; pop rbp; ret; 
0x000000000046ecf9: or rcx, 0x88; add rsp, 0x18; pop rbp; ret; 
0x000000000046e9ad: or rcx, rdx; or rcx, 0x180; add rsp, 0x38; pop rbp; ret; 
0x000000000046ec67: or rcx, rdx; or rcx, rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000046ec6a: or rcx, rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000045ed44: or rdi, 0x80000; mov eax, 0x38; syscall; 
0x0000000000429952: or rsi, rbx; mov rax, rsi; ret; 
0x0000000000429945: or rsi, rdx; and ebx, 0x1fffff; shl rbx, 0x2a; or rsi, rbx; mov rax, rsi; ret; 
0x0000000000428238: or rsi, rdx; mov rax, rsi; add rsp, 0x18; pop rbp; ret; 
0x00000000004051b6: out 0, al; add byte ptr [rax], al; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x000000000045e5e5: out 0, eax; add byte ptr [rax], al; syscall; 
0x000000000045e5e5: out 0, eax; add byte ptr [rax], al; syscall; ret; 
0x000000000044219c: out 0x10, eax; add byte ptr [rcx], al; jg 0x421ab; add rsp, 0x88; pop rbp; ret; 
0x0000000000426fcc: out 0x16, eax; sub rdi, rsi; mov rbx, rdi; lea rdx, [rsp + 0x110]; call rcx; 
0x0000000000428236: out 0x2a, al; or rsi, rdx; mov rax, rsi; add rsp, 0x18; pop rbp; ret; 
0x0000000000462eea: out 0x3f, al; or esi, 0xffffff80; mov byte ptr [rbx + rax - 1], sil; add rsp, 0x48; pop rbp; ret; 
0x00000000004295fe: out 0x48, al; not esi; and qword ptr [rax + rbx*8], rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004294fc: out 0x48, al; or dword ptr [rax + rbx*8], esi; add rsp, 0x10; pop rbp; ret; 
0x000000000040a525: out 0x48, eax; add esp, 0x30; pop rbp; ret; 
0x000000000045b1a9: out 0x48, eax; lea eax, [rip + 0x440f]; call rax; 
0x0000000000408e51: out 0x48, eax; xor eax, edx; ret; 
0x000000000044ad05: out 0x48, eax; xor ecx, eax; mul rcx; xor rax, rdx; ret; 
0x00000000004597ed: out 0x4b, eax; add al, 0; call 0x5b0a0; add rsp, 0x30; pop rbp; ret; 
0x000000000045a4d1: out 0x66, al; pxor mm5, mm7; pxor xmm4, xmm5; movq rax, xmm4; ret; 
0x00000000004495c5: out 0x89, eax; sbb eax, 0xcfb8c; ret; 
0x000000000045e755: out 0x8b, eax; push rsp; and al, 8; mov eax, 0xea; syscall; 
0x000000000045e755: out 0x8b, eax; push rsp; and al, 8; mov eax, 0xea; syscall; ret; 
0x000000000045e70a: out 0xbe, eax; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x23; syscall; 
0x0000000000419556: out 0xc0, al; add dword ptr [rax], eax; add rsp, 0x40; pop rbp; nop; ret; 
0x0000000000428ece: out 0xd, eax; mov rax, rcx; mov rbx, rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000406815: out 0xf5, eax; add al, byte ptr [rax]; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbp; ret; 
0x0000000000402ec0: out 1, al; lea rax, [rsi*2 - 1]; ret; 
0x000000000046bf16: out 2, al; add al, ch; add ah, ah; std; jmp qword ptr [rsi - 0x70]; 
0x000000000044a1ab: out 4, al; mov rax, qword ptr [rdx + rsi]; mov rbx, qword ptr [rdx + rsi + 8]; add rsp, 0x60; pop rbp; ret; 
0x0000000000410d16: out 8, al; add byte ptr [rax], al; add rsp, 0x18; pop rbp; nop; ret; 
0x0000000000445d7e: out 8, eax; jae 0x45d8d; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000402ebd: out dx, al; and rsi, 1; lea rax, [rsi*2 - 1]; ret; 
0x000000000040a0f4: out dx, al; mov qword ptr [rsp + 8], rdx; mov rcx, qword ptr [rax]; mov rdx, rax; mov rax, rbx; call rcx; 
0x0000000000412a9d: out dx, al; or byte ptr [rax - 1], cl; ret; 
0x00000000004245f8: out dx, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000451d6f: out dx, eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000463758: out dx, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000045a4d8: out dx, eax; in eax, 0x66; movd rax, mm4; ret; 
0x000000000045a5ac: out dx, eax; jmp qword ptr [rsi + 0x45]; 
0x000000000045a664: out dx, eax; jmp qword ptr [rsi + 0x4c]; 
0x000000000045a4d0: out dx, eax; out 0x66, al; pxor mm5, mm7; pxor xmm4, xmm5; movq rax, xmm4; ret; 
0x000000000045a4d4: out dx, eax; out dx, eax; pxor xmm4, xmm5; movq rax, xmm4; ret; 
0x0000000000403a52: out dx, eax; push rdx; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8348; 
0x00000000004037ed: out dx, eax; push rdx; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000045a4d5: out dx, eax; pxor xmm4, xmm5; movq rax, xmm4; ret; 
0x000000000045a655: out dx, eax; ret 0x4566; 
0x000000000043ee6d: out dx, eax; ret; 
0x000000000045a65a: out dx, eax; retf; pxor xmm8, xmm9; pxor xmm15, xmm15; movq rax, xmm8; ret; 
0x000000000045a65f: out dx, eax; shl dword ptr [rsi + 0x45], 0xf; out dx, eax; jmp qword ptr [rsi + 0x4c]; 
0x000000000045a436: out dx, eax; shl dword ptr [rsi + 0x48], cl; movd eax, mm2; ret; 
0x0000000000403133: out dx, eax; sub rdi, rsi; shl rdi, cl; sete al; ret; 
0x0000000000472f66: outsb dx, byte ptr [rsi]; clc; or al, byte ptr [rax]; pop rbp; ret; 
0x000000000045a2fe: outsb dx, byte ptr [rsi]; push 0x504e8b4d; test r9, r9; je 0x5a30e; call 0x5cde0; ret; 
0x0000000000419b14: outsb dx, byte ptr [rsi]; ret 0x9090; 
0x0000000000419b3d: outsb dx, byte ptr [rsi]; ret 0xff2; 
0x000000000045a343: outsb dx, byte ptr [rsi]; ret; 
0x000000000045ed90: outsd dx, dword ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax + 0x3c], bh; syscall; 
0x0000000000409c62: outsd dx, dword ptr [rsi]; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; pop rbp; ret; 
0x0000000000402f81: outsd dx, dword ptr [rsi]; and ch, al; in eax, 0x74; ret 0xfdc5; 
0x0000000000479a7e: outsd dx, dword ptr [rsi]; mov qword ptr [rdx + 0x48], rax; mov byte ptr [rdx + 0x50], cl; add rsp, 0x90; pop rbp; ret; 
0x0000000000402f80: outsd dx, dword ptr [rsi]; outsd dx, dword ptr [rsi]; and ch, al; in eax, 0x74; ret 0xfdc5; 
0x000000000047953e: pause; call 0x77e20; add rsp, 0x88; pop rbp; ret; 
0x000000000045ccc4: pause; sub eax, 1; jne 0x5ccc4; ret; 
0x000000000046bd8d: pavgb mm7, mm1; dec dword ptr [rax - 0x77]; ret; 
0x000000000040350e: pcmpeqb mm1, mm0; pmovmskb edx, xmm1; bsf edx, edx; jne 0x3522; mov qword ptr [r8], -1; ret; 
0x000000000040350d: pcmpeqb xmm1, xmm0; pmovmskb edx, xmm1; bsf edx, edx; jne 0x3522; mov qword ptr [r8], -1; ret; 
0x0000000000403512: pmovmskb edx, mm1; bsf edx, edx; jne 0x3522; mov qword ptr [r8], -1; ret; 
0x0000000000403511: pmovmskb edx, xmm1; bsf edx, edx; jne 0x3522; mov qword ptr [r8], -1; ret; 
0x0000000000415093: pop rax; adc al, 0xf6; ret; 
0x000000000046b48e: pop rax; adc byte ptr [rax - 1], cl; ret; 
0x0000000000419cee: pop rax; add eax, dword ptr [rax]; add rsp, 0x50; pop rbp; ret; 
0x0000000000431a9c: pop rax; add rsp, 0x10; pop rbp; ret; 
0x000000000041372b: pop rax; add rsp, 0x48; pop rbp; ret; 
0x000000000040e2b1: pop rax; add rsp, 0x60; pop rbp; ret; 
0x0000000000445273: pop rax; add rsp, 0x68; pop rbp; ret; 
0x000000000041e1cf: pop rax; addsd xmm0, xmm1; movsd qword ptr [rsp + 0x50], xmm0; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000475dae: pop rax; and byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000448460: pop rax; call 0x476c0; add rsp, 0x2e8; pop rbp; ret; 
0x000000000045afe9: pop rax; call 0x5b060; call 0x5cde0; ret; 
0x0000000000462543: pop rax; call 0x62040; add rsp, 0x38; pop rbp; ret; 
0x000000000047a291: pop rax; call 0x76400; add rsp, 0x90; pop rbp; nop; ret; 
0x0000000000440f9f: pop rax; cmp byte ptr [rcx + 0x29], cl; ret; 
0x0000000000447495: pop rax; lea rbx, [rax + rcx]; add rsp, 0x68; pop rbp; nop; ret; 
0x000000000044b89c: pop rax; lea rcx, [rip + 0xd6dec]; xchg qword ptr [rcx], rax; add rsp, 0x60; pop rbp; ret; 
0x0000000000418509: pop rax; mov byte ptr [rax + 0x21], 0; call 0x188a0; add rsp, 0x18; pop rbp; ret; 
0x000000000047a274: pop rax; mov qword ptr [rsp + 0x58], rbx; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x000000000041f26a: pop rax; mov rax, r8; call 0x28c80; add rsp, 0x18; pop rbp; ret; 
0x0000000000446bd3: pop rax; mov rbx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rsp + 0x28]; add rsp, 0x60; pop rbp; ret; 
0x0000000000472a5e: pop rax; mov rbx, qword ptr [rsp + 0x50]; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x60; pop rbp; ret; 
0x0000000000469437: pop rax; mov rcx, qword ptr [rsp + 0x60]; add rsp, 0x70; pop rbp; ret; 
0x0000000000477989: pop rax; mov rcx, rdx; call rsi; 
0x000000000042e252: pop rax; mov rdi, qword ptr [rsp + 0x30]; call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x000000000047a27a: pop rax; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x0000000000405277: pop rax; nop; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x000000000044b710: pop rax; or byte ptr [rax - 1], cl; ret; 
0x000000000047bfb9: pop rax; or byte ptr [rcx - 1], cl; ret; 
0x0000000000431a9b: pop rax; pop rax; add rsp, 0x10; pop rbp; ret; 
0x000000000041013d: pop rax; pop rbp; nop; ret; 
0x0000000000404968: pop rax; pop rbp; ret; 
0x000000000040c576: pop rax; ret 0xff2; 
0x000000000041e403: pop rax; retf 0x8948; ret; 
0x000000000041e1d2: pop rax; sal edx, 0xf; adc dword ptr [rsp + 0x50], eax; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000475daa: pop rax; sbb byte ptr [rbx + rax + 0x58], cl; and byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004097fe: pop rax; sbb byte ptr [rcx], dh; sal byte ptr [rcx], 0xdb; add rsp, 0xa0; pop rbp; ret; 
0x000000000041f850: pop rax; xor byte ptr [rax - 0x75], cl; or eax, 0xf9947; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000004150eb: pop rax; xor byte ptr [rax - 0x7b], cl; fisttp dword ptr [rdi]; xchg eax, esp; ret; 
0x00000000004110af: pop rax; xor byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 0x28; pop rbp; ret; 
0x000000000045b1a7: pop rbp; jmp rdi; 
0x0000000000401d5e: pop rbp; nop; ret; 
0x000000000043afca: pop rbp; ret; 
0x0000000000412193: pop rbx; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0xc149; 
0x000000000042acb9: pop rbx; or byte ptr [rax - 0x77], cl; or al, 0xd0; add rsp, 0x30; pop rbp; ret; 
0x0000000000460d61: pop rbx; ret 0xffff; 
0x0000000000404aa1: pop rbx; ret; 
0x0000000000439bdf: pop rcx; adc byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x28; pop rbp; ret; 
0x0000000000465368: pop rcx; adc byte ptr [rax - 0x80], al; jmp qword ptr [rdx + 0xf]; 
0x000000000044f842: pop rcx; adc byte ptr [rax - 1], cl; ret; 
0x000000000046826a: pop rcx; adc byte ptr [rcx + 0x29], cl; ret; 
0x0000000000456daa: pop rcx; add al, 0x48; add esp, 0x10; pop rbp; ret; 
0x0000000000456db4: pop rcx; add dword ptr [rax + 0xfffd], edi; add rsp, 0x10; pop rbp; ret; 
0x000000000041e1ba: pop rcx; jo 0x1e205; add esp, 0x60; pop rbp; ret; 
0x000000000041e1f5: pop rcx; ret 0xff2; 
0x000000000040c5bf: pop rcx; sal edx, 0xf; sub al, 0xc0; inc eax; ret; 
0x000000000047572c: pop rcx; sbb byte ptr [rax + 0x29], cl; ret; 
0x000000000041dbbb: pop rcx; xor al, 0x13; add byte ptr [rax + 0x77d63948], dl; adc ecx, dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000042a9ee: pop rdx; adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x138; pop rbp; ret; 
0x0000000000419d74: pop rdx; adc al, ch; and eax, 0x48000000; add esp, 0x10; pop rbp; ret; 
0x00000000004576bf: pop rdx; add dword ptr [rbx + rcx*4 + 0x7b], ecx; xor byte ptr [rbx - 0x76bba7bd], cl; fiadd dword ptr [rcx + 0x29]; ret; 
0x0000000000456074: pop rdx; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040ab9c: pop rdx; jmp qword ptr [rsi - 0x70]; 
0x000000000042fce2: pop rdx; movabs dword ptr [0x484074c08548fffd], eax; mov ecx, dword ptr [rax + 0x18]; mov rax, rbx; call rcx; 
0x000000000046a31e: pop rdx; or byte ptr [rax - 1], cl; ret; 
0x0000000000460ee0: pop rdx; or byte ptr [rcx + 1], bh; mov edi, ecx; add rsp, 0x28; pop rbp; ret; 
0x00000000004424a7: pop rdx; push rax; add eax, 0x13bb00; add byte ptr [rax], al; ret; 
0x000000000047ace5: pop rdx; ret 0xff3; 
0x000000000047a67a: pop rdx; ret; 
0x000000000047a676: pop rdx; retf 0xff3; pop rdx; ret; 
0x000000000047546e: pop rdx; sbb byte ptr [rax + 0x29], cl; ret; 
0x00000000004651ad: pop rdx; shl byte ptr [rsi + 0xf], 0x7e; ret 0x8d4c; 
0x00000000004411b7: pop rsi; adc byte ptr [rdi], cl; xchg eax, esp; ret 0x1f0f; 
0x00000000004744d6: pop rsp; add al, byte ptr [rax]; mov ebx, 0x20; pop rbp; nop; ret; 
0x0000000000401027: pop rsp; add cl, byte ptr [rax]; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000041df66: pop rsp; add dword ptr [rax], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000046bae8: pop rsp; add dword ptr [rax], ecx; mov rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000040ab19: pop rsp; add dword ptr [rax], ecx; mov rax, rdx; nop; ret; 
0x000000000041d04a: pop rsp; and al, 0x10; add rsp, 0x28; pop rbp; ret; 
0x00000000004068d9: pop rsp; and al, 0x10; add rsp, 0x30; pop rbp; ret; 
0x000000000041404c: pop rsp; and al, 0x10; call 0x14560; add rsp, 0x20; pop rbp; ret; 
0x0000000000454e15: pop rsp; and al, 0x10; call rcx; 
0x000000000046ef07: pop rsp; and al, 0x10; nop; and ecx, 0x1f; mov rax, rcx; ret; 
0x000000000040270f: pop rsp; and al, 0x14; mov dword ptr [rsp + 0x18], ecx; mov dword ptr [rsp + 0x1c], edx; ret; 
0x00000000004525b4: pop rsp; and al, 0x17; mov rcx, rax; movzx eax, byte ptr [rsp + 0x38]; nop; call rcx; 
0x000000000040a073: pop rsp; and al, 0x18; add rsp, 0x20; pop rbp; ret; 
0x000000000045a1cc: pop rsp; and al, 0x18; add rsp, 0x30; pop rbp; ret; 
0x000000000041db55: pop rsp; and al, 0x18; call 0x1db80; add rsp, 0x20; pop rbp; ret; 
0x0000000000410f6c: pop rsp; and al, 0x18; call 0x5d9c0; add rsp, 0x20; pop rbp; ret; 
0x0000000000458c11: pop rsp; and al, 0x18; call 0x60240; add rsp, 0x20; pop rbp; ret; 
0x000000000047202e: pop rsp; and al, 0x18; call 0x727a0; add rsp, 0x28; pop rbp; ret; 
0x00000000004305f9: pop rsp; and al, 0x18; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x0000000000473a1f: pop rsp; and al, 0x18; mov rdx, qword ptr [rip + 0xaabf7]; mov rsi, qword ptr [rdx]; mov rax, rcx; call rsi; 
0x000000000046383c: pop rsp; and al, 0x20; add rsp, 0x28; pop rbp; ret; 
0x0000000000459116: pop rsp; and al, 0x20; add rsp, 0x30; pop rbp; ret; 
0x00000000004591d5: pop rsp; and al, 0x20; call 0x2ca60; add rsp, 0x10; pop rbp; ret; 
0x000000000040551e: pop rsp; and al, 0x20; call 0x5dcc0; add rsp, 0x28; pop rbp; ret; 
0x0000000000458c63: pop rsp; and al, 0x20; call 0x60200; add rsp, 0x30; pop rbp; ret; 
0x00000000004157d8: pop rsp; and al, 0x20; mov rcx, qword ptr [rdx]; mov rsi, qword ptr [rax + 0x10]; mov rax, rsi; call rcx; 
0x000000000043a42f: pop rsp; and al, 0x20; movzx ecx, byte ptr [rsp + 0x17]; add rsp, 0x38; pop rbp; ret; 
0x000000000040b6ab: pop rsp; and al, 0x28; add rsp, 0x30; pop rbp; ret; 
0x00000000004046b0: pop rsp; and al, 0x28; add rsp, 0x68; pop rbp; ret; 
0x000000000045f286: pop rsp; and al, 0x28; add rsp, 8; pop rbp; ret; 
0x0000000000401a04: pop rsp; and al, 0x28; call 0x1a40; add rsp, 0x10; pop rbp; ret; 
0x0000000000462357: pop rsp; and al, 0x28; mov ecx, 1; add rsp, 0x38; pop rbp; ret; 
0x0000000000459aa3: pop rsp; and al, 0x28; mov rcx, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x0000000000431a96: pop rsp; and al, 0x28; xchg qword ptr [rax + 0x58], rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000458bcc: pop rsp; and al, 0x28; xchg qword ptr [rax], rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000405e6f: pop rsp; and al, 0x2f; add rsp, 0x68; pop rbp; ret; 
0x0000000000474ed1: pop rsp; and al, 0x30; add rsp, 0x48; pop rbp; ret; 
0x0000000000460802: pop rsp; and al, 0x30; call 0x9f00; mov rcx, qword ptr [rax + 0x18]; mov rax, qword ptr [rsp + 0x48]; call rcx; 
0x0000000000464255: pop rsp; and al, 0x30; mov rcx, qword ptr [rax + 0x18]; mov rax, rbx; nop; call rcx; 
0x00000000004293f5: pop rsp; and al, 0x30; mov rcx, qword ptr [rsp + 0x20]; add rsp, 0x58; pop rbp; ret; 
0x000000000046cf50: pop rsp; and al, 0x38; add rsp, 0x40; pop rbp; ret; 
0x000000000040995f: pop rsp; and al, 0x38; add rsp, 0xa0; pop rbp; ret; 
0x0000000000413f42: pop rsp; and al, 0x38; call 0x4740; add rsp, 0x20; pop rbp; ret; 
0x0000000000460164: pop rsp; and al, 0x38; call 0x58be0; add rsp, 0x18; pop rbp; ret; 
0x00000000004779af: pop rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbp; ret; 
0x0000000000460e00: pop rsp; and al, 0x40; add rsp, 0x50; pop rbp; ret; 
0x0000000000446bd6: pop rsp; and al, 0x40; mov rcx, qword ptr [rsp + 0x28]; add rsp, 0x60; pop rbp; ret; 
0x000000000044b685: pop rsp; and al, 0x40; mov rcx, qword ptr [rsp + 0x48]; add rsp, 0x100; pop rbp; ret; 
0x000000000044e9ac: pop rsp; and al, 0x40; mov rsi, rcx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x000000000040b6a0: pop rsp; and al, 0x48; add rsp, 0x30; pop rbp; ret; 
0x0000000000461e12: pop rsp; and al, 0x48; add rsp, 0x88; pop rbp; ret; 
0x000000000044c763: pop rsp; and al, 0x48; add rsp, 0xb0; pop rbp; ret; 
0x00000000004054a4: pop rsp; and al, 0x48; call 0x5dcc0; add rsp, 0x28; pop rbp; ret; 
0x00000000004635a6: pop rsp; and al, 0x48; call 0x63880; add rsp, 0x30; pop rbp; ret; 
0x0000000000461daa: pop rsp; and al, 0x48; mov rax, qword ptr [rsp + 0x60]; add rsp, 0x88; pop rbp; ret; 
0x0000000000444b6d: pop rsp; and al, 0x48; mov rcx, rdi; call rsi; 
0x000000000044f5cf: pop rsp; and al, 0x4c; call 0x500a0; add rsp, 0x58; pop rbp; ret; 
0x0000000000472a61: pop rsp; and al, 0x50; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x60; pop rbp; ret; 
0x000000000044845e: pop rsp; and al, 0x58; call 0x476c0; add rsp, 0x2e8; pop rbp; ret; 
0x0000000000469435: pop rsp; and al, 0x58; mov rcx, qword ptr [rsp + 0x60]; add rsp, 0x70; pop rbp; ret; 
0x000000000047a278: pop rsp; and al, 0x58; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x000000000041b05c: pop rsp; and al, 0x60; mov qword ptr [rbx + 0x18], 0; add rsp, 0x50; pop rbp; ret; 
0x0000000000473cd1: pop rsp; and al, 0x60; mov rcx, qword ptr [rsp + 0x68]; add rsp, 0x88; pop rbp; ret; 
0x0000000000473cb5: pop rsp; and al, 0x68; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x80]; mov rax, qword ptr [rdx]; call rax; 
0x0000000000472af3: pop rsp; and al, 0x68; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x78; pop rbp; ret; 
0x0000000000453770: pop rsp; and al, 0x70; add rsp, 0x258; pop rbp; ret; 
0x0000000000454b48: pop rsp; and al, 0x70; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000047435a: pop rsp; and al, 0x78; add rsp, 0xa0; pop rbp; ret; 
0x00000000004740db: pop rsp; and al, 0x78; mov rcx, qword ptr [rsp + 0x80]; add rsp, 0xa0; pop rbp; ret; 
0x0000000000473aec: pop rsp; and al, 8; add rsp, 0x18; pop rbp; ret; 
0x0000000000473a59: pop rsp; and al, 8; add rsp, 0x20; pop rbp; ret; 
0x000000000045cdc2: pop rsp; and al, 8; mov qword ptr fs:[0xfffffffffffffff8], rbx; ret; 
0x000000000045246b: pop rsp; cmp byte ptr [rcx], al; mov rsi, qword ptr [rsp + 0x50]; lea rdx, [rsp + 0x50]; mov eax, r8d; call rsi; 
0x0000000000469788: pop rsp; jbe 0x697d3; mov ebx, edx; add rsp, 0x70; pop rbp; ret; 
0x000000000042d55f: pop rsp; or byte ptr [rdi], cl; xchg eax, esp; ret; 
0x00000000004424c5: pop rsp; or cl, byte ptr [rax]; ret; 
0x000000000042a1f0: pop rsp; ret 0x4c30; 
0x000000000041d6ee: pop rsp; sal edx, 0x48; cvttps2pi mm0, xmm0; bts rax, 0x3f; xchg qword ptr [rcx + 0x18], rax; ret; 
0x000000000044a1b3: pop rsp; xor cl, byte ptr [rax]; add rsp, 0x60; pop rbp; ret; 
0x0000000000419725: popfq; adc byte ptr [rax], al; call 0xa5c0; add rsp, 0x40; pop rbp; ret; 
0x00000000004466bb: popfq; adc byte ptr [rax], al; mov rcx, rbx; add rsp, 0x60; pop rbp; ret; 
0x0000000000405124: popfq; add byte ptr [rax], al; add byte ptr [rax + 1], bh; add rsp, 0x60; pop rbp; ret; 
0x000000000041351b: popfq; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x000000000045e52c: popfq; pop rbp; ret; 
0x000000000047249f: popfq; ret; 
0x0000000000454b40: push -0x14fe76b8; add eax, 0x245c8b48; jo 0x54b94; mov eax, dword ptr [rbx]; mov rdx, rbx; call rax; 
0x00000000004327e2: push -0x23; adc dword ptr [rax], eax; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x0000000000429207: push -0x2eab74b7; js 0x29192; add cl, byte ptr [rcx - 0x77]; ret 0x8141; 
0x0000000000457384: push -0x3fcef315; add rsp, 0x38; pop rbp; ret; 
0x0000000000419ef2: push -0x6f69fcb8; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret 0x8948; 
0x00000000004245f0: push -0x7ab70002; ror byte ptr [rdi], 0x84; out dx, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004647f3: push -0xa872b8; cmp rcx, rdx; jl 0x647c2; add rsp, 0x78; pop rbp; ret; 
0x000000000041bb91: push -0xa; ret 0x7401; 
0x0000000000411e39: push -0xa; ret 0x7501; 
0x000000000045b19a: push 0; pop rbp; ret; 
0x0000000000457d76: push 0; xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 8; pop rbp; ret; 
0x0000000000466554: push 0x1f8e9; add byte ptr [rax - 1], cl; ret; 
0x0000000000472db2: push 0x20488b48; mov rcx, qword ptr [rcx + 0x18]; mov rdx, qword ptr [rax + 0x28]; mov rax, rdx; call rcx; 
0x00000000004308e1: push 0x24448b48; push rax; mov rdx, qword ptr [rax + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000473d2d: push 0x24448b48; sub byte ptr [rax - 0x77], cl; mov rcx, rdi; add rsp, 0x88; pop rbp; ret; 
0x000000000045376d: push 0x245c8b48; jo 0x537bc; add esp, 0x258; pop rbp; ret; 
0x00000000004538df: push 0x245c8b48; jo 0x5392e; add esp, 0x258; pop rbp; ret; 
0x0000000000469432: push 0x245c8b48; pop rax; mov rcx, qword ptr [rsp + 0x60]; add rsp, 0x70; pop rbp; ret; 
0x00000000004479b6: push 0x24748948; cmp byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000475a67: push 0x24748b48; sub byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004073b2: push 0x2f; add al, 0; add rsp, 0xf8; pop rbp; ret; 
0x000000000045b18e: push 0x3840c748; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x68], 0; pop rbp; ret; 
0x000000000045e99a: push 0x3d; or al, 0; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x000000000045b249: push 0x4331e8; add al, ch; mov word ptr [rbx], ds; add byte ptr [rax], al; ret; 
0x0000000000446234: push 0x4500018b; xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; ret; 
0x000000000042c648: push 0x48000012; add esp, 8; pop rbp; ret; 
0x000000000043688f: push 0x480a8b48; mov eax, dword ptr [rsp + 0x50]; call rcx; 
0x000000000043685b: push 0x481a8b48; mov eax, ecx; call rbx; 
0x000000000044c42b: push 0x48d00148; mov ebx, ecx; add rsp, 0x10; pop rbp; ret; 
0x00000000004647ce: push 0x48d88948; mov ebx, ecx; mov rcx, rsi; call rdx; 
0x0000000000464731: push 0x48d88948; mov ebx, edx; call rsi; 
0x0000000000425c94: push 0x48fffe47; mov eax, dword ptr [rsp + 0x18]; movups xmmword ptr [rax], xmm15; add rsp, 0x20; pop rbp; ret; 
0x00000000004626b4: push 0x48ffff79; add esp, 8; pop rbp; ret; 
0x0000000000476db4: push 0x48ffffe6; add esp, 0x20; pop rbp; ret; 
0x000000000047a134: push 0x48fffff4; add esp, 0x30; pop rbp; ret; 
0x0000000000401d56: push 0x48ffffff; sub esp, -0x80; pop rbp; nop; ret; 
0x000000000045a2ff: push 0x504e8b4d; test r9, r9; je 0x5a30e; call 0x5cde0; ret; 
0x000000000045a8e6: push 0x70c48348; pop rbp; ret; 
0x0000000000475d76: push 0x74ff8440; or byte ptr [rax - 0x7b], cl; fisttp dword ptr [rdi]; pushfq; ret 0x2eb; 
0x0000000000463bde: push 0x78c48348; pop rbp; ret; 
0x0000000000463bcb: push 0x8048d48; lea rax, [rax + 1]; add rsp, 0x78; pop rbp; ret; 
0x0000000000442d96: push 0x8ce9; add byte ptr [rbp - 0x146f992e], al; add ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000405884: push 0xf000001; xchg eax, esp; ret; 
0x00000000004564af: push 0xfcb3948; test dword ptr [rsi], ebx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000429ab2: push 1; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000046b273: push 2; add byte ptr [rax], al; add rsp, 0x1a8; pop rbp; nop; ret; 
0x000000000046e634: push 4; add al, ch; and spl, r15b; dec dword ptr [rax - 0x7d]; ret 0x4830; 
0x0000000000472032: push 7; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x000000000044ac74: push qword ptr [rbp + rdx*4 + 0x48]; mov ecx, dword ptr [rsp + 0x28]; add rax, rcx; add rsp, 0x48; pop rbp; ret; 
0x000000000040959b: push qword ptr [rbp - 0x21]; xchg qword ptr [r8], rbx; inc qword ptr [rax + 8]; ret; 
0x000000000044ce53: push qword ptr [rbp - 0x6a]; mov eax, dword ptr [rsp + 0x34]; add rsp, 0x68; pop rbp; nop; ret; 
0x000000000040a548: push qword ptr [rcx + 0x48]; add esp, 0x30; pop rbp; ret; 
0x0000000000439044: push qword ptr [rcx]; fisttp dword ptr [rcx - 0x3b7eb727]; add byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004390da: push qword ptr [rcx]; leave; add rsp, 0x100; pop rbp; ret; 
0x000000000044d268: push qword ptr [rcx]; leave; add rsp, 0x58; pop rbp; ret; 
0x000000000041d045: push qword ptr [rcx]; ror byte ptr [rax - 0x75], 0x5c; and al, 0x10; add rsp, 0x28; pop rbp; ret; 
0x0000000000459111: push qword ptr [rcx]; ror byte ptr [rax - 0x75], 0x5c; and al, 0x20; add rsp, 0x30; pop rbp; ret; 
0x000000000041ec88: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; js 0x1eced; ret; 
0x0000000000454cc8: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; pop rax; pop rbp; ret; 
0x0000000000413954: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; pop rbp; ret; 
0x00000000004565a9: push qword ptr [rcx]; ror byte ptr [rax - 0x7f], 0xc4; and byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000044c4a4: push qword ptr [rcx]; sal byte ptr [rcx], 0xdb; add rsp, 0x10; pop rbp; ret; 
0x0000000000439b52: push qword ptr [rcx]; sal byte ptr [rcx], 0xdb; add rsp, 0x28; pop rbp; ret; 
0x000000000040b4f8: push qword ptr [rcx]; sal byte ptr [rcx], 0xdb; add rsp, 0x90; pop rbp; ret; 
0x00000000004689f9: push qword ptr [rcx]; test byte ptr [rax - 0x7f], 0xc4; mov byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000045e670: push qword ptr [rsi + 5]; mov eax, 0xffffffff; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000045e63f: push qword ptr [rsi + 5]; mov eax, 0xffffffff; mov dword ptr [rsp + 0x18], eax; ret; 
0x00000000004030be: push qword ptr [rsp + rax*8 - 0x3b]; clc; ja 0x310d; xor eax, eax; ret; 
0x0000000000403c14: push rax; adc al, 0xf6; ret 0xf08; 
0x000000000044b70c: push rax; adc byte ptr [rax - 0x75], cl; pop rax; or byte ptr [rax - 1], cl; ret; 
0x0000000000450237: push rax; adc byte ptr [rax - 1], cl; ret 0x8948; 
0x0000000000478cd3: push rax; adc byte ptr [rbx + rcx*4 + 0x50], cl; or byte ptr [rcx - 1], cl; ret 0x4c90; 
0x000000000047bfb5: push rax; adc byte ptr [rbx + rcx*4 + 0x58], cl; or byte ptr [rcx - 1], cl; ret; 
0x0000000000456eb2: push rax; add bh, byte ptr [rax + 3]; add rsp, 0x10; pop rbp; ret; 
0x0000000000466ece: push rax; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret; 
0x000000000045a2c2: push rax; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x00000000004424a8: push rax; add eax, 0x13bb00; add byte ptr [rax], al; ret; 
0x000000000042dbb3: push rax; add ebx, ebp; add bh, bh; ret 0x6348; 
0x0000000000479a85: push rax; add rsp, 0x90; pop rbp; ret; 
0x000000000040eb10: push rax; and byte ptr [rax - 0x73], cl; mov dl, 1; add al, 0; add byte ptr [rax - 1], cl; ret 0x8948; 
0x0000000000469f30: push rax; and byte ptr [rax - 1], cl; ret 0x8b4c; 
0x0000000000413518: push rax; call 0x1d260; add rsp, 0x58; pop rbp; ret; 
0x000000000044dee8: push rax; call 0x39c40; movzx eax, byte ptr [rsp + 0x13]; add rsp, 0x38; pop rbp; ret; 
0x000000000045afe3: push rax; call 0x5f4e0; pop rax; call 0x5b060; call 0x5cde0; ret; 
0x0000000000436897: push rax; call rcx; 
0x000000000041f254: push rax; cmp byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x0000000000403de5: push rax; ja 0x3db0; mov rax, rcx; add rsp, 0x60; pop rbp; ret; 
0x0000000000462191: push rax; jmp qword ptr [rcx]; 
0x000000000046a15c: push rax; jmp qword ptr [rsi - 0x70]; 
0x00000000004102a2: push rax; lea rax, [rcx + rdx]; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x00000000004545f0: push rax; lea rax, [rsp + 0x38]; call 0x34660; add rsp, 0x58; pop rbp; ret; 
0x0000000000452472: push rax; lea rdx, [rsp + 0x50]; mov eax, r8d; call rsi; 
0x0000000000452477: push rax; mov eax, r8d; call rsi; 
0x000000000044f5cd: push rax; mov ebx, dword ptr [rsp + 0x4c]; call 0x500a0; add rsp, 0x58; pop rbp; ret; 
0x00000000004448fb: push rax; mov qword ptr [rdx + 0x18], rcx; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x000000000042d05a: push rax; mov qword ptr [rip + 0x1234ce], rax; add rsp, 0x70; pop rbp; ret; 
0x000000000047bcb0: push rax; mov rax, rbx; mov rbx, rdi; call rcx; 
0x000000000040ef3d: push rax; mov rbx, rsi; call rcx; 
0x0000000000471c13: push rax; mov rcx, qword ptr [rcx + 0xf8]; mov rax, qword ptr [rsp + 0xb0]; call rcx; 
0x0000000000410a54: push rax; mov rcx, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, rsi; mov rbx, rdi; call rcx; 
0x000000000040ec48: push rax; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x30]; mov rbx, rsi; call rcx; 
0x000000000040ef31: push rax; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x50]; mov rbx, rsi; call rcx; 
0x0000000000410086: push rax; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x78]; mov rbx, rsi; call rcx; 
0x00000000004103fb: push rax; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; lea rax, [rsp + 0x80]; mov rbx, rsi; call rcx; 
0x000000000040e7b8: push rax; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; mov rax, r13; mov rbx, rsi; call rcx; 
0x0000000000472a63: push rax; mov rcx, qword ptr [rsp + 0x38]; add rsp, 0x60; pop rbp; ret; 
0x000000000046253e: push rax; mov rcx, qword ptr [rsp + 0x58]; call 0x62040; add rsp, 0x38; pop rbp; ret; 
0x000000000042e1a3: push rax; mov rdi, qword ptr [rsp + 0x28]; call 0x42380; add rsp, 0x38; pop rbp; ret; 
0x00000000004308e6: push rax; mov rdx, qword ptr [rax + 0x18]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000041e1d9: push rax; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000040d281: push rax; mov rsi, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, rcx; mov rbx, rdi; call rsi; 
0x000000000040d312: push rax; mov rsi, qword ptr [rdx]; mov rax, rcx; xor ebx, ebx; call rsi; 
0x000000000045e2e5: push rax; movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x00000000004290ea: push rax; movups xmmword ptr [rdx], xmm15; mov qword ptr [rdx + 0x10], 0; add rsp, 0x40; pop rbp; ret; 
0x000000000040cb67: push rax; or bh, bh; ret 0x8966; 
0x00000000004231d8: push rax; or byte ptr [rax - 0x77], cl; ret; 
0x00000000004370a9: push rax; or byte ptr [rax - 0x7d], cl; ret 0x48e0; 
0x0000000000408ecb: push rax; or byte ptr [rcx + 0x31], cl; fimul dword ptr [rax - 0x77]; ret; 
0x0000000000478cd7: push rax; or byte ptr [rcx - 1], cl; ret 0x4c90; 
0x000000000047b80f: push rax; or byte ptr [rcx - 1], cl; ret 0x8b4c; 
0x0000000000476ff4: push rax; or byte ptr [rcx - 1], cl; ret 0xf44; 
0x000000000040e2b0: push rax; pop rax; add rsp, 0x60; pop rbp; ret; 
0x0000000000402699: push rax; pop rbp; ret; 
0x0000000000411e38: push rax; push -0xa; ret 0x7501; 
0x000000000045e2e4: push rax; push rax; movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x0000000000463fb4: push rax; sbb byte ptr [rax - 0x75], cl; jo 0x63fda; mov rdx, qword ptr [rdx + 0x18]; mov rax, rsi; call rdx; 
0x000000000046cada: push rax; sbb byte ptr [rax - 0x75], cl; pop rax; adc byte ptr [rax - 1], cl; ret; 
0x000000000043aa10: push rax; sub esi, esi; ret 0x7502; 
0x00000000004682a5: push rax; test dword ptr [rax - 9], 0x518949da; sbb byte ptr [rax - 0x7d], cl; ret 0x4c08; 
0x000000000045a303: push rax; test r9, r9; je 0x5a30e; call 0x5cde0; ret; 
0x0000000000446355: push rax; xadd dword ptr [rdi], ecx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000044630e: push rax; xadd dword ptr [rdi], ecx; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004614ea: push rax; xadd dword ptr [rdx], eax; add rsp, 0x40; pop rbp; ret; 
0x0000000000420607: push rbp; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x0000000000426261: push rbp; add rsp, 0x60; pop rbp; ret; 
0x0000000000458646: push rbp; mov rbp, rsp; call 0x20520; pop rbp; ret; 
0x0000000000458fe6: push rbp; mov rbp, rsp; call 0x2ca00; pop rbp; ret; 
0x0000000000457d06: push rbp; mov rbp, rsp; call 0x360e0; pop rbp; ret; 
0x000000000043cc46: push rbp; mov rbp, rsp; call 0x3cc40; pop rbp; ret; 
0x000000000043cc66: push rbp; mov rbp, rsp; call 0x3cc60; pop rbp; ret; 
0x000000000043cc86: push rbp; mov rbp, rsp; call 0x3cc80; pop rbp; ret; 
0x000000000043cca6: push rbp; mov rbp, rsp; call 0x3cca0; pop rbp; ret; 
0x000000000043ccc6: push rbp; mov rbp, rsp; call 0x3ccc0; pop rbp; ret; 
0x000000000043cce6: push rbp; mov rbp, rsp; call 0x3cce0; pop rbp; ret; 
0x0000000000445f46: push rbp; mov rbp, rsp; call 0x45f60; call 0x460a0; pop rbp; ret; 
0x000000000045b100: push rbp; mov rbp, rsp; ud2; call 0x5cde0; pop rbp; ret; 
0x000000000046aaea: push rbp; xor eax, eax; add rsp, 0x78; pop rbp; ret; 
0x0000000000409129: push rbx; adc al, 0xf6; ret 0x7501; 
0x000000000042c00c: push rbx; adc bh, bh; ret 0xfa81; 
0x000000000040527b: push rbx; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x000000000043acc2: push rbx; add byte ptr [rax], al; call 0x3a000; add rsp, 0x30; pop rbp; ret; 
0x000000000043bb27: push rbx; add dword ptr [rax], eax; add rsp, 8; pop rbp; ret; 
0x00000000004608f1: push rbx; add eax, 0x3104eb00; sal byte ptr [rcx], 0xc9; mov rdx, qword ptr [rax + 0x28]; mov rax, rcx; call rdx; 
0x000000000044b0ab: push rbx; and byte ptr [rax - 1], cl; ret 0x8b48; 
0x000000000040b63c: push rbx; jmp qword ptr [rsi - 0x70]; 
0x000000000040cd3d: push rbx; or byte ptr [rcx + rcx*4 + 0x11], cl; mov rax, r10; add rsp, 0x50; pop rbp; ret; 
0x0000000000411bc1: push rbx; or byte ptr [rcx - 0x2f], al; loope 0x11bb0; ret; 
0x000000000040e00e: push rbx; or byte ptr [rcx - 0xa], al; ret 0xf08; 
0x000000000046221e: push rbx; or byte ptr [rdi + rcx + 0x11], al; mov ecx, 1; add rsp, 0x38; pop rbp; ret; 
0x000000000040e4f0: push rbx; or byte ptr [rdi], cl; mov dh, 0x73; or esi, esi; ret 0x7508; 
0x000000000045e136: push rbx; sal bl, 1; movq qword ptr [rbx - 0x20], mm3; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000042ee49: push rbx; scasb al, byte ptr [rdi]; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000474a18: push rbx; stc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000472761: push rbx; sub eax, 0x89480004; ret 0x4eb; 
0x000000000042f349: push rbx; test eax, 0x8948fffd; ret; 
0x000000000044f78a: push rcx; adc byte ptr [rbp - 0x77], al; ret; 
0x0000000000457395: push rcx; add ah, byte ptr [rsi - 9]; ret 1; 
0x000000000043b938: push rcx; add al, 0xf; xchg eax, esp; ret 0x1f0f; 
0x000000000043b42b: push rcx; add al, 0xf; xchg eax, esp; ret 0x7eb; 
0x000000000043edf4: push rcx; add al, 0xf; xchg eax, esp; ret; 
0x000000000042d86c: push rcx; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000460cc6: push rcx; or byte ptr [rax - 0x77], cl; ret; 
0x000000000044c42a: push rcx; push 0x48d00148; mov ebx, ecx; add rsp, 0x10; pop rbp; ret; 
0x000000000045e212: push rcx; sal bl, 1; movq qword ptr [rcx - 0x20], mm3; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000040e7fa: push rcx; sbb byte ptr [rax - 0x75], cl; or cl, byte ptr [rax - 0x75]; and al, 0x48; mov rbx, rax; call rcx; 
0x000000000040e032: push rcx; sbb byte ptr [rax - 0x75], cl; or cl, byte ptr [rcx + rcx*4 - 0x20]; mov rbx, rax; call rcx; 
0x00000000004682ac: push rcx; sbb byte ptr [rax - 0x7d], cl; ret 0x4c08; 
0x0000000000451662: push rcx; sub byte ptr [rax - 0x7d], cl; ret 0x4908; 
0x0000000000436401: push rcx; xor byte ptr [rax + 0x39], cl; ret 0x2074; 
0x000000000043b21c: push rcx; xor byte ptr [rax - 0x77], cl; ret; 
0x0000000000405ba5: push rcx; xor byte ptr [rax - 1], cl; ret 0x8948; 
0x0000000000465f03: push rdi; adc byte ptr [rax - 1], cl; ret 0x8948; 
0x0000000000455b85: push rdi; add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 1], cl; ret; 
0x000000000046fc51: push rdi; add al, byte ptr [rax]; call 0x4a3c0; add rsp, 0x38; pop rbp; ret; 
0x0000000000404ea2: push rdi; add byte ptr [rax], al; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x0000000000419d42: push rdi; add eax, dword ptr [rax]; add rsp, 0x50; pop rbp; ret; 
0x000000000040dd6b: push rdi; dec dword ptr [rax + 0x21]; ret 0x8948; 
0x00000000004647f6: push rdi; dec dword ptr [rax + 0x39]; sar dword ptr [rbp + rax*8 + 0x48], 1; add esp, 0x78; pop rbp; ret; 
0x000000000040cbcf: push rdi; or bh, bh; ret 0x8966; 
0x0000000000408cb3: push rdi; or dword ptr [rax], eax; call rcx; 
0x0000000000408ca9: push rdi; or dword ptr [rax], eax; mov rax, rsi; lea rdx, [rip + 0x957b2]; call rcx; 
0x000000000041df65: push rdi; pop rsp; add dword ptr [rax], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000041bb90: push rdi; push -0xa; ret 0x7401; 
0x000000000040d8e3: push rdi; sbb byte ptr [rax - 0x75], cl; cmp cl, byte ptr [rax - 0x75]; and al, 0x70; mov rbx, rcx; call rdi; 
0x000000000046c9c8: push rdi; sub rsp, -0x80; pop rbp; ret; 
0x000000000046673b: push rdi; xor byte ptr [rax + 0x48ff3354], cl; mov eax, esi; add rsp, 0x70; pop rbp; ret; 
0x0000000000452632: push rdx; adc al, 0x38; sal byte ptr [rbx + 6], 1; mov eax, 1; ret; 
0x000000000042b22b: push rdx; adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x48; pop rbp; ret; 
0x000000000044f68f: push rdx; adc byte ptr [rax - 0x7f], cl; ret 0x418; 
0x0000000000403a53: push rdx; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8348; 
0x00000000004037ee: push rdx; add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000042d867: push rdx; add byte ptr [rax], al; call 0x32980; add rsp, 0x20; pop rbp; ret; 
0x0000000000474b05: push rdx; add rsp, 0x28; pop rbp; ret; 
0x0000000000478451: push rdx; add rsp, 0x38; pop rbp; ret; 
0x0000000000444d0a: push rdx; and byte ptr [rbx - 0x3d5cf0ee], cl; jae 0x44d1d; add rsp, 0x58; pop rbp; ret; 
0x0000000000464fc5: push rdx; jl 0x64feb; add rsp, 0x18; pop rbp; ret; 
0x000000000044deea: push rdx; mov ebp, 0xb60ffffe; and al, 0x13; add rsp, 0x38; pop rbp; ret; 
0x000000000040d2d0: push rdx; or byte ptr [rcx - 0xa], al; ret 0x7508; 
0x000000000040ec98: push rdx; or dh, dh; ret 0x7508; 
0x000000000044d1f2: push rdx; or eax, 0x149128b; rol dword ptr [rbx - 0x6bf00006], 1; ret 0xb60f; 
0x000000000042ba52: push rsi; adc byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000042b9bc: push rsi; adc byte ptr [rcx + 0x29], cl; ret 0x8d4d; 
0x000000000040375a: push rsi; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000417ae2: push rsi; add byte ptr [rax], al; add rsp, 0x68; pop rbp; ret; 
0x000000000047605c: push rsi; jmp qword ptr [rsi - 0x70]; 
0x000000000044cbee: push rsi; js 0x4cbf7; add byte ptr [rbx + 1], bh; add rsp, 0x28; pop rbp; ret; 
0x000000000040e0ac: push rsi; mov rcx, qword ptr [rdx]; mov edi, dword ptr [rbx + 0xc]; mov rax, r12; mov rbx, rdi; call rcx; 
0x0000000000436ab4: push rsi; mov rdx, qword ptr [rip + 0xeca2c]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000420606: push rsi; push rbp; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x000000000040d39d: push rsi; sbb byte ptr [rax - 0x75], cl; xor cl, byte ptr [rax - 0x75]; and al, 0x28; mov rbx, rcx; call rsi; 
0x000000000040d578: push rsi; sbb byte ptr [rax - 0x75], cl; xor cl, byte ptr [rax - 0x75]; and al, 0x30; mov rbx, rcx; call rsi; 
0x000000000044d580: push rsi; xor byte ptr [rax - 0x77], cl; ret; 
0x000000000044dbc3: push rsi; xor byte ptr [rcx - 0x77], cl; ret; 
0x000000000042b0a5: push rsp; adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x70; pop rbp; ret; 
0x000000000040517b: push rsp; add byte ptr [rax], al; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x000000000043bb22: push rsp; add dword ptr [rax], eax; call 0x50e60; add rsp, 8; pop rbp; ret; 
0x0000000000462e7d: push rsp; add edi, edi; add rsp, 0x48; pop rbp; ret; 
0x000000000045e80a: push rsp; and al, 0x10; mov r10, qword ptr [rsp + 0x18]; mov eax, 0xdf; syscall; 
0x000000000045e62b: push rsp; and al, 0x10; mov r10d, dword ptr [rsp + 0x14]; mov eax, 0x101; syscall; 
0x0000000000406f68: push rsp; and al, 0x10; mov rax, qword ptr [rdx]; call rax; 
0x000000000045e630: push rsp; and al, 0x14; mov eax, 0x101; syscall; 
0x000000000045e6aa: push rsp; and al, 0x18; mov eax, 0; syscall; 
0x000000000045e6aa: push rsp; and al, 0x18; mov eax, 0; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e84c: push rsp; and al, 0x18; mov eax, 0x1b; syscall; 
0x000000000045e84c: push rsp; and al, 0x18; mov eax, 0x1b; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045ee4c: push rsp; and al, 0x18; mov eax, 0xcc; syscall; 
0x000000000045ee4c: push rsp; and al, 0x18; mov eax, 0xcc; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e7eb: push rsp; and al, 0x18; mov eax, 0xde; syscall; 
0x000000000045e7eb: push rsp; and al, 0x18; mov eax, 0xde; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e80f: push rsp; and al, 0x18; mov eax, 0xdf; syscall; 
0x000000000045e80f: push rsp; and al, 0x18; mov eax, 0xdf; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e7cc: push rsp; and al, 0x18; mov eax, 0xea; syscall; 
0x000000000045e7cc: push rsp; and al, 0x18; mov eax, 0xea; syscall; ret; 
0x000000000045e68b: push rsp; and al, 0x18; mov eax, 1; syscall; 
0x000000000045e68b: push rsp; and al, 0x18; mov eax, 1; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000040c6aa: push rsp; and al, 0x18; mov qword ptr [rdx], rax; add rsp, 0x20; pop rbp; ret; 
0x000000000045e96c: push rsp; and al, 0x18; mov r10, qword ptr [rsp + 0x20]; mov eax, 0xd; syscall; 
0x000000000045e92b: push rsp; and al, 0x18; mov r10d, dword ptr [rsp + 0x20]; mov eax, 0xe; syscall; 
0x000000000045eccf: push rsp; and al, 0x18; mov r8, qword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; 
0x000000000045ecab: push rsp; and al, 0x18; mov rax, 0x1c; syscall; 
0x000000000045ecab: push rsp; and al, 0x18; mov rax, 0x1c; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x00000000004586b9: push rsp; and al, 0x18; mov rax, qword ptr [rdx]; nop; call rax; 
0x000000000042fb89: push rsp; and al, 0x18; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000045eb70: push rsp; and al, 0x1c; mov r8d, dword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x24]; mov eax, 9; syscall; 
0x0000000000402717: push rsp; and al, 0x1c; ret; 
0x000000000041e6d1: push rsp; and al, 0x20; add qword ptr [rdx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000045e971: push rsp; and al, 0x20; mov eax, 0xd; syscall; 
0x000000000045e971: push rsp; and al, 0x20; mov eax, 0xd; syscall; mov dword ptr [rsp + 0x28], eax; ret; 
0x000000000045e930: push rsp; and al, 0x20; mov eax, 0xe; syscall; 
0x0000000000450a15: push rsp; and al, 0x28; add qword ptr [rdx + 0x11e8], rax; add rsp, 0x30; pop rbp; ret; 
0x0000000000406f7c: push rsp; and al, 0x28; mov rax, qword ptr [rdx]; call rax; 
0x000000000045e9d4: push rsp; and al, 0x28; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x000000000045cd9b: push rsp; and al, 0x28; mov rdi, rbx; mov rcx, rbx; call rax; 
0x00000000004135a7: push rsp; and al, 0x28; xchg dword ptr [rdx + 0x4a8], ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000429e19: push rsp; and al, 0x30; mov qword ptr [rax + 0x28], rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000042395e: push rsp; and al, 0x30; mov qword ptr [rdx], rax; add rsp, 0x38; pop rbp; ret; 
0x000000000042ab95: push rsp; and al, 0x30; mov rax, qword ptr [rdx]; call rax; 
0x000000000045e994: push rsp; and al, 0x30; mov rax, qword ptr [rip + 0xc3d6a]; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x000000000043460d: push rsp; and al, 0x30; mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x0000000000450ab5: push rsp; and al, 0x38; mov byte ptr [rdx + 0x11e0], 0; add rsp, 0x40; pop rbp; ret; 
0x000000000043139f: push rsp; and al, 0x38; mov byte ptr [rdx], al; add rsp, 0x40; pop rbp; ret; 
0x0000000000461715: push rsp; and al, 0x40; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000479eaa: push rsp; and al, 0x40; mov rdx, qword ptr [rdx + 0x18]; mov rax, qword ptr [rsp + 0x188]; call rdx; 
0x000000000047844c: push rsp; and al, 0x48; mov byte ptr [r10 + 0x4c], dl; add rsp, 0x38; pop rbp; ret; 
0x0000000000475e52: push rsp; and al, 0x48; mov byte ptr [rdx + 0xe], cl; add rsp, 0x38; pop rbp; ret; 
0x000000000046172f: push rsp; and al, 0x48; mov rax, qword ptr [rdx]; call rax; 
0x0000000000452475: push rsp; and al, 0x50; mov eax, r8d; call rsi; 
0x0000000000436859: push rsp; and al, 0x68; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x000000000043688d: push rsp; and al, 0x68; mov rcx, qword ptr [rdx]; mov rax, qword ptr [rsp + 0x50]; call rcx; 
0x00000000004691c0: push rsp; and al, 0x74; mov byte ptr [rbx + rax - 1], dl; add rsp, 0x48; pop rbp; ret; 
0x000000000040272d: push rsp; and al, 0xc; ret; 
0x000000000045e757: push rsp; and al, 8; mov eax, 0xea; syscall; 
0x000000000045e757: push rsp; and al, 8; mov eax, 0xea; syscall; ret; 
0x000000000040a0f7: push rsp; and al, 8; mov rcx, qword ptr [rax]; mov rdx, rax; mov rax, rbx; call rcx; 
0x000000000045eecb: push rsp; call rax; 
0x000000000046a64b: push rsp; cli; adc byte ptr [rax + 1], cl; retf 0x894c; ret; 
0x000000000042ef08: push rsp; ret; 
0x000000000042920a: push rsp; sar dword ptr [rax - 0x7c], 1; add cl, byte ptr [rcx - 0x77]; ret 0x8141; 
0x000000000046673e: push rsp; xor edi, edi; mov rax, rsi; add rsp, 0x70; pop rbp; ret; 
0x00000000004014d1: pushfq; adc al, 0x84; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret 0x8949; 
0x0000000000447186: pushfq; adc dword ptr [rax + 4], esi; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x0000000000442e03: pushfq; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046b050: pushfq; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret; 
0x000000000042895c: pushfq; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 9], cl; ret; 
0x0000000000449ac9: pushfq; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0xc2e9; 
0x0000000000449b90: pushfq; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0xc984; 
0x0000000000455b5a: pushfq; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx - 0x75], al; adc byte ptr [r8 - 0x77], cl; ret; 
0x0000000000453220: pushfq; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004283c4: pushfq; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 9], cl; ret; 
0x000000000047c107: pushfq; and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret; 
0x0000000000475d80: pushfq; ret 0x2eb; 
0x00000000004725a8: pushfq; ret 0xa; 
0x0000000000410e22: pushfq; ret 0xc0; 
0x000000000043d71c: pushfq; ret 0xdd0; 
0x000000000043470f: pushfq; ret; 
0x0000000000456852: pushfq; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x0000000000403080: pushfq; xor rax, rax; ret; 
0x000000000045a65e: pxor mm0, mm1; pxor xmm15, xmm15; movq rax, xmm8; ret; 
0x000000000045a654: pxor mm0, mm2; pxor xmm9, xmm11; pxor xmm8, xmm9; pxor xmm15, xmm15; movq rax, xmm8; ret; 
0x000000000045a3b6: pxor mm1, mm0; aesenc xmm1, xmm1; aesenc xmm1, xmm1; aesenc xmm1, xmm1; movq rax, xmm1; ret; 
0x000000000045a659: pxor mm1, mm3; pxor xmm8, xmm9; pxor xmm15, xmm15; movq rax, xmm8; ret; 
0x000000000045a435: pxor mm2, mm3; movq rax, xmm2; ret; 
0x000000000045a4d7: pxor mm4, mm5; movq rax, xmm4; ret; 
0x000000000045a4cf: pxor mm4, mm6; pxor xmm5, xmm7; pxor xmm4, xmm5; movq rax, xmm4; ret; 
0x000000000045a4d3: pxor mm5, mm7; pxor xmm4, xmm5; movq rax, xmm4; ret; 
0x000000000045a663: pxor mm7, mm7; movq rax, xmm8; ret; 
0x000000000045df58: pxor mm7, mm7; ret; 
0x000000000045a3b5: pxor xmm1, xmm0; aesenc xmm1, xmm1; aesenc xmm1, xmm1; aesenc xmm1, xmm1; movq rax, xmm1; ret; 
0x000000000045a661: pxor xmm15, xmm15; movq rax, xmm8; ret; 
0x000000000045df56: pxor xmm15, xmm15; ret; 
0x000000000045a434: pxor xmm2, xmm3; movq rax, xmm2; ret; 
0x000000000045a4d6: pxor xmm4, xmm5; movq rax, xmm4; ret; 
0x000000000045a4ce: pxor xmm4, xmm6; pxor xmm5, xmm7; pxor xmm4, xmm5; movq rax, xmm4; ret; 
0x000000000045a4d2: pxor xmm5, xmm7; pxor xmm4, xmm5; movq rax, xmm4; ret; 
0x000000000045a652: pxor xmm8, xmm10; pxor xmm9, xmm11; pxor xmm8, xmm9; pxor xmm15, xmm15; movq rax, xmm8; ret; 
0x000000000045a65c: pxor xmm8, xmm9; pxor xmm15, xmm15; movq rax, xmm8; ret; 
0x000000000045a657: pxor xmm9, xmm11; pxor xmm8, xmm9; pxor xmm15, xmm15; movq rax, xmm8; ret; 
0x000000000044959e: rcl byte ptr [rax + 0x5c70eeb], 0xac; sti; or al, 0; add byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x0000000000423468: rcl byte ptr [rax - 0x973ea75], 1; str word ptr [rcx + 0xe281d7]; add byte ptr [rax], al; add byte ptr [rbp + 0x442875d2], 0x8d; add qword ptr [r9 - 0x77], r9; ret 0xf889; 
0x000000000047200a: rcl byte ptr [rcx - 0x76b7ffff], cl; ror dword ptr [rax - 0x73], 5; call 0xffffffffe8072b20; ret; 
0x000000000041f64e: rcl dword ptr [rax + 0x18874890], 0x48; add esp, 0x28; pop rbp; ret; 
0x00000000004433fe: rcl dword ptr [rax + 0x4dbe8], cl; add bl, ch; mov eax, 0x20c48348; pop rbp; ret; 
0x000000000042950e: rcl dword ptr [rax - 0x27f376b8], 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000418b48: rcl dword ptr [rax], 0x48; add esp, 0x18; pop rbp; ret; 
0x000000000042c00b: rcl dword ptr [rbx + 0x10], 0xff; ret 0xfa81; 
0x0000000000413ee5: rcl dword ptr [rbx], 1; add byte ptr [rax - 0x77], cl; ret 0x48f0; 
0x00000000004580ab: rcl dword ptr [rcx], 0x48; mov eax, dword ptr [rsp + 0x28]; add rsp, 0x38; pop rbp; ret; 
0x0000000000413eee: rcl dword ptr [rcx], 0xe8; mov eax, dword ptr [rcx]; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000419f12: rcl dword ptr [rdi], 0xff; ret 0x3d8b; 
0x000000000046c009: rcl dword ptr [rdx + rax + 0x4bb00], cl; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x000000000045ecb0: rcr byte ptr [rax + rax], 0; add byte ptr [rdi], cl; add eax, 0x20244489; ret; 
0x000000000045fdbc: rcr byte ptr [rax + rcx*2], 0x83; ret; 
0x0000000000405276: rcr byte ptr [rax - 0x70], 0xe8; push rbx; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x0000000000405ff6: rcr byte ptr [rax - 0x70], 0xe8; ret 0x45; 
0x0000000000430fab: rcr dword ptr [rcx], 1; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000045004d: rcr eax, 0x11; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000455002: rdtsc; ror byte ptr [rax - 0x7d], 0xc4; pop rbp; ret; 
0x000000000045ce29: rdtscp; shl rdx, 0x20; add rax, rdx; mov qword ptr [rsp + 8], rax; ret; 
0x000000000045dd6a: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040c986: ret 0; 
0x00000000004746e4: ret 0x1074; 
0x000000000044c425: ret 0x1076; 
0x000000000046cca2: ret 0x1089; 
0x0000000000416c6f: ret 0x10; 
0x00000000004181ea: ret 0x10b2; 
0x0000000000434cc2: ret 0x11b8; 
0x000000000043e25a: ret 0x125; 
0x00000000004230fa: ret 0x12fb; 
0x0000000000465149: ret 0x1488; 
0x0000000000408a46: ret 0x148; 
0x0000000000405679: ret 0x14af; 
0x000000000040df0d: ret 0x14eb; 
0x0000000000402589: ret 0x1588; 
0x0000000000469c5a: ret 0x1672; 
0x00000000004410c2: ret 0x177e; 
0x000000000047b587: ret 0x18e9; 
0x0000000000439803: ret 0x198; 
0x00000000004300d4: ret 0x1a72; 
0x0000000000441c5a: ret 0x1b2; 
0x00000000004266c8: ret 0x1b8; 
0x000000000042802e: ret 0x1d73; 
0x0000000000401b9b: ret 0x1f0f; 
0x000000000043b49a: ret 0x1fd; 
0x000000000041e95b: ret 0x1fff; 
0x0000000000436405: ret 0x2074; 
0x0000000000452731: ret 0x214c; 
0x0000000000408922: ret 0x257f; 
0x000000000041bb50: ret 0x284; 
0x0000000000451919: ret 0x2875; 
0x000000000043fc08: ret 0x2876; 
0x0000000000421f64: ret 0x2948; 
0x0000000000440d4b: ret 0x2949; 
0x000000000045e18b: ret 0x294c; 
0x0000000000465dc0: ret 0x294d; 
0x0000000000414462: ret 0x2975; 
0x00000000004143f2: ret 0x2976; 
0x000000000044975a: ret 0x29; 
0x0000000000401f30: ret 0x2ae8; 
0x0000000000421f8d: ret 0x2b7d; 
0x00000000004484fb: ret 0x2c6; 
0x0000000000469b21: ret 0x2e72; 
0x000000000041748c: ret 0x2eb; 
0x0000000000429ff0: ret 0x314d; 
0x000000000041522d: ret 0x349; 
0x0000000000468788: ret 0x34b; 
0x0000000000465365: ret 0x34d; 
0x000000000043d2c2: ret 0x3576; 
0x00000000004118b0: ret 0x387e; 
0x0000000000401cc8: ret 0x3948; 
0x00000000004076d0: ret 0x3949; 
0x0000000000456970: ret 0x394c; 
0x00000000004144e2: ret 0x3975; 
0x0000000000412c76: ret 0x39b8; 
0x0000000000431fdd: ret 0x3a0; 
0x000000000041184d: ret 0x3b7e; 
0x00000000004652c5: ret 0x3d73; 
0x000000000043db69: ret 0x3d80; 
0x000000000040d180: ret 0x3d83; 
0x0000000000419f15: ret 0x3d8b; 
0x00000000004267b7: ret 0x3e8; 
0x0000000000466180: ret 0x3eb; 
0x000000000046ca61: ret 0x3f; 
0x000000000041138e: ret 0x4000; 
0x00000000004302a7: ret 0x4090; 
0x000000000045a04b: ret 0x40b; 
0x000000000044f693: ret 0x418; 
0x00000000004304be: ret 0x4190; 
0x0000000000403323: ret 0x41f3; 
0x000000000041833d: ret 0x4230; 
0x00000000004598b0: ret 0x426; 
0x0000000000402120: ret 0x448b; 
0x000000000045a656: ret 0x4566; 
0x000000000046fb02: ret 0x456; 
0x00000000004645cd: ret 0x457e; 
0x000000000040639e: ret 0x4590; 
0x0000000000405ffa: ret 0x45; 
0x000000000046fc1a: ret 0x465; 
0x000000000042a7b9: ret 0x477e; 
0x000000000042a54e: ret 0x4802; 
0x000000000040ed00: ret 0x4804; 
0x000000000040f772: ret 0x4808; 
0x000000000040457e: ret 0x4810; 
0x0000000000403d32: ret 0x4818; 
0x00000000004503dc: ret 0x4820; 
0x000000000044bc31: ret 0x4828; 
0x000000000046b283: ret 0x4830; 
0x0000000000448a00: ret 0x4838; 
0x000000000040c51c: ret 0x4866; 
0x000000000041cdf3: ret 0x4876; 
0x0000000000401d7e: ret 0x4890; 
0x0000000000412252: ret 0x48c0; 
0x0000000000466c7f: ret 0x48c4; 
0x00000000004282c0: ret 0x48d0; 
0x00000000004370ad: ret 0x48e0; 
0x0000000000413eea: ret 0x48f0; 
0x000000000040cb78: ret 0x48f1; 
0x0000000000403c28: ret 0x48f3; 
0x000000000044407d: ret 0x48f8; 
0x0000000000409071: ret 0x48f9; 
0x0000000000408a38: ret 0x48fc; 
0x0000000000441021: ret 0x48fe; 
0x000000000041259b: ret 0x4908; 
0x000000000044a1fe: ret 0x4910; 
0x0000000000407932: ret 0x4914; 
0x000000000040ecaf: ret 0x4bfe; 
0x00000000004682b0: ret 0x4c08; 
0x000000000044a108: ret 0x4c10; 
0x000000000042a1f1: ret 0x4c30; 
0x0000000000411ef2: ret 0x4c40; 
0x0000000000478cdb: ret 0x4c90; 
0x0000000000449efd: ret 0x4cb; 
0x000000000041250d: ret 0x4cf8; 
0x000000000047166a: ret 0x4d20; 
0x0000000000476642: ret 0x4d7d; 
0x000000000043f9d9: ret 0x4eb; 
0x000000000044f6a2: ret 0x537d; 
0x000000000044275e: ret 0x53c; 
0x0000000000421d10: ret 0x5488; 
0x000000000043f795: ret 0x560; 
0x000000000040419a: ret 0x570; 
0x000000000040c514: ret 0x570f; 
0x000000000042d3ca: ret 0x58b; 
0x0000000000415b65: ret 0x5eb; 
0x000000000043533a: ret 0x604; 
0x000000000046f228: ret 0x60; 
0x000000000041cde6: ret 0x6348; 
0x000000000043c394: ret 0x6349; 
0x00000000004787d6: ret 0x6473; 
0x0000000000411052: ret 0x6576; 
0x0000000000451b56: ret 0x675; 
0x0000000000477ba8: ret 0x6873; 
0x00000000004670c3: ret 0x6945; 
0x0000000000428794: ret 0x6e8; 
0x0000000000444386: ret 0x6eb; 
0x0000000000424bb2: ret 0x712; 
0x000000000044bebc: ret 0x737f; 
0x0000000000409901: ret 0x7401; 
0x00000000004012f2: ret 0x7402; 
0x000000000045571b: ret 0x7404; 
0x000000000046a28d: ret 0x7420; 
0x000000000040912c: ret 0x7501; 
0x000000000043aa13: ret 0x7502; 
0x000000000040f181: ret 0x7504; 
0x00000000004357a1: ret 0x7507; 
0x000000000040d2d4: ret 0x7508; 
0x000000000046cee8: ret 0x7520; 
0x000000000044d123: ret 0x7580; 
0x00000000004713df: ret 0x776; 
0x0000000000434b77: ret 0x77c; 
0x0000000000449544: ret 0x784; 
0x000000000041ce00: ret 0x7883; 
0x000000000041bf75: ret 0x794; 
0x000000000041cc7a: ret 0x796; 
0x000000000042061f: ret 0x7b7; 
0x0000000000407dda: ret 0x7be; 
0x0000000000407cda: ret 0x7c1; 
0x00000000004234ac: ret 0x7c89; 
0x000000000043b42f: ret 0x7eb; 
0x0000000000440a65: ret 0x7ee9; 
0x000000000042dd74: ret 0x80bb; 
0x0000000000429211: ret 0x8141; 
0x00000000004502b3: ret 0x8148; 
0x000000000046de3f: ret 0x8149; 
0x0000000000419a12: ret 0x820; 
0x0000000000408914: ret 0x820f; 
0x0000000000447a88: ret 0x830f; 
0x0000000000412cbd: ret 0x8341; 
0x0000000000403a58: ret 0x8348; 
0x00000000004650b9: ret 0x83d0; 
0x000000000041a482: ret 0x840f; 
0x0000000000439818: ret 0x8445; 
0x0000000000405a1e: ret 0x8490; 
0x000000000041c21b: ret 0x84; 
0x00000000004485af: ret 0x850f; 
0x000000000041c884: ret 0x8548; 
0x0000000000428509: ret 0x854d; 
0x0000000000457315: ret 0x85e8; 
0x00000000004245d6: ret 0x860f; 
0x00000000004155bc: ret 0x864; 
0x000000000040af8a: ret 0x870f; 
0x000000000040afff: ret 0x8748; 
0x0000000000416b9f: ret 0x8830; 
0x000000000046b50b: ret 0x8845; 
0x00000000004130b2: ret 0x8903; 
0x0000000000468363: ret 0x8941; 
0x000000000044d184: ret 0x8945; 
0x00000000004037ca: ret 0x8948; 
0x00000000004014d9: ret 0x8949; 
0x000000000041a904: ret 0x894c; 
0x000000000040ce8a: ret 0x894d; 
0x000000000040cb6a: ret 0x8966; 
0x000000000047c319: ret 0x89eb; 
0x0000000000413d38: ret 0x8a40; 
0x0000000000403237: ret 0x8b41; 
0x000000000043dad5: ret 0x8b44; 
0x00000000004015b5: ret 0x8b48; 
0x00000000004032a4: ret 0x8b49; 
0x0000000000413b7a: ret 0x8b4c; 
0x000000000043cfd3: ret 0x8b4d; 
0x0000000000402b50: ret 0x8d43; 
0x0000000000408db4: ret 0x8d48; 
0x0000000000429cf0: ret 0x8d49; 
0x00000000004765cf: ret 0x8d4b; 
0x0000000000406684: ret 0x8d4c; 
0x000000000042b9c0: ret 0x8d4d; 
0x000000000040cabe: ret 0x8d4f; 
0x0000000000404cf5: ret 0x8eb; 
0x00000000004119b6: ret 0x9008; 
0x0000000000404cfd: ret 0x9066; 
0x0000000000419b15: ret 0x9090; 
0x0000000000412a98: ret 0x90f8; 
0x0000000000403f74: ret 0x940f; 
0x000000000046788b: ret 0x944; 
0x000000000044d172: ret 0x945; 
0x000000000041192a: ret 0x948; 
0x000000000041dc76: ret 0x976; 
0x00000000004357b4: ret 0x9788; 
0x0000000000403f82: ret 0x9b0f; 
0x000000000044290d: ret 0x9c74; 
0x0000000000405a3b: ret 0x9eb; 
0x0000000000444d10: ret 0xa73; 
0x000000000040cbca: ret 0xa75; 
0x0000000000474ac9: ret 0xa948; 
0x00000000004746ea: ret 0xa9f; 
0x0000000000472576: ret 0xa; 
0x0000000000472672: ret 0xac1; 
0x0000000000405a13: ret 0xaeb; 
0x000000000043de07: ret 0xafeb; 
0x000000000046bada: ret 0xb2e; 
0x000000000042755a: ret 0xb3; 
0x00000000004764a7: ret 0xb3e8; 
0x000000000040d9c3: ret 0xb60f; 
0x0000000000418238: ret 0xb848; 
0x000000000042e5d5: ret 0xb8; 
0x0000000000419b62: ret 0xba; 
0x0000000000423f9a: ret 0xbb41; 
0x000000000042de17: ret 0xbb; 
0x000000000040af39: ret 0xbe48; 
0x0000000000406386: ret 0xc031; 
0x0000000000467eb2: ret 0xc084; 
0x0000000000410e17: ret 0xc0; 
0x000000000046143b: ret 0xc141; 
0x000000000040c50a: ret 0xc148; 
0x0000000000412199: ret 0xc149; 
0x00000000004033b2: ret 0xc1c4; 
0x0000000000449ad1: ret 0xc2e9; 
0x0000000000464a95: ret 0xc4e9; 
0x000000000040de82: ret 0xc6e9; 
0x00000000004209b9: ret 0xc748; 
0x0000000000449b98: ret 0xc984; 
0x000000000040377d: ret 0xcccc; 
0x000000000042a7ec: ret 0xd089; 
0x000000000044785d: ret 0xd148; 
0x00000000004765aa: ret 0xd149; 
0x00000000004413f9: ret 0xd1ff; 
0x0000000000446ac7: ret 0xd231; 
0x0000000000405a46: ret 0xd284; 
0x00000000004676e0: ret 0xd348; 
0x00000000004468be: ret 0xd349; 
0x000000000047be79: ret 0xd47; 
0x00000000004392a7: ret 0xd7e; 
0x00000000004565a1: ret 0xda38; 
0x000000000040a2f9: ret 0xdb31; 
0x0000000000423c8c: ret 0xdc8; 
0x000000000043d71d: ret 0xdd0; 
0x000000000041d6bd: ret 0xe083; 
0x000000000046298a: ret 0xe183; 
0x000000000041374d: ret 0xe281; 
0x000000000040dd83: ret 0xe283; 
0x000000000042822d: ret 0xe681; 
0x0000000000467441: ret 0xe8d3; 
0x000000000043716d: ret 0xe; 
0x0000000000444247: ret 0xeac1; 
0x0000000000425a1e: ret 0xeb90; 
0x00000000004516a2: ret 0xf02; 
0x000000000045763c: ret 0xf089; 
0x0000000000403c17: ret 0xf08; 
0x00000000004102b9: ret 0xf10; 
0x0000000000411c04: ret 0xf40; 
0x000000000040d7ac: ret 0xf44; 
0x0000000000449b1e: ret 0xf45; 
0x000000000041cdcf: ret 0xf48; 
0x0000000000420d61: ret 0xf49; 
0x000000000040169e: ret 0xf4d; 
0x000000000041d371: ret 0xf631; 
0x0000000000401285: ret 0xf641; 
0x0000000000403060: ret 0xf66; 
0x000000000044a7ea: ret 0xf748; 
0x00000000004284f2: ret 0xf749; 
0x0000000000458262: ret 0xf81; 
0x0000000000423482: ret 0xf889; 
0x00000000004033fc: ret 0xf8c5; 
0x000000000047365a: ret 0xf966; 
0x000000000047275a: ret 0xf975; 
0x000000000043d6ca: ret 0xf; 
0x000000000042c00f: ret 0xfa81; 
0x000000000045651a: ret 0xfaad; 
0x000000000045903a: ret 0xfb13; 
0x0000000000442c04: ret 0xfb; 
0x000000000040c531: ret 0xfc01; 
0x000000000044b13a: ret 0xfc5b; 
0x0000000000438cfa: ret 0xfd18; 
0x0000000000402f86: ret 0xfdc5; 
0x0000000000412a8d: ret 0xfde9; 
0x000000000044be5a: ret 0xfe6a; 
0x000000000047359a: ret 0xfe7c; 
0x00000000004282fa: ret 0xfebc; 
0x0000000000443a9a: ret 0xfef0; 
0x000000000040c577: ret 0xff2; 
0x000000000047ace6: ret 0xff3; 
0x0000000000464c30: ret 0xff49; 
0x0000000000478aba: ret 0xffdf; 
0x00000000004704da: ret 0xffea; 
0x000000000044ca42: ret 0xfffa; 
0x000000000041cd1a: ret 0xfffb; 
0x000000000043e3a3: ret 0xfffc; 
0x0000000000402d5a: ret 0xfffd; 
0x000000000041e162: ret 0xfffe; 
0x0000000000401ad7: ret 0xffff; 
0x000000000040e2e6: ret 1; 
0x000000000042efa9: ret 2; 
0x0000000000462012: ret 3; 
0x0000000000449e8c: ret 4; 
0x000000000040104c: ret 5; 
0x0000000000446110: ret 6; 
0x0000000000407d63: ret 7; 
0x0000000000401032: ret; 
0x000000000045ecdd: retf 0; add byte ptr [rdi], cl; add eax, 0x30244489; ret; 
0x0000000000462c7c: retf 0x1074; mov eax, 0xfffd; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x000000000044ae9c: retf 0x14c; ret 0x8949; 
0x00000000004484e3: retf 0x2948; ret 0x8b48; 
0x000000000043285e: retf 0x2949; ret 0x8949; 
0x0000000000421f8a: retf 0x3948; ret 0x2b7d; 
0x000000000045e8f4: retf 0x3b9a; add rax, rdx; mov qword ptr [rsp + 0x20], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000042c42f: retf 0x498; add byte ptr [rax], al; add rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x000000000046fa01: retf 0x8148; leave; xchg eax, edi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000442066: retf 0x820f; add r8b, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x820f; 
0x0000000000441fe2: retf 0x820f; xlatb; add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x820f; 
0x0000000000408a35: retf 0x8348; ret 0x48fc; 
0x0000000000469093: retf 0x8844; add r15d, edi; mov rcx, rdx; add rsp, 0x88; pop rbp; ret; 
0x0000000000456eaf: retf 0x8880; push rax; add bh, byte ptr [rax + 3]; add rsp, 0x10; pop rbp; ret; 
0x0000000000462e7a: retf 0x8880; push rsp; add edi, edi; add rsp, 0x48; pop rbp; ret; 
0x0000000000467894: retf 0x8941; ret 0x8948; 
0x0000000000454d68: retf 0x8948; clc; call rsi; 
0x0000000000454d68: retf 0x8948; clc; call rsi; add rsp, 0x10; pop rbp; ret; 
0x0000000000412629: retf 0x8948; fimul word ptr [rcx - 0x77]; ret; 
0x0000000000412792: retf 0x8948; fisttp word ptr [rcx - 0x77]; ret; 
0x00000000004733e8: retf 0x8948; ret 0x8948; 
0x000000000041e404: retf 0x8948; ret; 
0x000000000041d39f: retf 0x8948; ror byte ptr [rax - 0x77], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000046a650: retf 0x894c; ret; 
0x000000000041034a: retf 0x8d48; add al, 0xe; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x000000000045810e: retf 0x930f; shr ebx, 2; xor ecx, ecx; mov eax, ecx; ret; 
0x0000000000429545: retf 0x948; adc al, 0xf0; add rsp, 0x10; pop rbp; ret; 
0x000000000042a7fd: retf 0x9f0f; ret 0x8eb; 
0x000000000046c12d: retf 0xb60f; sbb esi, esi; ret; 
0x00000000004731ce: retf 0xc975; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000464756: retf 0xcc7f; add rsp, 0x78; pop rbp; ret; 
0x0000000000403f87: retf 0xd021; ret; 
0x00000000004629b8: retf 0xd089; mov ebx, 3; add rsp, 0x10; pop rbp; ret; 
0x000000000042c707: retf 0xd47c; add rax, 0x1268; call 0x2c600; add rsp, 0x38; pop rbp; ret; 
0x0000000000408dac: retf 0xdee9; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000445702: retf 0xe808; xchg eax, edi; cld; dec dword ptr [rax - 0x77]; ret; 
0x0000000000436ab9: retf 0xe; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x000000000040dee3: retf 0xf47; mov dh, 0x1c; add dword ptr [rcx - 0x7d], eax; ret; 
0x0000000000441359: retf 0xf48; mov edx, 0x894821e9; ret; 
0x0000000000411930: retf 0xf748; ret 7; 
0x000000000040c5bc: retf 0xff2; pop rcx; sal edx, 0xf; sub al, 0xc0; inc eax; ret; 
0x000000000047a677: retf 0xff3; pop rdx; ret; 
0x0000000000410f23: retf 4; add rsp, 0x18; pop rbp; ret; 
0x0000000000410f71: retf 4; add rsp, 0x20; pop rbp; ret; 
0x0000000000433825: retf; adc dword ptr [rax], eax; add byte ptr [rbp + 0x21], dh; mov rax, qword ptr [rip + 0x6aa6e]; lea rdx, [rip + 0x6aa67]; call rax; 
0x00000000004014cd: retf; add byte ptr [rsi - 0x78], 0x9c; adc al, 0x84; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret 0x8949; 
0x000000000042b46a: retf; add rsp, 0x10; pop rbp; ret; 
0x000000000046d49a: retf; add rsp, 0x18; pop rbp; ret; 
0x0000000000409fea: retf; add rsp, 0x20; pop rbp; ret; 
0x000000000042e32b: retf; add rsp, 0x38; pop rbp; ret; 
0x0000000000403647: retf; add rsp, 0x40; pop rbp; ret; 
0x0000000000468a37: retf; add rsp, 0x88; pop rbp; ret; 
0x000000000040b1c7: retf; add rsp, 0x90; pop rbp; ret; 
0x000000000040c473: retf; call 0x2a480; add rsp, 0x28; pop rbp; ret; 
0x0000000000403c48: retf; call 0x3780; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c59: retf; call 0x3860; add rsp, 0x60; pop rbp; ret; 
0x0000000000403c6a: retf; call 0x3940; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cb4: retf; call 0x3a00; add rsp, 0x60; pop rbp; nop; ret; 
0x0000000000403ca3: retf; call 0x3b00; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cc6: retf; call 0x5ce80; add rsp, 0x60; pop rbp; ret; 
0x0000000000403cf7: retf; call 0x5cee0; add rsp, 0x60; pop rbp; ret; 
0x0000000000410f20: retf; call 0x5d9c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000467d75: retf; call 0x68040; add rsp, 0x88; pop rbp; ret; 
0x00000000004783c8: retf; call 0x77e20; add rsp, 0x10; pop rbp; ret; 
0x00000000004788f2: retf; call 0x77e20; add rsp, 0x50; pop rbp; ret; 
0x000000000040d8ef: retf; call rdi; 
0x0000000000404143: retf; call rsi; 
0x0000000000404143: retf; call rsi; add rsp, 0x28; pop rbp; ret; 
0x000000000044a742: retf; ja 0x4a755; add rsp, 0x20; pop rbp; ret; 
0x000000000044cb22: retf; jb 0x4cb2e; mov rbx, rcx; add rsp, 0x38; pop rbp; ret; 
0x0000000000440624: retf; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000040b8a6: retf; mov ecx, edx; add rsp, 0x38; pop rbp; ret; 
0x0000000000427242: retf; mov rax, r11; lea rdx, [rsp + 0x110]; call rdi; 
0x000000000046ea5b: retf; mov rcx, r8; add rsp, 0x38; pop rbp; ret; 
0x0000000000476319: retf; mov rcx, rdi; add rsp, 0x28; pop rbp; ret; 
0x0000000000403d08: retf; mov rcx, rdx; call 0x5ce60; add rsp, 0x60; pop rbp; ret; 
0x0000000000410cb3: retf; mov rcx, rdx; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x00000000004647d4: retf; mov rcx, rsi; call rdx; 
0x0000000000403c7b: retf; nop dword ptr [rax]; call 0x39a0; add rsp, 0x60; pop rbp; ret; 
0x00000000004510fc: retf; nop dword ptr [rax]; call 0x4c120; add rsp, 0x18; pop rbp; ret; 
0x0000000000403d1c: retf; nop dword ptr [rax]; call 0x5cea0; add rsp, 0x60; pop rbp; ret; 
0x000000000040c7de: retf; nop; call 0x13ec0; add rsp, 0x40; pop rbp; ret; 
0x000000000045f021: retf; pop rbp; ret; 
0x000000000045a65b: retf; pxor xmm8, xmm9; pxor xmm15, xmm15; movq rax, xmm8; ret; 
0x0000000000418a59: retf; ret; 
0x0000000000404131: retf; sete al; add rsp, 0x28; pop rbp; ret; 
0x0000000000403f7f: retf; sete dl; setnp cl; and edx, ecx; and eax, edx; ret; 
0x000000000046a3cc: retf; sub rsp, -0x80; pop rbp; ret; 
0x0000000000410f70: retfq 4; add rsp, 0x20; pop rbp; ret; 
0x0000000000410cb9: rol byte ptr [rax + rax], 1; add rsp, 0x18; pop rbp; ret; 
0x000000000041887e: rol byte ptr [rax + rdx*4], 0x90; xor ecx, ecx; xchg byte ptr [rax], cl; ret; 
0x000000000041257f: rol byte ptr [rax], 0; add al, ch; mov eax, 0x48fffffb; add esp, 0xa8; pop rbp; ret; 
0x0000000000478c44: rol byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004485a1: rol byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; test byte ptr [rax + rsi*8], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000478bf2: rol byte ptr [rax], 0; add byte ptr [rbp - 0x7b], cl; sal byte ptr [rdx + rbp*2 + 0x48], 0xff; ret; 
0x0000000000429622: rol byte ptr [rax], 1; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000043bcfe: rol byte ptr [rax], 1; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x5488; 
0x0000000000457ed5: rol byte ptr [rax], 1; add byte ptr [rax], al; call 0x2c680; add rsp, 8; pop rbp; ret; 
0x000000000043baed: rol byte ptr [rax], 1; add byte ptr [rax], al; inc dword ptr [rax + 0x14]; add rsp, 0x20; pop rbp; ret; 
0x00000000004598ce: rol byte ptr [rax], 1; add byte ptr [rax], al; movsxd rax, dword ptr [rcx]; ret; 
0x0000000000465bfb: rol byte ptr [rbx], 1; add byte ptr [rax], al; pop rbp; ret; 
0x000000000042f6e0: rol byte ptr [rcx - 0x3a], 0x40; add dword ptr [rcx], eax; mov rax, r8; add rsp, 0x58; pop rbp; ret; 
0x000000000044d175: rol byte ptr [rcx - 0xa], 1; ret; 
0x0000000000403147: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x0000000000419557: rol byte ptr [rcx], 0; add rsp, 0x40; pop rbp; nop; ret; 
0x000000000047a9e2: rol byte ptr [rcx], 1; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000406565: rol byte ptr [rdi - 0x3b7cb7fe], 0x18; pop rbp; ret; 
0x000000000044fd3e: rol byte ptr [rdi - 0x3b7cb7fe], 0x60; pop rbp; ret; 
0x00000000004635aa: rol byte ptr [rdx], cl; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x0000000000403961: rol dword ptr [rax + rcx*2], 0x89; ret; 
0x000000000042ae3f: rol dword ptr [rax], 0; add byte ptr [rax], al; add rsp, 0x190; pop rbp; ret; 
0x000000000045af4a: rol dword ptr [rax], 0; add byte ptr [rax], al; call rax; 
0x00000000004036f0: rol dword ptr [rax], 0; add byte ptr [rax], al; ret; 
0x000000000045146c: rol dword ptr [rax], 0; mov rbp, qword ptr [rbp]; add rsp, 0x1e0; pop rbp; ret; 
0x000000000042c609: rol dword ptr [rax], 0x10; add byte ptr [rax], al; mov qword ptr [rax + 8], rcx; ret; 
0x000000000046d494: rol dword ptr [rax], 1; add byte ptr [rax], al; mov rbx, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000415bd3: rol dword ptr [rbp - 0x3f60f037], 1; add rsp, 8; pop rbp; ret; 
0x00000000004303d4: rol dword ptr [rbp - 0x7c], 1; ret; 
0x000000000044d1f8: rol dword ptr [rbx - 0x6bf00006], 1; ret 0xb60f; 
0x0000000000449bd0: rol dword ptr [rbx - 0x6bf00006], cl; ret 0xb60f; 
0x00000000004636e6: rol dword ptr [rcx + rcx*4 + 0x4c], 0xb4; and byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000417f46: rol dword ptr [rcx + rcx*8 - 0x6f17388c], 0x23; add dword ptr [rax], eax; add rsp, 0x18; pop rbp; ret; 
0x000000000041a2ff: rol dword ptr [rcx], 0x48; add esp, 0x28; pop rbp; ret; 
0x0000000000436ff7: rol dword ptr [rcx], 0x48; add esp, 0x48; pop rbp; ret; 
0x000000000044d4d1: rol dword ptr [rdx + 0x22a0], 0x48; add esp, 0x48; pop rbp; ret; 
0x00000000004614ed: rol dword ptr [rdx], 0x48; add esp, 0x40; pop rbp; ret; 
0x00000000004225b0: rol dword ptr [rdx], 0x48; mov dword ptr [rcx + 0x18], 0; add rsp, 8; pop rbp; nop; ret; 
0x00000000004584aa: rol dword ptr [rdx], 0xc6; and dword ptr [rax + 0x12], 0x48000000; add esp, 8; pop rbp; ret; 
0x0000000000451915: rol dword ptr [rdx], 0xf; xchg eax, esp; ret 0x2875; 
0x000000000040630c: ror byte ptr [rax + 0x14a0fd05], 0; ret; 
0x000000000040dd80: ror byte ptr [rax + 0x21], cl; ret 0xe283; 
0x00000000004035c9: ror byte ptr [rax + 0x29], cl; test dword ptr [rax + 1], 0x108949fa; vzeroupper; ret; 
0x0000000000402ecd: ror byte ptr [rax + 0x31], 0xc9; cmp rbx, rdx; setg al; sete cl; lea rax, [rcx + rax*2 - 1]; ret; 
0x000000000044a989: ror byte ptr [rax + 0x39], 1; div dword ptr [rbx - 0x3f]; xor eax, eax; xor ebx, ebx; ret; 
0x000000000041e1a5: ror byte ptr [rax + 0x39], 1; ret; 
0x0000000000464a33: ror byte ptr [rax + 0xeb9cf05], 0; ret; 
0x000000000041e1a2: ror byte ptr [rax + 1], 1; ror byte ptr [rax + 0x39], 1; ret; 
0x0000000000431173: ror byte ptr [rax - 0x39], 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x0000000000431303: ror byte ptr [rax - 0x39], 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x40; pop rbp; ret; 
0x000000000045eb91: ror byte ptr [rax - 0x39], 0x44; and al, 0x28; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x30], rax; ret; 
0x000000000041542b: ror byte ptr [rax - 0x73], 0x1d; adc esp, dword ptr [rdx + 8]; add al, ch; mov byte ptr [rdi + 3], cl; add al, ch; ret; 
0x000000000046bf11: ror byte ptr [rax - 0x73], 0x1d; imul esp, esi, 2; add al, ch; add ah, ah; std; jmp qword ptr [rsi - 0x70]; 
0x0000000000444700: ror byte ptr [rax - 0x73], 0xd; insb byte ptr [rdi], dx; mov ebp, 0x1870010; add rsp, 0x20; pop rbp; ret; 
0x000000000040642d: ror byte ptr [rax - 0x73], 0xd; movsxd rsp, dword ptr [rcx + 0x1870014]; add rsp, 0x58; pop rbp; ret; 
0x0000000000447565: ror byte ptr [rax - 0x73], cl; sbb al, 0x11; mov rax, rcx; add rsp, 0x68; pop rbp; ret; 
0x000000000041d047: ror byte ptr [rax - 0x75], 0x5c; and al, 0x10; add rsp, 0x28; pop rbp; ret; 
0x0000000000459113: ror byte ptr [rax - 0x75], 0x5c; and al, 0x20; add rsp, 0x30; pop rbp; ret; 
0x000000000045ec85: ror byte ptr [rax - 0x75], 1; and al, 0x24; add rsp, 0x10; pop rbp; ret; 
0x000000000045ebf7: ror byte ptr [rax - 0x75], 1; and al, 0x24; mov qword ptr [rsp + 0x40], rax; add rsp, 0x10; pop rbp; ret; 
0x0000000000419eed: ror byte ptr [rax - 0x75], 1; je 0x19f16; push -0x6f69fcb8; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000046362a: ror byte ptr [rax - 0x77], 0xc8; add rsp, 0x30; pop rbp; ret; 
0x0000000000468a34: ror byte ptr [rax - 0x77], 0xcb; add rsp, 0x88; pop rbp; ret; 
0x0000000000418a56: ror byte ptr [rax - 0x77], 0xcb; ret; 
0x000000000044d254: ror byte ptr [rax - 0x77], 0xd0; add rsp, 0x58; pop rbp; ret; 
0x00000000004113ec: ror byte ptr [rax - 0x77], 0xd3; mov rcx, rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000463f91: ror byte ptr [rax - 0x77], 0xd3; mov rcx, rsi; add rsp, 0x28; pop rbp; ret; 
0x00000000004745f2: ror byte ptr [rax - 0x77], 0xd3; mov rcx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004747cb: ror byte ptr [rax - 0x77], 0xd3; mov rcx, rsi; add rsp, 0x50; pop rbp; ret; 
0x000000000041cf4b: ror byte ptr [rax - 0x77], 0xf3; add rsp, 0x28; pop rbp; ret; 
0x00000000004078bf: ror byte ptr [rax - 0x77], 0xfb; mov rcx, r8; call 0x4a6a0; add rsp, 0x140; pop rbp; ret; 
0x0000000000418a5c: ror byte ptr [rax - 0x77], 0xfb; ret; 
0x000000000041d3a2: ror byte ptr [rax - 0x77], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045e8f9: ror byte ptr [rax - 0x77], 1; and al, 0x20; add rsp, 0x10; pop rbp; ret; 
0x000000000045ce32: ror byte ptr [rax - 0x77], 1; and al, 8; ret; 
0x00000000004040c4: ror byte ptr [rax - 0x77], 1; call 0x4100; add rsp, 0x18; pop rbp; ret; 
0x0000000000404064: ror byte ptr [rax - 0x77], 1; call 0x41c0; add rsp, 0x18; pop rbp; ret; 
0x00000000004771d0: ror byte ptr [rax - 0x77], 1; call 0x75420; add rsp, 0xd8; pop rbp; ret; 
0x000000000045e9a6: ror byte ptr [rax - 0x77], 1; fmul qword ptr [rcx + 0x48382444]; add esp, 0x10; pop rbp; ret; 
0x000000000041f52c: ror byte ptr [rax - 0x77], 1; ret; 
0x000000000044c42e: ror byte ptr [rax - 0x77], 1; retf; add rsp, 0x10; pop rbp; ret; 
0x000000000044a7f8: ror byte ptr [rax - 0x77], 1; ror dword ptr [rax - 0x77], 0xfe; mov rdi, rbx; add rsp, 0x18; pop rbp; ret; 
0x0000000000460aa8: ror byte ptr [rax - 0x77], cl; ror dword ptr [rcx - 0xf76b73f], cl; add rsp, 0x30; pop rbp; ret; 
0x000000000042a449: ror byte ptr [rax - 0x7b], 1; leave; jne 0x2a3e9; add rsp, 0x20; pop rbp; ret; 
0x000000000042c1e8: ror byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], cl; mov eax, edx; add rsp, 0x18; pop rbp; ret; 
0x0000000000454979: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbp - 0x70], bl; ret; 
0x0000000000409139: ror byte ptr [rax - 0x7d], 0xc4; cmp byte ptr [rbp - 0x70], bl; ret; 
0x0000000000457816: ror byte ptr [rax - 0x7d], 0xc4; jo 0x57879; ret; 
0x00000000004578b3: ror byte ptr [rax - 0x7d], 0xc4; jo 0x57916; ret; 
0x00000000004578e2: ror byte ptr [rax - 0x7d], 0xc4; jo 0x57945; ret; 
0x000000000041ec8a: ror byte ptr [rax - 0x7d], 0xc4; js 0x1eced; ret; 
0x00000000004639a5: ror byte ptr [rax - 0x7d], 0xc4; js 0x63a08; ret; 
0x00000000004639e7: ror byte ptr [rax - 0x7d], 0xc4; js 0x63a4a; ret; 
0x000000000046aaec: ror byte ptr [rax - 0x7d], 0xc4; js 0x6ab4f; ret; 
0x000000000042f6e8: ror byte ptr [rax - 0x7d], 0xc4; pop rax; pop rbp; ret; 
0x000000000046ff79: ror byte ptr [rax - 0x7d], 0xc4; pop rbp; nop; ret; 
0x0000000000402c25: ror byte ptr [rax - 0x7d], 0xc4; pop rbp; ret; 
0x000000000045f8b9: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbp - 0x70], bl; ret; 
0x0000000000404134: ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbp - 0x3d], bl; mov rsi, qword ptr [rdx]; mov rax, rbx; mov rbx, rcx; call rsi; 
0x000000000043c352: ror byte ptr [rax - 0x7f], 0xc4; adc byte ptr [rdx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000046a552: ror byte ptr [rax - 0x7f], 0xc4; add byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004565b6: ror byte ptr [rax - 0x7f], 0xc4; and byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; nop; ret; 
0x00000000004276be: ror byte ptr [rax - 0x7f], 0xc4; and byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000471116: ror byte ptr [rax - 0x7f], 0xc4; or byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; nop; ret; 
0x000000000044b210: ror byte ptr [rax - 0x7f], 0xc4; or byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000041a5c6: ror byte ptr [rax - 0x7f], 0xc4; sub byte ptr [rbx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000470b39: ror byte ptr [rax - 0x7f], 0xc4; sub byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000408e4e: ror byte ptr [rax - 9], 1; out 0x48, eax; xor eax, edx; ret; 
0x0000000000446ac9: ror byte ptr [rax - 9], cl; test dword ptr [rax + 0xf], 0x894cf8af; ret; 
0x000000000045ed42: ror byte ptr [rax], 0x48; or edi, 0x80000; mov eax, 0x38; syscall; 
0x0000000000423b86: ror byte ptr [rbp + 0x39], 1; ret; 
0x0000000000440d40: ror byte ptr [rbp + rcx*4 + 0xc], cl; adc ecx, dword ptr [rbp - 0x73]; add cl, byte ptr [r13 - 0x77]; ret 0x2949; 
0x0000000000449c49: ror byte ptr [rbp - 0x77], 0xc1; add rsp, 0xd8; pop rbp; ret; 
0x000000000042d1a3: ror byte ptr [rbp - 0x77], 0xc1; call 0x36c0; mov rax, rcx; add rsp, 0x50; pop rbp; ret; 
0x0000000000449c23: ror byte ptr [rbp - 0x77], 0xc1; mov eax, dword ptr [rsp + 0x2c]; mov rbx, qword ptr [rsp + 0xc8]; add rsp, 0xd8; pop rbp; ret; 
0x0000000000465d36: ror byte ptr [rbp - 0x77], cl; ret 0x8b4c; 
0x000000000040de7f: ror byte ptr [rbp - 0x77], cl; ret 0xc6e9; 
0x000000000040de77: ror byte ptr [rbp - 0x7b], cl; sal byte ptr [rbx + rcx + 0x4c], 0x89; ror byte ptr [rbp - 0x77], cl; ret 0xc6e9; 
0x0000000000452ebe: ror byte ptr [rbx + rcx*4 + 0x44], 0x24; xor byte ptr [rcx + rdi - 0x40], cl; jl 0x52e4e; add rsp, 0x300; pop rbp; ret; 
0x000000000045ec2c: ror byte ptr [rbx], 0; add byte ptr [rax], al; syscall; 
0x0000000000440f46: ror byte ptr [rcx + 0x39], 1; ret; 
0x00000000004674fa: ror byte ptr [rcx + rcx*4 + 0x42], 0x20; add rsp, 0x38; pop rbp; ret; 
0x000000000046779a: ror byte ptr [rcx + rcx*4 + 0x42], 0x20; add rsp, 0x40; pop rbp; ret; 
0x000000000046ea58: ror byte ptr [rcx + rcx*4 - 0x35], 1; mov rcx, r8; add rsp, 0x38; pop rbp; ret; 
0x000000000046a3d4: ror byte ptr [rcx - 0x137cb735], 0x80; pop rbp; ret; 
0x000000000041205f: ror byte ptr [rcx - 0x3a], 0x48; or ebx, esi; mov rcx, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000044d34c: ror byte ptr [rcx - 0x3b7cb735], 0x40; pop rbp; ret; 
0x0000000000461417: ror byte ptr [rcx - 0x7636ce0e], 1; ret; 
0x0000000000402727: ror byte ptr [rcx - 0x76f7dbbc], 1; push rsp; and al, 0xc; ret; 
0x000000000044f1ed: ror byte ptr [rcx - 0x77], 0x4b; or byte ptr [rdx - 0x77], cl; xor al, 0xc0; add rsp, 0x18; pop rbp; ret; 
0x0000000000402dae: ror byte ptr [rdi + rcx + 0x4c], 1; ret; 
0x0000000000465d69: ror byte ptr [rdi + rcx + 0x4f], 1; ret 0x8b4c; 
0x000000000045eb42: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x0000000000467b7a: ror byte ptr [rdi], 0x1f; add byte ptr [rax], r8b; call 0x68040; add rsp, 0x88; pop rbp; ret; 
0x00000000004291d5: ror byte ptr [rdi], 0x84; add dword ptr [rax], 0xba480000; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret 0x8949; 
0x000000000041e64d: ror byte ptr [rdi], 0x84; cmp eax, 0x48ffffff; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x50; pop rbp; ret; 
0x00000000004245f5: ror byte ptr [rdi], 0x84; out dx, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000415d52: ror byte ptr [rdi], 0x84; ret 0; 
0x0000000000468590: ror byte ptr [rdi], 0x94; ror dword ptr [rax - 0x77], 0xd0; add rsp, 0x10; pop rbp; ret; 
0x000000000047b29c: ror byte ptr [rdi], 0x95; ret 0x8b48; 
0x0000000000403f2d: ror byte ptr [rdi], 0x9b; shl dword ptr [rcx], 0xc8; ret; 
0x00000000004586c1: ror byte ptr [rdi], 1; mov dh, 0x44; and al, 6; add rsp, 0x20; pop rbp; ret; 
0x000000000042b381: ror byte ptr [rdi], 1; xchg eax, esi; ret 0x3948; 
0x00000000004692b5: ror byte ptr [rdi], cl; test byte ptr [rcx + rax - 0xb80000], ch; ret; 
0x0000000000402ce1: ror byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; dec dword ptr [rcx + rcx*4 - 0x20]; add rsp, 0x40; pop rbp; ret; 
0x0000000000433782: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000001], dl; mov eax, dword ptr [rdx]; call rax; 
0x000000000043928c: ror byte ptr [rdi], cl; xchg eax, ebp; ret 0x2eb; 
0x000000000043f9d6: ror byte ptr [rdi], cl; xchg eax, ebp; ret 0x4eb; 
0x0000000000415b62: ror byte ptr [rdi], cl; xchg eax, ebp; ret 0x5eb; 
0x0000000000467de7: ror byte ptr [rdi], cl; xchg eax, edi; ret; 
0x0000000000417489: ror byte ptr [rdi], cl; xchg eax, esp; ret 0x2eb; 
0x0000000000405a38: ror byte ptr [rdi], cl; xchg eax, esp; ret 0x9eb; 
0x0000000000405a10: ror byte ptr [rdi], cl; xchg eax, esp; ret 0xaeb; 
0x00000000004209b6: ror byte ptr [rdi], cl; xchg eax, esp; ret 0xc748; 
0x0000000000402e23: ror byte ptr [rdx + 0xc3a1e0c], 0x1f; seta al; lea rax, [rax*2 - 1]; ret; 
0x00000000004397ff: ror byte ptr [rsi - 0x75], 0x84; ret 0x198; 
0x00000000004090cf: ror dword ptr [rax + 0x500], 0x48; add esp, 0x10; pop rbp; ret; 
0x00000000004090bb: ror dword ptr [rax + 0x508], 0x48; add esp, 0x10; pop rbp; ret; 
0x0000000000465f2c: ror dword ptr [rax + 0x6b], 0xc9; cmp rcx, rsi; jg 0x65f3f; add rsp, 0x690; pop rbp; ret; 
0x0000000000402e5e: ror dword ptr [rax + 0xf], 0xbd; leave; shr rax, cl; and rax, 1; lea rax, [rax*2 - 1]; ret; 
0x0000000000446b40: ror dword ptr [rax + 1], cl; ret 0x8948; 
0x000000000046ec69: ror dword ptr [rax + 9], 1; int1; add rsp, 0x18; pop rbp; ret; 
0x00000000004294f9: ror dword ptr [rax - 0x2d], 1; out 0x48, al; or dword ptr [rax + rbx*8], esi; add rsp, 0x10; pop rbp; ret; 
0x00000000004294cc: ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x00000000004036ed: ror dword ptr [rax - 0x39], cl; rol dword ptr [rax], 0; add byte ptr [rax], al; ret; 
0x0000000000410245: ror dword ptr [rax - 0x73], 1; add al, 0x32; lea rax, [rax + 0x88]; add rsp, 0x58; pop rbp; ret; 
0x00000000004115d9: ror dword ptr [rax - 0x73], 1; xor al, 0xd0; add rsp, 0x10; pop rbp; ret; 
0x0000000000472010: ror dword ptr [rax - 0x73], 5; call 0xffffffffe8072b20; ret; 
0x00000000004777bf: ror dword ptr [rax - 0x73], 5; sbb dword ptr [rdx + rcx], esi; call 0x61820; add rsp, 0x18; pop rbp; ret; 
0x000000000040ed21: ror dword ptr [rax - 0x73], cl; add al, 0xa; lea rax, [rax + 0x28]; add rsp, 0x10; pop rbp; ret; 
0x0000000000464269: ror dword ptr [rax - 0x75], 0x44; and al, 0x28; call 0x643c0; add rsp, 0x18; pop rbp; ret; 
0x000000000043460a: ror dword ptr [rax - 0x75], 0x54; and al, 0x30; mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x000000000046fe52: ror dword ptr [rax - 0x75], 1; mov byte ptr [rax + 0x48000000], bl; mov eax, ebx; call rcx; 
0x0000000000442e00: ror dword ptr [rax - 0x75], 1; pushfq; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000450b5b: ror dword ptr [rax - 0x77], 0x48; or byte ptr [rax - 0x77], cl; ret; 
0x0000000000409d65: ror dword ptr [rax - 0x77], 0xc8; add rsp, 0x18; pop rbp; ret; 
0x000000000043c8cf: ror dword ptr [rax - 0x77], 0xc8; add rsp, 0x20; pop rbp; ret; 
0x0000000000429774: ror dword ptr [rax - 0x77], 0xc8; add rsp, 0x30; pop rbp; ret; 
0x000000000047056a: ror dword ptr [rax - 0x77], 0xc8; mov rbx, rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004703aa: ror dword ptr [rax - 0x77], 0xc8; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x0000000000440499: ror dword ptr [rax - 0x77], 0xd0; add rsp, 0x10; pop rbp; ret; 
0x000000000047814d: ror dword ptr [rax - 0x77], 0xda; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rdx; call rcx; 
0x00000000004395c5: ror dword ptr [rax - 0x77], 0xdf; xor eax, eax; xor ebx, ebx; add rsp, 0x60; pop rbp; ret; 
0x0000000000460aad: ror dword ptr [rax - 0x77], 0xf0; add rsp, 0x30; pop rbp; ret; 
0x000000000046f240: ror dword ptr [rax - 0x77], 0xf0; call 0x6f4e0; add rsp, 0x18; pop rbp; ret; 
0x000000000044a7fb: ror dword ptr [rax - 0x77], 0xfe; mov rdi, rbx; add rsp, 0x18; pop rbp; ret; 
0x0000000000476c37: ror dword ptr [rax - 0x77], 1; ret 0x1f0f; 
0x0000000000401f2d: ror dword ptr [rax - 0x77], 1; ret 0x2ae8; 
0x0000000000464e75: ror dword ptr [rax - 0x77], 1; ret 0x8948; 
0x000000000042f926: ror dword ptr [rax - 0x77], 1; ret 0x8b48; 
0x00000000004764a4: ror dword ptr [rax - 0x77], 1; ret 0xb3e8; 
0x000000000042a01f: ror dword ptr [rax - 0x77], 1; ret 0xb848; 
0x000000000040d0db: ror dword ptr [rax - 0x77], 1; ret; 
0x0000000000463f94: ror dword ptr [rax - 0x77], cl; int1; add rsp, 0x28; pop rbp; ret; 
0x00000000004724cb: ror dword ptr [rax - 0x77], cl; int1; add rsp, 0x30; pop rbp; ret; 
0x00000000004728fd: ror dword ptr [rax - 0x77], cl; int1; add rsp, 0x40; pop rbp; ret; 
0x00000000004747ce: ror dword ptr [rax - 0x77], cl; int1; add rsp, 0x50; pop rbp; ret; 
0x000000000047410c: ror dword ptr [rax - 0x77], cl; int1; add rsp, 0xa0; pop rbp; ret; 
0x000000000047c316: ror dword ptr [rax - 0x77], cl; ret 0x89eb; 
0x000000000046f23d: ror dword ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 0xf0; call 0x6f4e0; add rsp, 0x18; pop rbp; ret; 
0x0000000000415ad5: ror dword ptr [rax - 0x7b], 0xc9; jg 0x15ae6; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x0000000000452df1: ror dword ptr [rax - 0x7b], 1; sal byte ptr [rbp + 0x17], 0x48; mov ecx, dword ptr [rsp + 0x2c8]; mov eax, 1; lea rdx, [rsp + 0x2c8]; call rcx; 
0x00000000004747c3: ror dword ptr [rax - 0x7d], 0xc4; push rax; pop rbp; ret; 
0x000000000044a1fb: ror dword ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000449c4c: ror dword ptr [rax - 0x7f], 0xc4; fadd dword ptr [rax]; add byte ptr [rax], al; pop rbp; ret; 
0x000000000044a73c: ror dword ptr [rax - 9], 0xd9; cmp rbx, rcx; ja 0x4a755; add rsp, 0x20; pop rbp; ret; 
0x00000000004013b6: ror dword ptr [rax - 9], 0xd9; cmp rcx, rbx; jb 0x13c1; pop rbp; ret; 
0x000000000040129c: ror dword ptr [rax - 9], 0xd9; cmp rcx, rdx; jb 0x12aa; mov rbx, rdx; pop rbp; ret; 
0x000000000044ad08: ror dword ptr [rax - 9], 0xe1; xor rax, rdx; ret; 
0x00000000004090ab: ror dword ptr [rax], 0x48; add esp, 0x10; pop rbp; ret; 
0x00000000004620d7: ror dword ptr [rax], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000047095a: ror dword ptr [rax], cl; add rsp, 0x10; pop rbp; ret; 
0x0000000000461c93: ror dword ptr [rbx], 0xc; add byte ptr [rax - 1], cl; ret; 
0x0000000000449794: ror dword ptr [rcx + 0x48f089c1], cl; add esp, 0x78; pop rbp; ret; 
0x00000000004405fe: ror dword ptr [rcx + 0xf41f0d0], 0xb1; mov cl, 0x90; add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x0000000000442b9f: ror dword ptr [rcx + 0xf45f0d0], 0xb1; add dword ptr [rdi], ecx; xchg eax, esp; ret 0xd284; 
0x0000000000470956: ror dword ptr [rcx + rcx*4 + 0x4c], cl; ror dword ptr [rax], cl; add rsp, 0x10; pop rbp; ret; 
0x0000000000411f20: ror dword ptr [rcx + rcx*4 - 0x29], 1; call 0x12140; add rsp, 0x48; pop rbp; ret; 
0x00000000004646ac: ror dword ptr [rcx + rcx*4 - 0x31], 1; call 0x64500; add rsp, 0x78; pop rbp; ret; 
0x00000000004747c0: ror dword ptr [rcx + rcx*4 - 0x3f], cl; add rsp, 0x50; pop rbp; ret; 
0x000000000041204a: ror dword ptr [rcx + rcx*4 - 0x3f], cl; xor edi, edi; add rsp, 0x10; pop rbp; ret; 
0x000000000042634d: ror dword ptr [rcx + rcx*4 - 0x74], 1; and al, 0x90; add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0xc149; 
0x0000000000449796: ror dword ptr [rcx - 0x3b7cb710], 0x78; pop rbp; ret; 
0x0000000000469bad: ror dword ptr [rcx - 0x3b7cb738], 0x10; pop rbp; ret; 
0x0000000000472141: ror dword ptr [rcx - 0x3b7cb738], 0x20; pop rbp; ret; 
0x000000000042d921: ror dword ptr [rcx - 0x3b7eb730], 1; and byte ptr [rax], ah; add byte ptr [rax], al; pop rbp; ret; 
0x000000000041baab: ror dword ptr [rcx - 0x3f], 0xe9; add ecx, dword ptr [rbp - 0x77]; ret 0x8341; 
0x000000000042e663: ror dword ptr [rcx - 0x77], 1; ret 0xf749; 
0x0000000000402dab: ror dword ptr [rcx - 0x77], cl; ror byte ptr [rdi + rcx + 0x4c], 1; ret; 
0x000000000041197c: ror dword ptr [rcx - 0x7d], cl; ret; 
0x0000000000460aab: ror dword ptr [rcx - 0xf76b73f], cl; add rsp, 0x30; pop rbp; ret; 
0x0000000000467eee: ror dword ptr [rcx - 1], 1; leave; mov qword ptr [rdx + 0x20], r9; add rsp, 0x88; pop rbp; ret; 
0x000000000043d79c: ror dword ptr [rdi], 0; nop; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000403f2a: ror dword ptr [rdi], 0x94; ror byte ptr [rdi], 0x9b; shl dword ptr [rcx], 0xc8; ret; 
0x0000000000469cca: ror dword ptr [rdi], 0x95; ror dword ptr [rcx - 0x3b7cb738], 0x10; pop rbp; ret; 
0x00000000004525b9: ror dword ptr [rdi], 0xb6; and al, 0x38; nop; call rcx; 
0x0000000000446358: ror dword ptr [rdi], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000457392: ror dword ptr [rdi], 1; mov bh, 0x51; add ah, byte ptr [rsi - 9]; ret 1; 
0x0000000000403546: ror dword ptr [rdi], 1; mov esp, 0x39ce74d2; fidiv dword ptr [rbx - 0x36]; mov qword ptr [r8], rdx; ret; 
0x0000000000403514: ror dword ptr [rdi], 1; mov esp, 0x490875d2; mov dword ptr [rax], 0xffffffff; ret; 
0x00000000004035c6: ror dword ptr [rdi], cl; mov esp, 0xf72948d2; add rdx, rdi; mov qword ptr [r8], rdx; vzeroupper; ret; 
0x00000000004476e2: ror dword ptr [rdi], cl; test dword ptr [rdx + rax], edi; add byte ptr [rax - 0x77], cl; ret 0x3d83; 
0x000000000040b8a0: ror dword ptr [rdi], cl; xchg eax, esp; ret 0x8948; 
0x000000000042cc53: ror dword ptr [rdx], 0x48; add esp, 8; pop rbp; ret; 
0x00000000004371a6: ror dword ptr [rdx], 0x48; mov eax, dword ptr [rsp + 0x18]; call 0x37420; add rsp, 0x28; pop rbp; ret; 
0x00000000004463d4: ror dword ptr [rdx], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000421468: ror dword ptr [rdx], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0xf8; pop rbp; ret; 
0x0000000000403f29: ror dword ptr cs:[rdi], 0x94; ror byte ptr [rdi], 0x9b; shl dword ptr [rcx], 0xc8; ret; 
0x0000000000470959: ror qword ptr [rax], cl; add rsp, 0x10; pop rbp; ret; 
0x000000000046fd3e: sahf; add al, 0; add rsp, 0x20; pop rbp; ret; 
0x00000000004042c6: sahf; add al, byte ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x000000000040c2fa: sahf; add rsp, 0x20; pop rbp; ret; 
0x000000000040a7b6: sahf; add rsp, 0x28; pop rbp; ret; 
0x00000000004724a6: sahf; ret; 
0x000000000040587f: sal al, 0xf; mov cl, 0xbb; push 0xf000001; xchg eax, esp; ret; 
0x0000000000435593: sal al, 1; cmpxchg dword ptr [rbx + 0x90], ecx; sete al; add rsp, 0x10; pop rbp; ret; 
0x000000000045e131: sal bl, 0x44; movq qword ptr [rbx - 0x30], mm2; movdqu xmmword ptr [rbx - 0x20], xmm11; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e20d: sal bl, 0x44; movq qword ptr [rcx - 0x30], mm2; movdqu xmmword ptr [rcx - 0x20], xmm11; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000045df40: sal bl, 0x44; movq qword ptr [rdi + rbx - 0x30], mm5; movdqu xmmword ptr [rdi + rbx - 0x20], xmm14; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; pxor xmm15, xmm15; ret; 
0x000000000045dc28: sal bl, 0x44; movq qword ptr [rdi + rbx - 0x30], mm7; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045e137: sal bl, 1; movq qword ptr [rbx - 0x20], mm3; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e213: sal bl, 1; movq qword ptr [rcx - 0x20], mm3; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x000000000045df47: sal bl, 1; movq qword ptr [rdi + rbx - 0x20], mm6; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; pxor xmm15, xmm15; ret; 
0x000000000045de8a: sal bl, 1; movq qword ptr [rdi + rbx - 0x20], mm6; movdqu xmmword ptr [rdi + rbx - 0x10], xmm7; ret; 
0x000000000045dc2f: sal bl, 1; movq qword ptr [rdi + rbx - 0x20], mm7; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x0000000000466e2a: sal byte ptr [rax + rax*2 + 0x48], 0xff; ret; 
0x00000000004333d9: sal byte ptr [rax + rbx + 0x48], cl; mov ecx, dword ptr [rdx]; mov rax, rdi; call rcx; 
0x00000000004319cb: sal byte ptr [rax + rcx + 0x31], 0xc0; add rsp, 0x10; pop rbp; ret; 
0x00000000004639a1: sal byte ptr [rax + rcx + 0x31], 0xc0; add rsp, 0x78; pop rbp; ret; 
0x0000000000458727: sal byte ptr [rax + rcx + 0x48], 0x8b; and al, 8; mov byte ptr [rax], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000041d969: sal byte ptr [rax + rcx*8 + 0x48], cl; add esp, 0x20; pop rbp; ret; 
0x0000000000418a51: sal byte ptr [rax + rdx*4 + 0x4c], cl; mov eax, eax; mov rbx, rcx; ret; 
0x0000000000452df4: sal byte ptr [rbp + 0x17], 0x48; mov ecx, dword ptr [rsp + 0x2c8]; mov eax, 1; lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000479d7c: sal byte ptr [rbp + 0x41], 0x48; mov ecx, dword ptr [rsp + 0x30]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x178]; call rcx; 
0x0000000000479c7c: sal byte ptr [rbp + 0x41], 0x48; mov ecx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x180]; call rcx; 
0x000000000045a182: sal byte ptr [rbp + 0xa], 0x31; sal byte ptr [rcx], 0xdb; add rsp, 0x30; pop rbp; ret; 
0x000000000045601b: sal byte ptr [rbp + 0xb], 0x31; ror byte ptr [rax - 0x7f], 0xc4; and byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004142b3: sal byte ptr [rbp + 0xb], 1; test rbx, rbx; jne 0x142c1; add rsp, 0x20; pop rbp; ret; 
0x000000000041027c: sal byte ptr [rbp + 0xd], 0x48; lea eax, [rip + 0x14145a]; add rsp, 0x58; pop rbp; ret; 
0x0000000000430dda: sal byte ptr [rbp + 0xd], 1; mov byte ptr [rcx + 0x30], 1; mov rax, qword ptr [rcx + 8]; mov rbx, qword ptr [rcx + 0x10]; ret; 
0x0000000000457fc2: sal byte ptr [rbp + 0xe], 1; mov rax, rbx; call 0x1dfa0; add rsp, 0x18; pop rbp; ret; 
0x000000000043702c: sal byte ptr [rbp + 5], 0xe8; sub al, 0; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x000000000044412c: sal byte ptr [rbp + 6], 0x48; add esp, 0x50; pop rbp; ret; 
0x0000000000436063: sal byte ptr [rbp + 6], 0x48; add esp, 0x58; pop rbp; ret; 
0x000000000042da3b: sal byte ptr [rbp + 6], 0x48; add esp, 0x60; pop rbp; ret; 
0x0000000000404346: sal byte ptr [rbp + 6], cl; add rsp, 0x10; pop rbp; ret; 
0x0000000000438072: sal byte ptr [rbp + 6], cl; add rsp, 0x20; pop rbp; ret; 
0x0000000000403517: sal byte ptr [rbp + 8], cl; mov qword ptr [r8], -1; ret; 
0x0000000000457dc9: sal byte ptr [rbp + 9], 0x48; add esp, 0x88; pop rbp; ret; 
0x000000000041809b: sal byte ptr [rbp + rax + 0x48], cl; mov eax, dword ptr [rdx]; call rax; 
0x0000000000431a2f: sal byte ptr [rbp + rcx - 0x80], 0x78; sub byte ptr [rcx], al; sete al; add rsp, 8; pop rbp; ret; 
0x0000000000451d6d: sal byte ptr [rbp - 0x11], cl; add rsp, 0x28; pop rbp; ret; 
0x000000000046ff75: sal byte ptr [rbp - 0x48], 0x31; ror byte ptr [rax - 0x7d], 0xc4; pop rbp; nop; ret; 
0x0000000000456988: sal byte ptr [rbp - 0x4d], 0x31; ror byte ptr [rax - 0x7f], 0xc4; and byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000454a98: sal byte ptr [rbp - 0x52], cl; add rsp, 0x60; pop rbp; ret; 
0x000000000046a661: sal byte ptr [rbp - 0x60], 0x31; ror byte ptr [rax - 0x7f], 0xc4; add byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000456850: sal byte ptr [rbp - 0x64], 0x31; ror byte ptr [rax - 0x7f], 0xc4; and byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000046fff8: sal byte ptr [rbp - 0x6f], 0x31; ror byte ptr [rax - 0x7d], 0xc4; pop rbp; ret; 
0x0000000000452635: sal byte ptr [rbx + 6], 1; mov eax, 1; ret; 
0x0000000000444ba6: sal byte ptr [rbx + rbp + 0x48], cl; mov ecx, dword ptr [rdx]; mov rax, rdi; call rcx; 
0x000000000040a06e: sal byte ptr [rbx + rcx + 0x48], 0x8b; pop rsp; and al, 0x18; add rsp, 0x20; pop rbp; ret; 
0x000000000044f331: sal byte ptr [rbx + rcx + 0x48], cl; mov esi, dword ptr [rdx]; call rsi; 
0x000000000044f331: sal byte ptr [rbx + rcx + 0x48], cl; mov esi, dword ptr [rdx]; call rsi; add rsp, 0x20; pop rbp; ret; 
0x000000000040de7a: sal byte ptr [rbx + rcx + 0x4c], 0x89; ror byte ptr [rbp - 0x77], cl; ret 0xc6e9; 
0x00000000004458e1: sal byte ptr [rbx + rcx - 0x7d], 0xf8; cli; je 0x458ef; add rsp, 0x18; pop rbp; ret; 
0x000000000042c1eb: sal byte ptr [rcx + rcx + 0x48], cl; mov eax, edx; add rsp, 0x18; pop rbp; ret; 
0x00000000004363eb: sal byte ptr [rcx + rdx + 0x48], cl; mov eax, dword ptr [rdx]; call rax; 
0x000000000045af37: sal byte ptr [rcx + rsi + 0x48], 0x8d; xor eax, 0xfffff3df; mov rdx, 0; mov rcx, 0; call rax; 
0x00000000004608f7: sal byte ptr [rcx], 0xc9; mov rdx, qword ptr [rax + 0x28]; mov rax, rcx; call rdx; 
0x0000000000420824: sal byte ptr [rcx], 0xdb; add rsp, 0x10; pop rbp; ret; 
0x000000000044aab4: sal byte ptr [rcx], 0xdb; add rsp, 0x18; pop rbp; ret; 
0x0000000000409ff2: sal byte ptr [rcx], 0xdb; add rsp, 0x20; pop rbp; ret; 
0x0000000000439b54: sal byte ptr [rcx], 0xdb; add rsp, 0x28; pop rbp; ret; 
0x000000000040b6b5: sal byte ptr [rcx], 0xdb; add rsp, 0x30; pop rbp; ret; 
0x0000000000407110: sal byte ptr [rcx], 0xdb; add rsp, 0x40; pop rbp; ret; 
0x000000000042476e: sal byte ptr [rcx], 0xdb; add rsp, 0x60; pop rbp; ret; 
0x00000000004324ca: sal byte ptr [rcx], 0xdb; add rsp, 0x70; pop rbp; ret; 
0x000000000040b4fa: sal byte ptr [rcx], 0xdb; add rsp, 0x90; pop rbp; ret; 
0x0000000000409801: sal byte ptr [rcx], 0xdb; add rsp, 0xa0; pop rbp; ret; 
0x000000000044b4ae: sal byte ptr [rcx], 0xdb; mov rcx, rbx; add rsp, 0x100; pop rbp; ret; 
0x000000000040111d: sal byte ptr [rcx], 0xdb; mov rcx, rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000429271: sal byte ptr [rcx], 0xdb; mov rcx, rbx; add rsp, 0x58; pop rbp; ret; 
0x000000000044d046: sal byte ptr [rcx], 0xdb; mov rcx, rbx; xor edi, edi; add rsp, 0x10; pop rbp; ret; 
0x000000000040123a: sal byte ptr [rcx], 0xdb; pop rbp; ret; 
0x0000000000430deb: sal byte ptr [rcx], 0xdb; ret; 
0x00000000004625bd: sal byte ptr [rcx], 0xdb; xor ecx, ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000463f3f: sal byte ptr [rcx], 0xdb; xor ecx, ecx; add rsp, 0x28; pop rbp; ret; 
0x0000000000460ab8: sal byte ptr [rcx], 0xdb; xor ecx, ecx; add rsp, 0x30; pop rbp; ret; 
0x0000000000462230: sal byte ptr [rcx], 0xdb; xor ecx, ecx; add rsp, 0x38; pop rbp; ret; 
0x000000000044972c: sal byte ptr [rcx], 0xdb; xor ecx, ecx; add rsp, 0x78; pop rbp; ret; 
0x0000000000460ef0: sal byte ptr [rcx], 0xdb; xor ecx, ecx; mov edi, ecx; add rsp, 0x28; pop rbp; ret; 
0x000000000044a944: sal byte ptr [rcx], 1; sal byte ptr [rcx], cl; imul bl; or esi, dword ptr [rcx]; sal byte ptr [rcx], 0xdb; ret; 
0x000000000047c958: sal byte ptr [rcx], cl; dec dword ptr [rcx - 0x75]; mov bl, byte ptr [rax + 0x48000000]; mov eax, edi; call rcx; 
0x00000000004356a9: sal byte ptr [rcx], cl; imul bl; adc eax, 0x24548b48; and byte ptr [rax - 1], cl; ret 0x8b48; 
0x000000000044a946: sal byte ptr [rcx], cl; imul bl; or esi, dword ptr [rcx]; sal byte ptr [rcx], 0xdb; ret; 
0x0000000000477fd4: sal byte ptr [rcx], cl; leave; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x00000000004723d0: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xd3; mov rcx, rsi; add rsp, 0x28; pop rbp; ret; 
0x00000000004724c6: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xd3; mov rcx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004728f8: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xd3; mov rcx, rsi; add rsp, 0x40; pop rbp; ret; 
0x00000000004714c2: sal byte ptr [rdi + 0x1c], 1; jae 0x714d5; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x00000000004744cf: sal byte ptr [rdi + rcx + 0x48], 0x8d; add eax, 0x25c8d; mov ebx, 0x20; pop rbp; nop; ret; 
0x0000000000442bab: sal byte ptr [rdx + 0x48], cl; add esp, 0x58; pop rbp; ret; 
0x0000000000451c98: sal byte ptr [rdx + 0xd], 1; mov rax, rcx; mov rax, qword ptr [rax + 0x10]; add rsp, 0x10; pop rbp; ret; 
0x0000000000478bf8: sal byte ptr [rdx + rbp*2 + 0x48], 0xff; ret; 
0x000000000047046f: sal byte ptr [rdx + rcx + 0x48], 0x8b; adc byte ptr [rbx + 0x5d901fe0], al; ret; 
0x0000000000460422: sal byte ptr [rdx + rcx + 0x48], 0x8b; add rsp, 0x10; pop rbp; ret; 
0x0000000000473521: sal byte ptr [rdx + rcx + 0x48], 0x8b; and al, 0x20; call 0x739e0; add rsp, 0x10; pop rbp; ret; 
0x000000000041cd62: sal byte ptr [rdx + rcx - 0x75], cl; adc cl, byte ptr [rcx + 0x31142454]; shr bl, 0x19; add rsp, 0x20; pop rbp; ret; 
0x000000000044a757: sal byte ptr [rsi + rax - 0x18], 1; ret; 
0x0000000000466d77: sal byte ptr [rsi + rax*2 + 0x48], 0xff; ret; 
0x0000000000455714: sal byte ptr [rsi + rcx + 0xf], 0xb6; adc dh, dh; ret 0x7404; 
0x0000000000403549: sal byte ptr [rsi + rcx*8 + 0x39], cl; fidiv dword ptr [rbx - 0x36]; mov qword ptr [r8], rdx; ret; 
0x0000000000408ca2: sal byte ptr [rsi + rsi*4 + 0x48], 0x8b; or eax, 0x957bc; mov rax, rsi; lea rdx, [rip + 0x957b2]; call rcx; 
0x000000000040356b: sal byte ptr [rsp + rbp*4 + 0x49], cl; mov dword ptr [rax], edx; ret; 
0x0000000000473987: sal byte ptr [rsp + rcx + 0x48], 0x8b; and al, 0x20; mov dword ptr [rcx + 0x2c], 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004492bc: sal byte ptr [rsp + rcx - 0x80], 0x78; sub byte ptr [rsi], al; jne 0x492cb; add rsp, 0x10; pop rbp; ret; 
0x000000000043990b: sal byte ptr [rsp + rsi*4 - 0x15], 0x2b; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x00000000004578af: sal dword ptr [rax + rcx + 0x31], cl; ror byte ptr [rax - 0x7d], 0xc4; jo 0x57916; ret; 
0x0000000000459999: sal dword ptr [rbp + 0xf], cl; nop dword ptr [rax]; test rsi, rsi; jne 0x599ab; mov eax, 1; ret; 
0x00000000004067f6: sal dword ptr [rbp + 6], 0x48; add esp, 0x10; pop rbp; ret; 
0x000000000040a32a: sal dword ptr [rbp + 6], 0x48; add esp, 0x20; pop rbp; ret; 
0x000000000042b38c: sal dword ptr [rbp + 6], 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004030e5: sal dword ptr [rbx + 0x48], 1; xor eax, eax; ret; 
0x000000000041bfdb: sal dword ptr [rcx + 1], 0; nop; call 0x32980; add rsp, 0x60; pop rbp; ret; 
0x000000000044a98e: sal dword ptr [rcx], 0xc0; xor ebx, ebx; ret; 
0x000000000041204d: sal dword ptr [rcx], 0xff; add rsp, 0x10; pop rbp; ret; 
0x0000000000463756: sal dword ptr [rdi + rbp*8 + 0x48], 1; add esp, 0x60; pop rbp; ret; 
0x00000000004346c2: sal dword ptr [rdi - 0x35], 1; add rsp, 0x20; pop rbp; ret; 
0x000000000047124a: sal dword ptr [rdx + 0x1b], 1; jbe 0x7125d; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x00000000004012a2: sal dword ptr [rdx + 5], 1; mov rbx, rdx; pop rbp; ret; 
0x000000000046373f: sal dword ptr [rdx - 0x1e], 1; add rsp, 0x60; pop rbp; ret; 
0x0000000000429d22: sal dword ptr [rsi + 0xb], cl; mov rax, -1; mov rbx, rsi; ret; 
0x000000000041d6ef: sal edx, 0x48; cvttps2pi mm0, xmm0; bts rax, 0x3f; xchg qword ptr [rcx + 0x18], rax; ret; 
0x000000000041e1d3: sal edx, 0xf; adc dword ptr [rsp + 0x50], eax; mov rdx, qword ptr [rcx + 0x98]; mov rax, qword ptr [rdx]; call rax; 
0x000000000040c5c0: sal edx, 0xf; sub al, 0xc0; inc eax; ret; 
0x000000000045e130: sal r11b, 0x44; movq qword ptr [rbx - 0x30], mm2; movdqu xmmword ptr [rbx - 0x20], xmm11; movdqu xmmword ptr [rbx - 0x10], xmm12; ret; 
0x000000000045e20c: sal r11b, 0x44; movq qword ptr [rcx - 0x30], mm2; movdqu xmmword ptr [rcx - 0x20], xmm11; movdqu xmmword ptr [rcx - 0x10], xmm12; ret; 
0x00000000004793a8: sar ah, cl; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000004346fc: sar ah, cl; dec dword ptr [rdi]; mov dh, 0xd; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040c5c4: sar bh, 0xc0; ret; 
0x000000000043bf65: sar bh, 0xff; add rsp, 0x18; pop rbp; ret; 
0x000000000047babc: sar bh, 0xff; add rsp, 0x1d0; pop rbp; ret; 
0x000000000042db77: sar byte ptr [rax + rcx + 0x31], 0xc0; add rsp, 0x30; pop rbp; ret; 
0x0000000000463bb7: sar byte ptr [rbp + 0xd], 0x48; mov eax, 0xffffffff; add rsp, 0x78; pop rbp; ret; 
0x0000000000431ff4: sar byte ptr [rbx + 1], 0x31; leave; add rsp, 0x68; pop rbp; ret; 
0x0000000000471e17: sar byte ptr [rbx + 1], 0x48; add esp, 0x18; pop rbp; ret; 
0x0000000000462c00: sar byte ptr [rbx + 1], 1; add rsp, 0x18; pop rbp; ret; 
0x000000000040d3fb: sar byte ptr [rbx + 1], 1; add rsp, 0x30; pop rbp; ret; 
0x00000000004629e4: sar byte ptr [rbx + 2], 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004629ba: sar byte ptr [rbx + 3], 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000462997: sar byte ptr [rbx + 4], 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004090a2: sar byte ptr [rcx + 1], 1; lock xadd qword ptr [rax], rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000040aaef: sar byte ptr [rcx + rcx + 0x48], 0x39; add eax, 0x113f8f; jg 0xab08; lea rax, [rip + 0x8aec6]; mov ebx, 8; ret; 
0x000000000044d0df: sar byte ptr [rdi + 1], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000045eecd: sar byte ptr [rdi + 1], 1; lea rsi, [rsp]; mov rax, qword ptr [rip + 0xf1712]; call rax; 
0x00000000004717eb: sar byte ptr [rsi + 0xe], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x108; pop rbp; ret; 
0x000000000042920b: sar dword ptr [rax - 0x7c], 1; add cl, byte ptr [rcx - 0x77]; ret 0x8141; 
0x000000000042b38a: sar dword ptr [rax], 0xd1; jne 0x2b395; add rsp, 0x10; pop rbp; ret; 
0x00000000004647fa: sar dword ptr [rbp + rax*8 + 0x48], 1; add esp, 0x78; pop rbp; ret; 
0x0000000000436429: sar dword ptr [rbx], cl; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000458f9a: sar dword ptr [rdi + 3], 1; call 0x2a860; add rsp, 0x20; pop rbp; ret; 
0x000000000042c335: sar dword ptr [rdi + 6], 1; add rsp, 0x18; pop rbp; ret; 
0x000000000042ca49: sar dword ptr [rdx], cl; adc al, byte ptr [rax]; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x0000000000439c67: sar dword ptr [rsi + 0xc], 0xe8; int1; xor eax, 0x5ebffff; call 0x38040; pop rbp; ret; 
0x000000000044ad02: sar dword ptr [rsi + 3], 1; out 0x48, eax; xor ecx, eax; mul rcx; xor rax, rdx; ret; 
0x000000000042df51: sar eax, 1; add rsp, 0x18; pop rbp; ret; 
0x000000000046d00d: sar ebp, cl; dec dword ptr [rcx - 0x77]; fisttp qword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000046bb83: sar ecx, 0x3f; and ecx, 1; add rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000454ec3: sar ecx, 0x3f; and ecx, 1; add rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000407100: sar ecx, 0x3f; and rax, rcx; add rax, r8; add rsp, 0x40; pop rbp; ret; 
0x000000000047a294: sar edi, 0xff; add rsp, 0x90; pop rbp; nop; ret; 
0x00000000004339ae: sar edi, 0xff; add rsp, 0x90; pop rbp; ret; 
0x000000000043e55b: sar esp, 0xff; add rsp, 0x50; pop rbp; ret; 
0x000000000042df50: sar rax, 1; add rsp, 0x18; pop rbp; ret; 
0x000000000046bb82: sar rcx, 0x3f; and ecx, 1; add rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000454ec2: sar rcx, 0x3f; and ecx, 1; add rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x00000000004070ff: sar rcx, 0x3f; and rax, rcx; add rax, r8; add rsp, 0x40; pop rbp; ret; 
0x0000000000420056: sbb ah, byte ptr [rax + rdx*4]; mov qword ptr [rdx + rbx + 0x28], rcx; inc qword ptr [rax + 0x140]; add rsp, 0x18; pop rbp; ret; 
0x0000000000466b77: sbb al, 0; add byte ptr [rax - 1], cl; ret; 
0x0000000000434416: sbb al, 0; add byte ptr [rax], al; call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x000000000045ecb1: sbb al, 0; add byte ptr [rax], al; syscall; 
0x000000000045ecb1: sbb al, 0; add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x0000000000447568: sbb al, 0x11; mov rax, rcx; add rsp, 0x68; pop rbp; ret; 
0x000000000042890c: sbb al, 0x17; nop; nop; add rsp, 0x10; pop rbp; ret; 
0x000000000045ebf4: sbb al, 0x24; call rax; 
0x000000000045ec82: sbb al, 0x24; call rax; mov rsp, qword ptr [rsp]; add rsp, 0x10; pop rbp; ret; 
0x000000000045eb72: sbb al, 0x44; mov eax, dword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x24]; mov eax, 9; syscall; 
0x0000000000459ecf: sbb al, 0x48; add esp, 0x20; pop rbp; ret; 
0x0000000000404a88: sbb al, 0x48; add esp, 0x28; pop rbp; ret; 
0x00000000004504a8: sbb al, 0x48; add esp, 0x60; pop rbp; ret; 
0x00000000004413ee: sbb al, 0x48; mov dword ptr [rsp + 8], ecx; mov rcx, qword ptr [rax]; mov rdx, rax; call rcx; 
0x000000000044ceb0: sbb al, 0x77; or edi, dword ptr [rax - 1]; add rsp, 0x30; pop rbp; ret; 
0x000000000047185e: sbb al, 0x90; jae 0x71870; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x0000000000434609: sbb al, 0xc1; mov rdx, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rdx]; mov rax, rbx; call rsi; 
0x0000000000422fa5: sbb al, 0xc8; add rsp, 0x38; pop rbp; ret; 
0x000000000046b5ef: sbb al, 0xd8; mov rax, rdi; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x000000000043665b: sbb al, 1; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000428558: sbb al, 2; mov r8, qword ptr [r10 + r8 + 8]; mov rax, rcx; mov rcx, r8; lea rdx, [rsp + 0x80]; call rdi; 
0x0000000000447498: sbb al, 8; add rsp, 0x68; pop rbp; nop; ret; 
0x0000000000461707: sbb al, byte ptr [rbx + 0x4488fde0]; and al, 0xe; mov byte ptr [rsp + 0xf], al; mov rdx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000042f487: sbb al, ch; adc ebp, dword ptr [rax - 0x76b70003]; ret; 
0x000000000042ef87: sbb al, ch; adc ebp, dword ptr [rbp - 0x76b70003]; ret; 
0x000000000041db57: sbb al, ch; and eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000046ef69: sbb al, ch; int1; ret 0xfffe; 
0x000000000042f027: sbb al, ch; jae 0x2efd7; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000042f3e7: sbb al, ch; mov bl, 0xa8; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000042eee7: sbb al, ch; mov bl, 0xad; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000472030: sbb al, ch; push 7; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x000000000042ee47: sbb al, ch; push rbx; scasb al, byte ptr [rdi]; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000042f347: sbb al, ch; push rbx; test eax, 0x8948fffd; ret; 
0x0000000000404198: sbb al, ch; ret 0x570; 
0x00000000004610f7: sbb al, ch; ret; 
0x0000000000410f6e: sbb al, ch; retfq 4; add rsp, 0x20; pop rbp; ret; 
0x000000000042f0c7: sbb al, ch; shr dword ptr [rbx - 0x76b70003], cl; ret; 
0x000000000042f2a7: sbb al, ch; test eax, 0x8948fffd; ret; 
0x000000000042f207: sbb al, ch; xchg eax, ebx; stosb byte ptr [rdi], al; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000040eec4: sbb al, ch; xchg eax, esi; ret; 
0x000000000042f167: sbb al, ch; xor ebp, dword ptr [rbx - 0x76b70003]; ret; 
0x000000000041e388: sbb bh, byte ptr [rax + 0x10000]; call rbx; 
0x000000000041407c: sbb bl, ch; movabs eax, dword ptr [0xec8348e5894855cc]; sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000458d1b: sbb bl, ch; ret 0xcccc; 
0x0000000000459f7a: sbb bl, ch; ret; 
0x000000000040c2f8: sbb bl, ch; sahf; add rsp, 0x20; pop rbp; ret; 
0x000000000042306d: sbb byte ptr [r15 + 6], sil; cmp qword ptr [rcx + 0x78], rax; ja 0x2307a; xor eax, eax; ret; 
0x0000000000425222: sbb byte ptr [r8 - 0x45], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret; 
0x00000000004749f4: sbb byte ptr [r8 - 0x75], cl; and al, 0x68; call rcx; 
0x000000000044c468: sbb byte ptr [r8 - 1], cl; ret; 
0x0000000000461ecc: sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000470951: sbb byte ptr [r9 + r9*4 + 4], cl; ror dword ptr [rcx + rcx*4 + 0x4c], cl; ror dword ptr [rax], cl; add rsp, 0x10; pop rbp; ret; 
0x000000000045e84e: sbb byte ptr [rax + 0x1b], bh; syscall; 
0x000000000045e84e: sbb byte ptr [rax + 0x1b], bh; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000042bef2: sbb byte ptr [rax + 0x244c8b48], dl; jo 0x2bf42; xchg dword ptr [rax], ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000047546f: sbb byte ptr [rax + 0x29], cl; ret; 
0x000000000045ee4e: sbb byte ptr [rax + 0xcc], bh; syscall; 
0x000000000045ee4e: sbb byte ptr [rax + 0xcc], bh; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e7ed: sbb byte ptr [rax + 0xde], bh; syscall; 
0x000000000045e7ed: sbb byte ptr [rax + 0xde], bh; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e811: sbb byte ptr [rax + 0xdf], bh; syscall; 
0x000000000045e811: sbb byte ptr [rax + 0xdf], bh; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e7ce: sbb byte ptr [rax + 0xea], bh; syscall; 
0x000000000045e7ce: sbb byte ptr [rax + 0xea], bh; syscall; ret; 
0x00000000004448ff: sbb byte ptr [rax + 1], bh; add rsp, 0x60; pop rbp; ret; 
0x000000000045e68d: sbb byte ptr [rax + 1], bh; syscall; 
0x000000000045e68d: sbb byte ptr [rax + 1], bh; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x00000000004448fe: sbb byte ptr [rax + 1], dil; add rsp, 0x60; pop rbp; ret; 
0x0000000000450291: sbb byte ptr [rax + rax], al; add byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000045ecad: sbb byte ptr [rax - 0x39], cl; rcr byte ptr [rax + rax], 0; add byte ptr [rdi], cl; add eax, 0x20244489; ret; 
0x0000000000425223: sbb byte ptr [rax - 0x45], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret; 
0x0000000000439e5e: sbb byte ptr [rax - 0x73], cl; adc eax, 0x6458a; call rcx; 
0x0000000000439e5e: sbb byte ptr [rax - 0x73], cl; adc eax, 0x6458a; call rcx; add rsp, 0x60; pop rbp; ret; 
0x000000000041b340: sbb byte ptr [rax - 0x73], cl; add al, 0xa; add rsp, 0x20; pop rbp; ret; 
0x000000000040c32d: sbb byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x0000000000473a21: sbb byte ptr [rax - 0x75], cl; adc eax, 0xaabf7; mov rsi, qword ptr [rdx]; mov rax, rcx; call rsi; 
0x0000000000429d71: sbb byte ptr [rax - 0x75], cl; and al, 0x20; call 0x29580; add rsp, 0x30; pop rbp; ret; 
0x00000000004049c8: sbb byte ptr [rax - 0x75], cl; and al, 0x20; mov dword ptr [rcx], eax; add rsp, 0x28; pop rbp; ret; 
0x000000000046fa84: sbb byte ptr [rax - 0x75], cl; and al, 0x30; add rsp, 0x40; pop rbp; ret; 
0x00000000004607b3: sbb byte ptr [rax - 0x75], cl; and al, 0x48; call rcx; 
0x00000000004445dd: sbb byte ptr [rax - 0x75], cl; and al, 0x48; mov qword ptr [rax + 0x80], rcx; add rsp, 0x68; pop rbp; ret; 
0x00000000004749f5: sbb byte ptr [rax - 0x75], cl; and al, 0x68; call rcx; 
0x000000000040d8e4: sbb byte ptr [rax - 0x75], cl; cmp cl, byte ptr [rax - 0x75]; and al, 0x70; mov rbx, rcx; call rdi; 
0x0000000000431e41: sbb byte ptr [rax - 0x75], cl; je 0x31e6a; sub cl, ch; ret; 
0x0000000000402d53: sbb byte ptr [rax - 0x75], cl; jl 0x2d7c; and cl, ch; ret 0xfffd; 
0x0000000000463fb5: sbb byte ptr [rax - 0x75], cl; jo 0x63fda; mov rdx, qword ptr [rdx + 0x18]; mov rax, rsi; call rdx; 
0x0000000000464336: sbb byte ptr [rax - 0x75], cl; jo 0x6435b; lea rcx, [rdx - 1]; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000464069: sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x75], cl; js 0x64082; mov rax, rsi; call rdx; 
0x000000000040e7fb: sbb byte ptr [rax - 0x75], cl; or cl, byte ptr [rax - 0x75]; and al, 0x48; mov rbx, rax; call rcx; 
0x00000000004333db: sbb byte ptr [rax - 0x75], cl; or cl, byte ptr [rax - 0x77]; clc; call rcx; 
0x000000000040e033: sbb byte ptr [rax - 0x75], cl; or cl, byte ptr [rcx + rcx*4 - 0x20]; mov rbx, rax; call rcx; 
0x000000000046cadb: sbb byte ptr [rax - 0x75], cl; pop rax; adc byte ptr [rax - 1], cl; ret; 
0x000000000044f68c: sbb byte ptr [rax - 0x75], cl; push rdx; adc byte ptr [rax - 0x7f], cl; ret 0x418; 
0x0000000000464066: sbb byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x75], cl; js 0x64082; mov rax, rsi; call rdx; 
0x000000000040d39e: sbb byte ptr [rax - 0x75], cl; xor cl, byte ptr [rax - 0x75]; and al, 0x28; mov rbx, rcx; call rsi; 
0x000000000040d579: sbb byte ptr [rax - 0x75], cl; xor cl, byte ptr [rax - 0x75]; and al, 0x30; mov rbx, rcx; call rsi; 
0x0000000000463522: sbb byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; or eax, 0xbf18b; add rsp, 0x30; pop rbp; ret; 
0x000000000046d38a: sbb byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000041e35b: sbb byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rax + 0x90]; mov rcx, qword ptr [rdx]; call rcx; 
0x000000000041578f: sbb byte ptr [rax - 0x77], cl; clc; add rsp, 0x28; pop rbp; ret; 
0x000000000041842d: sbb byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000041d6ba: sbb byte ptr [rax - 0x77], cl; ret 0xe083; 
0x00000000004092b1: sbb byte ptr [rax - 0x77], cl; ret; 
0x0000000000455711: sbb byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rcx + 0xf], 0xb6; adc dh, dh; ret 0x7404; 
0x00000000004682ad: sbb byte ptr [rax - 0x7d], cl; ret 0x4c08; 
0x000000000047ccba: sbb byte ptr [rax - 0x7d], cl; ret; 
0x000000000044c469: sbb byte ptr [rax - 1], cl; ret; 
0x000000000046f9ec: sbb byte ptr [rax - 9], cl; ret 0x60; 
0x000000000041ada8: sbb byte ptr [rax - 9], cl; ret; 
0x00000000004052f6: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000461ecd: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000045ee21: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000045ee21: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; ret; 
0x000000000042e735: sbb byte ptr [rax], al; je 0x2e742; add rsp, 0xc0; pop rbp; ret; 
0x0000000000460498: sbb byte ptr [rax], al; setne al; pop rbp; ret; 
0x0000000000460463: sbb byte ptr [rax], al; setne al; ret; 
0x000000000045e6ac: sbb byte ptr [rax], bh; syscall; 
0x000000000045e6ac: sbb byte ptr [rax], bh; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000046f123: sbb byte ptr [rbp + 0xa], dh; mov rax, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x000000000046fb83: sbb byte ptr [rbp + 0xd], dh; mov rax, qword ptr [rbx]; mov rbx, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x00000000004093f2: sbb byte ptr [rbp - 0x1f], dh; cmp qword ptr [r8 + 8], rcx; jne 0x93d6; mov rax, r8; ret; 
0x0000000000410d1d: sbb byte ptr [rbp - 0x70], bl; ret; 
0x000000000047413a: sbb byte ptr [rbp - 0x77], cl; ret 0x2949; 
0x0000000000475dab: sbb byte ptr [rbx + rax + 0x58], cl; and byte ptr [rcx - 0x7d], cl; ret; 
0x000000000045ecd1: sbb byte ptr [rbx + rcx*4 + 0x44], cl; and al, 0x20; mov r9d, dword ptr [rsp + 0x28]; mov eax, 0xca; syscall; 
0x000000000045eb6d: sbb byte ptr [rbx + rcx*4 + 0x54], al; and al, 0x1c; mov r8d, dword ptr [rsp + 0x20]; mov r9d, dword ptr [rsp + 0x24]; mov eax, 9; syscall; 
0x000000000045e92d: sbb byte ptr [rbx + rcx*4 + 0x54], al; and al, 0x20; mov eax, 0xe; syscall; 
0x000000000045e96e: sbb byte ptr [rbx + rcx*4 + 0x54], cl; and al, 0x20; mov eax, 0xd; syscall; 
0x000000000045e96e: sbb byte ptr [rbx + rcx*4 + 0x54], cl; and al, 0x20; mov eax, 0xd; syscall; mov dword ptr [rsp + 0x28], eax; ret; 
0x000000000045e5bc: sbb byte ptr [rbx + rcx*4 + 0x7c], cl; and al, 0x20; mov rbp, qword ptr [rsp + 0x28]; add rsp, 0x30; ret; 
0x000000000044cdeb: sbb byte ptr [rbx - 0x74cfdb8c], cl; jl 0x4ce17; xor al, 0x39; test dword ptr [rdi], 0x8948fe4c; ret 0x8948; 
0x000000000043dacf: sbb byte ptr [rbx - 0xafdbac], cl; ret 0x8b44; 
0x000000000040370d: sbb byte ptr [rcx + 0x10], bh; call 0x5ce60; add rsp, 0x18; pop rbp; ret; 
0x000000000045ff4d: sbb byte ptr [rcx + 0x21], bh; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000047450d: sbb byte ptr [rcx + 0x33], bh; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045fd2d: sbb byte ptr [rcx + 0x4ac], bh; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045ff0d: sbb byte ptr [rcx + 0x800], bh; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045fc6d: sbb byte ptr [rcx + 0xa8], bh; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x0000000000446ac3: sbb byte ptr [rcx + 0xf], al; nop; ret 0xd231; 
0x00000000004059c7: sbb byte ptr [rcx + 1], bh; call 0x59e0; add rsp, 0x18; pop rbp; ret; 
0x000000000045a2ba: sbb byte ptr [rcx + rcx*4 + 0x64], cl; and al, 0x20; call 0x5f2e0; add rsp, 0x28; pop rbp; ret; 
0x0000000000470952: sbb byte ptr [rcx + rcx*4 + 4], cl; ror dword ptr [rcx + rcx*4 + 0x4c], cl; ror dword ptr [rax], cl; add rsp, 0x10; pop rbp; ret; 
0x000000000046b48b: sbb byte ptr [rcx - 0x75], cl; pop rax; adc byte ptr [rax - 1], cl; ret; 
0x000000000042e3a6: sbb byte ptr [rcx], dh; leave; call 0x4820; add rsp, 0x38; pop rbp; ret; 
0x0000000000461b1e: sbb byte ptr [rcx], dh; sal byte ptr [rcx], 0xdb; add rsp, 0x28; pop rbp; ret; 
0x00000000004097ff: sbb byte ptr [rcx], dh; sal byte ptr [rcx], 0xdb; add rsp, 0xa0; pop rbp; ret; 
0x0000000000461b1d: sbb byte ptr [rcx], sil; sal byte ptr [rcx], 0xdb; add rsp, 0x28; pop rbp; ret; 
0x000000000042306e: sbb byte ptr [rdi + 6], dh; cmp qword ptr [rcx + 0x78], rax; ja 0x2307a; xor eax, eax; ret; 
0x00000000004116b5: sbb byte ptr [rdi + 6], dh; cmp qword ptr [rdx + 0x78], rdi; ja 0x116c4; add rsp, 0x68; pop rbp; ret; 
0x0000000000440b35: sbb byte ptr [rdi], cl; or dword ptr [rcx + 0x48000000], 0xffffff83; ret 0x8830; 
0x0000000000469787: sbb byte ptr [rsi + rsi*2 + 0x48], bl; mov ebx, edx; add rsp, 0x70; pop rbp; ret; 
0x0000000000417924: sbb ch, bl; add dword ptr [rax], eax; add rsp, 0x40; pop rbp; ret; 
0x000000000042005c: sbb ch, byte ptr [rax]; inc qword ptr [rax + 0x140]; add rsp, 0x18; pop rbp; ret; 
0x000000000041e0ab: sbb cl, byte ptr [rax - 0x75]; and al, 0x48; call rbx; 
0x0000000000445604: sbb cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x000000000044f3ff: sbb cl, byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x00000000004586a4: sbb dh, al; and al, 7; add dword ptr [rax - 0x75], ecx; or byte ptr [rax - 0x77], cl; ret 0xd1ff; 
0x000000000040587d: sbb dh, byte ptr [rcx]; sal al, 0xf; mov cl, 0xbb; push 0xf000001; xchg eax, esp; ret; 
0x0000000000419cd7: sbb dword ptr [rax + 0x2cb8], edx; add byte ptr [rax - 0x39], cl; ret; 
0x000000000041ded6: sbb dword ptr [rax + 0x48000000], 0x5d18c483; ret; 
0x0000000000412922: sbb dword ptr [rax + 0x675a1f9], eax; add rsp, 0x38; pop rbp; ret; 
0x0000000000416761: sbb dword ptr [rax + 0x8b8], edx; add byte ptr [rax - 0x39], cl; ret; 
0x000000000043ad16: sbb dword ptr [rax + 0xfb8], edx; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000469b46: sbb dword ptr [rax + 1], edi; add rsp, 0x10; pop rbp; ret; 
0x0000000000423033: sbb dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x000000000042031e: sbb dword ptr [rax - 0x77], ecx; ret; 
0x000000000045004a: sbb dword ptr [rax - 0x7f], ecx; rcr eax, 0x11; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000046f643: sbb dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rax + 0x40]; add rsp, 0x28; pop rbp; ret; 
0x0000000000454f87: sbb dword ptr [rbp + 0xf], esi; mov rax, qword ptr [rax + 0x30]; call 0x1220; add rsp, 0x10; pop rbp; ret; 
0x0000000000443034: sbb dword ptr [rbp - 0x76b7008e], ecx; ret; 
0x0000000000412192: sbb dword ptr [rbx + 1], 0; add byte ptr [rcx - 0x77], cl; ret 0xc149; 
0x0000000000434639: sbb dword ptr [rdi - 3], -1; add rsp, 0x20; pop rbp; ret; 
0x000000000045912f: sbb dword ptr [rdi], 0x26bb0004; add byte ptr [rax], al; add al, ch; ret; 
0x000000000046f59c: sbb dword ptr [rdi], ecx; mov edx, 0x87309e1; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004777c3: sbb dword ptr [rdx + rcx], esi; call 0x61820; add rsp, 0x18; pop rbp; ret; 
0x0000000000422dea: sbb eax, 0x100049; test rbx, rbx; jne 0x22d8e; add rsp, 0x38; pop rbp; ret; 
0x000000000044a08e: sbb eax, 0x1065d5; mov dword ptr [rip + 0x1065d3], ecx; add rsp, 0x130; pop rbp; ret; 
0x00000000004720b4: sbb eax, 0x236b8; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000046fc4f: sbb eax, 0x257ce; call 0x4a3c0; add rsp, 0x38; pop rbp; ret; 
0x000000000046bb0d: sbb eax, 0x299da; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x0000000000408fa1: sbb eax, 0x3148a076; ret 0x8948; 
0x000000000045f0e7: sbb eax, 0x378f6; mov ecx, 0xf; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x0000000000479f9c: sbb eax, 0x3b5c7; mov rcx, qword ptr [rsp + 0x258]; mov edi, dword ptr [rsp + 0x2c]; call rdx; 
0x0000000000474ee3: sbb eax, 0x3ff88; add rsp, 0x48; pop rbp; ret; 
0x0000000000473067: sbb eax, 0x4244c; mov rcx, rax; mov rax, -1; add rsp, 0x10; pop rbp; ret; 
0x00000000004068ea: sbb eax, 0x48000000; add esp, 0x30; pop rbp; ret; 
0x000000000040e7b5: sbb eax, 0x48508b48; mov rcx, qword ptr [rdx]; mov esi, dword ptr [rbx + 0xc]; mov rax, r13; mov rbx, rsi; call rcx; 
0x0000000000408fbc: sbb eax, 0x48e1f748; xor eax, edx; nop; nop; ret; 
0x000000000042b706: sbb eax, 0x4e0c148; mov rax, qword ptr [rax + rdx]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000434410: sbb eax, 0x64e5d; mov ecx, 0x1c; call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x000000000042aa60: sbb eax, 0x739b3; call 0x2aaa0; add rsp, 0x10; pop rbp; ret; 
0x00000000004195f1: sbb eax, 0x8b480000; and al, 0x28; add rsp, 0x30; pop rbp; ret; 
0x0000000000407522: sbb eax, 0x8f4bb; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x00000000004074ba: sbb eax, 0x909ce; nop; call 0x4a480; add rsp, 0xf8; pop rbp; ret; 
0x0000000000460928: sbb eax, 0xc1e5b; add rsp, 0x18; pop rbp; ret; 
0x00000000004495c7: sbb eax, 0xcfb8c; ret; 
0x0000000000474ac1: sbb eax, 0xe0ba0f90; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xa948; 
0x0000000000441555: sbb eax, 0xe1116; call 0x2dba0; add rsp, 0x10; pop rbp; ret; 
0x0000000000445923: sbb eax, 0xfffff138; mov eax, dword ptr [rsp + 0x28]; call 0x2e340; add rsp, 0x18; pop rbp; ret; 
0x00000000004738ae: sbb eax, dword ptr [rax + rax]; add rsp, 0x18; pop rbp; ret; 
0x0000000000461541: sbb eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000042ad81: sbb eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000041ba61: sbb eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x0000000000461ba1: sbb eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x000000000045e850: sbb eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000045e850: sbb eax, dword ptr [rax]; add byte ptr [rax], al; syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x0000000000442b98: sbb eax, dword ptr [rbp + rcx*4 + 0x42]; dec dword ptr [rcx - 0x77]; ror dword ptr [rcx + 0xf45f0d0], 0xb1; add dword ptr [rdi], ecx; xchg eax, esp; ret 0xd284; 
0x000000000044acb2: sbb eax, dword ptr [rip + 0x33b900]; add byte ptr [rax], al; call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x000000000041b217: sbb eax, ebp; ret; 
0x000000000046effa: sbb ecx, dword ptr [rax - 0x77]; fsub dword ptr [rsi - 0x70]; call 0x58c80; add rsp, 0x18; pop rbp; ret; 
0x00000000004026be: sbb ecx, dword ptr [rdi]; xchg eax, edx; add eax, 0x14e3e5; add rsp, 0x50; pop rbp; ret; 
0x0000000000402586: sbb ecx, dword ptr [rdi]; xchg eax, edx; ret 0x1588; 
0x00000000004657e1: sbb edx, dword ptr [rbx]; add byte ptr [rax], al; add rsp, 0x120; pop rbp; ret; 
0x000000000043bb21: sbb edx, dword ptr [rcx + rax]; call 0x50e60; add rsp, 8; pop rbp; ret; 
0x000000000042e3ed: sbb esi, dword ptr [rbx + 6]; add rsp, 0x40; pop rbp; ret; 
0x000000000047124c: sbb esi, dword ptr [rsi + 0xe]; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x00000000004495be: sbb esi, esi; and ebx, esi; cmp edx, ebx; jg 0x495ad; mov dword ptr [rip + 0xcfb8c], ebx; ret; 
0x000000000046c130: sbb esi, esi; ret; 
0x0000000000473ae1: sbb esp, dword ptr [rsi + rdi*8 - 1]; mov rax, qword ptr [rsp + 0x10]; mov rbx, qword ptr [rsp + 8]; add rsp, 0x18; pop rbp; ret; 
0x000000000042005b: sbb r13b, byte ptr [rax]; inc qword ptr [rax + 0x140]; add rsp, 0x18; pop rbp; ret; 
0x0000000000418049: scasb al, byte ptr [rdi]; adc byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000418b42: scasb al, byte ptr [rdi]; adc byte ptr [rax], al; lock xadd qword ptr [rax], rdx; add rsp, 0x18; pop rbp; ret; 
0x0000000000454a9a: scasb al, byte ptr [rdi]; add rsp, 0x60; pop rbp; ret; 
0x000000000041103e: scasb al, byte ptr [rdi]; mov qword ptr [rax + 0x30], rdx; mov rax, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000040aaff: scasb al, byte ptr [rdi]; or byte ptr [rax], al; mov ebx, 8; ret; 
0x000000000042ee4a: scasb al, byte ptr [rdi]; std; dec dword ptr [rax - 0x77]; ret; 
0x00000000004585b6: scasb al, byte ptr [rdi]; test eax, 0x8948000c; ret; 
0x00000000004376bb: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add rsp, 0x30; pop rbp; ret; 
0x00000000004343dc: scasd eax, dword ptr [rdi]; add dword ptr [rax], eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000416ca5: scasd eax, dword ptr [rdi]; ret 0x10; 
0x0000000000403a57: scasd eax, dword ptr [rdi]; ret 0x8348; 
0x00000000004037f2: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000041569c: scasd eax, dword ptr [rdi]; ret; 
0x000000000040dee2: scasd eax, dword ptr [rdi]; retf 0xf47; mov dh, 0x1c; add dword ptr [rcx - 0x7d], eax; ret; 
0x00000000004339ad: scasd eax, dword ptr [rdi]; sar edi, 0xff; add rsp, 0x90; pop rbp; ret; 
0x0000000000415b2c: seta al; add rsp, 8; pop rbp; ret; 
0x0000000000402e2a: seta al; lea rax, [rax*2 - 1]; ret; 
0x00000000004549a1: setae al; add rsp, 0x10; pop rbp; ret; 
0x00000000004026bf: setb byte ptr [rip + 0x14e3e5]; add rsp, 0x50; pop rbp; ret; 
0x0000000000415c00: setbe al; add rsp, 8; pop rbp; ret; 
0x000000000042b388: setbe cl; cmp cl, dl; jne 0x2b395; add rsp, 0x10; pop rbp; ret; 
0x000000000043559c: sete al; add rsp, 0x10; pop rbp; ret; 
0x000000000046124a: sete al; add rsp, 0x18; pop rbp; ret; 
0x000000000047223e: sete al; add rsp, 0x20; pop rbp; ret; 
0x0000000000404132: sete al; add rsp, 0x28; pop rbp; ret; 
0x0000000000431a36: sete al; add rsp, 8; pop rbp; ret; 
0x00000000004600bc: sete al; nop; ret; 
0x0000000000401980: sete al; ret; 
0x0000000000403f2b: sete al; setnp cl; and eax, ecx; ret; 
0x000000000040a543: sete bh; test dil, dil; je 0xa52c; add rsp, 0x30; pop rbp; ret; 
0x000000000045cf37: sete byte ptr [rsp + 8]; ret; 
0x0000000000402ed7: sete cl; lea rax, [rcx + rax*2 - 1]; ret; 
0x000000000047213f: sete cl; mov eax, ecx; add rsp, 0x20; pop rbp; ret; 
0x0000000000468591: sete cl; mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x000000000041da3f: sete cl; test cl, cl; je 0x1da14; add rsp, 0x18; pop rbp; ret; 
0x000000000042c971: sete cl; test cl, cl; je 0x2c959; ret; 
0x000000000040a542: sete dil; test dil, dil; je 0xa52c; add rsp, 0x30; pop rbp; ret; 
0x000000000040b8a1: sete dl; mov rbx, rcx; mov ecx, edx; add rsp, 0x38; pop rbp; ret; 
0x0000000000403f80: sete dl; setnp cl; and edx, ecx; and eax, edx; ret; 
0x0000000000418a4d: sete dl; test dl, dl; je 0x189e4; mov rax, r8; mov rbx, rcx; ret; 
0x000000000041d965: sete dl; test dl, dl; je 0x1d934; add rsp, 0x20; pop rbp; ret; 
0x0000000000442ba7: sete dl; test dl, dl; je 0x42b90; add rsp, 0x58; pop rbp; ret; 
0x000000000043806e: sete dl; test dl, dl; jne 0x3807b; add rsp, 0x20; pop rbp; ret; 
0x0000000000415bd6: setg al; add rsp, 8; pop rbp; ret; 
0x0000000000402ed4: setg al; sete cl; lea rax, [rcx + rax*2 - 1]; ret; 
0x0000000000440cb9: setge al; pop rbp; ret; 
0x00000000004707ae: setl al; add rsp, 0x30; pop rbp; ret; 
0x0000000000440d96: setle al; pop rbp; ret; 
0x000000000044b3ec: setne al; add rsp, 0x108; pop rbp; ret; 
0x0000000000469a99: setne al; add rsp, 0x10; pop rbp; ret; 
0x0000000000422d2e: setne al; add rsp, 0x20; pop rbp; ret; 
0x000000000040a932: setne al; add rsp, 0x30; pop rbp; ret; 
0x000000000045265c: setne al; nop; ret; 
0x000000000046049a: setne al; pop rbp; ret; 
0x000000000045898a: setne al; ret; 
0x0000000000469bab: setne cl; mov eax, ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000458ea5: setne cl; mov eax, ecx; ret; 
0x0000000000403f2e: setnp cl; and eax, ecx; ret; 
0x0000000000403f83: setnp cl; and edx, ecx; and eax, edx; ret; 
0x00000000004203b4: sgdt [rax]; add byte ptr [rbp - 0x76b700b6], cl; ret; 
0x000000000045e907: shl ah, 0; add byte ptr [rax], al; syscall; 
0x000000000045a3ea: shl byte ptr [rsi + 0x48], 0xf; jle 0x5a3b0; ret; 
0x00000000004651ae: shl byte ptr [rsi + 0xf], 0x7e; ret 0x8d4c; 
0x0000000000403f30: shl dword ptr [rcx], 0xc8; ret; 
0x0000000000403f85: shl dword ptr [rcx], 0xca; and eax, edx; ret; 
0x000000000045a660: shl dword ptr [rsi + 0x45], 0xf; out dx, eax; jmp qword ptr [rsi + 0x4c]; 
0x000000000045a437: shl dword ptr [rsi + 0x48], cl; movd eax, mm2; ret; 
0x000000000040363d: shl dword ptr [rsi - 0x70], cl; call 0x36c0; mov rbx, rcx; add rsp, 0x40; pop rbp; ret; 
0x0000000000476cdd: shl dword ptr [rsi - 0x70], cl; call 0x75420; add rsp, 0x20; pop rbp; ret; 
0x0000000000426ae1: shl eax, 0xd; sub rsp, -0x80; pop rbp; ret; 
0x000000000044960e: shl eax, 3; add rsp, 8; pop rbp; ret; 
0x000000000042b708: shl eax, 4; mov rax, qword ptr [rax + rdx]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000040ab10: shl eax, 4; mov rdx, qword ptr [rcx + rax]; mov rbx, qword ptr [rcx + rax + 8]; mov rax, rdx; nop; ret; 
0x0000000000461b8d: shl eax, 7; add rax, rcx; add rsp, 8; pop rbp; ret; 
0x000000000042994f: shl ebx, 0x2a; or rsi, rbx; mov rax, rsi; ret; 
0x0000000000428d99: shl ebx, 0xd; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000452658: shl ebx, cl; test dl, bl; setne al; nop; ret; 
0x00000000004424b5: shl ecx, 4; lea rdx, [rip + 0xdd781]; mov rax, qword ptr [rdx + rcx]; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000042bd2b: shl ecx, 4; mov rax, rdx; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x0000000000429c09: shl ecx, 6; lea rax, [rsi + r9]; mov rbx, rdx; ret; 
0x0000000000429bcd: shl ecx, 6; sub r9, rsi; mov rax, r9; mov rbx, rdx; ret; 
0x0000000000426fcb: shl edi, 0x16; sub rdi, rsi; mov rbx, rdi; lea rdx, [rsp + 0x110]; call rcx; 
0x0000000000428ecd: shl edi, 0xd; mov rax, rcx; mov rbx, rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000403138: shl edi, cl; sete al; ret; 
0x000000000045ce2d: shl edx, 0x20; add rax, rdx; mov qword ptr [rsp + 8], rax; ret; 
0x00000000004122c1: shl edx, cl; neg rdx; and qword ptr [rsi + rax*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000403564: shl edx, cl; shr edx, 0x10; bsf edx, edx; je 0x351a; mov qword ptr [r8], rdx; ret; 
0x0000000000428235: shl esi, 0x2a; or rsi, rdx; mov rax, rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000044a1aa: shl esi, 4; mov rax, qword ptr [rdx + rsi]; mov rbx, qword ptr [rdx + rsi + 8]; add rsp, 0x60; pop rbp; ret; 
0x00000000004295fd: shl esi, cl; not rsi; and qword ptr [rax + rbx*8], rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004294fb: shl esi, cl; or qword ptr [rax + rbx*8], rsi; add rsp, 0x10; pop rbp; ret; 
0x0000000000429c08: shl r9, 6; lea rax, [rsi + r9]; mov rbx, rdx; ret; 
0x0000000000429bcc: shl r9, 6; sub r9, rsi; mov rax, r9; mov rbx, rdx; ret; 
0x0000000000426ae0: shl rax, 0xd; sub rsp, -0x80; pop rbp; ret; 
0x000000000044960d: shl rax, 3; add rsp, 8; pop rbp; ret; 
0x000000000042b707: shl rax, 4; mov rax, qword ptr [rax + rdx]; mov ebx, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000040ab0f: shl rax, 4; mov rdx, qword ptr [rcx + rax]; mov rbx, qword ptr [rcx + rax + 8]; mov rax, rdx; nop; ret; 
0x0000000000461b8c: shl rax, 7; add rax, rcx; add rsp, 8; pop rbp; ret; 
0x000000000042994e: shl rbx, 0x2a; or rsi, rbx; mov rax, rsi; ret; 
0x0000000000428d98: shl rbx, 0xd; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004424b4: shl rcx, 4; lea rdx, [rip + 0xdd781]; mov rax, qword ptr [rdx + rcx]; mov rbx, qword ptr [rdx + rcx + 8]; ret; 
0x000000000042bd2a: shl rcx, 4; mov rax, rdx; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x0000000000426fca: shl rdi, 0x16; sub rdi, rsi; mov rbx, rdi; lea rdx, [rsp + 0x110]; call rcx; 
0x0000000000428ecc: shl rdi, 0xd; mov rax, rcx; mov rbx, rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000403137: shl rdi, cl; sete al; ret; 
0x000000000045ce2c: shl rdx, 0x20; add rax, rdx; mov qword ptr [rsp + 8], rax; ret; 
0x00000000004122c0: shl rdx, cl; neg rdx; and qword ptr [rsi + rax*8], rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000428234: shl rsi, 0x2a; or rsi, rdx; mov rax, rsi; add rsp, 0x18; pop rbp; ret; 
0x000000000044a1a9: shl rsi, 4; mov rax, qword ptr [rdx + rsi]; mov rbx, qword ptr [rdx + rsi + 8]; add rsp, 0x60; pop rbp; ret; 
0x00000000004295fc: shl rsi, cl; not rsi; and qword ptr [rax + rbx*8], rsi; add rsp, 0x10; pop rbp; ret; 
0x00000000004294fa: shl rsi, cl; or qword ptr [rax + rbx*8], rsi; add rsp, 0x10; pop rbp; ret; 
0x000000000042bd30: shr al, 1; mov bl, byte ptr [rdi]; add eax, dword ptr [rax]; add rsp, 0x18; pop rbp; ret; 
0x000000000040bef7: shr al, 1; ret; 
0x000000000045f1ad: shr al, 1; sub eax, 0x48fffa84; add esp, 0x18; pop rbp; ret; 
0x0000000000465ddf: shr al, cl; cmp ecx, dword ptr [rdx]; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x000000000044c14f: shr bl, 0x10; mov rax, rsi; add rsp, 0x28; pop rbp; ret; 
0x00000000004300ae: shr bl, 0x13; add rsp, 0x1c0; pop rbp; ret; 
0x0000000000447cc8: shr bl, 0x15; sub rsp, -0x80; pop rbp; ret; 
0x000000000044016d: shr bl, 0x17; xor eax, eax; add rsp, 0x428; pop rbp; ret; 
0x000000000041cd6c: shr bl, 0x19; add rsp, 0x20; pop rbp; ret; 
0x0000000000442196: shr bl, 0x27; cmp dword ptr [rip + 0x10e7e0], 1; jg 0x421ab; add rsp, 0x88; pop rbp; ret; 
0x00000000004563ab: shr bl, 0x7e; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x0000000000411c39: shr bl, 0xa; add rsp, 0x58; pop rbp; ret; 
0x000000000045f6d8: shr bl, 0xa; mov ecx, 0x2a; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000041b108: shr bl, 0xa; mov rax, qword ptr [rdx]; call rax; 
0x0000000000451d54: shr bl, 0xb; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000041d6e9: shr bl, 0xe; subsd xmm0, xmm1; cvttsd2si rax, xmm0; bts rax, 0x3f; xchg qword ptr [rcx + 0x18], rax; ret; 
0x00000000004606c8: shr bl, 8; mov rcx, rdi; call 0x41c0; add rsp, 0x68; pop rbp; ret; 
0x000000000043ce71: shr bl, 9; add rsp, 0x3a0; pop rbp; ret; 
0x0000000000431b2b: shr bl, 9; add rsp, 0x40; pop rbp; ret; 
0x0000000000444650: shr bl, 9; add rsp, 0x68; pop rbp; ret; 
0x000000000046de3a: shr bl, cl; adc byte ptr [rcx + 1], cl; ret 0x8149; 
0x000000000042d8f8: shr bl, cl; adc dword ptr [rax + 1], edi; add rsp, 0x2020; pop rbp; ret; 
0x000000000044304b: shr bl, cl; add ecx, dword ptr [rax - 0x77]; ret; 
0x000000000040a0e0: shr bl, cl; add ecx, dword ptr [rax - 1]; ret 0x3948; 
0x000000000044ac01: shr bl, cl; and al, 0x31; ror byte ptr [rax - 0x7d], 0xc4; pop rbp; ret; 
0x000000000043bdae: shr bl, cl; or al, 0x48; add esp, 0x30; pop rbp; ret; 
0x00000000004234a1: shr bl, cl; or dword ptr [rbx + 0x1266163d], ecx; add byte ptr [rcx - 0x77], cl; ret 0x7c89; 
0x0000000000401236: shr bl, cl; or eax, 0xdb31c031; pop rbp; ret; 
0x000000000046aae8: shr bl, cl; push rbp; xor eax, eax; add rsp, 0x78; pop rbp; ret; 
0x0000000000474abf: shr bl, cl; sbb eax, 0xe0ba0f90; or cl, byte ptr [rdi]; xchg eax, edx; ret 0xa948; 
0x0000000000424cb4: shr byte ptr [rbx - 0x70], 0x90; xor ecx, ecx; xchg byte ptr [rax], cl; ret; 
0x000000000045a30a: shr byte ptr [rdx], cl; add byte ptr [rax], al; ret; 
0x000000000042f882: shr cl, cl; add byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x0000000000401acf: shr cl, cl; stosd dword ptr [rdi], eax; add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000042f0c9: shr dword ptr [rbx - 0x76b70003], cl; ret; 
0x00000000004686a6: shr eax, 0x37; or rax, rdx; mov ecx, esi; add rsp, 0x20; pop rbp; ret; 
0x0000000000401049: shr eax, 0xd1; ret 5; 
0x0000000000410cb6: shr eax, 1; add al, 0xd0; add al, 0; add rsp, 0x18; pop rbp; ret; 
0x0000000000472178: shr eax, 1; and cl, dil; jmp qword ptr [rsi - 0x70]; 
0x0000000000421159: shr eax, 1; and dword ptr [rax + rax + 0x48c03100], ebp; add esp, 0xf8; pop rbp; ret; 
0x0000000000429792: shr eax, cl; and eax, 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000402e64: shr eax, cl; and rax, 1; lea rax, [rax*2 - 1]; ret; 
0x000000000040fcc5: shr eax, cl; xor eax, 0x48ffffee; add esp, 0x98; pop rbp; ret; 
0x000000000041f4bd: shr ebx, 0xd; mov rax, rdi; add rsp, 0x40; pop rbp; ret; 
0x00000000004549cc: shr ebx, 2; xor ecx, ecx; mov eax, ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000456114: shr ebx, 2; xor ecx, ecx; mov eax, ecx; add rsp, 0x120; pop rbp; ret; 
0x000000000045fbae: shr ebx, 2; xor ecx, ecx; mov eax, ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000472cf5: shr ebx, 2; xor ecx, ecx; mov eax, ecx; add rsp, 0x28; pop rbp; ret; 
0x0000000000415bb1: shr ebx, 2; xor ecx, ecx; mov eax, ecx; add rsp, 8; pop rbp; ret; 
0x000000000040120c: shr ebx, 2; xor ecx, ecx; mov eax, ecx; pop rbp; ret; 
0x0000000000403f12: shr ebx, 2; xor ecx, ecx; mov eax, ecx; ret; 
0x000000000041255a: shr ebx, 3; mov rax, qword ptr [rsp + 0xa0]; call 0x5d9c0; add rsp, 0xa8; pop rbp; ret; 
0x0000000000413727: shr ebx, cl; mov qword ptr [rax + 0x40], rbx; add rsp, 0x48; pop rbp; ret; 
0x0000000000402ae3: shr ecx, 0x20; lea rax, [rcx + rdx]; and eax, 0x7f; ret; 
0x000000000042df49: shr ecx, 0x3f; lea rax, [rcx + rdx]; sar rax, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000403132: shr edi, cl; sub rdi, rsi; shl rdi, cl; sete al; ret; 
0x0000000000403566: shr edx, 0x10; bsf edx, edx; je 0x351a; mov qword ptr [r8], rdx; ret; 
0x000000000042c993: shr esi, 0x10; and esi, 0xfffff; nop dword ptr [rax]; cmp esi, ecx; je 0x2c9ac; ret; 
0x0000000000402ebc: shr esi, cl; and rsi, 1; lea rax, [rsi*2 - 1]; ret; 
0x00000000004686a5: shr rax, 0x37; or rax, rdx; mov ecx, esi; add rsp, 0x20; pop rbp; ret; 
0x0000000000429791: shr rax, cl; and eax, 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000402e63: shr rax, cl; and rax, 1; lea rax, [rax*2 - 1]; ret; 
0x000000000041f4bc: shr rbx, 0xd; mov rax, rdi; add rsp, 0x40; pop rbp; ret; 
0x0000000000412559: shr rbx, 3; mov rax, qword ptr [rsp + 0xa0]; call 0x5d9c0; add rsp, 0xa8; pop rbp; ret; 
0x0000000000413726: shr rbx, cl; mov qword ptr [rax + 0x40], rbx; add rsp, 0x48; pop rbp; ret; 
0x0000000000402ae2: shr rcx, 0x20; lea rax, [rcx + rdx]; and eax, 0x7f; ret; 
0x000000000042df48: shr rcx, 0x3f; lea rax, [rcx + rdx]; sar rax, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000403131: shr rdi, cl; sub rdi, rsi; shl rdi, cl; sete al; ret; 
0x0000000000402ebb: shr rsi, cl; and rsi, 1; lea rax, [rsi*2 - 1]; ret; 
0x00000000004076c8: sldt word ptr [rax]; add bl, ch; add ecx, dword ptr [rax - 1]; ret 0x3949; 
0x000000000043ad19: sldt word ptr [rax]; add byte ptr [rax - 0x39], cl; ret; 
0x000000000045cf33: sldt word ptr [rax]; add byte ptr [rdi], cl; xchg eax, esp; and al, 8; ret; 
0x0000000000444a4e: sldt word ptr [rax]; call 0x371e0; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000045b54c: sldt word ptr [rax]; jmp rax; 
0x0000000000401157: stc; adc al, 0x75; or cl, byte ptr [rax - 0x75]; add rsp, 8; pop rbp; ret; 
0x000000000045b406: stc; adc byte ptr [rdi + 9], dh; lea rax, [rip + 0x1ef]; jmp rax; 
0x000000000046bf77: stc; adc dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rax + 0x40]; add rsp, 0x28; pop rbp; ret; 
0x000000000040106a: stc; adc dword ptr [rbp + 5], esi; mov rax, qword ptr [rax + 0x40]; ret; 
0x000000000045b4c3: stc; add byte ptr [rax + 0x9770000], al; lea rax, [rip + 0x9ef]; jmp rax; 
0x000000000045b469: stc; add byte ptr [rax + rax], al; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x5e9]; jmp rax; 
0x000000000045b433: stc; add byte ptr [rax], 0; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x39f]; jmp rax; 
0x000000000045b49f: stc; add byte ptr [rax], ah; add byte ptr [rax], al; ja 0x5b4af; lea rax, [rip + 0x853]; jmp rax; 
0x000000000045b51d: stc; add byte ptr [rax], al; adc byte ptr [rax], al; ja 0x5b52d; lea rax, [rip + 0xdf5]; jmp rax; 
0x000000000045b4f9: stc; add byte ptr [rax], al; add al, 0; ja 0x5b509; lea rax, [rip + 0xc59]; jmp rax; 
0x000000000045b4e7: stc; add byte ptr [rax], al; add al, byte ptr [rax]; ja 0x5b4f7; lea rax, [rip + 0xb8b]; jmp rax; 
0x000000000045b5d1: stc; add byte ptr [rax], al; add byte ptr [rax + 0x77], al; or dword ptr [rax - 0x73], ecx; add eax, 0x1601; jmp rax; 
0x000000000045b553: stc; add byte ptr [rax], al; add byte ptr [rax], 0x77; or dword ptr [rax - 0x73], ecx; add eax, 0x105f; jmp rax; 
0x000000000045b5bf: stc; add byte ptr [rax], al; add byte ptr [rax], ah; ja 0x5b5cf; lea rax, [rip + 0x1533]; jmp rax; 
0x000000000045b59b: stc; add byte ptr [rax], al; add byte ptr [rax], cl; ja 0x5b5ab; lea rax, [rip + 0x1397]; jmp rax; 
0x000000000045b5ad: stc; add byte ptr [rax], al; add byte ptr [rax], dl; ja 0x5b5bd; lea rax, [rip + 0x1465]; jmp rax; 
0x000000000045b565: stc; add byte ptr [rax], al; add byte ptr [rcx], al; ja 0x5b575; lea rax, [rip + 0x112d]; jmp rax; 
0x000000000045b4b1: stc; add byte ptr [rax], al; add byte ptr [rdi + 9], dh; lea rax, [rip + 0x921]; jmp rax; 
0x000000000045b541: stc; add byte ptr [rax], al; add byte ptr [rdi + 9], sil; lea rax, [rip + 0xf91]; jmp rax; 
0x000000000045b589: stc; add byte ptr [rax], al; add byte ptr [rdi + rsi*2], al; or dword ptr [rax - 0x73], ecx; add eax, 0x12c9; jmp rax; 
0x000000000041218c: stc; add byte ptr [rax], al; add byte ptr [rdi], cl; sbb dword ptr [rbx + 1], 0; add byte ptr [rcx - 0x77], cl; ret 0xc149; 
0x000000000045b577: stc; add byte ptr [rax], al; add byte ptr [rdx], al; ja 0x5b587; lea rax, [rip + 0x11fb]; jmp rax; 
0x000000000045b4d5: stc; add byte ptr [rax], al; add dword ptr [rax], eax; ja 0x5b4e5; lea rax, [rip + 0xabd]; jmp rax; 
0x000000000045b52f: stc; add byte ptr [rax], al; and byte ptr [rax], al; ja 0x5b53f; lea rax, [rip + 0xec3]; jmp rax; 
0x000000000045b50b: stc; add byte ptr [rax], al; or byte ptr [rax], al; ja 0x5b51b; lea rax, [rip + 0xd27]; jmp rax; 
0x000000000045b47b: stc; add byte ptr [rax], cl; add byte ptr [rax], al; ja 0x5b48b; lea rax, [rip + 0x6b7]; jmp rax; 
0x000000000045b48d: stc; add byte ptr [rax], dl; add byte ptr [rax], al; ja 0x5b49d; lea rax, [rip + 0x785]; jmp rax; 
0x000000000045b445: stc; add byte ptr [rcx], al; add byte ptr [rax], al; ja 0x5b455; lea rax, [rip + 0x44d]; jmp rax; 
0x000000000045b457: stc; add byte ptr [rdx], al; add byte ptr [rax], al; ja 0x5b467; lea rax, [rip + 0x51b]; jmp rax; 
0x00000000004188b3: stc; add dword ptr [rbp + 6], esi; add rsp, 0x10; pop rbp; ret; 
0x000000000046d342: stc; add dword ptr [rbp + 6], esi; add rsp, 0x28; pop rbp; ret; 
0x000000000047213d: stc; add dword ptr [rdi], ecx; xchg eax, esp; ror dword ptr [rcx - 0x3b7cb738], 0x20; pop rbp; ret; 
0x0000000000401b96: stc; add eax, dword ptr [rcx + 0xf]; xchg eax, esp; ret 0x1f0f; 
0x00000000004395b8: stc; add ecx, dword ptr [rdi]; xchg eax, esp; ret 0x5488; 
0x000000000047631c: stc; add rsp, 0x28; pop rbp; ret; 
0x0000000000473d38: stc; add rsp, 0x88; pop rbp; ret; 
0x000000000043bdcb: stc; and byte ptr [rcx], bl; jmp qword ptr [rcx]; 
0x000000000045b415: stc; and byte ptr [rdi + 9], dh; lea rax, [rip + 0x280]; jmp rax; 
0x00000000004186e4: stc; call 0x18800; add rsp, 0x50; pop rbp; ret; 
0x00000000004606cd: stc; call 0x41c0; add rsp, 0x68; pop rbp; ret; 
0x000000000046a682: stc; call 0x5d320; add rsp, 0x100; pop rbp; ret; 
0x000000000047b5ea: stc; call 0x6fca0; mov r9, rax; mov rcx, qword ptr [r9 + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000477c34: stc; call 0x6fca0; mov rcx, rax; mov rcx, qword ptr [rcx + 0xf8]; mov rax, rbx; call rcx; 
0x000000000047afa4: stc; call 0x6fca0; mov rdx, rax; mov rcx, qword ptr [rdx + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000444b72: stc; call rsi; 
0x000000000046bd8f: stc; dec dword ptr [rax - 0x77]; ret; 
0x000000000045b424: stc; ja 0x5b431; lea rax, [rip + 0x311]; jmp rax; 
0x0000000000464929: stc; jl 0x648e7; add rsp, 0x60; pop rbp; ret; 
0x000000000047217c: stc; jmp qword ptr [rsi - 0x70]; 
0x000000000045ccca: stc; ret; 
0x000000000046f122: stc; sbb byte ptr [rbp + 0xa], dh; mov rax, qword ptr [rbx + 8]; add rsp, 0x18; pop rbp; ret; 
0x000000000046f642: stc; sbb dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rax + 0x40]; add rsp, 0x28; pop rbp; ret; 
0x000000000045ce2b: stc; shl rdx, 0x20; add rax, rdx; mov qword ptr [rsp + 8], rax; ret; 
0x000000000044a9d4: stc; sub eax, 0xc6440f48; mov ebx, 1; nop; ret; 
0x000000000045ed62: std; add byte ptr [rsi + 0x49], dh; cmp ecx, 0; je 0x5ed8c; mov eax, 0xba; syscall; 
0x0000000000439966: std; dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x18; pop rbp; ret; 
0x000000000042cf1c: std; dec dword ptr [rax - 0x75]; and al, 0x18; add rsp, 0x20; pop rbp; ret; 
0x0000000000439f66: std; dec dword ptr [rax - 0x75]; or eax, 0x64481; mov rax, qword ptr [rsp + 0x20]; lea rdx, [rip + 0x64475]; call rcx; 
0x0000000000439e51: std; dec dword ptr [rax - 0x75]; or eax, 0x64596; mov rax, qword ptr [rsp + 0x18]; lea rdx, [rip + 0x6458a]; call rcx; 
0x000000000042ee4b: std; dec dword ptr [rax - 0x77]; ret; 
0x000000000042e327: std; dec dword ptr [rax - 0x77]; retf; add rsp, 0x38; pop rbp; ret; 
0x0000000000429770: std; dec dword ptr [rax - 0x77]; ror dword ptr [rax - 0x77], 0xc8; add rsp, 0x30; pop rbp; ret; 
0x0000000000457dc5: std; dec dword ptr [rax - 0x7b]; sal byte ptr [rbp + 9], 0x48; add esp, 0x88; pop rbp; ret; 
0x000000000046d00e: std; dec dword ptr [rcx - 0x77]; fisttp qword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000462930: std; inc dword ptr [rax]; add byte ptr [rbx + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x0000000000462c80: std; inc dword ptr [rax]; add byte ptr [rbx + 1], bh; add rsp, 0x18; pop rbp; ret; 
0x000000000043783c: std; jmp qword ptr [rsi - 0x70]; 
0x000000000046170a: std; mov byte ptr [rsp + 0xe], al; mov byte ptr [rsp + 0xf], al; mov rdx, qword ptr [rsp + 0x40]; mov rcx, qword ptr [rdx]; call rcx; 
0x0000000000439b51: std; push qword ptr [rcx]; sal byte ptr [rcx], 0xdb; add rsp, 0x28; pop rbp; ret; 
0x00000000004670a1: sti; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041bc01: sti; add byte ptr fs:[rax], al; add rsp, 0x40; pop rbp; ret; 
0x00000000004615c7: sti; add eax, dword ptr [rbp - 0x8cb8b25]; ret 7; 
0x000000000045ef16: sti; add rcx, rdx; add rsp, 0x10; pop rbp; ret; 
0x00000000004183f9: sti; add rsp, 0x10; pop rbp; nop; ret; 
0x0000000000428ed5: sti; add rsp, 0x18; pop rbp; ret; 
0x000000000041f0f5: sti; add rsp, 0x40; pop rbp; ret; 
0x000000000046b361: sti; and bh, bh; dec dword ptr [rax - 0x7d]; ret 0x4830; 
0x000000000046b693: sti; call 0x5a200; add rsp, 0x18; pop rbp; ret; 
0x000000000047a890: sti; call 0x77e20; add rsp, 0x90; pop rbp; ret; 
0x000000000040e0b9: sti; call rcx; 
0x000000000040d28e: sti; call rsi; 
0x00000000004502ef: sti; dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x20; pop rbp; ret; 
0x0000000000471c0d: sti; dec dword ptr [rax - 0x75]; and al, 0x50; mov rcx, qword ptr [rcx + 0xf8]; mov rax, qword ptr [rsp + 0xb0]; call rcx; 
0x000000000044eed5: sti; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x10; pop rbp; ret; 
0x0000000000459eca: sti; dec dword ptr [rbx + 0x481c2444]; add esp, 0x20; pop rbp; ret; 
0x0000000000479d79: sti; inc dword ptr [rbp + 0x484175c0]; mov ecx, dword ptr [rsp + 0x30]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x178]; call rcx; 
0x0000000000479c79: sti; inc dword ptr [rbp + 0x484175c0]; mov ecx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x180]; call rcx; 
0x0000000000429aa2: sti; ja 0x29ab1; call 0x29b20; add rsp, 0x18; pop rbp; ret; 
0x0000000000426fd3: sti; lea rdx, [rsp + 0x110]; call rcx; 
0x000000000040f1ab: sti; mov byte ptr [rbx + 8], cl; add rsp, 0x30; pop rbp; ret; 
0x000000000041075d: sti; mov byte ptr [rbx + 8], cl; add rsp, 0x60; pop rbp; ret; 
0x00000000004078c2: sti; mov rcx, r8; call 0x4a6a0; add rsp, 0x140; pop rbp; ret; 
0x0000000000464948: sti; mov rcx, r9; call rsi; 
0x000000000040f49d: sti; nop; call rcx; 
0x00000000004495a5: sti; or al, 0; add byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x00000000004495c9: sti; or al, 0; ret; 
0x0000000000414f41: sti; ret; 
0x000000000042f20a: stosb byte ptr [rdi], al; std; dec dword ptr [rax - 0x77]; ret; 
0x00000000004068f7: stosb byte ptr [rdi], al; sub ecx, dword ptr [rcx]; add byte ptr [rbx + 0x1d], bh; add rsp, 0x30; pop rbp; ret; 
0x0000000000425807: stosd dword ptr [rdi], eax; adc al, byte ptr [rax]; call 0xa5c0; add rsp, 0x28; pop rbp; ret; 
0x0000000000417ede: stosd dword ptr [rdi], eax; adc byte ptr [rax], al; call 0xa5c0; add rsp, 0x18; pop rbp; ret; 
0x0000000000401ad1: stosd dword ptr [rdi], eax; add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000466695: stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000415a62: stosd dword ptr [rdi], eax; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x0000000000461b12: stosd dword ptr [rdi], eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000445671: stosd dword ptr [rdi], eax; cld; dec dword ptr [rax - 0x77]; ret; 
0x0000000000473a26: stosd dword ptr [rdi], eax; or al, byte ptr [rax]; mov rsi, qword ptr [rdx]; mov rax, rcx; call rsi; 
0x000000000042950d: stosd dword ptr [rdi], eax; rcl dword ptr [rax - 0x27f376b8], 1; add rsp, 0x10; pop rbp; ret; 
0x000000000046b50a: stosd dword ptr [rdi], eax; ret 0x8845; 
0x0000000000441a53: stosd dword ptr [rdi], eax; ret; 
0x00000000004636e5: stosd dword ptr [rdi], eax; rol dword ptr [rcx + rcx*4 + 0x4c], 0xb4; and byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000042f0ca: stosd dword ptr [rdi], eax; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000040a2b1: stosd dword ptr [rdi], eax; syscall; 
0x0000000000459c6b: str word ptr [eax - 0x73]; or eax, 0xbf4df; xchg dword ptr [rcx], eax; add rsp, 0x10; pop rbp; ret; 
0x000000000042dc28: str word ptr [r9 - 0x77]; or byte ptr [r8 - 0x77], cl; add eax, 0xf4cfa; add rsp, 0x40; pop rbp; ret; 
0x000000000045810a: str word ptr [rax + 0x39]; retf 0x930f; shr ebx, 2; xor ecx, ecx; mov eax, ecx; ret; 
0x0000000000458b68: str word ptr [rax - 0x73]; add eax, 0xffface6f; mov qword ptr [rip + 0xf7a58], rax; pop rbp; ret; 
0x0000000000459c6c: str word ptr [rax - 0x73]; or eax, 0xbf4df; xchg dword ptr [rcx], eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000458282: str word ptr [rax - 0x75]; add eax, 0xcac65; call 0x17da0; add rsp, 0x18; pop rbp; ret; 
0x000000000042346e: str word ptr [rcx + 0xe281d7]; add byte ptr [rax], al; add byte ptr [rbp + 0x442875d2], 0x8d; add qword ptr [r9 - 0x77], r9; ret 0xf889; 
0x000000000042dc29: str word ptr [rcx - 0x77]; or byte ptr [r8 - 0x77], cl; add eax, 0xf4cfa; add rsp, 0x40; pop rbp; ret; 
0x000000000040a3d0: sub al, 0; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x0000000000449c2a: sub al, 0x48; mov ebx, dword ptr [rsp + 0xc8]; add rsp, 0xd8; pop rbp; ret; 
0x000000000041d6f3: sub al, 0xc0; bts rax, 0x3f; xchg qword ptr [rcx + 0x18], rax; ret; 
0x000000000040c5c3: sub al, 0xc0; inc eax; ret; 
0x0000000000472822: sub al, 4; add byte ptr [rax - 0x77], cl; ret 0x4eb; 
0x0000000000432c70: sub al, 5; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x000000000045f6dc: sub al, byte ptr [rax]; add byte ptr [rax], al; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x0000000000404cb1: sub al, ch; or dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000041f2f1: sub al, ch; xchg rax, r14; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000401a06: sub al, ch; xor al, 0; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000454ae8: sub al, ch; xor al, byte ptr [rdx]; add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x000000000045cec2: sub bh, byte ptr [rbx]; verr word ptr [rsi + 0xf]; cmp ah, bl; add eax, 0xf3b31; movq rax, xmm0; ret; 
0x000000000042235c: sub bl, 0x12; add al, ch; mov ebx, 0x48ffffa9; add esp, 0x48; pop rbp; ret; 
0x000000000040b86c: sub bl, ch; add ecx, dword ptr [rax - 0x77]; ret; 
0x000000000042aad9: sub bl, ch; or al, 0x48; add esp, 0x18; pop rbp; ret; 
0x000000000045490c: sub byte ptr [r10 + rdx + 0x48], sil; mov ecx, dword ptr [rdx + 0x10]; cmp rax, rcx; jne 0x5491f; mov eax, 0x21; ret; 
0x00000000004305f5: sub byte ptr [r8 - 0x75], cl; pop rsp; and al, 0x18; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000044b0a7: sub byte ptr [r8 - 0x75], cl; push rbx; and byte ptr [rax - 1], cl; ret 0x8b48; 
0x000000000045ecdb: sub byte ptr [rax + 0xca], bh; syscall; 
0x000000000045ecdb: sub byte ptr [rax + 0xca], bh; syscall; mov dword ptr [rsp + 0x30], eax; ret; 
0x0000000000446031: sub byte ptr [rax + 1], cl; ret; 
0x0000000000473a96: sub byte ptr [rax + rax - 0x99d18], al; jmp qword ptr [rsi - 0x70]; 
0x000000000040ee46: sub byte ptr [rax + rax], dl; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x0000000000459034: sub byte ptr [rax - 0x173776b8], dl; ret 0xfb13; 
0x000000000045eba5: sub byte ptr [rax - 0x39], cl; and al, 0x30; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000411347: sub byte ptr [rax - 0x46], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret 0xc148; 
0x0000000000429e78: sub byte ptr [rax - 0x73], cl; add al, 0xc8; lea rax, [rax + 0x30]; add rsp, 0x10; pop rbp; ret; 
0x0000000000418e48: sub byte ptr [rax - 0x73], cl; and al, 0x20; call 0x34660; add rsp, 0x30; pop rbp; ret; 
0x00000000004642e8: sub byte ptr [rax - 0x73], cl; dec qword ptr [rax - 0x77]; and al, 0x28; mov rax, rbx; mov rbx, rdx; call rsi; 
0x0000000000464728: sub byte ptr [rax - 0x73], cl; dec qword ptr [rax - 0x77]; and al, 0x68; mov rax, rbx; mov rbx, rdx; call rsi; 
0x000000000045ec71: sub byte ptr [rax - 0x75], cl; add eax, 0xc3a87; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x0000000000459aa5: sub byte ptr [rax - 0x75], cl; and al, 0x30; add rsp, 0x40; pop rbp; ret; 
0x0000000000454e08: sub byte ptr [rax - 0x75], cl; or cl, byte ptr [rax - 0x75]; add eax, 0xcd88d; lea rbx, [rsp + 0x10]; call rcx; 
0x00000000004305f6: sub byte ptr [rax - 0x75], cl; pop rsp; and al, 0x18; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000044e9a9: sub byte ptr [rax - 0x75], cl; pop rsp; and al, 0x40; mov rsi, rcx; mov rcx, qword ptr [rsp + 0x20]; call rsi; 
0x0000000000469f2d: sub byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax - 1], cl; ret 0x8b4c; 
0x000000000044b0a8: sub byte ptr [rax - 0x75], cl; push rbx; and byte ptr [rax - 1], cl; ret 0x8b48; 
0x0000000000451b4c: sub byte ptr [rax - 0x75], cl; xchg eax, ecx; add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; ret 0x675; 
0x0000000000409d5f: sub byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 0xc8; add rsp, 0x18; pop rbp; ret; 
0x000000000045cdaa: sub byte ptr [rax - 0x77], cl; hlt; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x0000000000439f93: sub byte ptr [rax - 0x77], cl; int1; call 0x402a0; add rsp, 0x60; pop rbp; ret; 
0x0000000000473d32: sub byte ptr [rax - 0x77], cl; mov rcx, rdi; add rsp, 0x88; pop rbp; ret; 
0x0000000000451acd: sub byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000475a6c: sub byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004131ef: sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000409503: sub byte ptr [rax - 0x77], cl; ret; 
0x000000000040d3a6: sub byte ptr [rax - 0x77], cl; retf; call rsi; 
0x0000000000474109: sub byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], cl; int1; add rsp, 0xa0; pop rbp; ret; 
0x00000000004092ad: sub byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; ret; 
0x0000000000431a98: sub byte ptr [rax - 0x79], cl; pop rax; pop rax; add rsp, 0x10; pop rbp; ret; 
0x0000000000464fc0: sub byte ptr [rax - 0x7b], cl; fstp xword ptr [rdi + 0x52]; jl 0x64feb; add rsp, 0x18; pop rbp; ret; 
0x0000000000451663: sub byte ptr [rax - 0x7d], cl; ret 0x4908; 
0x000000000045b403: sub byte ptr [rax - 0x7d], cl; stc; adc byte ptr [rdi + 9], dh; lea rax, [rip + 0x1ef]; jmp rax; 
0x0000000000454839: sub byte ptr [rax - 0x7f], cl; ret; 
0x000000000042c6f7: sub byte ptr [rax - 1], cl; ret 0x8b48; 
0x0000000000450b58: sub byte ptr [rax - 1], cl; ror dword ptr [rax - 0x77], 0x48; or byte ptr [rax - 0x77], cl; ret; 
0x000000000045eb96: sub byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x30; ret; 
0x0000000000456af4: sub byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbp; ret; 
0x0000000000454cc1: sub byte ptr [rax], al; jne 0x54b46; xor eax, eax; add rsp, 0x58; pop rbp; ret; 
0x0000000000406bab: sub byte ptr [rax], dh; or dword ptr [rax], eax; mov qword ptr [rax], rcx; add rsp, 0x48; pop rbp; ret; 
0x000000000042d780: sub byte ptr [rbp + 0x48067cc0], al; add esp, 0x48; pop rbp; ret; 
0x000000000042347b: sub byte ptr [rbp + rcx*4 + 0x4f], al; add dword ptr [rcx - 0x77], ecx; ret 0xf889; 
0x00000000004648ef: sub byte ptr [rbp + rcx*4 + 4], cl; adc dword ptr [rbp + rcx*4 + 0xc], ecx; xor dword ptr [rax - 0x77], ecx; fmul dword ptr [rcx + rcx*4 - 0x3d]; mov rcx, r9; call rdi; 
0x0000000000404138: sub byte ptr [rbp - 0x3d], bl; mov rsi, qword ptr [rdx]; mov rax, rbx; mov rbx, rcx; call rsi; 
0x0000000000420bbd: sub byte ptr [rbp - 0x70], bl; ret; 
0x000000000040eeab: sub byte ptr [rbx + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x0000000000458889: sub byte ptr [rbx + 1], bh; call 0x385c0; add rsp, 0x30; pop rbp; ret; 
0x000000000040eeaa: sub byte ptr [rbx + 1], dil; add rsp, 0x10; pop rbp; ret; 
0x000000000045d2c7: sub byte ptr [rbx + rcx*4 + 0x7c], cl; and al, 0x20; add rsp, 0x98; pop rbp; ret; 
0x000000000041a5ca: sub byte ptr [rbx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000462359: sub byte ptr [rcx + 1], bh; add rsp, 0x38; pop rbp; ret; 
0x000000000045498a: sub byte ptr [rcx + rcx*8 - 0x3fcef78c], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000436cd4: sub byte ptr [rcx - 0x74b80000], bh; and al, 0x20; add rsp, 0x48; pop rbp; ret; 
0x000000000042e427: sub byte ptr [rcx - 0x76c7dbbc], cl; ret 0x8948; 
0x0000000000475e12: sub byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000046d2e2: sub byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000428760: sub byte ptr [rcx], al; add dword ptr [rax], eax; add rsp, 0x98; pop rbp; ret; 
0x0000000000431a34: sub byte ptr [rcx], al; sete al; add rsp, 8; pop rbp; ret; 
0x00000000004300ac: sub byte ptr [rcx], dh; shr bl, 0x13; add rsp, 0x1c0; pop rbp; ret; 
0x000000000042e3e9: sub byte ptr [rdi], cl; mov edx, 0x6731be2; add rsp, 0x40; pop rbp; ret; 
0x000000000045490d: sub byte ptr [rdx + rdx + 0x48], dh; mov ecx, dword ptr [rdx + 0x10]; cmp rax, rcx; jne 0x5491f; mov eax, 0x21; ret; 
0x000000000043fd89: sub byte ptr [rdx], dl; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000413cec: sub byte ptr [rsi + 0x13], bl; add byte ptr [rdx + rax + 0xbb48], al; add byte ptr [rax], al; add byte ptr [rax + 0x1480000], al; ret; 
0x0000000000432c50: sub byte ptr [rsi], al; add byte ptr [rbx + 4], bh; call 0x331a0; add rsp, 0x28; pop rbp; ret; 
0x00000000004492c1: sub byte ptr [rsi], al; jne 0x492cb; add rsp, 0x10; pop rbp; ret; 
0x0000000000425a92: sub cl, byte ptr [rbx - 2]; dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x38; pop rbp; ret; 
0x000000000041afb7: sub cl, byte ptr [rcx + rcx*4 + 0x44]; and al, 0x30; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdx]; call rax; 
0x0000000000431e46: sub cl, ch; ret; 
0x00000000004572da: sub dh, al; add byte ptr [rcx], al; add rsp, 0x10; pop rbp; ret; 
0x00000000004165b5: sub dh, al; add byte ptr [rcx], al; add rsp, 0x30; pop rbp; ret; 
0x000000000041fca1: sub dh, al; xor byte ptr [rcx], al; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x000000000041fcbf: sub dh, al; xor dword ptr [rcx], eax; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x0000000000476733: sub dh, bh; xor byte ptr [rdi - 0x78], al; jl 0x76762; inc dword ptr [rbp + 0x31]; jmp qword ptr [rsi - 0x70]; 
0x000000000044a1e1: sub dh, byte ptr [rcx]; sal byte ptr [rcx], 0xdb; add rsp, 0x60; pop rbp; ret; 
0x000000000040ecc6: sub dl, byte ptr [rax + rax]; add rsp, 0x10; pop rbp; ret; 
0x00000000004440bb: sub dword ptr [rax + 0x48000000], 0x5d20c483; ret; 
0x000000000040ecf2: sub dword ptr [rax + rax], edx; add rsp, 0x10; pop rbp; ret; 
0x0000000000469da7: sub dword ptr [rax - 0x77], ecx; ret 0xb848; 
0x0000000000444633: sub dword ptr [rcx], eax; add byte ptr [rax], al; add rsp, 0x68; pop rbp; ret; 
0x000000000044b4ac: sub dword ptr [rcx], esi; sal byte ptr [rcx], 0xdb; mov rcx, rbx; add rsp, 0x100; pop rbp; ret; 
0x000000000040d2cc: sub dword ptr [rdi + rcx - 0x4a], eax; push rdx; or byte ptr [rcx - 0xa], al; ret 0x7508; 
0x000000000044703b: sub dword ptr [rdi], ecx; add byte ptr [rcx + 1], bh; call 0x24840; add rsp, 0x28; pop rbp; ret; 
0x000000000046e633: sub dword ptr [rdx + 4], 0x2044e800; cld; dec dword ptr [rax - 0x7d]; ret 0x4830; 
0x0000000000432bcb: sub dword ptr [rsi], eax; add byte ptr [rbx + 5], bh; call 0x331a0; add rsp, 0x10; pop rbp; ret; 
0x00000000004734af: sub eax, 0x48000005; add esp, 0x10; pop rbp; ret; 
0x000000000045f1af: sub eax, 0x48fffa84; add esp, 0x18; pop rbp; ret; 
0x000000000045f30f: sub eax, 0x48fffb1a; add esp, 0x28; pop rbp; ret; 
0x000000000043b48f: sub eax, 0x48fffcf1; add esp, 0x10; pop rbp; ret; 
0x0000000000459caf: sub eax, 0x48ffffb3; add esp, 0x10; pop rbp; ret; 
0x000000000045cee8: sub eax, 0x6e0f4866; ret; 
0x0000000000472762: sub eax, 0x89480004; ret 0x4eb; 
0x0000000000421ae2: sub eax, 0x8b480000; and al, 0x28; call 0xa580; add rsp, 0x38; pop rbp; ret; 
0x000000000044a9d5: sub eax, 0xc6440f48; mov ebx, 1; nop; ret; 
0x0000000000466f0c: sub eax, 0xeb000000; add eax, 0x2bb9; add byte ptr [rax - 1], cl; ret; 
0x000000000045ccc6: sub eax, 1; jne 0x5ccc4; ret; 
0x00000000004674f6: sub eax, ecx; inc r8; mov qword ptr [rdx + 0x20], r8; add rsp, 0x38; pop rbp; ret; 
0x0000000000467796: sub eax, ecx; inc r8; mov qword ptr [rdx + 0x20], r8; add rsp, 0x40; pop rbp; ret; 
0x0000000000457561: sub ebx, 0x3c; add rsp, 0x88; pop rbp; ret; 
0x0000000000403076: sub ebx, 0x40; cmp edx, 0xffff; je 0x301d; xor rax, rax; ret; 
0x00000000004030b6: sub ebx, 0x40; cmp edx, 0xffffffff; je 0x3085; vzeroupper; xor rax, rax; ret; 
0x00000000004030e0: sub ebx, 8; cmp rcx, rdx; je 0x30cb; xor rax, rax; ret; 
0x00000000004183f8: sub ebx, edi; add rsp, 0x10; pop rbp; nop; ret; 
0x00000000004769cc: sub ebx, edx; call 0x752a0; add rsp, 0x60; pop rbp; ret; 
0x000000000041ee3e: sub ebx, edx; or rax, rbx; not rax; add rsp, 0x10; pop rbp; ret; 
0x0000000000444ba8: sub ecx, dword ptr [rax - 0x75]; or cl, byte ptr [rax - 0x77]; clc; call rcx; 
0x000000000046ae3d: sub ecx, dword ptr [rax - 0x75]; xchg eax, esp; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x8b48; 
0x0000000000415865: sub ecx, dword ptr [rax]; mov qword ptr [rax + 0x30], rcx; mov rcx, qword ptr [rax + 0x18]; mov qword ptr [rbx], rcx; mov qword ptr [rax + 0x18], rbx; ret; 
0x000000000043a8f1: sub ecx, dword ptr [rcx + rax]; mov rax, qword ptr [rsp + 0x38]; call 0x3a5e0; add rsp, 0x28; pop rbp; ret; 
0x00000000004068e6: sub ecx, dword ptr [rcx]; add byte ptr [rbx + 0x1d], bh; add rsp, 0x30; pop rbp; ret; 
0x000000000045cabb: sub ecx, ebx; call 0x5a2a0; add rsp, 0x10000000; pop rbp; ret; 
0x000000000045c73b: sub ecx, ebx; call 0x5a2a0; add rsp, 0x1000000; pop rbp; ret; 
0x000000000045c3bb: sub ecx, ebx; call 0x5a2a0; add rsp, 0x100000; pop rbp; ret; 
0x000000000045c03b: sub ecx, ebx; call 0x5a2a0; add rsp, 0x10000; pop rbp; ret; 
0x000000000045bcbb: sub ecx, ebx; call 0x5a2a0; add rsp, 0x1000; pop rbp; ret; 
0x000000000045b933: sub ecx, ebx; call 0x5a2a0; add rsp, 0x100; pop rbp; ret; 
0x000000000045b669: sub ecx, ebx; call 0x5a2a0; add rsp, 0x10; pop rbp; ret; 
0x000000000045cb9b: sub ecx, ebx; call 0x5a2a0; add rsp, 0x20000000; pop rbp; ret; 
0x000000000045c81b: sub ecx, ebx; call 0x5a2a0; add rsp, 0x2000000; pop rbp; ret; 
0x000000000045c49b: sub ecx, ebx; call 0x5a2a0; add rsp, 0x200000; pop rbp; ret; 
0x000000000045c11b: sub ecx, ebx; call 0x5a2a0; add rsp, 0x20000; pop rbp; ret; 
0x000000000045bd9b: sub ecx, ebx; call 0x5a2a0; add rsp, 0x2000; pop rbp; ret; 
0x000000000045ba13: sub ecx, ebx; call 0x5a2a0; add rsp, 0x200; pop rbp; ret; 
0x000000000045b709: sub ecx, ebx; call 0x5a2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000045cc7b: sub ecx, ebx; call 0x5a2a0; add rsp, 0x40000000; pop rbp; ret; 
0x000000000045c8fb: sub ecx, ebx; call 0x5a2a0; add rsp, 0x4000000; pop rbp; ret; 
0x000000000045c57b: sub ecx, ebx; call 0x5a2a0; add rsp, 0x400000; pop rbp; ret; 
0x000000000045c1fb: sub ecx, ebx; call 0x5a2a0; add rsp, 0x40000; pop rbp; ret; 
0x000000000045be7b: sub ecx, ebx; call 0x5a2a0; add rsp, 0x4000; pop rbp; ret; 
0x000000000045baf3: sub ecx, ebx; call 0x5a2a0; add rsp, 0x400; pop rbp; ret; 
0x000000000045b7a9: sub ecx, ebx; call 0x5a2a0; add rsp, 0x40; pop rbp; ret; 
0x000000000045c9db: sub ecx, ebx; call 0x5a2a0; add rsp, 0x8000000; pop rbp; ret; 
0x000000000045c65b: sub ecx, ebx; call 0x5a2a0; add rsp, 0x800000; pop rbp; ret; 
0x000000000045c2db: sub ecx, ebx; call 0x5a2a0; add rsp, 0x80000; pop rbp; ret; 
0x000000000045bf5b: sub ecx, ebx; call 0x5a2a0; add rsp, 0x8000; pop rbp; ret; 
0x000000000045bbd3: sub ecx, ebx; call 0x5a2a0; add rsp, 0x800; pop rbp; ret; 
0x000000000045b86d: sub ecx, ebx; call 0x5a2a0; sub rsp, -0x80; pop rbp; ret; 
0x00000000004645e6: sub ecx, ecx; dec r9; mov rax, rbx; mov rbx, r9; call rsi; 
0x0000000000467eed: sub ecx, edx; dec r9; mov qword ptr [rdx + 0x20], r9; add rsp, 0x88; pop rbp; ret; 
0x0000000000415bd2: sub ecx, edx; test ecx, ecx; setg al; add rsp, 8; pop rbp; ret; 
0x0000000000429bd1: sub ecx, esi; mov rax, r9; mov rbx, rdx; ret; 
0x000000000043787b: sub edi, ebp; jmp qword ptr [rsi - 0x70]; 
0x000000000040346e: sub edi, edx; mov qword ptr [r11], rdi; ret; 
0x000000000045cd59: sub edi, edx; mov qword ptr [rsp + 0x28], rdi; mov rdi, rbx; mov rcx, rbx; call rax; 
0x0000000000403523: sub edi, esi; add rdi, rdx; mov qword ptr [r8], rdi; ret; 
0x00000000004035cb: sub edi, esi; add rdx, rdi; mov qword ptr [r8], rdx; vzeroupper; ret; 
0x0000000000426fcf: sub edi, esi; mov rbx, rdi; lea rdx, [rsp + 0x110]; call rcx; 
0x0000000000403135: sub edi, esi; shl rdi, cl; sete al; ret; 
0x000000000042c5e8: sub edx, ecx; mov qword ptr [rax + 0x48], rdx; ret; 
0x000000000045cd72: sub esi, dword ptr [rsp + 0x28]; mov qword ptr fs:[0xfffffffffffffff8], rdi; mov rsp, rsi; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x0000000000478372: sub esi, eax; xor byte ptr [rbx], 0x48; add esp, 0x88; pop rbp; ret; 
0x000000000043aa11: sub esi, esi; ret 0x7502; 
0x0000000000401d5b: sub esp, -0x80; pop rbp; nop; ret; 
0x000000000040810f: sub esp, -0x80; pop rbp; ret; 
0x0000000000458e0b: sub esp, 0x10; call 0x10ee0; add rsp, 0x10; pop rbp; ret; 
0x0000000000459cab: sub esp, 0x10; call 0x54fe0; add rsp, 0x10; pop rbp; ret; 
0x0000000000459ceb: sub esp, 0x10; call 0x55260; add rsp, 0x10; pop rbp; ret; 
0x0000000000459d2b: sub esp, 0x10; call 0x55520; add rsp, 0x10; pop rbp; ret; 
0x0000000000458dcb: sub esp, 0x18; call 0x10c60; add rsp, 0x18; pop rbp; ret; 
0x0000000000459f4b: sub esp, 0x18; call 0x42ea0; add rsp, 0x18; pop rbp; ret; 
0x000000000045a20b: sub esp, 0x18; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x0000000000458ceb: sub esp, 0x18; call 0xdb60; add rsp, 0x18; pop rbp; ret; 
0x000000000040370b: sub esp, 0x18; mov ecx, 0x10; call 0x5ce60; add rsp, 0x18; pop rbp; ret; 
0x000000000045ff4b: sub esp, 0x18; mov ecx, 0x21; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000047450b: sub esp, 0x18; mov ecx, 0x33; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045fd2b: sub esp, 0x18; mov ecx, 0x4ac; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045ff0b: sub esp, 0x18; mov ecx, 0x800; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045fc6b: sub esp, 0x18; mov ecx, 0xa8; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x00000000004059c5: sub esp, 0x18; mov ecx, 1; call 0x59e0; add rsp, 0x18; pop rbp; ret; 
0x000000000045ede5: sub esp, 0x20; add rdi, 8; mov rsi, rdi; mov rdi, 0x1002; mov rax, 0x9e; syscall; 
0x000000000043312b: sub esp, 8; call 0x33020; add rsp, 8; pop rbp; ret; 
0x0000000000458d2b: sub esp, 8; call 0xde00; add rsp, 8; pop rbp; ret; 
0x00000000004626ab: sub esp, 8; mov eax, 0x20; call 0x5a020; add rsp, 8; pop rbp; ret; 
0x000000000045856b: sub esp, 8; mov eax, 1; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x000000000045860b: sub esp, 8; mov eax, 2; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x000000000041726b: sub esp, 8; mov rax, qword ptr [rdx + 8]; call 0x17960; add rsp, 8; pop rbp; ret; 
0x000000000043b8cb: sub esp, 8; mov rax, qword ptr [rdx + 8]; call 0x2aa40; add rsp, 8; pop rbp; ret; 
0x000000000040a3cb: sub esp, 8; nop; call 0xa400; add rsp, 8; pop rbp; ret; 
0x000000000040a58b: sub esp, 8; nop; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x00000000004674f5: sub r8, r9; inc r8; mov qword ptr [rdx + 0x20], r8; add rsp, 0x38; pop rbp; ret; 
0x0000000000467795: sub r8, r9; inc r8; mov qword ptr [rdx + 0x20], r8; add rsp, 0x40; pop rbp; ret; 
0x0000000000467eec: sub r9, r10; dec r9; mov qword ptr [rdx + 0x20], r9; add rsp, 0x88; pop rbp; ret; 
0x00000000004645e5: sub r9, rcx; dec r9; mov rax, rbx; mov rbx, r9; call rsi; 
0x0000000000429bd0: sub r9, rsi; mov rax, r9; mov rbx, rdx; ret; 
0x0000000000403075: sub rbx, 0x40; cmp edx, 0xffff; je 0x301d; xor rax, rax; ret; 
0x00000000004030b5: sub rbx, 0x40; cmp edx, 0xffffffff; je 0x3085; vzeroupper; xor rax, rax; ret; 
0x00000000004030df: sub rbx, 8; cmp rcx, rdx; je 0x30cb; xor rax, rax; ret; 
0x00000000004183f7: sub rbx, rdi; add rsp, 0x10; pop rbp; nop; ret; 
0x00000000004769cb: sub rbx, rdx; call 0x752a0; add rsp, 0x60; pop rbp; ret; 
0x000000000041ee3d: sub rbx, rdx; or rax, rbx; not rax; add rsp, 0x10; pop rbp; ret; 
0x0000000000415864: sub rcx, qword ptr [rax]; mov qword ptr [rax + 0x30], rcx; mov rcx, qword ptr [rax + 0x18]; mov qword ptr [rbx], rcx; mov qword ptr [rax + 0x18], rbx; ret; 
0x000000000045caba: sub rcx, rbx; call 0x5a2a0; add rsp, 0x10000000; pop rbp; ret; 
0x000000000045c73a: sub rcx, rbx; call 0x5a2a0; add rsp, 0x1000000; pop rbp; ret; 
0x000000000045c3ba: sub rcx, rbx; call 0x5a2a0; add rsp, 0x100000; pop rbp; ret; 
0x000000000045c03a: sub rcx, rbx; call 0x5a2a0; add rsp, 0x10000; pop rbp; ret; 
0x000000000045bcba: sub rcx, rbx; call 0x5a2a0; add rsp, 0x1000; pop rbp; ret; 
0x000000000045b932: sub rcx, rbx; call 0x5a2a0; add rsp, 0x100; pop rbp; ret; 
0x000000000045b668: sub rcx, rbx; call 0x5a2a0; add rsp, 0x10; pop rbp; ret; 
0x000000000045cb9a: sub rcx, rbx; call 0x5a2a0; add rsp, 0x20000000; pop rbp; ret; 
0x000000000045c81a: sub rcx, rbx; call 0x5a2a0; add rsp, 0x2000000; pop rbp; ret; 
0x000000000045c49a: sub rcx, rbx; call 0x5a2a0; add rsp, 0x200000; pop rbp; ret; 
0x000000000045c11a: sub rcx, rbx; call 0x5a2a0; add rsp, 0x20000; pop rbp; ret; 
0x000000000045bd9a: sub rcx, rbx; call 0x5a2a0; add rsp, 0x2000; pop rbp; ret; 
0x000000000045ba12: sub rcx, rbx; call 0x5a2a0; add rsp, 0x200; pop rbp; ret; 
0x000000000045b708: sub rcx, rbx; call 0x5a2a0; add rsp, 0x20; pop rbp; ret; 
0x000000000045cc7a: sub rcx, rbx; call 0x5a2a0; add rsp, 0x40000000; pop rbp; ret; 
0x000000000045c8fa: sub rcx, rbx; call 0x5a2a0; add rsp, 0x4000000; pop rbp; ret; 
0x000000000045c57a: sub rcx, rbx; call 0x5a2a0; add rsp, 0x400000; pop rbp; ret; 
0x000000000045c1fa: sub rcx, rbx; call 0x5a2a0; add rsp, 0x40000; pop rbp; ret; 
0x000000000045be7a: sub rcx, rbx; call 0x5a2a0; add rsp, 0x4000; pop rbp; ret; 
0x000000000045baf2: sub rcx, rbx; call 0x5a2a0; add rsp, 0x400; pop rbp; ret; 
0x000000000045b7a8: sub rcx, rbx; call 0x5a2a0; add rsp, 0x40; pop rbp; ret; 
0x000000000045c9da: sub rcx, rbx; call 0x5a2a0; add rsp, 0x8000000; pop rbp; ret; 
0x000000000045c65a: sub rcx, rbx; call 0x5a2a0; add rsp, 0x800000; pop rbp; ret; 
0x000000000045c2da: sub rcx, rbx; call 0x5a2a0; add rsp, 0x80000; pop rbp; ret; 
0x000000000045bf5a: sub rcx, rbx; call 0x5a2a0; add rsp, 0x8000; pop rbp; ret; 
0x000000000045bbd2: sub rcx, rbx; call 0x5a2a0; add rsp, 0x800; pop rbp; ret; 
0x000000000045b86c: sub rcx, rbx; call 0x5a2a0; sub rsp, -0x80; pop rbp; ret; 
0x000000000040346d: sub rdi, r10; mov qword ptr [r11], rdi; ret; 
0x000000000045cd58: sub rdi, rdx; mov qword ptr [rsp + 0x28], rdi; mov rdi, rbx; mov rcx, rbx; call rax; 
0x0000000000403522: sub rdi, rsi; add rdi, rdx; mov qword ptr [r8], rdi; ret; 
0x00000000004035ca: sub rdi, rsi; add rdx, rdi; mov qword ptr [r8], rdx; vzeroupper; ret; 
0x0000000000426fce: sub rdi, rsi; mov rbx, rdi; lea rdx, [rsp + 0x110]; call rcx; 
0x0000000000403134: sub rdi, rsi; shl rdi, cl; sete al; ret; 
0x000000000042c5e7: sub rdx, rcx; mov qword ptr [rax + 0x48], rdx; ret; 
0x000000000045cd71: sub rsi, qword ptr [rsp + 0x28]; mov qword ptr fs:[0xfffffffffffffff8], rdi; mov rsp, rsi; mov dword ptr [rsp + 0x20], eax; pop rbp; ret; 
0x0000000000401d5a: sub rsp, -0x80; pop rbp; nop; ret; 
0x000000000040810e: sub rsp, -0x80; pop rbp; ret; 
0x0000000000458e0a: sub rsp, 0x10; call 0x10ee0; add rsp, 0x10; pop rbp; ret; 
0x0000000000459caa: sub rsp, 0x10; call 0x54fe0; add rsp, 0x10; pop rbp; ret; 
0x0000000000459cea: sub rsp, 0x10; call 0x55260; add rsp, 0x10; pop rbp; ret; 
0x0000000000459d2a: sub rsp, 0x10; call 0x55520; add rsp, 0x10; pop rbp; ret; 
0x0000000000458dca: sub rsp, 0x18; call 0x10c60; add rsp, 0x18; pop rbp; ret; 
0x0000000000459f4a: sub rsp, 0x18; call 0x42ea0; add rsp, 0x18; pop rbp; ret; 
0x000000000045a20a: sub rsp, 0x18; call 0x5dcc0; add rsp, 0x18; pop rbp; ret; 
0x0000000000458cea: sub rsp, 0x18; call 0xdb60; add rsp, 0x18; pop rbp; ret; 
0x000000000040370a: sub rsp, 0x18; mov ecx, 0x10; call 0x5ce60; add rsp, 0x18; pop rbp; ret; 
0x000000000045ff4a: sub rsp, 0x18; mov ecx, 0x21; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000047450a: sub rsp, 0x18; mov ecx, 0x33; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045fd2a: sub rsp, 0x18; mov ecx, 0x4ac; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045ff0a: sub rsp, 0x18; mov ecx, 0x800; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045fc6a: sub rsp, 0x18; mov ecx, 0xa8; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x00000000004059c4: sub rsp, 0x18; mov ecx, 1; call 0x59e0; add rsp, 0x18; pop rbp; ret; 
0x000000000045ede4: sub rsp, 0x20; add rdi, 8; mov rsi, rdi; mov rdi, 0x1002; mov rax, 0x9e; syscall; 
0x000000000043312a: sub rsp, 8; call 0x33020; add rsp, 8; pop rbp; ret; 
0x0000000000458d2a: sub rsp, 8; call 0xde00; add rsp, 8; pop rbp; ret; 
0x00000000004626aa: sub rsp, 8; mov eax, 0x20; call 0x5a020; add rsp, 8; pop rbp; ret; 
0x000000000045856a: sub rsp, 8; mov eax, 1; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x000000000045860a: sub rsp, 8; mov eax, 2; call 0x35e40; add rsp, 8; pop rbp; ret; 
0x000000000041726a: sub rsp, 8; mov rax, qword ptr [rdx + 8]; call 0x17960; add rsp, 8; pop rbp; ret; 
0x000000000043b8ca: sub rsp, 8; mov rax, qword ptr [rdx + 8]; call 0x2aa40; add rsp, 8; pop rbp; ret; 
0x000000000040a3ca: sub rsp, 8; nop; call 0xa400; add rsp, 8; pop rbp; ret; 
0x000000000040a58a: sub rsp, 8; nop; call 0xa5c0; add rsp, 8; pop rbp; ret; 
0x00000000004572d9: sub sil, al; add byte ptr [rcx], al; add rsp, 0x10; pop rbp; ret; 
0x000000000041fca0: sub sil, al; xor byte ptr [rcx], al; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x000000000041fcbe: sub sil, al; xor dword ptr [rcx], eax; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x0000000000476732: sub sil, r15b; xor byte ptr [rdi - 0x78], al; jl 0x76762; inc dword ptr [rbp + 0x31]; jmp qword ptr [rsi - 0x70]; 
0x000000000041d6ed: subps xmm0, xmm1; cvttsd2si rax, xmm0; bts rax, 0x3f; xchg qword ptr [rcx + 0x18], rax; ret; 
0x000000000041d6ec: subsd xmm0, xmm1; cvttsd2si rax, xmm0; bts rax, 0x3f; xchg qword ptr [rcx + 0x18], rax; ret; 
0x00000000004036cc: syscall; 
0x000000000045e715: syscall; add rsp, 0x10; pop rbp; ret; 
0x000000000045e638: syscall; cmp rax, -0xfff; jbe 0x5e647; mov eax, 0xffffffff; mov dword ptr [rsp + 0x18], eax; ret; 
0x000000000045e669: syscall; cmp rax, -0xfff; jbe 0x5e678; mov eax, 0xffffffff; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000045ed50: syscall; cmp rax, 0; je 0x5ed5d; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000045e829: syscall; mov dword ptr [rsp + 0x10], eax; ret; 
0x000000000045e6ce: syscall; mov dword ptr [rsp + 0x18], eax; ret; 
0x000000000045e693: syscall; mov dword ptr [rsp + 0x20], eax; ret; 
0x000000000045e979: syscall; mov dword ptr [rsp + 0x28], eax; ret; 
0x000000000045ece1: syscall; mov dword ptr [rsp + 0x30], eax; ret; 
0x000000000045e725: syscall; mov dword ptr [rsp + 8], eax; ret; 
0x000000000045e785: syscall; mov edi, eax; mov esi, dword ptr [rsp + 8]; mov eax, 0x3e; syscall; ret; 
0x000000000045e7a5: syscall; mov qword ptr [rsp + 8], rax; ret; 
0x000000000045e5e9: syscall; ret; 
0x00000000004091cd: sysenter; 
0x0000000000428759: test al, 0; add byte ptr [rax], al; add qword ptr [rdx + 0x10128], rax; add rsp, 0x98; pop rbp; ret; 
0x0000000000426ffa: test al, 0; add byte ptr [rax], al; add rsp, 0x120; pop rbp; ret; 
0x00000000004440bc: test al, 0; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000045fc6f: test al, 0; add byte ptr [rax], al; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000045b315: test al, 0; add byte ptr [rax], al; movq qword ptr [r12 + 0xb0], xmm13; movq qword ptr [r12 + 0xb8], xmm14; ret; 
0x000000000045b3d5: test al, 0; add byte ptr [rax], al; movq xmm13, qword ptr [r12 + 0xb0]; movq xmm14, qword ptr [r12 + 0xb8]; ret; 
0x0000000000401749: test al, 0; add byte ptr [rax], al; pop rbp; ret; 
0x000000000042f3ea: test al, 0xfd; dec dword ptr [rax - 0x77]; ret; 
0x000000000046b27a: test al, 1; add byte ptr [rax], al; pop rbp; nop; ret; 
0x000000000045595f: test al, 2; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004135ac: test al, 4; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000040d0c4: test al, ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004155af: test al, al; je 0x155b9; add rsp, 0x28; pop rbp; ret; 
0x000000000041e64c: test al, al; je 0x1e591; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x50; pop rbp; ret; 
0x0000000000425665: test al, al; je 0x2566f; add rsp, 0x20; pop rbp; ret; 
0x000000000044002d: test al, al; je 0x40002; add rsp, 0x20; pop rbp; ret; 
0x0000000000444305: test al, al; je 0x4430f; add rsp, 8; pop rbp; ret; 
0x0000000000460875: test al, al; je 0x60831; mov eax, 1; add rsp, 0x68; pop rbp; ret; 
0x0000000000461234: test al, al; je 0x61218; mov eax, 1; add rsp, 0x18; pop rbp; ret; 
0x00000000004639a0: test al, al; je 0x639ac; xor eax, eax; add rsp, 0x78; pop rbp; ret; 
0x0000000000408ca1: test al, al; je 0x8c5b; mov rcx, qword ptr [rip + 0x957bc]; mov rax, rsi; lea rdx, [rip + 0x957b2]; call rcx; 
0x000000000041027b: test al, al; jne 0x1028c; lea rax, [rip + 0x14145a]; add rsp, 0x58; pop rbp; ret; 
0x0000000000413c78: test al, al; jne 0x13c89; mov byte ptr [rip + 0x13c78e], 0; add rsp, 0x10; pop rbp; ret; 
0x000000000044412b: test al, al; jne 0x44135; add rsp, 0x50; pop rbp; ret; 
0x000000000045684f: test al, al; jne 0x567ef; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x0000000000456987: test al, al; jne 0x5693e; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x000000000046a660: test al, al; jne 0x6a604; xor eax, eax; add rsp, 0x100; pop rbp; ret; 
0x000000000046fff7: test al, al; jne 0x6ff8c; xor eax, eax; add rsp, 0x48; pop rbp; ret; 
0x000000000043aa09: test al, cl; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x50; sub esi, esi; ret 0x7502; 
0x000000000040a547: test bh, bh; je 0xa52c; add rsp, 0x30; pop rbp; ret; 
0x00000000004245f7: test bh, ch; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000041d74d: test bl, bl; je 0x1d757; add rsp, 0x10; pop rbp; ret; 
0x000000000041d7e0: test bl, bl; je 0x1d7ea; add rsp, 0x20; pop rbp; ret; 
0x0000000000420305: test bl, bl; je 0x202e2; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000426d26: test bl, bl; je 0x26d30; add rsp, 0x10; pop rbp; ret; 
0x0000000000435a78: test bl, bl; je 0x35a5d; add rsp, 0x10; pop rbp; ret; 
0x0000000000436ab1: test bl, bl; je 0x36b0b; mov rdx, qword ptr [rip + 0xeca2c]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x000000000040a1e0: test bl, bl; je 0xa1c7; add rsp, 0x30; pop rbp; ret; 
0x000000000040a522: test bl, bl; je 0xa50d; add rsp, 0x30; pop rbp; ret; 
0x0000000000413d41: test bl, dh; je 0x13d50; mov eax, 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000413d40: test bl, sil; je 0x13d50; mov eax, 1; add rsp, 0x30; pop rbp; ret; 
0x000000000047b4b6: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000470d91: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sbb byte ptr [rax - 0x77], cl; ret; 
0x0000000000478c42: test byte ptr [rax + rax*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000478bf0: test byte ptr [rax + rax*8], ah; add byte ptr [rax], al; add byte ptr [rbp - 0x7b], cl; sal byte ptr [rdx + rbp*2 + 0x48], 0xff; ret; 
0x000000000044be53: test byte ptr [rax + rbx*4], ah; add byte ptr [rax], al; add al, ch; ret 0xfe6a; 
0x0000000000466c74: test byte ptr [rax + rcx*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; adc ecx, dword ptr [rax - 0x7d]; ret 0x48c4; 
0x00000000004483f5: test byte ptr [rax + rcx*4], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x000000000047b88d: test byte ptr [rax + rcx], ah; add al, byte ptr [rax]; add byte ptr [rcx - 0x77], cl; fimul dword ptr [rcx - 0x77]; ret; 
0x0000000000478ab3: test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add al, ch; ret 0xffdf; 
0x0000000000401a59: test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x76b3f915], dl; ret; 
0x000000000042671c: test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000004485a7: test byte ptr [rax + rsi*8], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x00000000004723d2: test byte ptr [rax - 0x77], 0xd3; mov rcx, rsi; add rsp, 0x28; pop rbp; ret; 
0x00000000004724c8: test byte ptr [rax - 0x77], 0xd3; mov rcx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004728fa: test byte ptr [rax - 0x77], 0xd3; mov rcx, rsi; add rsp, 0x40; pop rbp; ret; 
0x0000000000428bbd: test byte ptr [rax - 0x77], 0xf0; add rsp, 0x68; pop rbp; ret; 
0x0000000000437f07: test byte ptr [rax - 0x7c], 0xf6; je 0x37f41; mov rdx, qword ptr [rip + 0xeb5d4]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x00000000004689fb: test byte ptr [rax - 0x7f], 0xc4; mov byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000456d2a: test byte ptr [rax], al; add byte ptr [rax], al; lea rbx, [rcx + 3]; add rsp, 0x10; pop rbp; ret; 
0x0000000000433848: test byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rsp + 0x27], 0; mov rdx, qword ptr [rsp + 0x88]; mov rax, qword ptr [rdx]; call rax; 
0x000000000041c260: test byte ptr [rax], al; add qword ptr [rax + 0x1250], rdi; add rsp, 0x10; pop rbp; ret; 
0x0000000000478dfd: test byte ptr [rax], al; add rax, 0x40; call 0x764e0; add rsp, 0xa8; pop rbp; ret; 
0x000000000047861f: test byte ptr [rax], al; add rax, 0x40; call 0x76d20; add rsp, 0x30; pop rbp; ret; 
0x0000000000449c46: test byte ptr [rbp + 0x31], 0xc0; mov r9, r8; add rsp, 0xd8; pop rbp; ret; 
0x0000000000405123: test byte ptr [rbp - 0x48000000], bl; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x00000000004784a9: test byte ptr [rbp - 0x7d000000], ah; call qword ptr [rbp + 0xf]; 
0x00000000004636dd: test byte ptr [rbx + rcx*4 + 0x4c], 0xb4; and byte ptr [rbp + 0xf], al; stosd dword ptr [rdi], eax; rol dword ptr [rcx + rcx*4 + 0x4c], 0xb4; and byte ptr [rax - 1], cl; ret 0x3948; 
0x00000000004229fd: test byte ptr [rbx], al; lea rax, [rip + 0x10039a]; call 0xa180; add rsp, 0x10; pop rbp; ret; 
0x000000000042299d: test byte ptr [rbx], al; lea rax, [rip + 0x100442]; call 0xa180; add rsp, 0x10; pop rbp; ret; 
0x000000000040e006: test byte ptr [rbx], ch; add dword ptr [rax], eax; add byte ptr [rdi + rcx - 0x4a], al; push rbx; or byte ptr [rcx - 0xa], al; ret 0xf08; 
0x00000000004291d7: test byte ptr [rcx + 0x48000000], al; mov edx, 0; add byte ptr [rax + 0x1480000], al; ret 0x8949; 
0x00000000004692b7: test byte ptr [rcx + rax - 0xb80000], ch; ret; 
0x000000000044a6e4: test byte ptr [rcx - 0x45000000], al; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x00000000004729e9: test byte ptr [rcx - 0x77], 0xf0; mov r9, rsi; call 0x36a0; add rsp, 0x38; pop rbp; ret; 
0x000000000047cfa9: test byte ptr [rcx], al; add byte ptr [rdi + 1], bh; call 0x63680; add rsp, 0x110; pop rbp; ret; 
0x0000000000410f84: test byte ptr [rcx], al; mov rcx, qword ptr [rcx + rbx]; not rcx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047afa6: test byte ptr [rdi + rdi*8 - 1], 0x48; mov edx, eax; mov rcx, qword ptr [rdx + 0xf8]; mov rax, rbx; call rcx; 
0x0000000000402ce3: test byte ptr [rdi + rdi*8 - 1], al; dec dword ptr [rcx + rcx*4 - 0x20]; add rsp, 0x40; pop rbp; ret; 
0x00000000004255c6: test byte ptr [rdi - 2], 0xff; add rsp, 0x18; pop rbp; ret; 
0x0000000000405a1b: test byte ptr [rdi], 0x94; ret 0x8490; 
0x0000000000405a43: test byte ptr [rdi], 0x94; ret 0xd284; 
0x0000000000402da4: test byte ptr [rdx], ah; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ror dword ptr [rcx - 0x77], cl; ror byte ptr [rdi + rcx + 0x4c], 1; ret; 
0x0000000000477250: test byte ptr [rdx], ah; add dword ptr [rax], eax; add byte ptr [rcx - 0x80], al; jmp qword ptr [rbp + 0xf]; 
0x000000000041e64f: test byte ptr [rip + 0x48ffffff], bh; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x50; pop rbp; ret; 
0x000000000046f7c8: test byte ptr [rsi + 0x48000000], cl; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x20; pop rbp; ret; 
0x0000000000433784: test byte ptr [rsi + 0x48000001], dl; mov eax, dword ptr [rdx]; call rax; 
0x0000000000417f47: test cl, cl; je 0x17f12; call 0x2a2e0; add rsp, 0x18; pop rbp; ret; 
0x000000000041da42: test cl, cl; je 0x1da14; add rsp, 0x18; pop rbp; ret; 
0x000000000042c974: test cl, cl; je 0x2c959; ret; 
0x0000000000405120: test cl, cl; je 0x51c5; mov eax, 1; add rsp, 0x60; pop rbp; ret; 
0x000000000045498b: test cl, cl; je 0x54997; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004625b2: test cl, cl; je 0x62593; add rsp, 0x10; pop rbp; ret; 
0x000000000040924e: test cl, cl; je 0x9261; xor eax, eax; add rsp, 0x38; pop rbp; ret; 
0x0000000000404d76: test cl, cl; jne 0x4d82; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x0000000000458988: test cl, cl; setne al; ret; 
0x000000000041af2a: test dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041e3a4: test dh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004351f6: test dh, dh; je 0x35201; add rsp, 0x30; pop rbp; nop; ret; 
0x0000000000437f09: test dh, dh; je 0x37f41; mov rdx, qword ptr [rip + 0xeb5d4]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000470fd8: test dh, dh; je 0x70fea; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x00000000004541d7: test dh, dh; jne 0x541e6; mov eax, 1; add rsp, 0x30; pop rbp; ret; 
0x000000000040a546: test dil, dil; je 0xa52c; add rsp, 0x30; pop rbp; ret; 
0x000000000045265a: test dl, bl; setne al; nop; ret; 
0x0000000000418a50: test dl, dl; je 0x189e4; mov rax, r8; mov rbx, rcx; ret; 
0x000000000041d968: test dl, dl; je 0x1d934; add rsp, 0x20; pop rbp; ret; 
0x0000000000402ce0: test dl, dl; je 0x2c2c; mov rax, r12; add rsp, 0x40; pop rbp; ret; 
0x0000000000442baa: test dl, dl; je 0x42b90; add rsp, 0x58; pop rbp; ret; 
0x0000000000404d00: test dl, dl; je 0x4d0c; xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x0000000000438071: test dl, dl; jne 0x3807b; add rsp, 0x20; pop rbp; ret; 
0x000000000045ed3b: test dword ptr [rax + 0x49000000], ecx; add eax, 8; or rdi, 0x80000; mov eax, 0x38; syscall; 
0x0000000000446acc: test dword ptr [rax + 0xf], 0x894cf8af; ret; 
0x00000000004035cc: test dword ptr [rax + 1], 0x108949fa; vzeroupper; ret; 
0x0000000000403524: test dword ptr [rax + 1], 0x388949d7; ret; 
0x0000000000456738: test dword ptr [rax + rax - 0x76b80000], eax; ret; 
0x000000000045afe5: test dword ptr [rax + rax], 0x71e858; add byte ptr [rax], al; call 0x5cde0; ret; 
0x0000000000403136: test dword ptr [rax - 0x2d], 0xc0940fe7; ret; 
0x0000000000421f21: test dword ptr [rax - 0x77], 0x470f48c6; ret 0x8548; 
0x0000000000465e4a: test dword ptr [rax - 0x77], 0xe0894dd6; call 0x66820; add rsp, 0x58; pop rbp; ret; 
0x000000000040a454: test dword ptr [rax - 0x77], 0xeb202474; add rsp, 0x30; pop rbp; ret; 
0x0000000000458a06: test dword ptr [rax - 0x7d], 0x194840f9; fisttp dword ptr [rax + 0x21]; fmul dword ptr [rax - 0x77]; ret; 
0x00000000004682a6: test dword ptr [rax - 9], 0x518949da; sbb byte ptr [rax - 0x7d], cl; ret 0x4c08; 
0x00000000004017d6: test dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000044d3da: test dword ptr [rax], ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x4890; 
0x0000000000455545: test dword ptr [rbx - 5], 0xc48348ff; pop rbp; ret; 
0x0000000000474a17: test dword ptr [rbx - 7], edx; dec dword ptr [rax - 0x77]; ret; 
0x0000000000465399: test dword ptr [rcx + 0x401f0fd6], 0x18bbe800; add byte ptr [rax], al; add rsp, 0x120; pop rbp; ret; 
0x000000000044cdf5: test dword ptr [rdi], 0x8948fe4c; ret 0x8948; 
0x000000000045b497: test dword ptr [rdi], eax; add byte ptr [rax], al; jmp rax; 
0x00000000004476e4: test dword ptr [rdx + rax], edi; add byte ptr [rax - 0x77], cl; ret 0x3d83; 
0x00000000004564b4: test dword ptr [rsi], ebx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004585cb: test eax, 0x2948000c; ret; 
0x00000000004585b7: test eax, 0x8948000c; ret; 
0x000000000042f2aa: test eax, 0x8948fffd; ret; 
0x000000000045cf32: test eax, 0xf; sete byte ptr [rsp + 8]; ret; 
0x000000000045dd60: test eax, 7; je 0x5dd6d; mov rcx, rbx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000042c260: test eax, eax; je 0x2c26a; add rsp, 0x18; pop rbp; ret; 
0x000000000042fce7: test eax, eax; je 0x2fd2b; mov rcx, qword ptr [rax + 0x18]; mov rax, rbx; call rcx; 
0x00000000004319b0: test eax, eax; je 0x319bf; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004319ca: test eax, eax; je 0x319d6; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x000000000043ff94: test eax, eax; je 0x3ff9e; add rsp, 8; pop rbp; ret; 
0x0000000000458c81: test eax, eax; je 0x58c89; mov rax, qword ptr [rax]; ret; 
0x0000000000458da1: test eax, eax; je 0x58da9; mov rax, qword ptr [rax]; ret; 
0x000000000045af36: test eax, eax; je 0x5af6b; lea rsi, [rip - 0xc21]; mov rdx, 0; mov rcx, 0; call rax; 
0x0000000000460421: test eax, eax; je 0x6042f; mov rax, qword ptr [rax + 0x40]; add rsp, 0x10; pop rbp; ret; 
0x0000000000461a46: test eax, eax; je 0x619f1; add rsp, 0x28; pop rbp; ret; 
0x0000000000461b0f: test eax, eax; je 0x61abe; add rsp, 0x28; pop rbp; ret; 
0x00000000004716a8: test eax, eax; je 0x716b5; add rsp, 0x108; pop rbp; ret; 
0x000000000047194b: test eax, eax; je 0x7189b; add rsp, 0x108; pop rbp; ret; 
0x0000000000471a17: test eax, eax; je 0x71967; add rsp, 0x108; pop rbp; ret; 
0x000000000040a06d: test eax, eax; je 0xa07c; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000463bb6: test eax, eax; jge 0x63bc7; mov rax, -1; add rsp, 0x78; pop rbp; ret; 
0x000000000042d781: test eax, eax; jl 0x2d78b; add rsp, 0x48; pop rbp; ret; 
0x000000000042db76: test eax, eax; jl 0x2db82; xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x000000000044aae1: test eax, eax; jl 0x4aaeb; add rsp, 0x18; pop rbp; ret; 
0x000000000044ab0a: test eax, eax; jl 0x4ab14; add rsp, 0x18; pop rbp; ret; 
0x00000000004717ea: test eax, eax; jle 0x717fc; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x000000000042da3a: test eax, eax; jne 0x2da44; add rsp, 0x60; pop rbp; ret; 
0x0000000000436062: test eax, eax; jne 0x3606c; add rsp, 0x58; pop rbp; ret; 
0x000000000043702b: test eax, eax; jne 0x37034; call 0x37060; add rsp, 8; pop rbp; ret; 
0x0000000000439495: test eax, eax; jne 0x394a1; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000452df3: test eax, eax; jne 0x52e0e; mov rcx, qword ptr [rsp + 0x2c8]; mov eax, 1; lea rdx, [rsp + 0x2c8]; call rcx; 
0x000000000045601a: test eax, eax; jne 0x56029; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x0000000000457dc8: test eax, eax; jne 0x57dd5; add rsp, 0x88; pop rbp; ret; 
0x0000000000479c7b: test eax, eax; jne 0x79cc0; mov rcx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x180]; call rcx; 
0x0000000000479d7b: test eax, eax; jne 0x79dc0; mov rcx, qword ptr [rsp + 0x30]; mov rcx, qword ptr [rcx + 0x18]; mov rax, qword ptr [rsp + 0x178]; call rcx; 
0x000000000046858f: test eax, eax; sete cl; mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x00000000004707ac: test eax, eax; setl al; add rsp, 0x30; pop rbp; ret; 
0x0000000000422d2c: test eax, eax; setne al; add rsp, 0x20; pop rbp; ret; 
0x000000000042e075: test eax, ecx; je 0x2e081; xor eax, eax; add rsp, 0x40; pop rbp; ret; 
0x0000000000450427: test ebx, ebx; je 0x50433; mov eax, ebx; add rsp, 0x60; pop rbp; ret; 
0x000000000047208e: test ebx, ebx; je 0x7209b; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000464fc2: test ebx, ebx; jg 0x65018; jl 0x64feb; add rsp, 0x18; pop rbp; ret; 
0x00000000004142b7: test ebx, ebx; jne 0x142c1; add rsp, 0x20; pop rbp; ret; 
0x000000000041436a: test ebx, ebx; jne 0x14374; add rsp, 0x20; pop rbp; ret; 
0x00000000004145b2: test ebx, ebx; jne 0x145bc; add rsp, 0x38; pop rbp; ret; 
0x0000000000422df0: test ebx, ebx; jne 0x22d8e; add rsp, 0x38; pop rbp; ret; 
0x000000000046734a: test ebx, ebx; jne 0x67359; movups xmmword ptr [rax + 0x18], xmm15; add rsp, 0x38; pop rbp; ret; 
0x00000000004675e1: test ebx, ebx; jne 0x675f0; movups xmmword ptr [rax + 0x18], xmm15; add rsp, 0x40; pop rbp; ret; 
0x0000000000413fe6: test ebx, ebx; mov edx, 0; cmovne rax, rdx; add rsp, 0x20; pop rbp; ret; 
0x00000000004566e4: test ebx, esp; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000412d01: test ecx, ecx; ja 0x12cee; pop rbp; ret; 
0x0000000000426d0e: test ecx, ecx; je 0x26d1b; mov rax, rbx; add rsp, 0x10; pop rbp; ret; 
0x000000000044a6e1: test ecx, ecx; je 0x4a76a; mov ebx, 1; add rsp, 0x20; pop rbp; ret; 
0x00000000004593a5: test ecx, ecx; je 0x5933a; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000045a305: test ecx, ecx; je 0x5a30e; call 0x5cde0; ret; 
0x0000000000460341: test ecx, ecx; je 0x6034e; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000460550: test ecx, ecx; je 0x6055e; mov rax, qword ptr [rcx + 0x40]; add rsp, 0x10; pop rbp; ret; 
0x000000000046bd61: test ecx, ecx; je 0x6bd6e; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000415ad7: test ecx, ecx; jg 0x15ae6; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x0000000000439cd5: test ecx, ecx; jl 0x39ce4; call 0x38040; add rsp, 0x10; pop rbp; ret; 
0x0000000000419de0: test ecx, ecx; jne 0x19df5; mov qword ptr [rax + 0x190], 0; add rsp, 0x58; pop rbp; ret; 
0x000000000042a44b: test ecx, ecx; jne 0x2a3e9; add rsp, 0x20; pop rbp; ret; 
0x000000000045eae0: test ecx, ecx; jne 0x5eafb; mov rcx, qword ptr [rip + 0xc3bb5]; lea r9, [rip - 0xf2]; mov rax, qword ptr [rip + 0xc3bdf]; jmp rax; 
0x0000000000415bd4: test ecx, ecx; setg al; add rsp, 8; pop rbp; ret; 
0x000000000040a930: test ecx, ecx; setne al; add rsp, 0x30; pop rbp; ret; 
0x000000000040959a: test edi, edi; jne 0x957d; xchg qword ptr [r8], rbx; inc qword ptr [rax + 8]; ret; 
0x00000000004731cd: test edx, ecx; jne 0x7319a; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000041809a: test edx, edx; je 0x180a3; mov rax, qword ptr [rdx]; call rax; 
0x000000000042c1ea: test edx, edx; je 0x2c1f7; mov rax, rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004333d8: test edx, edx; je 0x333f4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x0000000000433781: test edx, edx; je 0x3391f; mov rax, qword ptr [rdx]; call rax; 
0x00000000004363ea: test edx, edx; je 0x363ff; mov rax, qword ptr [rdx]; call rax; 
0x0000000000444ba5: test edx, edx; je 0x44bd4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x000000000044f330: test edx, edx; je 0x4f33f; mov rsi, qword ptr [rdx]; call rsi; 
0x0000000000404345: test edx, edx; jne 0x434f; add rsp, 0x10; pop rbp; ret; 
0x0000000000451d6c: test edx, edx; jne 0x51d5f; add rsp, 0x28; pop rbp; ret; 
0x0000000000454a97: test edx, edx; jne 0x54a49; add rsp, 0x60; pop rbp; ret; 
0x00000000004599a1: test esi, esi; jne 0x599ab; mov eax, 1; ret; 
0x0000000000461785: test esp, esp; jne 0x61795; mov rax, qword ptr [rdx + 8]; mov ecx, 1; xchg dword ptr [rax], ecx; ret; 
0x000000000040a453: test qword ptr [r8 - 0x77], -0x14dfdb8c; add rsp, 0x30; pop rbp; ret; 
0x0000000000461784: test r12, r12; jne 0x61795; mov rax, qword ptr [rdx + 8]; mov ecx, 1; xchg dword ptr [rax], ecx; ret; 
0x0000000000456019: test r8, r8; jne 0x56029; xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x0000000000408ca0: test r8b, r8b; je 0x8c5b; mov rcx, qword ptr [rip + 0x957bc]; mov rax, rsi; lea rdx, [rip + 0x957b2]; call rcx; 
0x000000000045a304: test r9, r9; je 0x5a30e; call 0x5cde0; ret; 
0x000000000045cf31: test rax, 0xf; sete byte ptr [rsp + 8]; ret; 
0x000000000042fce6: test rax, rax; je 0x2fd2b; mov rcx, qword ptr [rax + 0x18]; mov rax, rbx; call rcx; 
0x00000000004319af: test rax, rax; je 0x319bf; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x00000000004319c9: test rax, rax; je 0x319d6; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x000000000043ff93: test rax, rax; je 0x3ff9e; add rsp, 8; pop rbp; ret; 
0x0000000000458c80: test rax, rax; je 0x58c89; mov rax, qword ptr [rax]; ret; 
0x0000000000458da0: test rax, rax; je 0x58da9; mov rax, qword ptr [rax]; ret; 
0x000000000045af35: test rax, rax; je 0x5af6b; lea rsi, [rip - 0xc21]; mov rdx, 0; mov rcx, 0; call rax; 
0x0000000000460420: test rax, rax; je 0x6042f; mov rax, qword ptr [rax + 0x40]; add rsp, 0x10; pop rbp; ret; 
0x0000000000461a45: test rax, rax; je 0x619f1; add rsp, 0x28; pop rbp; ret; 
0x0000000000461b0e: test rax, rax; je 0x61abe; add rsp, 0x28; pop rbp; ret; 
0x00000000004716a7: test rax, rax; je 0x716b5; add rsp, 0x108; pop rbp; ret; 
0x000000000047194a: test rax, rax; je 0x7189b; add rsp, 0x108; pop rbp; ret; 
0x0000000000471a16: test rax, rax; je 0x71967; add rsp, 0x108; pop rbp; ret; 
0x000000000040a06c: test rax, rax; je 0xa07c; mov rbx, qword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000463bb5: test rax, rax; jge 0x63bc7; mov rax, -1; add rsp, 0x78; pop rbp; ret; 
0x000000000044aae0: test rax, rax; jl 0x4aaeb; add rsp, 0x18; pop rbp; ret; 
0x000000000044ab09: test rax, rax; jl 0x4ab14; add rsp, 0x18; pop rbp; ret; 
0x00000000004717e9: test rax, rax; jle 0x717fc; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x0000000000436061: test rax, rax; jne 0x3606c; add rsp, 0x58; pop rbp; ret; 
0x0000000000439494: test rax, rax; jne 0x394a1; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000452df2: test rax, rax; jne 0x52e0e; mov rcx, qword ptr [rsp + 0x2c8]; mov eax, 1; lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000457dc7: test rax, rax; jne 0x57dd5; add rsp, 0x88; pop rbp; ret; 
0x000000000046858e: test rax, rax; sete cl; mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x00000000004707ab: test rax, rax; setl al; add rsp, 0x30; pop rbp; ret; 
0x0000000000422d2b: test rax, rax; setne al; add rsp, 0x20; pop rbp; ret; 
0x000000000042e074: test rax, rcx; je 0x2e081; xor eax, eax; add rsp, 0x40; pop rbp; ret; 
0x000000000047208d: test rbx, rbx; je 0x7209b; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000464fc1: test rbx, rbx; jg 0x65018; jl 0x64feb; add rsp, 0x18; pop rbp; ret; 
0x00000000004142b6: test rbx, rbx; jne 0x142c1; add rsp, 0x20; pop rbp; ret; 
0x0000000000414369: test rbx, rbx; jne 0x14374; add rsp, 0x20; pop rbp; ret; 
0x00000000004145b1: test rbx, rbx; jne 0x145bc; add rsp, 0x38; pop rbp; ret; 
0x0000000000422def: test rbx, rbx; jne 0x22d8e; add rsp, 0x38; pop rbp; ret; 
0x00000000004675e0: test rbx, rbx; jne 0x675f0; movups xmmword ptr [rax + 0x18], xmm15; add rsp, 0x40; pop rbp; ret; 
0x0000000000413fe5: test rbx, rbx; mov edx, 0; cmovne rax, rdx; add rsp, 0x20; pop rbp; ret; 
0x0000000000412d00: test rcx, rcx; ja 0x12cee; pop rbp; ret; 
0x0000000000426d0d: test rcx, rcx; je 0x26d1b; mov rax, rbx; add rsp, 0x10; pop rbp; ret; 
0x000000000044a6e0: test rcx, rcx; je 0x4a76a; mov ebx, 1; add rsp, 0x20; pop rbp; ret; 
0x00000000004593a4: test rcx, rcx; je 0x5933a; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000460340: test rcx, rcx; je 0x6034e; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x000000000046054f: test rcx, rcx; je 0x6055e; mov rax, qword ptr [rcx + 0x40]; add rsp, 0x10; pop rbp; ret; 
0x000000000046bd60: test rcx, rcx; je 0x6bd6e; mov rax, rcx; add rsp, 0x28; pop rbp; ret; 
0x0000000000415ad6: test rcx, rcx; jg 0x15ae6; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x000000000042a44a: test rcx, rcx; jne 0x2a3e9; add rsp, 0x20; pop rbp; ret; 
0x0000000000409599: test rdi, rdi; jne 0x957d; xchg qword ptr [r8], rbx; inc qword ptr [rax + 8]; ret; 
0x00000000004731cc: test rdx, rcx; jne 0x7319a; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000418099: test rdx, rdx; je 0x180a3; mov rax, qword ptr [rdx]; call rax; 
0x000000000042c1e9: test rdx, rdx; je 0x2c1f7; mov rax, rdx; add rsp, 0x18; pop rbp; ret; 
0x00000000004333d7: test rdx, rdx; je 0x333f4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x0000000000433780: test rdx, rdx; je 0x3391f; mov rax, qword ptr [rdx]; call rax; 
0x00000000004363e9: test rdx, rdx; je 0x363ff; mov rax, qword ptr [rdx]; call rax; 
0x0000000000444ba4: test rdx, rdx; je 0x44bd4; mov rcx, qword ptr [rdx]; mov rax, rdi; call rcx; 
0x000000000044f32f: test rdx, rdx; je 0x4f33f; mov rsi, qword ptr [rdx]; call rsi; 
0x0000000000404344: test rdx, rdx; jne 0x434f; add rsp, 0x10; pop rbp; ret; 
0x0000000000451d6b: test rdx, rdx; jne 0x51d5f; add rsp, 0x28; pop rbp; ret; 
0x0000000000454a96: test rdx, rdx; jne 0x54a49; add rsp, 0x60; pop rbp; ret; 
0x00000000004599a0: test rsi, rsi; jne 0x599ab; mov eax, 1; ret; 
0x00000000004351f5: test sil, sil; je 0x35201; add rsp, 0x30; pop rbp; nop; ret; 
0x0000000000437f08: test sil, sil; je 0x37f41; mov rdx, qword ptr [rip + 0xeb5d4]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x0000000000470fd7: test sil, sil; je 0x70fea; mov eax, 1; add rsp, 0x108; pop rbp; ret; 
0x00000000004541d6: test sil, sil; jne 0x541e6; mov eax, 1; add rsp, 0x30; pop rbp; ret; 
0x0000000000403f48: ucomisd xmm0, xmm1; sete al; setnp cl; and eax, ecx; ret; 
0x0000000000403fbe: ucomisd xmm1, xmm3; sete dl; setnp cl; and edx, ecx; and eax, edx; ret; 
0x0000000000415b28: ucomisd xmm2, xmm1; seta al; add rsp, 8; pop rbp; ret; 
0x0000000000403f28: ucomiss xmm0, xmm1; sete al; setnp cl; and eax, ecx; ret; 
0x0000000000403f7d: ucomiss xmm1, xmm3; sete dl; setnp cl; and edx, ecx; and eax, edx; ret; 
0x0000000000415b29: ucomiss xmm2, xmm1; seta al; add rsp, 8; pop rbp; ret; 
0x000000000045b104: ud2; call 0x5cde0; pop rbp; ret; 
0x000000000045cecd: verr word ptr [rsi + 0x48]; movd eax, mm0; ret; 
0x000000000045cefc: verr word ptr [rsi + 0xf]; cmp ah, bl; add eax, 0xf3ae9; aesenc xmm0, xmmword ptr [rip + 0xf3af0]; movq rax, xmm0; ret; 
0x000000000045cf05: verr word ptr [rsi + 0xf]; cmp ah, bl; add eax, 0xf3af0; movq rax, xmm0; ret; 
0x000000000045cebb: verr word ptr [rsi + 0xf]; cmp ah, bl; add eax, 0xf3b2a; aesenc xmm0, xmmword ptr [rip + 0xf3b31]; movq rax, xmm0; ret; 
0x000000000045cec4: verr word ptr [rsi + 0xf]; cmp ah, bl; add eax, 0xf3b31; movq rax, xmm0; ret; 
0x000000000042fa36: verw ax; ret; 
0x000000000045db1c: vmovdqu ymmword ptr [rdi + rbx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rbx - 0x40], ymm0; vmovdqu ymmword ptr [rdi + rbx - 0x60], ymm0; vmovdqu ymmword ptr [rdi + rbx - 0x80], ymm0; vzeroupper; ret; 
0x000000000045db22: vmovdqu ymmword ptr [rdi + rbx - 0x40], ymm0; vmovdqu ymmword ptr [rdi + rbx - 0x60], ymm0; vmovdqu ymmword ptr [rdi + rbx - 0x80], ymm0; vzeroupper; ret; 
0x000000000045db28: vmovdqu ymmword ptr [rdi + rbx - 0x60], ymm0; vmovdqu ymmword ptr [rdi + rbx - 0x80], ymm0; vzeroupper; ret; 
0x000000000045db2e: vmovdqu ymmword ptr [rdi + rbx - 0x80], ymm0; vzeroupper; ret; 
0x00000000004035b1: vptest ymm3, ymm3; jne 0x35c3; vzeroupper; mov qword ptr [r8], -1; ret; 
0x00000000004033fd: vzeroupper; mov qword ptr [r11], -1; ret; 
0x00000000004035b8: vzeroupper; mov qword ptr [r8], -1; ret; 
0x00000000004035d3: vzeroupper; ret; 
0x00000000004030c1: vzeroupper; xor rax, rax; ret; 
0x000000000040c12c: wait; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x48]; add rsp, 0x58; pop rbp; ret; 
0x000000000043bbc1: wait; and al, 0; add byte ptr [rax + 1], bh; add rsp, 0x10; pop rbp; ret; 
0x0000000000416501: wait; leave; add al, byte ptr [rax]; add rsp, 0x48; pop rbp; ret; 
0x0000000000414955: wait; or byte ptr [rax], al; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x00000000004725a1: wait; ret 0xa; 
0x000000000041e161: wait; ret 0xfffe; 
0x0000000000403f2f: wait; shl dword ptr [rcx], 0xc8; ret; 
0x0000000000403f84: wait; shl dword ptr [rcx], 0xca; and eax, edx; ret; 
0x000000000043eed3: wbinvd; ret; 
0x00000000004090ce: xadd dword ptr [rax + 0x500], ecx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090ba: xadd dword ptr [rax + 0x508], ecx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090aa: xadd dword ptr [rax], ecx; add rsp, 0x10; pop rbp; ret; 
0x00000000004620d6: xadd dword ptr [rax], ecx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000418b47: xadd dword ptr [rax], edx; add rsp, 0x18; pop rbp; ret; 
0x000000000041a2fe: xadd dword ptr [rcx], eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000436ff6: xadd dword ptr [rcx], eax; add rsp, 0x48; pop rbp; ret; 
0x0000000000413eed: xadd dword ptr [rcx], edx; call 0x14080; add rsp, 0x10; pop rbp; ret; 
0x00000000004580aa: xadd dword ptr [rcx], edx; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x38; pop rbp; ret; 
0x0000000000446357: xadd dword ptr [rdi], ecx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000446310: xadd dword ptr [rdi], ecx; xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x000000000044d4d0: xadd dword ptr [rdx + 0x22a0], eax; add rsp, 0x48; pop rbp; ret; 
0x00000000004614ec: xadd dword ptr [rdx], eax; add rsp, 0x40; pop rbp; ret; 
0x00000000004584a9: xadd dword ptr [rdx], eax; mov byte ptr [rcx + 0x1260], 0; add rsp, 8; pop rbp; ret; 
0x00000000004225af: xadd dword ptr [rdx], eax; mov qword ptr [rcx + 0x18], 0; add rsp, 8; pop rbp; nop; ret; 
0x000000000042cc52: xadd dword ptr [rdx], ecx; add rsp, 8; pop rbp; ret; 
0x00000000004463d3: xadd dword ptr [rdx], ecx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000421467: xadd dword ptr [rdx], ecx; mov eax, 1; add rsp, 0xf8; pop rbp; ret; 
0x00000000004371a5: xadd dword ptr [rdx], ecx; mov rax, qword ptr [rsp + 0x18]; call 0x37420; add rsp, 0x28; pop rbp; ret; 
0x00000000004090cd: xadd qword ptr [rax + 0x500], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090b9: xadd qword ptr [rax + 0x508], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004090a9: xadd qword ptr [rax], rcx; add rsp, 0x10; pop rbp; ret; 
0x00000000004620d5: xadd qword ptr [rax], rcx; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x0000000000418b46: xadd qword ptr [rax], rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000041a2fd: xadd qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000413eec: xadd qword ptr [rcx], rdx; call 0x14080; add rsp, 0x10; pop rbp; ret; 
0x00000000004580a9: xadd qword ptr [rcx], rdx; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x38; pop rbp; ret; 
0x00000000004225ae: xadd qword ptr [rdx], rax; mov qword ptr [rcx + 0x18], 0; add rsp, 8; pop rbp; nop; ret; 
0x0000000000421466: xadd qword ptr [rdx], rcx; mov eax, 1; add rsp, 0xf8; pop rbp; ret; 
0x000000000042a7f6: xchg byte ptr [rax], ah; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; retf 0x9f0f; ret 0x8eb; 
0x000000000042ec71: xchg byte ptr [rax], cl; add rsp, 0xd8; pop rbp; ret; 
0x0000000000418884: xchg byte ptr [rax], cl; ret; 
0x0000000000461246: xchg byte ptr [rbx], dl; or al, 0; sete al; add rsp, 0x18; pop rbp; ret; 
0x000000000042e79f: xchg byte ptr [rcx], al; add rsp, 0xc0; pop rbp; ret; 
0x0000000000418985: xchg byte ptr [rcx], dl; call 0x188a0; add rsp, 0x18; pop rbp; ret; 
0x000000000041883a: xchg byte ptr [rcx], dl; mov ecx, dword ptr [rip + 0x13b4b6]; inc ecx; xchg dword ptr [rax + 0x48], ecx; ret; 
0x0000000000456e16: xchg byte ptr [rip + 0x40000001], cl; mov byte ptr [rax], bh; mov eax, 1; add rsp, 0x10; pop rbp; ret; 
0x000000000046d816: xchg ch, al; stc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000471c3b: xchg ch, bh; jmp qword ptr [rsi - 0x70]; 
0x000000000042c0ea: xchg dword ptr [rax + 0x10], ecx; add rsp, 0x20; pop rbp; ret; 
0x000000000044ec8a: xchg dword ptr [rax + 0x1208], ecx; add rsp, 0x58; pop rbp; ret; 
0x000000000044dacf: xchg dword ptr [rax + 0x1210], ecx; add rsp, 0x20; pop rbp; ret; 
0x000000000044d928: xchg dword ptr [rax + 0x1210], ecx; mov rax, rbx; add rsp, 0x28; pop rbp; ret; 
0x0000000000461b1c: xchg dword ptr [rax + 0x18], ecx; xor eax, eax; xor ebx, ebx; add rsp, 0x28; pop rbp; ret; 
0x0000000000440046: xchg dword ptr [rax + 0x194], edx; add rsp, 0x20; pop rbp; ret; 
0x00000000004592aa: xchg dword ptr [rax + 0x28], ecx; xor eax, eax; ret; 
0x000000000041f84f: xchg dword ptr [rax + 0x30], ebx; mov rcx, qword ptr [rip + 0xf9947]; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000044441d: xchg dword ptr [rax + 0x33c], ecx; add rsp, 0x20; pop rbp; ret; 
0x0000000000418508: xchg dword ptr [rax + 0x40], ebx; mov byte ptr [rax + 0x21], 0; call 0x188a0; add rsp, 0x18; pop rbp; ret; 
0x0000000000418844: xchg dword ptr [rax + 0x48], ecx; ret; 
0x0000000000431a9a: xchg dword ptr [rax + 0x58], ebx; add rsp, 0x10; pop rbp; ret; 
0x0000000000405a55: xchg dword ptr [rax + rax + 0x1b800], esi; add byte ptr [rax], al; xor ebx, ebx; add rsp, 0x68; pop rbp; ret; 
0x0000000000458bd0: xchg dword ptr [rax], ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000041f652: xchg dword ptr [rax], ebx; add rsp, 0x28; pop rbp; ret; 
0x000000000040959f: xchg dword ptr [rax], ebx; inc qword ptr [rax + 8]; ret; 
0x0000000000460220: xchg dword ptr [rax], ebx; ret; 
0x000000000042befa: xchg dword ptr [rax], ecx; add rsp, 0x58; pop rbp; ret; 
0x00000000004188b0: xchg dword ptr [rax], ecx; cmp ecx, 1; jne 0x188bd; add rsp, 0x10; pop rbp; ret; 
0x0000000000461792: xchg dword ptr [rax], ecx; ret; 
0x000000000041f8f0: xchg dword ptr [rax], edx; add rsp, 0x20; pop rbp; ret; 
0x000000000041dcf9: xchg dword ptr [rax], edx; ret; 
0x0000000000418095: xchg dword ptr [rbp - 0x7ab7fff0], esp; sal byte ptr [rbp + rax + 0x48], cl; mov eax, dword ptr [rdx]; call rax; 
0x000000000041cded: xchg dword ptr [rbx + 0x10], ebx; add byte ptr [rax + 0x39], cl; ret 0x4876; 
0x0000000000423995: xchg dword ptr [rbx], eax; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000040ba55: xchg dword ptr [rbx], ecx; add byte ptr [rax], al; add rsp, 0x58; pop rbp; ret; 
0x000000000041c8b7: xchg dword ptr [rcx + 0x100], eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000436659: xchg dword ptr [rcx + 0x11c], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000043fd87: xchg dword ptr [rcx + 0x1228], edx; add rsp, 0x18; pop rbp; ret; 
0x000000000041d6fb: xchg dword ptr [rcx + 0x18], eax; ret; 
0x0000000000459c75: xchg dword ptr [rcx], eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000444708: xchg dword ptr [rcx], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000040ac92: xchg dword ptr [rcx], eax; add rsp, 0x28; pop rbp; ret; 
0x0000000000406435: xchg dword ptr [rcx], eax; add rsp, 0x58; pop rbp; ret; 
0x000000000044b8a5: xchg dword ptr [rcx], eax; add rsp, 0x60; pop rbp; ret; 
0x000000000041dd0c: xchg dword ptr [rcx], eax; ret; 
0x0000000000440712: xchg dword ptr [rdi + 0x194], edx; mov rax, rsi; add rsp, 0x20; pop rbp; ret; 
0x000000000041f7ca: xchg dword ptr [rdx + 0x38], eax; add rsp, 0x28; pop rbp; ret; 
0x00000000004135aa: xchg dword ptr [rdx + 0x4a8], ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000454999: xchg dword ptr [rdx - 0x45f0fff1], edi; loope 0x549a2; setae al; add rsp, 0x10; pop rbp; ret; 
0x0000000000406566: xchg dword ptr [rdx], eax; add rsp, 0x18; pop rbp; ret; 
0x000000000044fd3f: xchg dword ptr [rdx], eax; add rsp, 0x60; pop rbp; ret; 
0x000000000043745e: xchg dword ptr [rdx], ecx; add rsp, 8; pop rbp; ret; 
0x000000000043ffab: xchg dword ptr [rdx], ecx; xor eax, eax; add rsp, 8; pop rbp; ret; 
0x000000000045ec75: xchg dword ptr [rdx], edi; or al, 0; mov rbx, rsp; and rsp, 0xfffffffffffffff0; mov qword ptr [rsp], rbx; call rax; 
0x0000000000416235: xchg dword ptr [rdx], esp; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000040a9a5: xchg eax, ebp; mov eax, 1; add rsp, 0x30; pop rbp; ret; 
0x000000000044ac76: xchg eax, ebp; mov rcx, qword ptr [rsp + 0x28]; add rax, rcx; add rsp, 0x48; pop rbp; ret; 
0x000000000043928e: xchg eax, ebp; ret 0x2eb; 
0x0000000000465364: xchg eax, ebp; ret 0x34d; 
0x000000000043f9d8: xchg eax, ebp; ret 0x4eb; 
0x0000000000421d0f: xchg eax, ebp; ret 0x5488; 
0x0000000000415b64: xchg eax, ebp; ret 0x5eb; 
0x000000000047b29e: xchg eax, ebp; ret 0x8b48; 
0x000000000042305c: xchg eax, ebp; ret 0x9066; 
0x000000000046788a: xchg eax, ebp; ret 0x944; 
0x0000000000442da6: xchg eax, ebp; ret 0xd284; 
0x00000000004565a0: xchg eax, ebp; ret 0xda38; 
0x000000000043eb6d: xchg eax, ebp; ret; 
0x000000000044b3ed: xchg eax, ebp; ror byte ptr [rax - 0x7f], 0xc4; or byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000469bac: xchg eax, ebp; ror dword ptr [rcx - 0x3b7cb738], 0x10; pop rbp; ret; 
0x000000000043ffa7: xchg eax, ebp; xor al, 0xe; add byte ptr [rdi + 0x48c0310a], al; add esp, 8; pop rbp; ret; 
0x00000000004681f4: xchg eax, ebx; add rsp, 0x20; pop rbp; ret; 
0x0000000000469d83: xchg eax, ebx; mov dh, 2; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004363e4: xchg eax, ebx; mov eax, 0x48000000; test edx, edx; je 0x363ff; mov rax, qword ptr [rdx]; call rax; 
0x00000000004650cb: xchg eax, ebx; ret 0xd284; 
0x0000000000467e0a: xchg eax, ebx; ret; 
0x0000000000458110: xchg eax, ebx; shr ebx, 2; xor ecx, ecx; mov eax, ecx; ret; 
0x000000000042f209: xchg eax, ebx; stosb byte ptr [rdi], al; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000472821: xchg eax, ebx; sub al, 4; add byte ptr [rax - 0x77], cl; ret 0x4eb; 
0x00000000004376b6: xchg eax, ecx; adc dword ptr [rax], eax; call 0x42600; add rsp, 0x30; pop rbp; ret; 
0x000000000043745a: xchg eax, ecx; adc dword ptr [rax], eax; xchg qword ptr [rdx], rcx; add rsp, 8; pop rbp; ret; 
0x00000000004172ea: xchg eax, ecx; adc eax, dword ptr [rax]; jg 0x172b0; add rsp, 0x10; pop rbp; ret; 
0x0000000000451b4f: xchg eax, ecx; add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; ret 0x675; 
0x000000000041e0a4: xchg eax, ecx; add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; sbb cl, byte ptr [rax - 0x75]; and al, 0x48; call rbx; 
0x00000000004339f5: xchg eax, ecx; add byte ptr [rax], al; pop rbp; ret; 
0x000000000040591b: xchg eax, ecx; add rsp, 0x48; pop rbp; ret; 
0x000000000041d960: xchg eax, ecx; lock add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000041e381: xchg eax, ecx; mov byte ptr [rax], al; add byte ptr [rax], al; mov rbx, qword ptr [rdx]; mov eax, 0x10000; call rbx; 
0x00000000004593a8: xchg eax, ecx; mov rax, rcx; add rsp, 0x10; pop rbp; ret; 
0x000000000044022b: xchg eax, ecx; movabs dword ptr [0x4800000001b8fffc], eax; add esp, 0x428; pop rbp; ret; 
0x0000000000435a70: xchg eax, ecx; nop; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000040c233: xchg eax, ecx; nop; add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x0000000000477bcb: xchg eax, ecx; ret; 
0x000000000045b54b: xchg eax, ecx; sldt word ptr [rax]; jmp rax; 
0x000000000043fd88: xchg eax, ecx; sub byte ptr [rdx], dl; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x000000000046fffa: xchg eax, ecx; xor eax, eax; add rsp, 0x48; pop rbp; ret; 
0x000000000046c036: xchg eax, edi; add al, byte ptr [rax]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000046fa05: xchg eax, edi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000445705: xchg eax, edi; cld; dec dword ptr [rax - 0x77]; ret; 
0x00000000004607ad: xchg eax, edi; cli; dec dword ptr [rax - 0x75]; sbb byte ptr [rax - 0x75], cl; and al, 0x48; call rcx; 
0x00000000004357ae: xchg eax, edi; mov esp, 0xff000000; ret 0x9788; 
0x0000000000458edf: xchg eax, edi; or al, 0; mov qword ptr [r11 + 8], rcx; mov qword ptr [rip + 0xc9733], rax; pop rbp; ret; 
0x0000000000458eea: xchg eax, edi; or al, 0; pop rbp; ret; 
0x0000000000425925: xchg eax, edi; ret 0xaeb; 
0x0000000000425a1d: xchg eax, edi; ret 0xeb90; 
0x0000000000467de9: xchg eax, edi; ret; 
0x000000000040ee45: xchg eax, edi; sub byte ptr [rax + rax], dl; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x00000000004026c0: xchg eax, edx; add eax, 0x14e3e5; add rsp, 0x50; pop rbp; ret; 
0x000000000046baa5: xchg eax, edx; add rsp, 0x58; pop rbp; ret; 
0x0000000000439810: xchg eax, edx; nop; add dword ptr [rax], eax; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x8445; 
0x0000000000402588: xchg eax, edx; ret 0x1588; 
0x0000000000474ac8: xchg eax, edx; ret 0xa948; 
0x0000000000423f99: xchg eax, edx; ret 0xbb41; 
0x0000000000460c2a: xchg eax, edx; ret; 
0x000000000046c048: xchg eax, esi; add al, byte ptr [rax]; mov ebx, 6; add rsp, 0x28; pop rbp; ret; 
0x000000000041f2f4: xchg eax, esi; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000041c6c6: xchg eax, esi; add dword ptr fs:[rax], eax; call 0x32980; add rsp, 0x40; pop rbp; ret; 
0x0000000000460807: xchg eax, esi; cli; dec dword ptr [rax - 0x75]; sbb byte ptr [rax - 0x75], cl; and al, 0x48; call rcx; 
0x00000000004297a6: xchg eax, esi; cmp eax, dword ptr [rbx]; add byte ptr [rax - 1], cl; ret; 
0x000000000044ce55: xchg eax, esi; mov eax, dword ptr [rsp + 0x34]; add rsp, 0x68; pop rbp; nop; ret; 
0x00000000004055cb: xchg eax, esi; movabs al, byte ptr [0x2474894890000000]; adc cl, ch; ret; 
0x0000000000419ef5: xchg eax, esi; nop; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret 0x8948; 
0x0000000000440156: xchg eax, esi; nop; add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret 0x9066; 
0x000000000042b383: xchg eax, esi; ret 0x3948; 
0x000000000040eec6: xchg eax, esi; ret; 
0x000000000042b389: xchg eax, esi; sar dword ptr [rax], 0xd1; jne 0x2b395; add rsp, 0x10; pop rbp; ret; 
0x000000000046d2ec: xchg eax, esp; add al, byte ptr [rax]; mov ebx, 0xe; add rsp, 0x128; pop rbp; ret; 
0x000000000046c00a: xchg eax, esp; add al, byte ptr [rax]; mov ebx, 4; add rsp, 0x28; pop rbp; ret; 
0x0000000000466177: xchg eax, esp; and al, 0x40; add eax, dword ptr [rax]; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x3eb; 
0x000000000047c451: xchg eax, esp; and al, 0x60; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4818; 
0x0000000000467dfe: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov edx, 0x930f00e2; ret; 
0x000000000046ae40: xchg eax, esp; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x8b48; 
0x0000000000412593: xchg eax, esp; and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4908; 
0x0000000000452ead: xchg eax, esp; and al, 0x98; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4828; 
0x0000000000465763: xchg eax, esp; and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; pushfq; ret; 
0x000000000041e953: xchg eax, esp; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rax - 9], cl; ret 0x1fff; 
0x0000000000479838: xchg eax, esp; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx - 0x77]; ret 0x8b48; 
0x00000000004610f0: xchg eax, esp; and al, 0xa8; add byte ptr [rax], al; add bl, ch; sbb al, ch; ret; 
0x000000000047bb13: xchg eax, esp; and al, 0xc8; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x8b48; 
0x000000000044bc29: xchg eax, esp; and al, 0xd0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4828; 
0x0000000000470f19: xchg eax, esp; and al, 0xe0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004489f8: xchg eax, esp; and al, 0xf0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x000000000045cf38: xchg eax, esp; and al, 8; ret; 
0x000000000040a544: xchg eax, esp; mov dword ptr [rax - 0x7c], 0x48e174ff; add esp, 0x30; pop rbp; ret; 
0x0000000000439a61: xchg eax, esp; mov rax, r9; add rsp, 0x10; pop rbp; ret; 
0x00000000004472b7: xchg eax, esp; or esi, dword ptr [rax + 4]; add byte ptr [rax], al; add rsp, 0x38; pop rbp; ret; 
0x0000000000444e21: xchg eax, esp; ret 0x14eb; 
0x0000000000401b9a: xchg eax, esp; ret 0x1f0f; 
0x0000000000451918: xchg eax, esp; ret 0x2875; 
0x000000000041748b: xchg eax, esp; ret 0x2eb; 
0x000000000046617f: xchg eax, esp; ret 0x3eb; 
0x000000000041138d: xchg eax, esp; ret 0x4000; 
0x000000000040639d: xchg eax, esp; ret 0x4590; 
0x00000000004395bb: xchg eax, esp; ret 0x5488; 
0x0000000000444385: xchg eax, esp; ret 0x6eb; 
0x000000000043b42e: xchg eax, esp; ret 0x7eb; 
0x0000000000439817: xchg eax, esp; ret 0x8445; 
0x0000000000405a1d: xchg eax, esp; ret 0x8490; 
0x000000000040b8a2: xchg eax, esp; ret 0x8948; 
0x0000000000404cf4: xchg eax, esp; ret 0x8eb; 
0x0000000000404cfc: xchg eax, esp; ret 0x9066; 
0x0000000000403f81: xchg eax, esp; ret 0x9b0f; 
0x0000000000405a3a: xchg eax, esp; ret 0x9eb; 
0x0000000000405a12: xchg eax, esp; ret 0xaeb; 
0x0000000000449bd5: xchg eax, esp; ret 0xb60f; 
0x00000000004209b8: xchg eax, esp; ret 0xc748; 
0x0000000000405a45: xchg eax, esp; ret 0xd284; 
0x0000000000449b1d: xchg eax, esp; ret 0xf45; 
0x000000000043d6e8: xchg eax, esp; ret 0xf; 
0x0000000000405889: xchg eax, esp; ret; 
0x0000000000417f45: xchg eax, esp; rol dword ptr [rcx + rcx*8 - 0x6f17388c], 0x23; add dword ptr [rax], eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000403f2c: xchg eax, esp; ror byte ptr [rdi], 0x9b; shl dword ptr [rcx], 0xc8; ret; 
0x0000000000468592: xchg eax, esp; ror dword ptr [rax - 0x77], 0xd0; add rsp, 0x10; pop rbp; ret; 
0x0000000000472140: xchg eax, esp; ror dword ptr [rcx - 0x3b7cb738], 0x20; pop rbp; ret; 
0x000000000040120b: xchg eax, esp; shr ebx, 2; xor ecx, ecx; mov eax, ecx; pop rbp; ret; 
0x0000000000403f11: xchg eax, esp; shr ebx, 2; xor ecx, ecx; mov eax, ecx; ret; 
0x000000000040959e: xchg qword ptr [r8], rbx; inc qword ptr [rax + 8]; ret; 
0x000000000042c0e9: xchg qword ptr [rax + 0x10], rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000044ec89: xchg qword ptr [rax + 0x1208], rcx; add rsp, 0x58; pop rbp; ret; 
0x000000000044dace: xchg qword ptr [rax + 0x1210], rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000044d927: xchg qword ptr [rax + 0x1210], rcx; mov rax, rbx; add rsp, 0x28; pop rbp; ret; 
0x0000000000461b1b: xchg qword ptr [rax + 0x18], rcx; xor eax, eax; xor ebx, ebx; add rsp, 0x28; pop rbp; ret; 
0x00000000004592a9: xchg qword ptr [rax + 0x28], rcx; xor eax, eax; ret; 
0x000000000041f84e: xchg qword ptr [rax + 0x30], rbx; mov rcx, qword ptr [rip + 0xf9947]; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000418507: xchg qword ptr [rax + 0x40], rbx; mov byte ptr [rax + 0x21], 0; call 0x188a0; add rsp, 0x18; pop rbp; ret; 
0x0000000000431a99: xchg qword ptr [rax + 0x58], rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000458bcf: xchg qword ptr [rax], rbx; add rsp, 0x10; pop rbp; ret; 
0x000000000041f651: xchg qword ptr [rax], rbx; add rsp, 0x28; pop rbp; ret; 
0x0000000000460240: xchg qword ptr [rax], rbx; ret; 
0x000000000042bef9: xchg qword ptr [rax], rcx; add rsp, 0x58; pop rbp; ret; 
0x000000000041f8ef: xchg qword ptr [rax], rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000041dcf8: xchg qword ptr [rax], rdx; ret; 
0x000000000041c8b6: xchg qword ptr [rcx + 0x100], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000043fd86: xchg qword ptr [rcx + 0x1228], rdx; add rsp, 0x18; pop rbp; ret; 
0x000000000041d6fa: xchg qword ptr [rcx + 0x18], rax; ret; 
0x000000000040ac91: xchg qword ptr [rcx], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000044b8a4: xchg qword ptr [rcx], rax; add rsp, 0x60; pop rbp; ret; 
0x000000000041dd0b: xchg qword ptr [rcx], rax; ret; 
0x000000000041f7c9: xchg qword ptr [rdx + 0x38], rax; add rsp, 0x28; pop rbp; ret; 
0x000000000043745d: xchg qword ptr [rdx], rcx; add rsp, 8; pop rbp; ret; 
0x000000000041f2f3: xchg rax, r14; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x000000000046c059: xchg rax, rsi; add al, byte ptr [rax]; mov ebx, 6; add rsp, 0x28; pop rbp; ret; 
0x0000000000402725: xgetbv; mov dword ptr [rsp + 8], eax; mov dword ptr [rsp + 0xc], edx; ret; 
0x0000000000441fe5: xlatb; add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x820f; 
0x0000000000474edd: xlatb; add eax, 0x8d480004; sbb eax, 0x3ff88; add rsp, 0x48; pop rbp; ret; 
0x0000000000411f23: xlatb; call 0x12140; add rsp, 0x48; pop rbp; ret; 
0x0000000000440cb5: xlatb; cmp rdx, rsi; setge al; pop rbp; ret; 
0x00000000004033fa: xlatb; jb 0x33bf; vzeroupper; mov qword ptr [r11], -1; ret; 
0x000000000047a2ee: xlatb; mov esi, 0x70; call 0x79120; add rsp, 0x90; pop rbp; ret; 
0x000000000040346f: xlatb; mov qword ptr [r11], rdi; ret; 
0x0000000000403527: xlatb; mov qword ptr [r8], rdi; ret; 
0x000000000045cd5a: xlatb; mov qword ptr [rsp + 0x28], rdi; mov rdi, rbx; mov rcx, rbx; call rax; 
0x000000000044e4dd: xlatb; mov rbx, rsi; call 0x4e540; add rsp, 0x78; pop rbp; ret; 
0x00000000004424bc: xlatb; or eax, 0x48b4800; or cl, byte ptr [rax - 0x75]; pop rsp; or cl, byte ptr [rax]; ret; 
0x0000000000472575: xlatb; ret 0xa; 
0x0000000000403545: xlatb; ror dword ptr [rdi], 1; mov esp, 0x39ce74d2; fidiv dword ptr [rbx - 0x36]; mov qword ptr [r8], rdx; ret; 
0x0000000000403513: xlatb; ror dword ptr [rdi], 1; mov esp, 0x490875d2; mov dword ptr [rax], 0xffffffff; ret; 
0x000000000041f4f2: xlatb; xor eax, eax; xor ebx, ebx; add rsp, 0x40; pop rbp; ret; 
0x0000000000401a08: xor al, 0; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x0000000000452737: xor al, 0x10; lea rcx, [rip + 0x42f17]; mov edi, 5; add rsp, 0x20; pop rbp; ret; 
0x000000000041dbbc: xor al, 0x13; add byte ptr [rax + 0x77d63948], dl; adc ecx, dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000045ef30: xor al, 0x24; mov rax, 0xe4; syscall; 
0x000000000045eed5: xor al, 0x24; mov rax, qword ptr [rip + 0xf1712]; call rax; 
0x000000000045e8bc: xor al, 0x24; mov rax, qword ptr [rip + 0xf1d2b]; cmp rax, 0; je 0x5e905; call rax; 
0x000000000044cdf3: xor al, 0x39; test dword ptr [rdi], 0x8948fe4c; ret 0x8948; 
0x0000000000406288: xor al, 0x43; add byte ptr [rax], al; mov eax, 1; add rsp, 8; pop rbp; ret; 
0x000000000044ce59: xor al, 0x48; add esp, 0x68; pop rbp; nop; ret; 
0x000000000044c760: xor al, 0x48; mov ebx, dword ptr [rsp + 0x48]; add rsp, 0xb0; pop rbp; ret; 
0x0000000000437f0c: xor al, 0x48; mov edx, dword ptr [rip + 0xeb5d4]; mov rbx, qword ptr [rdx]; mov rax, rcx; call rbx; 
0x000000000042a54c: xor al, 0x83; ret 0x4802; 
0x000000000045f015: xor al, 0xa; mov rcx, qword ptr [rdx + rcx + 8]; mov rax, rsi; mov rbx, rcx; pop rbp; ret; 
0x000000000044f1f4: xor al, 0xc0; add rsp, 0x18; pop rbp; ret; 
0x00000000004115dc: xor al, 0xd0; add rsp, 0x10; pop rbp; ret; 
0x00000000004294ff: xor al, 0xd8; add rsp, 0x10; pop rbp; ret; 
0x000000000043ffa8: xor al, 0xe; add byte ptr [rdi + 0x48c0310a], al; add esp, 8; pop rbp; ret; 
0x00000000004615cc: xor al, 0xf7; ret 7; 
0x000000000044eff2: xor al, 0xf8; mov rax, rdi; add rsp, 0x18; pop rbp; ret; 
0x0000000000458a1c: xor al, 7; and rbx, rsi; mov rax, rdx; add rsp, 0x10; pop rbp; ret; 
0x0000000000454aea: xor al, byte ptr [rdx]; add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x0000000000460804: xor al, ch; not byte ptr [rsi - 0x74b70006]; sbb byte ptr [rax - 0x75], cl; and al, 0x48; call rcx; 
0x0000000000476db2: xor al, ch; push 0x48ffffe6; add esp, 0x20; pop rbp; ret; 
0x000000000042a297: xor al, ch; ret; 
0x0000000000452907: xor al, ch; xor eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x40; pop rbp; ret; 
0x000000000046d39b: xor bh, ah; jmp qword ptr [rsi - 0x70]; 
0x00000000004598c4: xor bh, bh; or dword ptr [rax], 0x48000001; mov ecx, dword ptr [rcx + 0xd0]; movsxd rax, dword ptr [rcx]; ret; 
0x000000000045e2d9: xor bl, dh; movq qword ptr [rax + 0x40], mm1; movdqu xmmword ptr [rax + 0x50], xmm10; movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x000000000045de7e: xor bl, dh; movq qword ptr [rdi + rbx - 0x40], mm4; movdqu xmmword ptr [rdi + rbx - 0x30], xmm5; movdqu xmmword ptr [rdi + rbx - 0x20], xmm6; movdqu xmmword ptr [rdi + rbx - 0x10], xmm7; ret; 
0x000000000045dc21: xor bl, dh; movq qword ptr [rdi + rbx - 0x40], mm7; movdqu xmmword ptr [rdi + rbx - 0x30], xmm15; movdqu xmmword ptr [rdi + rbx - 0x20], xmm15; movdqu xmmword ptr [rdi + rbx - 0x10], xmm15; ret; 
0x000000000045e2d8: xor bl, sil; movq qword ptr [rax + 0x40], mm1; movdqu xmmword ptr [rax + 0x50], xmm10; movdqu xmmword ptr [rax + 0x60], xmm11; movdqu xmmword ptr [rax + 0x70], xmm12; ret; 
0x00000000004600b1: xor byte ptr [r13 + 0xc], sil; movzx ecx, byte ptr [rax + 0x31]; cmp byte ptr [rbx + 0x31], cl; sete al; nop; ret; 
0x0000000000430dde: xor byte ptr [r9], al; mov rax, qword ptr [rcx + 8]; mov rbx, qword ptr [rcx + 0x10]; ret; 
0x00000000004598e4: xor byte ptr [rax + 0x10888ff], dl; add byte ptr [rax], al; ret; 
0x00000000004598e3: xor byte ptr [rax + 0x10888ff], r10b; add byte ptr [rax], al; ret; 
0x000000000041214b: xor byte ptr [rax + 0x29], cl; ret 0xc148; 
0x0000000000436402: xor byte ptr [rax + 0x39], cl; ret 0x2074; 
0x000000000046673c: xor byte ptr [rax + 0x48ff3354], cl; mov eax, esi; add rsp, 0x70; pop rbp; ret; 
0x000000000044dbb8: xor byte ptr [rax + 0x882ff41], dl; add dword ptr [rax], eax; add byte ptr [rbp - 0x75], cl; push rsi; xor byte ptr [rcx - 0x77], cl; ret; 
0x000000000043cebf: xor byte ptr [rax + 1], cl; ret 0x8548; 
0x0000000000434962: xor byte ptr [rax - 0x39], cl; ret; 
0x00000000004247fd: xor byte ptr [rax - 0x73], cl; add al, 0x16; mov ebx, 1; add rsp, 0x60; pop rbp; ret; 
0x000000000045d60b: xor byte ptr [rax - 0x73], cl; jg 0x5d650; ret; 
0x0000000000418091: xor byte ptr [rax - 0x75], cl; adc eax, 0x10a587; test rdx, rdx; je 0x180a3; mov rax, qword ptr [rdx]; call rax; 
0x0000000000457ed1: xor byte ptr [rax - 0x75], cl; adc eax, 0xe8000000; movabs byte ptr [0x5d08c48348fffd47], al; ret; 
0x000000000040e2f1: xor byte ptr [rax - 0x75], cl; adc ecx, dword ptr [rax - 1]; ret 0x8348; 
0x000000000045e996: xor byte ptr [rax - 0x75], cl; add eax, 0xc3d6a; mov rbx, rsp; and rsp, 0xfffffffffffffff0; call rax; 
0x00000000004293f7: xor byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x58; pop rbp; ret; 
0x000000000046cf48: xor byte ptr [rax - 0x75], cl; and al, 0x30; mov rbx, qword ptr [rsp + 0x38]; add rsp, 0x40; pop rbp; ret; 
0x000000000041f851: xor byte ptr [rax - 0x75], cl; or eax, 0xf9947; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000046f533: xor byte ptr [rax - 0x75], cl; pop rsp; and al, 0x18; add rsp, 0x20; pop rbp; ret; 
0x000000000046cf4d: xor byte ptr [rax - 0x75], cl; pop rsp; and al, 0x38; add rsp, 0x40; pop rbp; ret; 
0x000000000040e02f: xor byte ptr [rax - 0x75], cl; push rcx; sbb byte ptr [rax - 0x75], cl; or cl, byte ptr [rcx + rcx*4 - 0x20]; mov rbx, rax; call rcx; 
0x000000000043495e: xor byte ptr [rax - 0x75], cl; xor byte ptr [rax - 0x39], cl; ret; 
0x00000000004414a5: xor byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x75]; jnp 0x414b5; mov rax, rsi; mov rbx, rdi; call rcx; 
0x0000000000457ed0: xor byte ptr [rax - 0x75], r9b; adc eax, 0xe8000000; movabs byte ptr [0x5d08c48348fffd47], al; ret; 
0x000000000040e02e: xor byte ptr [rax - 0x75], r9b; push rcx; sbb byte ptr [rax - 0x75], cl; or cl, byte ptr [rcx + rcx*4 - 0x20]; mov rbx, rax; call rcx; 
0x000000000041afbc: xor byte ptr [rax - 0x77], cl; and al, 0x28; mov rax, qword ptr [rdx]; call rax; 
0x00000000004616ec: xor byte ptr [rax - 0x77], cl; and al, 0x40; mov byte ptr [rsp + 0xf], 3; mov rax, qword ptr [rbx]; mov rdx, rbx; call rax; 
0x000000000043a53d: xor byte ptr [rax - 0x77], cl; bnd call rcx; 
0x000000000040c889: xor byte ptr [rax - 0x77], cl; clc; add rsp, 0x40; pop rbp; ret; 
0x0000000000410f51: xor byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000041ff96: xor byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000042d6c8: xor byte ptr [rax - 0x77], cl; ret 0xb848; 
0x000000000040a2f6: xor byte ptr [rax - 0x77], cl; ret 0xdb31; 
0x0000000000431b0d: xor byte ptr [rax - 0x77], cl; ret; 
0x00000000004484e0: xor byte ptr [rax - 0x77], cl; retf 0x2948; ret 0x8b48; 
0x000000000040d581: xor byte ptr [rax - 0x77], cl; retf; call rsi; 
0x00000000004747bd: xor byte ptr [rax - 0x77], cl; ror dword ptr [rcx + rcx*4 - 0x3f], cl; add rsp, 0x50; pop rbp; ret; 
0x00000000004150ec: xor byte ptr [rax - 0x7b], cl; fisttp dword ptr [rdi]; xchg eax, esp; ret; 
0x0000000000405a18: xor byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x94; ret 0x8490; 
0x0000000000405a40: xor byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x94; ret 0xd284; 
0x0000000000411eef: xor byte ptr [rax - 0x7d], cl; ret 0x4c40; 
0x000000000045f8a7: xor byte ptr [rax - 0x7d], cl; ret; 
0x000000000045fa37: xor byte ptr [rax - 0x7f], cl; ret; 
0x000000000046e455: xor byte ptr [rax - 1], cl; ret 0x1f0f; 
0x000000000046674e: xor byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000405ba6: xor byte ptr [rax - 1], cl; ret 0x8948; 
0x00000000004600b2: xor byte ptr [rbp + 0xc], dh; movzx ecx, byte ptr [rax + 0x31]; cmp byte ptr [rbx + 0x31], cl; sete al; nop; ret; 
0x00000000004351fd: xor byte ptr [rbp - 0x70], bl; ret; 
0x000000000044cdef: xor byte ptr [rbx + 0x3934247c], cl; test dword ptr [rdi], 0x8948fe4c; ret 0x8948; 
0x0000000000402693: xor byte ptr [rbx + 6], 0x48; add esp, 0x50; pop rbp; ret; 
0x0000000000467a9b: xor byte ptr [rbx + rbx*8 + 0x4c], dh; add eax, eax; mov qword ptr [rcx + 0x20], rax; add rsp, 0x10; pop rbp; ret; 
0x000000000042a1f2: xor byte ptr [rbx + rcx*4 + 0x24], cl; ret; 
0x000000000045d2c2: xor byte ptr [rbx + rcx*4 + 0x74], cl; and al, 0x28; mov r15, qword ptr [rsp + 0x20]; add rsp, 0x98; pop rbp; ret; 
0x000000000042e2e8: xor byte ptr [rbx - 0x76b7dbf4], cl; add rsp, 8; pop rbp; ret; 
0x000000000042e2e7: xor byte ptr [rbx - 0x76b7dbf4], r9b; add rsp, 8; pop rbp; ret; 
0x00000000004576c4: xor byte ptr [rbx - 0x76bba7bd], cl; fiadd dword ptr [rcx + 0x29]; ret; 
0x0000000000478374: xor byte ptr [rbx], 0x48; add esp, 0x88; pop rbp; ret; 
0x00000000004110b0: xor byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 0x28; pop rbp; ret; 
0x0000000000452ec3: xor byte ptr [rcx + rdi - 0x40], cl; jl 0x52e4e; add rsp, 0x300; pop rbp; ret; 
0x000000000046a155: xor byte ptr [rcx - 0x75], cl; or byte ptr [rax - 0x73], cl; push rax; jmp qword ptr [rsi - 0x70]; 
0x000000000044d251: xor byte ptr [rcx - 0x77], al; ror byte ptr [rax - 0x77], 0xd0; add rsp, 0x58; pop rbp; ret; 
0x00000000004749c9: xor byte ptr [rcx - 0x77], cl; or ecx, dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x000000000047785b: xor byte ptr [rcx - 0x77], cl; ret 0x8948; 
0x000000000044dbc4: xor byte ptr [rcx - 0x77], cl; ret; 
0x000000000044a09c: xor byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000430ddf: xor byte ptr [rcx], al; mov rax, qword ptr [rcx + 8]; mov rbx, qword ptr [rcx + 0x10]; ret; 
0x000000000041fca4: xor byte ptr [rcx], al; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x000000000044cead: xor byte ptr [rcx], bh; sbb al, 0x77; or edi, dword ptr [rax - 1]; add rsp, 0x30; pop rbp; ret; 
0x000000000041c120: xor byte ptr [rcx], dh; fucomi st(1); ret; 
0x000000000044441a: xor byte ptr [rcx], dh; leave; xchg dword ptr [rax + 0x33c], ecx; add rsp, 0x20; pop rbp; ret; 
0x0000000000444419: xor byte ptr [rcx], sil; leave; xchg dword ptr [rax + 0x33c], ecx; add rsp, 0x20; pop rbp; ret; 
0x0000000000476735: xor byte ptr [rdi - 0x78], al; jl 0x76762; inc dword ptr [rbp + 0x31]; jmp qword ptr [rsi - 0x70]; 
0x00000000004613cb: xor byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x000000000041f224: xor byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000044e42c: xor byte ptr [rdx - 0x76b70001], al; ret 0x8b48; 
0x00000000004730e4: xor byte ptr [rdx], al; add byte ptr [rbx + 0xb], bh; ret; 
0x0000000000419567: xor byte ptr [rsi + 0x1000000], 0x48; add esp, 0x40; pop rbp; ret; 
0x0000000000458141: xor byte ptr [rsi], 0x48; mov dword ptr [rax + 0x190], 0; ret; 
0x000000000040d3a1: xor cl, byte ptr [rax - 0x75]; and al, 0x28; mov rbx, rcx; call rsi; 
0x000000000040d57c: xor cl, byte ptr [rax - 0x75]; and al, 0x30; mov rbx, rcx; call rsi; 
0x000000000044a1b0: xor cl, byte ptr [rax - 0x75]; pop rsp; xor cl, byte ptr [rax]; add rsp, 0x60; pop rbp; ret; 
0x000000000046b04d: xor cl, byte ptr [rax - 0x75]; pushfq; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret; 
0x0000000000444b67: xor cl, byte ptr [rax - 0x77]; fmul dword ptr [rax - 0x73]; pop rsp; and al, 0x48; mov rcx, rdi; call rsi; 
0x000000000040413d: xor cl, byte ptr [rax - 0x77]; fmul dword ptr [rax - 0x77]; retf; call rsi; 
0x00000000004302a4: xor cl, byte ptr [rax - 1]; ret 0x4090; 
0x0000000000466bb2: xor cl, byte ptr [rax - 1]; ret; 
0x000000000044a1b4: xor cl, byte ptr [rax]; add rsp, 0x60; pop rbp; ret; 
0x000000000040b4e4: xor cl, byte ptr [rcx - 9]; ret; 
0x0000000000445d7b: xor cl, byte ptr [rdi]; mov edx, 0xb7308e7; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x0000000000437e58: xor cl, byte ptr [rdi]; xchg eax, esp; ret 0x1f0f; 
0x000000000042d283: xor cl, byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x00000000004399d8: xor cl, ch; ret 0xfffe; 
0x0000000000437a23: xor dh, al; adc byte ptr [rcx + rax], 0; add byte ptr [rcx], al; ret; 
0x00000000004598c3: xor dil, r15b; or dword ptr [rax], 0x48000001; mov ecx, dword ptr [rcx + 0xd0]; movsxd rax, dword ptr [rcx]; ret; 
0x000000000041c3ca: xor dl, byte ptr [rdx]; add byte ptr [rax], al; add rsp, 0x10; pop rbp; ret; 
0x000000000045af39: xor dword ptr [rax - 0x73], ecx; xor eax, 0xfffff3df; mov rdx, 0; mov rcx, 0; call rax; 
0x0000000000454d5b: xor dword ptr [rax - 0x75], ecx; cmp eax, 0xcd945; mov rbx, rax; mov rdx, rcx; mov rax, rdi; call rsi; 
0x000000000043d719: xor dword ptr [rax - 0x75], ecx; pushfq; ret 0xdd0; 
0x00000000004648f7: xor dword ptr [rax - 0x77], ecx; fmul dword ptr [rcx + rcx*4 - 0x3d]; mov rcx, r9; call rdi; 
0x000000000045637c: xor dword ptr [rax - 0x77], ecx; ret; 
0x000000000046b504: xor dword ptr [rbx + 0xf4107e0], eax; stosd dword ptr [rdi], eax; ret 0x8845; 
0x000000000044c75b: xor dword ptr [rbx + rcx*4], ecx; and al, 0x34; mov rbx, qword ptr [rsp + 0x48]; add rsp, 0xb0; pop rbp; ret; 
0x000000000045b24b: xor dword ptr [rbx], eax; add al, ch; mov word ptr [rbx], ds; add byte ptr [rax], al; ret; 
0x000000000045cecb: xor dword ptr [rbx], edi; verr word ptr [rsi + 0x48]; movd eax, mm0; ret; 
0x0000000000425dd9: xor dword ptr [rcx], eax; add dword ptr [rax], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000041fcc2: xor dword ptr [rcx], eax; movsd xmm0, qword ptr [rax + 0x18]; xor eax, eax; ret; 
0x0000000000459833: xor dword ptr [rdi], 0x30c48348; pop rbp; ret; 
0x000000000045262f: xor dword ptr [rdi], ecx; mov dh, 0x52; adc al, 0x38; sal byte ptr [rbx + 6], 1; mov eax, 1; ret; 
0x00000000004615e3: xor dword ptr [rdi], ecx; xchg eax, esp; ret 0xd284; 
0x000000000043e252: xor dword ptr [rsi + 0x7400000e], esi; or ch, al; ret 0x125; 
0x000000000047a0c8: xor eax, 0x1b4d1; mov r8d, 5; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000047a188: xor eax, 0x1b4ee; mov r8d, 6; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000047a068: xor eax, 0x1b608; mov r8d, 6; call 0x795a0; add rsp, 0x30; pop rbp; ret; 
0x000000000043bee7: xor eax, 0x450001f2; xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; ret; 
0x000000000042a387: xor eax, 0x48fffe02; add esp, 0x20; pop rbp; ret; 
0x000000000040fcc7: xor eax, 0x48ffffee; add esp, 0x98; pop rbp; ret; 
0x0000000000439c6c: xor eax, 0x5ebffff; call 0x38040; pop rbp; ret; 
0x000000000045cee3: xor eax, 0x7400000f; sub eax, 0x6e0f4866; ret; 
0x000000000045af3c: xor eax, 0xfffff3df; mov rdx, 0; mov rcx, 0; call rax; 
0x00000000004250d6: xor eax, 1; add rsp, 0x38; pop rbp; ret; 
0x00000000004040c9: xor eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x18; pop rbp; ret; 
0x0000000000452909: xor eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x40; pop rbp; ret; 
0x000000000047450f: xor eax, dword ptr [rax]; add byte ptr [rax], al; call 0x3140; add rsp, 0x18; pop rbp; ret; 
0x000000000044acb6: xor eax, dword ptr [rax]; add byte ptr [rax], al; call 0x4f320; add rsp, 0x18; pop rbp; ret; 
0x000000000046dbeb: xor eax, dword ptr [rcx - 0xa]; ret; 
0x000000000046a551: xor eax, eax; add rsp, 0x100; pop rbp; ret; 
0x0000000000471115: xor eax, eax; add rsp, 0x108; pop rbp; nop; ret; 
0x000000000044b20f: xor eax, eax; add rsp, 0x108; pop rbp; ret; 
0x0000000000454978: xor eax, eax; add rsp, 0x10; pop rbp; nop; ret; 
0x00000000004319ce: xor eax, eax; add rsp, 0x10; pop rbp; ret; 
0x00000000004565b5: xor eax, eax; add rsp, 0x120; pop rbp; nop; ret; 
0x00000000004276bd: xor eax, eax; add rsp, 0x120; pop rbp; ret; 
0x0000000000470b38: xor eax, eax; add rsp, 0x128; pop rbp; ret; 
0x000000000045f8b8: xor eax, eax; add rsp, 0x18; pop rbp; nop; ret; 
0x00000000004027a7: xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000402985: xor eax, eax; add rsp, 0x20; pop rbp; ret; 
0x000000000043c351: xor eax, eax; add rsp, 0x210; pop rbp; ret; 
0x0000000000410ec6: xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x000000000040ca44: xor eax, eax; add rsp, 0x30; pop rbp; ret; 
0x000000000041a5c5: xor eax, eax; add rsp, 0x328; pop rbp; ret; 
0x0000000000409138: xor eax, eax; add rsp, 0x38; pop rbp; nop; ret; 
0x0000000000409252: xor eax, eax; add rsp, 0x38; pop rbp; ret; 
0x0000000000402c24: xor eax, eax; add rsp, 0x40; pop rbp; ret; 
0x0000000000440170: xor eax, eax; add rsp, 0x428; pop rbp; ret; 
0x000000000046ff78: xor eax, eax; add rsp, 0x48; pop rbp; nop; ret; 
0x0000000000413955: xor eax, eax; add rsp, 0x48; pop rbp; ret; 
0x0000000000454cc9: xor eax, eax; add rsp, 0x58; pop rbp; ret; 
0x0000000000404d04: xor eax, eax; add rsp, 0x60; pop rbp; ret; 
0x000000000042d3bd: xor eax, eax; add rsp, 0x680; pop rbp; ret; 
0x000000000040466d: xor eax, eax; add rsp, 0x68; pop rbp; ret; 
0x0000000000457815: xor eax, eax; add rsp, 0x70; pop rbp; ret; 
0x000000000041ec89: xor eax, eax; add rsp, 0x78; pop rbp; ret; 
0x0000000000423ee5: xor eax, eax; add rsp, 0x90; pop rbp; ret; 
0x00000000004234df: xor eax, eax; add rsp, 0xa0; pop rbp; ret; 
0x000000000046a181: xor eax, eax; add rsp, 0xc8; pop rbp; ret; 
0x000000000042115f: xor eax, eax; add rsp, 0xf8; pop rbp; ret; 
0x0000000000415b7a: xor eax, eax; add rsp, 8; pop rbp; ret; 
0x000000000043648e: xor eax, eax; call 0x44100; add rsp, 8; pop rbp; ret; 
0x0000000000413f8e: xor eax, eax; call 0x45e0; add rsp, 0x20; pop rbp; ret; 
0x00000000004720b0: xor eax, eax; lea rbx, [rip + 0x236b8]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000046fc4b: xor eax, eax; lea rbx, [rip + 0x257ce]; call 0x4a3c0; add rsp, 0x38; pop rbp; ret; 
0x000000000046bb09: xor eax, eax; lea rbx, [rip + 0x299da]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x000000000040751e: xor eax, eax; lea rbx, [rip + 0x8f4bb]; call 0x4a320; add rsp, 0x28; pop rbp; ret; 
0x00000000004446ff: xor eax, eax; lea rcx, [rip + 0x10bd6c]; xchg dword ptr [rcx], eax; add rsp, 0x20; pop rbp; ret; 
0x000000000040642c: xor eax, eax; lea rcx, [rip + 0x14a163]; xchg dword ptr [rcx], eax; add rsp, 0x58; pop rbp; ret; 
0x0000000000452de6: xor eax, eax; lea rdx, [rsp + 0x2c8]; call rcx; 
0x0000000000449160: xor eax, eax; mov byte ptr [rax], 0; ret; 
0x000000000040630b: xor eax, eax; mov byte ptr [rip + 0x14a0fd], al; ret; 
0x0000000000464a32: xor eax, eax; mov byte ptr [rip + 0xeb9cf], al; ret; 
0x0000000000402e22: xor eax, eax; mov cl, byte ptr [rsi + rbx]; cmp cl, byte ptr [rdi + rbx]; seta al; lea rax, [rax*2 - 1]; ret; 
0x0000000000471e16: xor eax, eax; mov ebx, 1; add rsp, 0x18; pop rbp; ret; 
0x0000000000453954: xor eax, eax; mov ebx, 1; ret; 
0x0000000000431ff3: xor eax, eax; mov ebx, 1; xor ecx, ecx; add rsp, 0x68; pop rbp; ret; 
0x000000000044d34b: xor eax, eax; mov ebx, ecx; add rsp, 0x40; pop rbp; ret; 
0x000000000046a3d3: xor eax, eax; mov ebx, ecx; sub rsp, -0x80; pop rbp; ret; 
0x0000000000469e32: xor eax, eax; mov ecx, 1; call 0x4a320; add rsp, 0x70; pop rbp; ret; 
0x0000000000431172: xor eax, eax; mov qword ptr [rax], 0; add rsp, 0x30; pop rbp; ret; 
0x0000000000431302: xor eax, eax; mov qword ptr [rax], 0; add rsp, 0x40; pop rbp; ret; 
0x0000000000449c48: xor eax, eax; mov r9, r8; add rsp, 0xd8; pop rbp; ret; 
0x000000000041d046: xor eax, eax; mov rbx, qword ptr [rsp + 0x10]; add rsp, 0x28; pop rbp; ret; 
0x0000000000459112: xor eax, eax; mov rbx, qword ptr [rsp + 0x20]; add rsp, 0x30; pop rbp; ret; 
0x0000000000467d71: xor eax, eax; mov rbx, r9; call 0x68040; add rsp, 0x88; pop rbp; ret; 
0x0000000000468a33: xor eax, eax; mov rbx, rcx; add rsp, 0x88; pop rbp; ret; 
0x0000000000418a61: xor eax, eax; mov rbx, rcx; ret; 
0x0000000000418a5b: xor eax, eax; mov rbx, rdi; ret; 
0x00000000004113eb: xor eax, eax; mov rbx, rdx; mov rcx, rax; add rsp, 0x28; pop rbp; ret; 
0x0000000000463f90: xor eax, eax; mov rbx, rdx; mov rcx, rsi; add rsp, 0x28; pop rbp; ret; 
0x00000000004745f1: xor eax, eax; mov rbx, rdx; mov rcx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004747ca: xor eax, eax; mov rbx, rdx; mov rcx, rsi; add rsp, 0x50; pop rbp; ret; 
0x000000000041cf4a: xor eax, eax; mov rbx, rsi; add rsp, 0x28; pop rbp; ret; 
0x0000000000467b79: xor eax, eax; nop dword ptr [rax + rax]; call 0x68040; add rsp, 0x88; pop rbp; ret; 
0x000000000045fc3d: xor eax, eax; nop; ret; 
0x00000000004011af: xor eax, eax; pop rbp; ret; 
0x0000000000401073: xor eax, eax; ret; 
0x0000000000406564: xor eax, eax; xchg dword ptr [rdx], eax; add rsp, 0x18; pop rbp; ret; 
0x000000000044fd3d: xor eax, eax; xchg dword ptr [rdx], eax; add rsp, 0x60; pop rbp; ret; 
0x0000000000420823: xor eax, eax; xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000044aab3: xor eax, eax; xor ebx, ebx; add rsp, 0x18; pop rbp; ret; 
0x0000000000409ff1: xor eax, eax; xor ebx, ebx; add rsp, 0x20; pop rbp; ret; 
0x0000000000439b53: xor eax, eax; xor ebx, ebx; add rsp, 0x28; pop rbp; ret; 
0x000000000040b6b4: xor eax, eax; xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x000000000040710f: xor eax, eax; xor ebx, ebx; add rsp, 0x40; pop rbp; ret; 
0x000000000042476d: xor eax, eax; xor ebx, ebx; add rsp, 0x60; pop rbp; ret; 
0x00000000004324c9: xor eax, eax; xor ebx, ebx; add rsp, 0x70; pop rbp; ret; 
0x000000000040b4f9: xor eax, eax; xor ebx, ebx; add rsp, 0x90; pop rbp; ret; 
0x0000000000409800: xor eax, eax; xor ebx, ebx; add rsp, 0xa0; pop rbp; ret; 
0x000000000044b4ad: xor eax, eax; xor ebx, ebx; mov rcx, rbx; add rsp, 0x100; pop rbp; ret; 
0x000000000040111c: xor eax, eax; xor ebx, ebx; mov rcx, rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000429270: xor eax, eax; xor ebx, ebx; mov rcx, rbx; add rsp, 0x58; pop rbp; ret; 
0x0000000000401239: xor eax, eax; xor ebx, ebx; pop rbp; ret; 
0x0000000000430dea: xor eax, eax; xor ebx, ebx; ret; 
0x00000000004625bc: xor eax, eax; xor ebx, ebx; xor ecx, ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000463f3e: xor eax, eax; xor ebx, ebx; xor ecx, ecx; add rsp, 0x28; pop rbp; ret; 
0x0000000000460ab7: xor eax, eax; xor ebx, ebx; xor ecx, ecx; add rsp, 0x30; pop rbp; ret; 
0x000000000046222f: xor eax, eax; xor ebx, ebx; xor ecx, ecx; add rsp, 0x38; pop rbp; ret; 
0x000000000044972b: xor eax, eax; xor ebx, ebx; xor ecx, ecx; add rsp, 0x78; pop rbp; ret; 
0x00000000004608f6: xor eax, eax; xor ecx, ecx; mov rdx, qword ptr [rax + 0x28]; mov rax, rcx; call rdx; 
0x000000000040381c: xor eax, ebx; movabs rcx, 0x52ef6bbb8f63bf; imul rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000408e4d: xor eax, edx; mul rdi; xor rax, rdx; ret; 
0x0000000000408fc1: xor eax, edx; nop; nop; ret; 
0x0000000000408e53: xor eax, edx; ret; 
0x000000000042f169: xor ebp, dword ptr [rbx - 0x76b70003]; ret; 
0x000000000042bb7e: xor ebx, ebx; add qword ptr [rsi + 0x18], r11; add rsp, 0x58; pop rbp; ret; 
0x000000000040f738: xor ebx, ebx; add rsp, 0x10; pop rbp; nop; ret; 
0x000000000040ee49: xor ebx, ebx; add rsp, 0x10; pop rbp; ret; 
0x000000000044aab5: xor ebx, ebx; add rsp, 0x18; pop rbp; ret; 
0x0000000000409ff3: xor ebx, ebx; add rsp, 0x20; pop rbp; ret; 
0x00000000004532eb: xor ebx, ebx; add rsp, 0x258; pop rbp; ret; 
0x0000000000439b55: xor ebx, ebx; add rsp, 0x28; pop rbp; ret; 
0x000000000044cfb8: xor ebx, ebx; add rsp, 0x30; pop rbp; nop; ret; 
0x000000000040b6b6: xor ebx, ebx; add rsp, 0x30; pop rbp; ret; 
0x0000000000458093: xor ebx, ebx; add rsp, 0x38; pop rbp; ret; 
0x0000000000407111: xor ebx, ebx; add rsp, 0x40; pop rbp; ret; 
0x000000000042476f: xor ebx, ebx; add rsp, 0x60; pop rbp; ret; 
0x0000000000404675: xor ebx, ebx; add rsp, 0x68; pop rbp; ret; 
0x00000000004324cb: xor ebx, ebx; add rsp, 0x70; pop rbp; ret; 
0x000000000040b4fb: xor ebx, ebx; add rsp, 0x90; pop rbp; ret; 
0x0000000000409802: xor ebx, ebx; add rsp, 0xa0; pop rbp; ret; 
0x000000000044c4fd: xor ebx, ebx; add rsp, 0xb0; pop rbp; ret; 
0x0000000000410cef: xor ebx, ebx; call 0x11600; add rsp, 0x18; pop rbp; ret; 
0x0000000000413b01: xor ebx, ebx; call 0x11e20; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004132e8: xor ebx, ebx; call 0x11e20; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; pop rbp; ret; 
0x0000000000413a31: xor ebx, ebx; call 0x20c20; add rsp, 0x18; pop rbp; ret; 
0x0000000000431b8f: xor ebx, ebx; call 0x31a60; add rsp, 0x40; pop rbp; ret; 
0x00000000004159b6: xor ebx, ebx; call 0x59c0; mov byte ptr [rip + 0x13e354], 1; add rsp, 0x18; pop rbp; ret; 
0x000000000040d31a: xor ebx, ebx; call rsi; 
0x0000000000439090: xor ebx, ebx; mov ecx, 1; add rsp, 0x100; pop rbp; nop; ret; 
0x0000000000439052: xor ebx, ebx; mov ecx, 1; add rsp, 0x100; pop rbp; ret; 
0x00000000004615ef: xor ebx, ebx; mov ecx, 1; call 0x59f40; add rsp, 0x18; pop rbp; ret; 
0x0000000000439045: xor ebx, ebx; mov ecx, ebx; add rsp, 0x100; pop rbp; ret; 
0x0000000000437dad: xor ebx, ebx; mov ecx, ebx; call 0x37a40; add rsp, 0x18; pop rbp; ret; 
0x00000000004518fc: xor ebx, ebx; mov ecx, ebx; call 0x51500; add rsp, 0x68; pop rbp; ret; 
0x000000000044b4af: xor ebx, ebx; mov rcx, rbx; add rsp, 0x100; pop rbp; ret; 
0x000000000040111e: xor ebx, ebx; mov rcx, rbx; add rsp, 0x10; pop rbp; ret; 
0x0000000000429272: xor ebx, ebx; mov rcx, rbx; add rsp, 0x58; pop rbp; ret; 
0x000000000044d047: xor ebx, ebx; mov rcx, rbx; xor edi, edi; add rsp, 0x10; pop rbp; ret; 
0x0000000000431fe6: xor ebx, ebx; movzx ecx, byte ptr [rsp + 0x16]; add rsp, 0x68; pop rbp; ret; 
0x000000000040123b: xor ebx, ebx; pop rbp; ret; 
0x0000000000430dec: xor ebx, ebx; ret; 
0x00000000004625be: xor ebx, ebx; xor ecx, ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000463f40: xor ebx, ebx; xor ecx, ecx; add rsp, 0x28; pop rbp; ret; 
0x0000000000460ab9: xor ebx, ebx; xor ecx, ecx; add rsp, 0x30; pop rbp; ret; 
0x000000000043a38c: xor ebx, ebx; xor ecx, ecx; add rsp, 0x38; pop rbp; ret; 
0x00000000004778ca: xor ebx, ebx; xor ecx, ecx; add rsp, 0x40; pop rbp; ret; 
0x0000000000449676: xor ebx, ebx; xor ecx, ecx; add rsp, 0x78; pop rbp; nop; ret; 
0x000000000044972d: xor ebx, ebx; xor ecx, ecx; add rsp, 0x78; pop rbp; ret; 
0x0000000000459fef: xor ebx, ebx; xor ecx, ecx; call 0x42ea0; add rsp, 0x18; pop rbp; ret; 
0x0000000000415e23: xor ebx, ebx; xor ecx, ecx; call 0x42ea0; add rsp, 0x88; pop rbp; ret; 
0x0000000000460ef1: xor ebx, ebx; xor ecx, ecx; mov edi, ecx; add rsp, 0x28; pop rbp; ret; 
0x0000000000464047: xor ecx, dword ptr [rax - 0x39]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x28; pop rbp; ret; 
0x00000000004414a8: xor ecx, dword ptr [rax - 0x75]; jnp 0x414b5; mov rax, rsi; mov rbx, rdi; call rcx; 
0x0000000000412a95: xor ecx, dword ptr [rax - 0x7d]; ret 0x90f8; 
0x000000000044f32c: xor ecx, dword ptr [rip - 0x2d7ab800]; je 0x4f33f; mov rsi, qword ptr [rdx]; call rsi; 
0x0000000000402e5d: xor ecx, eax; bsr rcx, rcx; shr rax, cl; and rax, 1; lea rax, [rax*2 - 1]; ret; 
0x000000000044ad07: xor ecx, eax; mul rcx; xor rax, rdx; ret; 
0x00000000004390db: xor ecx, ecx; add rsp, 0x100; pop rbp; ret; 
0x00000000004625c0: xor ecx, ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000463f42: xor ecx, ecx; add rsp, 0x28; pop rbp; ret; 
0x0000000000460abb: xor ecx, ecx; add rsp, 0x30; pop rbp; ret; 
0x000000000043a344: xor ecx, ecx; add rsp, 0x38; pop rbp; ret; 
0x00000000004778cc: xor ecx, ecx; add rsp, 0x40; pop rbp; ret; 
0x000000000044ccf3: xor ecx, ecx; add rsp, 0x58; pop rbp; ret; 
0x0000000000431ffa: xor ecx, ecx; add rsp, 0x68; pop rbp; ret; 
0x0000000000449678: xor ecx, ecx; add rsp, 0x78; pop rbp; nop; ret; 
0x000000000044972f: xor ecx, ecx; add rsp, 0x78; pop rbp; ret; 
0x000000000040c128: xor ecx, ecx; call 0x15c40; mov rax, qword ptr [rsp + 0x48]; add rsp, 0x58; pop rbp; ret; 
0x0000000000437e78: xor ecx, ecx; call 0x37a40; add rsp, 0x18; pop rbp; ret; 
0x0000000000444b2f: xor ecx, ecx; call 0x3cd00; add rsp, 0x58; pop rbp; ret; 
0x0000000000459ff1: xor ecx, ecx; call 0x42ea0; add rsp, 0x18; pop rbp; ret; 
0x0000000000415e25: xor ecx, ecx; call 0x42ea0; add rsp, 0x88; pop rbp; ret; 
0x000000000042e3a7: xor ecx, ecx; call 0x4820; add rsp, 0x38; pop rbp; ret; 
0x000000000042e409: xor ecx, ecx; call 0x4820; add rsp, 0x40; pop rbp; ret; 
0x0000000000409f25: xor ecx, ecx; call 0x9100; add rsp, 0x18; pop rbp; ret; 
0x0000000000402ecf: xor ecx, ecx; cmp rbx, rdx; setg al; sete cl; lea rax, [rcx + rax*2 - 1]; ret; 
0x000000000047a270: xor ecx, ecx; lea rbx, [rax + 0x40]; mov qword ptr [rsp + 0x58], rbx; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x00000000004549cf: xor ecx, ecx; mov eax, ecx; add rsp, 0x10; pop rbp; ret; 
0x0000000000456117: xor ecx, ecx; mov eax, ecx; add rsp, 0x120; pop rbp; ret; 
0x000000000045fbb1: xor ecx, ecx; mov eax, ecx; add rsp, 0x18; pop rbp; ret; 
0x0000000000472cf8: xor ecx, ecx; mov eax, ecx; add rsp, 0x28; pop rbp; ret; 
0x000000000045427b: xor ecx, ecx; mov eax, ecx; add rsp, 0x30; pop rbp; ret; 
0x0000000000415bb4: xor ecx, ecx; mov eax, ecx; add rsp, 8; pop rbp; ret; 
0x000000000040120f: xor ecx, ecx; mov eax, ecx; pop rbp; ret; 
0x0000000000403f15: xor ecx, ecx; mov eax, ecx; ret; 
0x0000000000460f5b: xor ecx, ecx; mov edi, 1; add rsp, 0x28; pop rbp; ret; 
0x0000000000460ef3: xor ecx, ecx; mov edi, ecx; add rsp, 0x28; pop rbp; ret; 
0x0000000000430a2c: xor ecx, ecx; mov qword ptr [rcx], 0; add rsp, 0xa0; pop rbp; ret; 
0x000000000040c25b: xor ecx, ecx; mov rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000434854: xor ecx, ecx; mov rax, rcx; mov rbx, rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000040193c: xor ecx, ecx; mov rax, rcx; ret; 
0x00000000004608f8: xor ecx, ecx; mov rdx, qword ptr [rax + 0x28]; mov rax, rcx; call rdx; 
0x0000000000477fd5: xor ecx, ecx; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x00000000004115c7: xor ecx, ecx; mov rsi, rcx; add rsp, 0x10; pop rbp; ret; 
0x0000000000435e1d: xor ecx, ecx; nop; call 0x42ea0; add rsp, 0x18; pop rbp; ret; 
0x00000000004160bc: xor ecx, ecx; nop; call 0x42ea0; add rsp, 0x88; pop rbp; ret; 
0x000000000042ec6f: xor ecx, ecx; xchg byte ptr [rax], cl; add rsp, 0xd8; pop rbp; ret; 
0x0000000000418882: xor ecx, ecx; xchg byte ptr [rax], cl; ret; 
0x000000000044441b: xor ecx, ecx; xchg dword ptr [rax + 0x33c], ecx; add rsp, 0x20; pop rbp; ret; 
0x000000000042c0e7: xor ecx, ecx; xchg qword ptr [rax + 0x10], rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000044dacc: xor ecx, ecx; xchg qword ptr [rax + 0x1210], rcx; add rsp, 0x20; pop rbp; ret; 
0x000000000044d925: xor ecx, ecx; xchg qword ptr [rax + 0x1210], rcx; mov rax, rbx; add rsp, 0x28; pop rbp; ret; 
0x00000000004592a7: xor ecx, ecx; xchg qword ptr [rax + 0x28], rcx; xor eax, eax; ret; 
0x0000000000452b8f: xor ecx, ecx; xor esi, esi; call 0x52be0; add rsp, 0x28; pop rbp; ret; 
0x00000000004546fc: xor ecx, ecx; xor esi, esi; call 0x52be0; add rsp, 0x30; pop rbp; ret; 
0x000000000043d2e9: xor edi, 0x3021f0d6; add rsp, 0x10; pop rbp; ret; 
0x000000000041204e: xor edi, edi; add rsp, 0x10; pop rbp; ret; 
0x0000000000423992: xor edi, edi; call 0x23d20; add rsp, 0x18; pop rbp; ret; 
0x0000000000453b41: xor edi, edi; call 0x52940; add rsp, 0x60; pop rbp; ret; 
0x000000000043f67b: xor edi, edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004231e4: xor edi, edi; mov rax, rdx; call 0x25ce0; add rsp, 0x58; pop rbp; ret; 
0x000000000046673f: xor edi, edi; mov rax, rsi; add rsp, 0x70; pop rbp; ret; 
0x000000000047c959: xor edi, edi; mov rcx, qword ptr [r10 + 0x98]; mov rax, rdi; call rcx; 
0x00000000004526e2: xor edi, edi; mov rsi, rcx; mov r8, rdi; add rsp, 0x20; pop rbp; ret; 
0x0000000000450e3d: xor edi, edi; mov rsi, rdi; call 0x4f520; add rsp, 0x28; pop rbp; ret; 
0x0000000000419ce7: xor edi, edi; mov rsi, rdi; call 0x4f520; add rsp, 0x50; pop rbp; ret; 
0x00000000004689f8: xor edi, edi; xor esi, esi; add rsp, 0x88; pop rbp; ret; 
0x000000000046c869: xor edx, ebp; stc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000472304: xor edx, edx; mov rax, rcx; mov rbx, rdx; add rsp, 0x20; pop rbp; ret; 
0x000000000047276c: xor edx, edx; mov rax, rcx; mov rbx, rdx; add rsp, 0x28; pop rbp; ret; 
0x000000000040d19e: xor edx, edx; mov rbx, rdx; add rsp, 0x30; pop rbp; ret; 
0x000000000046069b: xor edx, edx; mov rcx, qword ptr [rsi + 0x20]; mov rax, rdx; call rcx; 
0x0000000000418983: xor edx, edx; xchg byte ptr [rcx], dl; call 0x188a0; add rsp, 0x18; pop rbp; ret; 
0x0000000000477fd3: xor edx, edx; xor ecx, ecx; mov rdx, qword ptr [rdx + 0xf8]; mov rax, rcx; call rdx; 
0x000000000047c957: xor edx, edx; xor edi, edi; mov rcx, qword ptr [r10 + 0x98]; mov rax, rdi; call rcx; 
0x0000000000406b62: xor esi, dword ptr [rsi]; jne 0x6b6c; add rsp, 0x48; pop rbp; ret; 
0x00000000004689fa: xor esi, esi; add rsp, 0x88; pop rbp; ret; 
0x00000000004120e9: xor esi, esi; call 0x11f60; add rsp, 0x38; pop rbp; ret; 
0x0000000000427f8a: xor esi, esi; call 0x26300; add rsp, 0x70; pop rbp; ret; 
0x0000000000452b91: xor esi, esi; call 0x52be0; add rsp, 0x28; pop rbp; ret; 
0x00000000004546fe: xor esi, esi; call 0x52be0; add rsp, 0x30; pop rbp; ret; 
0x000000000044cfd2: xor esi, esi; mov r8d, 1; call 0x4c4c0; add rsp, 0x30; pop rbp; ret; 
0x0000000000428bbc: xor esi, esi; mov rax, rsi; add rsp, 0x68; pop rbp; ret; 
0x00000000004723d1: xor esi, esi; mov rbx, rdx; mov rcx, rsi; add rsp, 0x28; pop rbp; ret; 
0x00000000004724c7: xor esi, esi; mov rbx, rdx; mov rcx, rsi; add rsp, 0x30; pop rbp; ret; 
0x00000000004728f9: xor esi, esi; mov rbx, rdx; mov rcx, rsi; add rsp, 0x40; pop rbp; ret; 
0x000000000046a47a: xor esi, esi; nop dword ptr [rax]; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x000000000042611d: xor esi, esi; nop; call 0x26300; add rsp, 0x70; pop rbp; ret; 
0x000000000042b0fd: xor esi, esi; nop; call 0x52be0; add rsp, 0x28; pop rbp; ret; 
0x000000000046a49c: xor esi, esi; nop; call 0x6aa80; add rsp, 0x100; pop rbp; ret; 
0x0000000000460699: xor esi, esi; xor edx, edx; mov rcx, qword ptr [rsi + 0x20]; mov rax, rdx; call rcx; 
0x0000000000449c45: xor esi, esi; xor r8d, r8d; mov r9, r8; add rsp, 0xd8; pop rbp; ret; 
0x000000000047c956: xor r10d, r10d; xor edi, edi; mov rcx, qword ptr [r10 + 0x98]; mov rax, rdi; call rcx; 
0x000000000042bb7d: xor r11d, r11d; add qword ptr [rsi + 0x18], r11; add rsp, 0x58; pop rbp; ret; 
0x0000000000413f8d: xor r8d, r8d; call 0x45e0; add rsp, 0x20; pop rbp; ret; 
0x0000000000449c47: xor r8d, r8d; mov r9, r8; add rsp, 0xd8; pop rbp; ret; 
0x0000000000467d70: xor r8d, r8d; mov rbx, r9; call 0x68040; add rsp, 0x88; pop rbp; ret; 
0x0000000000467b78: xor r8d, r8d; nop dword ptr [rax + rax]; call 0x68040; add rsp, 0x88; pop rbp; ret; 
0x0000000000402e21: xor rax, rax; mov cl, byte ptr [rsi + rbx]; cmp cl, byte ptr [rdi + rbx]; seta al; lea rax, [rax*2 - 1]; ret; 
0x0000000000403081: xor rax, rax; ret; 
0x000000000040381b: xor rax, rbx; movabs rcx, 0x52ef6bbb8f63bf; imul rax, rcx; add rsp, 0x18; pop rbp; ret; 
0x0000000000408e4c: xor rax, rdx; mul rdi; xor rax, rdx; ret; 
0x0000000000408fc0: xor rax, rdx; nop; nop; ret; 
0x0000000000408e52: xor rax, rdx; ret; 
0x0000000000402e5c: xor rcx, rax; bsr rcx, rcx; shr rax, cl; and rax, 1; lea rax, [rax*2 - 1]; ret; 
0x000000000044ad06: xor rcx, rax; mul rcx; xor rax, rdx; ret; 
0x0000000000402ece: xor rcx, rcx; cmp rbx, rdx; setg al; sete cl; lea rax, [rcx + rax*2 - 1]; ret; 
0x0000000000460f5a: xor rcx, rcx; mov edi, 1; add rsp, 0x28; pop rbp; ret; 
0x0000000000437a22: xor sil, r8b; adc byte ptr [rcx + rax], 0; add byte ptr [rcx], al; ret; 
0x0000000000404805: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x10; pop rbp; ret; 
0x000000000042a606: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x170; pop rbp; ret; 
0x00000000004386e5: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000448a0b: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x1a0; pop rbp; ret; 
0x0000000000414411: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x000000000043102d: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; nop; ret; 
0x000000000040478b: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; ret; 
0x00000000004044b1: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004053b3: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x38; pop rbp; ret; 
0x00000000004061cb: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x40; pop rbp; ret; 
0x0000000000435c09: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x50; pop rbp; ret; 
0x0000000000444f31: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x58; pop rbp; ret; 
0x000000000044469b: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x68; pop rbp; ret; 
0x00000000004151f5: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0xc8; pop rbp; ret; 
0x000000000042c665: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 8; pop rbp; ret; 
0x000000000045f301: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x10d40; add rsp, 0x28; pop rbp; ret; 
0x000000000045f3ad: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x34300; add rsp, 8; pop rbp; ret; 
0x000000000045f3ed: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x34340; add rsp, 8; pop rbp; ret; 
0x000000000043afb4: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x3a000; add rsp, 0x30; pop rbp; ret; 
0x000000000045f4ed: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x000000000045f2ad: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x6c40; add rsp, 8; pop rbp; ret; 
0x0000000000445d51: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000042136c: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, 1; add rsp, 0xf8; pop rbp; ret; 
0x000000000045f656: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x000000000044f351: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000450498: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x60; pop rbp; ret; 
0x00000000004635d3: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004639ce: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; pop rbp; ret; 
0x000000000046393e: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x78; pop rbp; ret; 
0x000000000040c63c: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; pop rbp; ret; 
0x0000000000453e32: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; pop rbp; ret; 
0x000000000044f2ed: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp]; add rsp, 8; pop rbp; ret; 
0x000000000045f369: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; pop rbp; ret; 
0x000000000043148a: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000414127: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x00000000004211b8: xorps xmm15, xmm15; mov r14, qword ptr fs:[0xfffffffffffffff8]; xor eax, eax; add rsp, 0xf8; pop rbp; ret; 
0x0000000000404806: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x10; pop rbp; ret; 
0x000000000042a607: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x170; pop rbp; ret; 
0x00000000004386e6: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x18; pop rbp; ret; 
0x0000000000448a0c: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x1a0; pop rbp; ret; 
0x0000000000414412: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x20; pop rbp; ret; 
0x000000000043102e: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; nop; ret; 
0x000000000040478c: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x28; pop rbp; ret; 
0x00000000004044b2: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x30; pop rbp; ret; 
0x00000000004053b4: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x38; pop rbp; ret; 
0x00000000004061cc: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x40; pop rbp; ret; 
0x0000000000435c0a: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x50; pop rbp; ret; 
0x0000000000444f32: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x58; pop rbp; ret; 
0x000000000044469c: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0x68; pop rbp; ret; 
0x00000000004151f6: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 0xc8; pop rbp; ret; 
0x000000000042c666: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; add rsp, 8; pop rbp; ret; 
0x000000000045f302: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x10d40; add rsp, 0x28; pop rbp; ret; 
0x000000000045f3ae: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x34300; add rsp, 8; pop rbp; ret; 
0x000000000045f3ee: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x34340; add rsp, 8; pop rbp; ret; 
0x000000000043afb5: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x3a000; add rsp, 0x30; pop rbp; ret; 
0x000000000045f4ee: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x3bea0; add rsp, 8; pop rbp; ret; 
0x000000000045f2ae: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; call 0x6c40; add rsp, 8; pop rbp; ret; 
0x0000000000445d52: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, 1; add rsp, 0x20; pop rbp; ret; 
0x000000000042136d: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, 1; add rsp, 0xf8; pop rbp; ret; 
0x000000000045f657: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; pop rbp; ret; 
0x000000000044f352: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x20; pop rbp; ret; 
0x0000000000450499: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov eax, dword ptr [rsp + 0x1c]; add rsp, 0x60; pop rbp; ret; 
0x00000000004635d4: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x30; pop rbp; ret; 
0x00000000004639cf: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; pop rbp; ret; 
0x000000000046393f: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x78; pop rbp; ret; 
0x000000000040c63d: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; pop rbp; ret; 
0x0000000000453e33: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; pop rbp; ret; 
0x000000000044f2ee: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; mov rax, qword ptr [rsp]; add rsp, 8; pop rbp; ret; 
0x000000000045f36a: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; pop rbp; ret; 
0x000000000043148b: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; xor eax, eax; add rsp, 0x18; pop rbp; ret; 
0x0000000000414128: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; xor eax, eax; add rsp, 0x28; pop rbp; ret; 
0x00000000004211b9: xorps xmm7, xmm7; mov r14, qword ptr fs:[0xfffffffffffffff8]; xor eax, eax; add rsp, 0xf8; pop rbp; ret; 

15704 gadgets found
